{{- $ := . }}
{{- $x := .X }}
// {{$x.Sym}} {{$x.Description}}
type {{$x.Sym}} struct {
{{- if ne $x.Base "" }}
    // {{$.SymBaseType $x.Base}} is the base model of {{$x.Sym}}
    {{$.SymBaseType $x.Base}}
{{- else }}
    // Object is the base model of {{$x.Sym}}
    Object
{{- end }}

    ODataType string `json:"@odata.type"`
{{- range $y := .X.Members }}
{{- $yTypeType := $.TypeFromType $y.Type }}
    // {{$y.Sym}} {{$y.Description}}
    {{$y.Sym}} {{$yTypeType}} `json:"{{$y.Name}},omitempty"`
{{- end }}
{{- range $y := .X.Navigations }}
{{- $yTypeType := $.TypeFromType $y.Type }}
    // {{$y.Sym}} {{$y.Description}}
    {{$y.Sym}} {{$yTypeType}} `json:"{{$y.Name}},omitempty"`
{{- end }}
}
func New{{$x.Sym}}() (*{{$x.Sym}}, error) {
	new{{$x.Sym}} := &{{$x.Sym}}{
		ODataType: "#{{$x.Type}}", 
	}
	return new{{$x.Sym}}, nil
}