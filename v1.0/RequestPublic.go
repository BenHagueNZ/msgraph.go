// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// PublicClientApplicationRequestBuilder is request builder for PublicClientApplication
type PublicClientApplicationRequestBuilder struct{ BaseRequestBuilder }

// Request returns PublicClientApplicationRequest
func (b *PublicClientApplicationRequestBuilder) Request() *PublicClientApplicationRequest {
	return &PublicClientApplicationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PublicClientApplicationRequest is request for PublicClientApplication
type PublicClientApplicationRequest struct{ BaseRequest }

// Get performs GET request for PublicClientApplication
func (r *PublicClientApplicationRequest) Get(ctx context.Context) (resObj *PublicClientApplication, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PublicClientApplication
func (r *PublicClientApplicationRequest) Update(ctx context.Context, reqObj *PublicClientApplication) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PublicClientApplication
func (r *PublicClientApplicationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PublicErrorRequestBuilder is request builder for PublicError
type PublicErrorRequestBuilder struct{ BaseRequestBuilder }

// Request returns PublicErrorRequest
func (b *PublicErrorRequestBuilder) Request() *PublicErrorRequest {
	return &PublicErrorRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PublicErrorRequest is request for PublicError
type PublicErrorRequest struct{ BaseRequest }

// Get performs GET request for PublicError
func (r *PublicErrorRequest) Get(ctx context.Context) (resObj *PublicError, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PublicError
func (r *PublicErrorRequest) Update(ctx context.Context, reqObj *PublicError) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PublicError
func (r *PublicErrorRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PublicErrorDetailRequestBuilder is request builder for PublicErrorDetail
type PublicErrorDetailRequestBuilder struct{ BaseRequestBuilder }

// Request returns PublicErrorDetailRequest
func (b *PublicErrorDetailRequestBuilder) Request() *PublicErrorDetailRequest {
	return &PublicErrorDetailRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PublicErrorDetailRequest is request for PublicErrorDetail
type PublicErrorDetailRequest struct{ BaseRequest }

// Get performs GET request for PublicErrorDetail
func (r *PublicErrorDetailRequest) Get(ctx context.Context) (resObj *PublicErrorDetail, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PublicErrorDetail
func (r *PublicErrorDetailRequest) Update(ctx context.Context, reqObj *PublicErrorDetail) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PublicErrorDetail
func (r *PublicErrorDetailRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PublicInnerErrorRequestBuilder is request builder for PublicInnerError
type PublicInnerErrorRequestBuilder struct{ BaseRequestBuilder }

// Request returns PublicInnerErrorRequest
func (b *PublicInnerErrorRequestBuilder) Request() *PublicInnerErrorRequest {
	return &PublicInnerErrorRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PublicInnerErrorRequest is request for PublicInnerError
type PublicInnerErrorRequest struct{ BaseRequest }

// Get performs GET request for PublicInnerError
func (r *PublicInnerErrorRequest) Get(ctx context.Context) (resObj *PublicInnerError, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PublicInnerError
func (r *PublicInnerErrorRequest) Update(ctx context.Context, reqObj *PublicInnerError) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PublicInnerError
func (r *PublicInnerErrorRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
