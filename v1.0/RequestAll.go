// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// AllDevicesAssignmentTargetRequestBuilder is request builder for AllDevicesAssignmentTarget
type AllDevicesAssignmentTargetRequestBuilder struct{ BaseRequestBuilder }

// Request returns AllDevicesAssignmentTargetRequest
func (b *AllDevicesAssignmentTargetRequestBuilder) Request() *AllDevicesAssignmentTargetRequest {
	return &AllDevicesAssignmentTargetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AllDevicesAssignmentTargetRequest is request for AllDevicesAssignmentTarget
type AllDevicesAssignmentTargetRequest struct{ BaseRequest }

// Get performs GET request for AllDevicesAssignmentTarget
func (r *AllDevicesAssignmentTargetRequest) Get(ctx context.Context) (resObj *AllDevicesAssignmentTarget, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AllDevicesAssignmentTarget
func (r *AllDevicesAssignmentTargetRequest) Update(ctx context.Context, reqObj *AllDevicesAssignmentTarget) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AllDevicesAssignmentTarget
func (r *AllDevicesAssignmentTargetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AllLicensedUsersAssignmentTargetRequestBuilder is request builder for AllLicensedUsersAssignmentTarget
type AllLicensedUsersAssignmentTargetRequestBuilder struct{ BaseRequestBuilder }

// Request returns AllLicensedUsersAssignmentTargetRequest
func (b *AllLicensedUsersAssignmentTargetRequestBuilder) Request() *AllLicensedUsersAssignmentTargetRequest {
	return &AllLicensedUsersAssignmentTargetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AllLicensedUsersAssignmentTargetRequest is request for AllLicensedUsersAssignmentTarget
type AllLicensedUsersAssignmentTargetRequest struct{ BaseRequest }

// Get performs GET request for AllLicensedUsersAssignmentTarget
func (r *AllLicensedUsersAssignmentTargetRequest) Get(ctx context.Context) (resObj *AllLicensedUsersAssignmentTarget, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AllLicensedUsersAssignmentTarget
func (r *AllLicensedUsersAssignmentTargetRequest) Update(ctx context.Context, reqObj *AllLicensedUsersAssignmentTarget) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AllLicensedUsersAssignmentTarget
func (r *AllLicensedUsersAssignmentTargetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
