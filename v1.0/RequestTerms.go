// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// TermsAndConditionsRequestBuilder is request builder for TermsAndConditions
type TermsAndConditionsRequestBuilder struct{ BaseRequestBuilder }

// Request returns TermsAndConditionsRequest
func (b *TermsAndConditionsRequestBuilder) Request() *TermsAndConditionsRequest {
	return &TermsAndConditionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TermsAndConditionsRequest is request for TermsAndConditions
type TermsAndConditionsRequest struct{ BaseRequest }

// Get performs GET request for TermsAndConditions
func (r *TermsAndConditionsRequest) Get(ctx context.Context) (resObj *TermsAndConditions, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TermsAndConditions
func (r *TermsAndConditionsRequest) Update(ctx context.Context, reqObj *TermsAndConditions) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TermsAndConditions
func (r *TermsAndConditionsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TermsAndConditionsAcceptanceStatusRequestBuilder is request builder for TermsAndConditionsAcceptanceStatus
type TermsAndConditionsAcceptanceStatusRequestBuilder struct{ BaseRequestBuilder }

// Request returns TermsAndConditionsAcceptanceStatusRequest
func (b *TermsAndConditionsAcceptanceStatusRequestBuilder) Request() *TermsAndConditionsAcceptanceStatusRequest {
	return &TermsAndConditionsAcceptanceStatusRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TermsAndConditionsAcceptanceStatusRequest is request for TermsAndConditionsAcceptanceStatus
type TermsAndConditionsAcceptanceStatusRequest struct{ BaseRequest }

// Get performs GET request for TermsAndConditionsAcceptanceStatus
func (r *TermsAndConditionsAcceptanceStatusRequest) Get(ctx context.Context) (resObj *TermsAndConditionsAcceptanceStatus, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TermsAndConditionsAcceptanceStatus
func (r *TermsAndConditionsAcceptanceStatusRequest) Update(ctx context.Context, reqObj *TermsAndConditionsAcceptanceStatus) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TermsAndConditionsAcceptanceStatus
func (r *TermsAndConditionsAcceptanceStatusRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TermsAndConditionsAssignmentRequestBuilder is request builder for TermsAndConditionsAssignment
type TermsAndConditionsAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns TermsAndConditionsAssignmentRequest
func (b *TermsAndConditionsAssignmentRequestBuilder) Request() *TermsAndConditionsAssignmentRequest {
	return &TermsAndConditionsAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TermsAndConditionsAssignmentRequest is request for TermsAndConditionsAssignment
type TermsAndConditionsAssignmentRequest struct{ BaseRequest }

// Get performs GET request for TermsAndConditionsAssignment
func (r *TermsAndConditionsAssignmentRequest) Get(ctx context.Context) (resObj *TermsAndConditionsAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TermsAndConditionsAssignment
func (r *TermsAndConditionsAssignmentRequest) Update(ctx context.Context, reqObj *TermsAndConditionsAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TermsAndConditionsAssignment
func (r *TermsAndConditionsAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TermsExpirationRequestBuilder is request builder for TermsExpiration
type TermsExpirationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TermsExpirationRequest
func (b *TermsExpirationRequestBuilder) Request() *TermsExpirationRequest {
	return &TermsExpirationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TermsExpirationRequest is request for TermsExpiration
type TermsExpirationRequest struct{ BaseRequest }

// Get performs GET request for TermsExpiration
func (r *TermsExpirationRequest) Get(ctx context.Context) (resObj *TermsExpiration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TermsExpiration
func (r *TermsExpirationRequest) Update(ctx context.Context, reqObj *TermsExpiration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TermsExpiration
func (r *TermsExpirationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TermsOfUseContainerRequestBuilder is request builder for TermsOfUseContainer
type TermsOfUseContainerRequestBuilder struct{ BaseRequestBuilder }

// Request returns TermsOfUseContainerRequest
func (b *TermsOfUseContainerRequestBuilder) Request() *TermsOfUseContainerRequest {
	return &TermsOfUseContainerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TermsOfUseContainerRequest is request for TermsOfUseContainer
type TermsOfUseContainerRequest struct{ BaseRequest }

// Get performs GET request for TermsOfUseContainer
func (r *TermsOfUseContainerRequest) Get(ctx context.Context) (resObj *TermsOfUseContainer, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TermsOfUseContainer
func (r *TermsOfUseContainerRequest) Update(ctx context.Context, reqObj *TermsOfUseContainer) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TermsOfUseContainer
func (r *TermsOfUseContainerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
