// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// BookingAppointmentRequestBuilder is request builder for BookingAppointment
type BookingAppointmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns BookingAppointmentRequest
func (b *BookingAppointmentRequestBuilder) Request() *BookingAppointmentRequest {
	return &BookingAppointmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BookingAppointmentRequest is request for BookingAppointment
type BookingAppointmentRequest struct{ BaseRequest }

// Get performs GET request for BookingAppointment
func (r *BookingAppointmentRequest) Get(ctx context.Context) (resObj *BookingAppointment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BookingAppointment
func (r *BookingAppointmentRequest) Update(ctx context.Context, reqObj *BookingAppointment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BookingAppointment
func (r *BookingAppointmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BookingBusinessRequestBuilder is request builder for BookingBusiness
type BookingBusinessRequestBuilder struct{ BaseRequestBuilder }

// Request returns BookingBusinessRequest
func (b *BookingBusinessRequestBuilder) Request() *BookingBusinessRequest {
	return &BookingBusinessRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BookingBusinessRequest is request for BookingBusiness
type BookingBusinessRequest struct{ BaseRequest }

// Get performs GET request for BookingBusiness
func (r *BookingBusinessRequest) Get(ctx context.Context) (resObj *BookingBusiness, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BookingBusiness
func (r *BookingBusinessRequest) Update(ctx context.Context, reqObj *BookingBusiness) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BookingBusiness
func (r *BookingBusinessRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BookingCurrencyRequestBuilder is request builder for BookingCurrency
type BookingCurrencyRequestBuilder struct{ BaseRequestBuilder }

// Request returns BookingCurrencyRequest
func (b *BookingCurrencyRequestBuilder) Request() *BookingCurrencyRequest {
	return &BookingCurrencyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BookingCurrencyRequest is request for BookingCurrency
type BookingCurrencyRequest struct{ BaseRequest }

// Get performs GET request for BookingCurrency
func (r *BookingCurrencyRequest) Get(ctx context.Context) (resObj *BookingCurrency, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BookingCurrency
func (r *BookingCurrencyRequest) Update(ctx context.Context, reqObj *BookingCurrency) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BookingCurrency
func (r *BookingCurrencyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BookingCustomQuestionRequestBuilder is request builder for BookingCustomQuestion
type BookingCustomQuestionRequestBuilder struct{ BaseRequestBuilder }

// Request returns BookingCustomQuestionRequest
func (b *BookingCustomQuestionRequestBuilder) Request() *BookingCustomQuestionRequest {
	return &BookingCustomQuestionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BookingCustomQuestionRequest is request for BookingCustomQuestion
type BookingCustomQuestionRequest struct{ BaseRequest }

// Get performs GET request for BookingCustomQuestion
func (r *BookingCustomQuestionRequest) Get(ctx context.Context) (resObj *BookingCustomQuestion, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BookingCustomQuestion
func (r *BookingCustomQuestionRequest) Update(ctx context.Context, reqObj *BookingCustomQuestion) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BookingCustomQuestion
func (r *BookingCustomQuestionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BookingCustomerBaseRequestBuilder is request builder for BookingCustomerBase
type BookingCustomerBaseRequestBuilder struct{ BaseRequestBuilder }

// Request returns BookingCustomerBaseRequest
func (b *BookingCustomerBaseRequestBuilder) Request() *BookingCustomerBaseRequest {
	return &BookingCustomerBaseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BookingCustomerBaseRequest is request for BookingCustomerBase
type BookingCustomerBaseRequest struct{ BaseRequest }

// Get performs GET request for BookingCustomerBase
func (r *BookingCustomerBaseRequest) Get(ctx context.Context) (resObj *BookingCustomerBase, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BookingCustomerBase
func (r *BookingCustomerBaseRequest) Update(ctx context.Context, reqObj *BookingCustomerBase) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BookingCustomerBase
func (r *BookingCustomerBaseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BookingServiceRequestBuilder is request builder for BookingService
type BookingServiceRequestBuilder struct{ BaseRequestBuilder }

// Request returns BookingServiceRequest
func (b *BookingServiceRequestBuilder) Request() *BookingServiceRequest {
	return &BookingServiceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BookingServiceRequest is request for BookingService
type BookingServiceRequest struct{ BaseRequest }

// Get performs GET request for BookingService
func (r *BookingServiceRequest) Get(ctx context.Context) (resObj *BookingService, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BookingService
func (r *BookingServiceRequest) Update(ctx context.Context, reqObj *BookingService) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BookingService
func (r *BookingServiceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BookingStaffMemberBaseRequestBuilder is request builder for BookingStaffMemberBase
type BookingStaffMemberBaseRequestBuilder struct{ BaseRequestBuilder }

// Request returns BookingStaffMemberBaseRequest
func (b *BookingStaffMemberBaseRequestBuilder) Request() *BookingStaffMemberBaseRequest {
	return &BookingStaffMemberBaseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BookingStaffMemberBaseRequest is request for BookingStaffMemberBase
type BookingStaffMemberBaseRequest struct{ BaseRequest }

// Get performs GET request for BookingStaffMemberBase
func (r *BookingStaffMemberBaseRequest) Get(ctx context.Context) (resObj *BookingStaffMemberBase, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BookingStaffMemberBase
func (r *BookingStaffMemberBaseRequest) Update(ctx context.Context, reqObj *BookingStaffMemberBase) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BookingStaffMemberBase
func (r *BookingStaffMemberBaseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type BookingAppointmentCancelRequestBuilder struct{ BaseRequestBuilder }

// Cancel action undocumented
func (b *BookingAppointmentRequestBuilder) Cancel(reqObj *BookingAppointmentCancelRequestParameter) *BookingAppointmentCancelRequestBuilder {
	bb := &BookingAppointmentCancelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/cancel"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type BookingAppointmentCancelRequest struct{ BaseRequest }

func (b *BookingAppointmentCancelRequestBuilder) Request() *BookingAppointmentCancelRequest {
	return &BookingAppointmentCancelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *BookingAppointmentCancelRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type BookingBusinessGetStaffAvailabilityRequestBuilder struct{ BaseRequestBuilder }

// GetStaffAvailability action undocumented
func (b *BookingBusinessRequestBuilder) GetStaffAvailability(reqObj *BookingBusinessGetStaffAvailabilityRequestParameter) *BookingBusinessGetStaffAvailabilityRequestBuilder {
	bb := &BookingBusinessGetStaffAvailabilityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/getStaffAvailability"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type BookingBusinessGetStaffAvailabilityRequest struct{ BaseRequest }

func (b *BookingBusinessGetStaffAvailabilityRequestBuilder) Request() *BookingBusinessGetStaffAvailabilityRequest {
	return &BookingBusinessGetStaffAvailabilityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *BookingBusinessGetStaffAvailabilityRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]StaffAvailabilityItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []StaffAvailabilityItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []StaffAvailabilityItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

func (r *BookingBusinessGetStaffAvailabilityRequest) PostN(ctx context.Context, n int) ([]StaffAvailabilityItem, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, n)
}

func (r *BookingBusinessGetStaffAvailabilityRequest) Post(ctx context.Context) ([]StaffAvailabilityItem, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, 0)
}

type BookingBusinessPublishRequestBuilder struct{ BaseRequestBuilder }

// Publish action undocumented
func (b *BookingBusinessRequestBuilder) Publish(reqObj *BookingBusinessPublishRequestParameter) *BookingBusinessPublishRequestBuilder {
	bb := &BookingBusinessPublishRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/publish"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type BookingBusinessPublishRequest struct{ BaseRequest }

func (b *BookingBusinessPublishRequestBuilder) Request() *BookingBusinessPublishRequest {
	return &BookingBusinessPublishRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *BookingBusinessPublishRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type BookingBusinessUnpublishRequestBuilder struct{ BaseRequestBuilder }

// Unpublish action undocumented
func (b *BookingBusinessRequestBuilder) Unpublish(reqObj *BookingBusinessUnpublishRequestParameter) *BookingBusinessUnpublishRequestBuilder {
	bb := &BookingBusinessUnpublishRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/unpublish"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type BookingBusinessUnpublishRequest struct{ BaseRequest }

func (b *BookingBusinessUnpublishRequestBuilder) Request() *BookingBusinessUnpublishRequest {
	return &BookingBusinessUnpublishRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *BookingBusinessUnpublishRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
