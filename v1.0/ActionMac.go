// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// MacOSCompliancePolicy returns request builder for MacOSCompliancePolicy collection rcn
func (b *DeviceCompliancePolicyRequestBuilder) MacOSCompliancePolicy() *DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/MacOSCompliancePolicy"
	return bb
}

// DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequestBuilder is request builder for MacOSCompliancePolicy collection
type DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSCompliancePolicy collection
func (b *DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequestBuilder) Request() *DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequest {
	return &DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSCompliancePolicy item
func (b *DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequestBuilder) ID(id string) *MacOSCompliancePolicyRequestBuilder {
	bb := &MacOSCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequest is request for MacOSCompliancePolicy collection
type DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSCompliancePolicy collection
func (r *DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSCompliancePolicy collection, max N pages
func (r *DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSCompliancePolicy collection
func (r *DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]MacOSCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSCompliancePolicy collection
func (r *DeviceCompliancePolicyMacOSCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *MacOSCompliancePolicy) (resObj *MacOSCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSCustomConfiguration returns request builder for MacOSCustomConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) MacOSCustomConfiguration() *DeviceConfigurationMacOSCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationMacOSCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/MacOSCustomConfiguration"
	return bb
}

// DeviceConfigurationMacOSCustomConfigurationCollectionRequestBuilder is request builder for MacOSCustomConfiguration collection
type DeviceConfigurationMacOSCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSCustomConfiguration collection
func (b *DeviceConfigurationMacOSCustomConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationMacOSCustomConfigurationCollectionRequest {
	return &DeviceConfigurationMacOSCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSCustomConfiguration item
func (b *DeviceConfigurationMacOSCustomConfigurationCollectionRequestBuilder) ID(id string) *MacOSCustomConfigurationRequestBuilder {
	bb := &MacOSCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationMacOSCustomConfigurationCollectionRequest is request for MacOSCustomConfiguration collection
type DeviceConfigurationMacOSCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSCustomConfiguration collection
func (r *DeviceConfigurationMacOSCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSCustomConfiguration collection, max N pages
func (r *DeviceConfigurationMacOSCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSCustomConfiguration collection
func (r *DeviceConfigurationMacOSCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]MacOSCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSCustomConfiguration collection
func (r *DeviceConfigurationMacOSCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *MacOSCustomConfiguration) (resObj *MacOSCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSGeneralDeviceConfiguration returns request builder for MacOSGeneralDeviceConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) MacOSGeneralDeviceConfiguration() *DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/MacOSGeneralDeviceConfiguration"
	return bb
}

// DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequestBuilder is request builder for MacOSGeneralDeviceConfiguration collection
type DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSGeneralDeviceConfiguration collection
func (b *DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequest {
	return &DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSGeneralDeviceConfiguration item
func (b *DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *MacOSGeneralDeviceConfigurationRequestBuilder {
	bb := &MacOSGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequest is request for MacOSGeneralDeviceConfiguration collection
type DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSGeneralDeviceConfiguration collection
func (r *DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSGeneralDeviceConfiguration collection, max N pages
func (r *DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSGeneralDeviceConfiguration collection
func (r *DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]MacOSGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSGeneralDeviceConfiguration collection
func (r *DeviceConfigurationMacOSGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *MacOSGeneralDeviceConfiguration) (resObj *MacOSGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSMicrosoftEdgeApp returns request builder for MacOSMicrosoftEdgeApp collection rcn
func (b *MobileAppRequestBuilder) MacOSMicrosoftEdgeApp() *MobileAppMacOSMicrosoftEdgeAppCollectionRequestBuilder {
	bb := &MobileAppMacOSMicrosoftEdgeAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/MacOSMicrosoftEdgeApp"
	return bb
}

// MobileAppMacOSMicrosoftEdgeAppCollectionRequestBuilder is request builder for MacOSMicrosoftEdgeApp collection
type MobileAppMacOSMicrosoftEdgeAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSMicrosoftEdgeApp collection
func (b *MobileAppMacOSMicrosoftEdgeAppCollectionRequestBuilder) Request() *MobileAppMacOSMicrosoftEdgeAppCollectionRequest {
	return &MobileAppMacOSMicrosoftEdgeAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSMicrosoftEdgeApp item
func (b *MobileAppMacOSMicrosoftEdgeAppCollectionRequestBuilder) ID(id string) *MacOSMicrosoftEdgeAppRequestBuilder {
	bb := &MacOSMicrosoftEdgeAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MobileAppMacOSMicrosoftEdgeAppCollectionRequest is request for MacOSMicrosoftEdgeApp collection
type MobileAppMacOSMicrosoftEdgeAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSMicrosoftEdgeApp collection
func (r *MobileAppMacOSMicrosoftEdgeAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSMicrosoftEdgeApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSMicrosoftEdgeApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSMicrosoftEdgeApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSMicrosoftEdgeApp collection, max N pages
func (r *MobileAppMacOSMicrosoftEdgeAppCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSMicrosoftEdgeApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSMicrosoftEdgeApp collection
func (r *MobileAppMacOSMicrosoftEdgeAppCollectionRequest) Get(ctx context.Context) ([]MacOSMicrosoftEdgeApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSMicrosoftEdgeApp collection
func (r *MobileAppMacOSMicrosoftEdgeAppCollectionRequest) Add(ctx context.Context, reqObj *MacOSMicrosoftEdgeApp) (resObj *MacOSMicrosoftEdgeApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSOfficeSuiteApp returns request builder for MacOSOfficeSuiteApp collection rcn
func (b *MobileAppRequestBuilder) MacOSOfficeSuiteApp() *MobileAppMacOSOfficeSuiteAppCollectionRequestBuilder {
	bb := &MobileAppMacOSOfficeSuiteAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/MacOSOfficeSuiteApp"
	return bb
}

// MobileAppMacOSOfficeSuiteAppCollectionRequestBuilder is request builder for MacOSOfficeSuiteApp collection
type MobileAppMacOSOfficeSuiteAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSOfficeSuiteApp collection
func (b *MobileAppMacOSOfficeSuiteAppCollectionRequestBuilder) Request() *MobileAppMacOSOfficeSuiteAppCollectionRequest {
	return &MobileAppMacOSOfficeSuiteAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSOfficeSuiteApp item
func (b *MobileAppMacOSOfficeSuiteAppCollectionRequestBuilder) ID(id string) *MacOSOfficeSuiteAppRequestBuilder {
	bb := &MacOSOfficeSuiteAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MobileAppMacOSOfficeSuiteAppCollectionRequest is request for MacOSOfficeSuiteApp collection
type MobileAppMacOSOfficeSuiteAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSOfficeSuiteApp collection
func (r *MobileAppMacOSOfficeSuiteAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSOfficeSuiteApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSOfficeSuiteApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSOfficeSuiteApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSOfficeSuiteApp collection, max N pages
func (r *MobileAppMacOSOfficeSuiteAppCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSOfficeSuiteApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSOfficeSuiteApp collection
func (r *MobileAppMacOSOfficeSuiteAppCollectionRequest) Get(ctx context.Context) ([]MacOSOfficeSuiteApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSOfficeSuiteApp collection
func (r *MobileAppMacOSOfficeSuiteAppCollectionRequest) Add(ctx context.Context, reqObj *MacOSOfficeSuiteApp) (resObj *MacOSOfficeSuiteApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
