// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// AssignedLabelRequestBuilder is request builder for AssignedLabel
type AssignedLabelRequestBuilder struct{ BaseRequestBuilder }

// Request returns AssignedLabelRequest
func (b *AssignedLabelRequestBuilder) Request() *AssignedLabelRequest {
	return &AssignedLabelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AssignedLabelRequest is request for AssignedLabel
type AssignedLabelRequest struct{ BaseRequest }

// Get performs GET request for AssignedLabel
func (r *AssignedLabelRequest) Get(ctx context.Context) (resObj *AssignedLabel, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AssignedLabel
func (r *AssignedLabelRequest) Update(ctx context.Context, reqObj *AssignedLabel) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AssignedLabel
func (r *AssignedLabelRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AssignedLicenseRequestBuilder is request builder for AssignedLicense
type AssignedLicenseRequestBuilder struct{ BaseRequestBuilder }

// Request returns AssignedLicenseRequest
func (b *AssignedLicenseRequestBuilder) Request() *AssignedLicenseRequest {
	return &AssignedLicenseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AssignedLicenseRequest is request for AssignedLicense
type AssignedLicenseRequest struct{ BaseRequest }

// Get performs GET request for AssignedLicense
func (r *AssignedLicenseRequest) Get(ctx context.Context) (resObj *AssignedLicense, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AssignedLicense
func (r *AssignedLicenseRequest) Update(ctx context.Context, reqObj *AssignedLicense) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AssignedLicense
func (r *AssignedLicenseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AssignedPlanRequestBuilder is request builder for AssignedPlan
type AssignedPlanRequestBuilder struct{ BaseRequestBuilder }

// Request returns AssignedPlanRequest
func (b *AssignedPlanRequestBuilder) Request() *AssignedPlanRequest {
	return &AssignedPlanRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AssignedPlanRequest is request for AssignedPlan
type AssignedPlanRequest struct{ BaseRequest }

// Get performs GET request for AssignedPlan
func (r *AssignedPlanRequest) Get(ctx context.Context) (resObj *AssignedPlan, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AssignedPlan
func (r *AssignedPlanRequest) Update(ctx context.Context, reqObj *AssignedPlan) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AssignedPlan
func (r *AssignedPlanRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AssignedTrainingInfoRequestBuilder is request builder for AssignedTrainingInfo
type AssignedTrainingInfoRequestBuilder struct{ BaseRequestBuilder }

// Request returns AssignedTrainingInfoRequest
func (b *AssignedTrainingInfoRequestBuilder) Request() *AssignedTrainingInfoRequest {
	return &AssignedTrainingInfoRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AssignedTrainingInfoRequest is request for AssignedTrainingInfo
type AssignedTrainingInfoRequest struct{ BaseRequest }

// Get performs GET request for AssignedTrainingInfo
func (r *AssignedTrainingInfoRequest) Get(ctx context.Context) (resObj *AssignedTrainingInfo, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AssignedTrainingInfo
func (r *AssignedTrainingInfoRequest) Update(ctx context.Context, reqObj *AssignedTrainingInfo) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AssignedTrainingInfo
func (r *AssignedTrainingInfoRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
