// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// ExternalConnectors_externalRequestBuilder is request builder for ExternalConnectors_external
type ExternalConnectors_externalRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExternalConnectors_externalRequest
func (b *ExternalConnectors_externalRequestBuilder) Request() *ExternalConnectors_externalRequest {
	return &ExternalConnectors_externalRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExternalConnectors_externalRequest is request for ExternalConnectors_external
type ExternalConnectors_externalRequest struct{ BaseRequest }

// Get performs GET request for ExternalConnectors_external
func (r *ExternalConnectors_externalRequest) Get(ctx context.Context) (resObj *ExternalConnectors_external, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExternalConnectors_external
func (r *ExternalConnectors_externalRequest) Update(ctx context.Context, reqObj *ExternalConnectors_external) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExternalConnectors_external
func (r *ExternalConnectors_externalRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExternalConnectors_externalConnectionRequestBuilder is request builder for ExternalConnectors_externalConnection
type ExternalConnectors_externalConnectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExternalConnectors_externalConnectionRequest
func (b *ExternalConnectors_externalConnectionRequestBuilder) Request() *ExternalConnectors_externalConnectionRequest {
	return &ExternalConnectors_externalConnectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExternalConnectors_externalConnectionRequest is request for ExternalConnectors_externalConnection
type ExternalConnectors_externalConnectionRequest struct{ BaseRequest }

// Get performs GET request for ExternalConnectors_externalConnection
func (r *ExternalConnectors_externalConnectionRequest) Get(ctx context.Context) (resObj *ExternalConnectors_externalConnection, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExternalConnectors_externalConnection
func (r *ExternalConnectors_externalConnectionRequest) Update(ctx context.Context, reqObj *ExternalConnectors_externalConnection) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExternalConnectors_externalConnection
func (r *ExternalConnectors_externalConnectionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExternalDomainNameRequestBuilder is request builder for ExternalDomainName
type ExternalDomainNameRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExternalDomainNameRequest
func (b *ExternalDomainNameRequestBuilder) Request() *ExternalDomainNameRequest {
	return &ExternalDomainNameRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExternalDomainNameRequest is request for ExternalDomainName
type ExternalDomainNameRequest struct{ BaseRequest }

// Get performs GET request for ExternalDomainName
func (r *ExternalDomainNameRequest) Get(ctx context.Context) (resObj *ExternalDomainName, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExternalDomainName
func (r *ExternalDomainNameRequest) Update(ctx context.Context, reqObj *ExternalDomainName) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExternalDomainName
func (r *ExternalDomainNameRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
