// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// IncludeTargets returns request builder for AuthenticationMethodTarget collection rcn
func (b *TemporaryAccessPassAuthenticationMethodConfigurationRequestBuilder) IncludeTargets() *TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder {
	bb := &TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/includeTargets"
	return bb
}

// TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder is request builder for AuthenticationMethodTarget collection
type TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationMethodTarget collection
func (b *TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder) Request() *TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequest {
	return &TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationMethodTarget item
func (b *TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder) ID(id string) *AuthenticationMethodTargetRequestBuilder {
	bb := &AuthenticationMethodTargetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequest is request for AuthenticationMethodTarget collection
type TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationMethodTarget collection
func (r *TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationMethodTarget, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationMethodTarget
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationMethodTarget
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationMethodTarget collection, max N pages
func (r *TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationMethodTarget, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationMethodTarget collection
func (r *TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Get(ctx context.Context) ([]AuthenticationMethodTarget, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationMethodTarget collection
func (r *TemporaryAccessPassAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationMethodTarget) (resObj *AuthenticationMethodTarget, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TemporaryAccessPassAuthenticationMethod returns request builder for TemporaryAccessPassAuthenticationMethod collection rcn
func (b *AuthenticationMethodRequestBuilder) TemporaryAccessPassAuthenticationMethod() *AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequestBuilder {
	bb := &AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/TemporaryAccessPassAuthenticationMethod"
	return bb
}

// AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequestBuilder is request builder for TemporaryAccessPassAuthenticationMethod collection
type AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TemporaryAccessPassAuthenticationMethod collection
func (b *AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequestBuilder) Request() *AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequest {
	return &AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TemporaryAccessPassAuthenticationMethod item
func (b *AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequestBuilder) ID(id string) *TemporaryAccessPassAuthenticationMethodRequestBuilder {
	bb := &TemporaryAccessPassAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequest is request for TemporaryAccessPassAuthenticationMethod collection
type AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TemporaryAccessPassAuthenticationMethod collection
func (r *AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TemporaryAccessPassAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TemporaryAccessPassAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TemporaryAccessPassAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TemporaryAccessPassAuthenticationMethod collection, max N pages
func (r *AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequest) GetN(ctx context.Context, n int) ([]TemporaryAccessPassAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TemporaryAccessPassAuthenticationMethod collection
func (r *AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequest) Get(ctx context.Context) ([]TemporaryAccessPassAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TemporaryAccessPassAuthenticationMethod collection
func (r *AuthenticationMethodTemporaryAccessPassAuthenticationMethodCollectionRequest) Add(ctx context.Context, reqObj *TemporaryAccessPassAuthenticationMethod) (resObj *TemporaryAccessPassAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TemporaryAccessPassAuthenticationMethodConfiguration returns request builder for TemporaryAccessPassAuthenticationMethodConfiguration collection rcn
func (b *AuthenticationMethodConfigurationRequestBuilder) TemporaryAccessPassAuthenticationMethodConfiguration() *AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequestBuilder {
	bb := &AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/TemporaryAccessPassAuthenticationMethodConfiguration"
	return bb
}

// AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequestBuilder is request builder for TemporaryAccessPassAuthenticationMethodConfiguration collection
type AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TemporaryAccessPassAuthenticationMethodConfiguration collection
func (b *AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequestBuilder) Request() *AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequest {
	return &AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TemporaryAccessPassAuthenticationMethodConfiguration item
func (b *AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequestBuilder) ID(id string) *TemporaryAccessPassAuthenticationMethodConfigurationRequestBuilder {
	bb := &TemporaryAccessPassAuthenticationMethodConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequest is request for TemporaryAccessPassAuthenticationMethodConfiguration collection
type AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TemporaryAccessPassAuthenticationMethodConfiguration collection
func (r *AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TemporaryAccessPassAuthenticationMethodConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TemporaryAccessPassAuthenticationMethodConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TemporaryAccessPassAuthenticationMethodConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TemporaryAccessPassAuthenticationMethodConfiguration collection, max N pages
func (r *AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]TemporaryAccessPassAuthenticationMethodConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TemporaryAccessPassAuthenticationMethodConfiguration collection
func (r *AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequest) Get(ctx context.Context) ([]TemporaryAccessPassAuthenticationMethodConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TemporaryAccessPassAuthenticationMethodConfiguration collection
func (r *AuthenticationMethodConfigurationTemporaryAccessPassAuthenticationMethodConfigurationCollectionRequest) Add(ctx context.Context, reqObj *TemporaryAccessPassAuthenticationMethodConfiguration) (resObj *TemporaryAccessPassAuthenticationMethodConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
