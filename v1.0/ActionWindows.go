// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// WindowsAutopilotDeviceIdentityAssignUserToDeviceRequestParameter undocumented
type WindowsAutopilotDeviceIdentityAssignUserToDeviceRequestParameter struct {
	// UserPrincipalName undocumented
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// AddressableUserName undocumented
	AddressableUserName *string `json:"addressableUserName,omitempty"`
}

// WindowsAutopilotDeviceIdentityUnassignUserFromDeviceRequestParameter undocumented
type WindowsAutopilotDeviceIdentityUnassignUserFromDeviceRequestParameter struct {
}

// WindowsAutopilotDeviceIdentityUpdateDevicePropertiesRequestParameter undocumented
type WindowsAutopilotDeviceIdentityUpdateDevicePropertiesRequestParameter struct {
	// UserPrincipalName undocumented
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// AddressableUserName undocumented
	AddressableUserName *string `json:"addressableUserName,omitempty"`
	// GroupTag undocumented
	GroupTag *string `json:"groupTag,omitempty"`
	// DisplayName undocumented
	DisplayName *string `json:"displayName,omitempty"`
}

// WindowsInformationProtectionAssignRequestParameter undocumented
type WindowsInformationProtectionAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []TargetedManagedAppPolicyAssignment `json:"assignments,omitempty"`
}

// Device is navigation property rn
func (b *WindowsHelloForBusinessAuthenticationMethodRequestBuilder) Device() *DeviceRequestBuilder {
	bb := &DeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/device"
	return bb
}

// Assignments returns request builder for TargetedManagedAppPolicyAssignment collection rcn
func (b *WindowsInformationProtectionRequestBuilder) Assignments() *WindowsInformationProtectionAssignmentsCollectionRequestBuilder {
	bb := &WindowsInformationProtectionAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// WindowsInformationProtectionAssignmentsCollectionRequestBuilder is request builder for TargetedManagedAppPolicyAssignment collection
type WindowsInformationProtectionAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TargetedManagedAppPolicyAssignment collection
func (b *WindowsInformationProtectionAssignmentsCollectionRequestBuilder) Request() *WindowsInformationProtectionAssignmentsCollectionRequest {
	return &WindowsInformationProtectionAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TargetedManagedAppPolicyAssignment item
func (b *WindowsInformationProtectionAssignmentsCollectionRequestBuilder) ID(id string) *TargetedManagedAppPolicyAssignmentRequestBuilder {
	bb := &TargetedManagedAppPolicyAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsInformationProtectionAssignmentsCollectionRequest is request for TargetedManagedAppPolicyAssignment collection
type WindowsInformationProtectionAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TargetedManagedAppPolicyAssignment collection
func (r *WindowsInformationProtectionAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TargetedManagedAppPolicyAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TargetedManagedAppPolicyAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TargetedManagedAppPolicyAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TargetedManagedAppPolicyAssignment collection, max N pages
func (r *WindowsInformationProtectionAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]TargetedManagedAppPolicyAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TargetedManagedAppPolicyAssignment collection
func (r *WindowsInformationProtectionAssignmentsCollectionRequest) Get(ctx context.Context) ([]TargetedManagedAppPolicyAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TargetedManagedAppPolicyAssignment collection
func (r *WindowsInformationProtectionAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *TargetedManagedAppPolicyAssignment) (resObj *TargetedManagedAppPolicyAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ExemptAppLockerFiles returns request builder for WindowsInformationProtectionAppLockerFile collection rcn
func (b *WindowsInformationProtectionRequestBuilder) ExemptAppLockerFiles() *WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder {
	bb := &WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/exemptAppLockerFiles"
	return bb
}

// WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder is request builder for WindowsInformationProtectionAppLockerFile collection
type WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtectionAppLockerFile collection
func (b *WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder) Request() *WindowsInformationProtectionExemptAppLockerFilesCollectionRequest {
	return &WindowsInformationProtectionExemptAppLockerFilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtectionAppLockerFile item
func (b *WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionAppLockerFileRequestBuilder {
	bb := &WindowsInformationProtectionAppLockerFileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsInformationProtectionExemptAppLockerFilesCollectionRequest is request for WindowsInformationProtectionAppLockerFile collection
type WindowsInformationProtectionExemptAppLockerFilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionExemptAppLockerFilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtectionAppLockerFile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtectionAppLockerFile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtectionAppLockerFile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtectionAppLockerFile collection, max N pages
func (r *WindowsInformationProtectionExemptAppLockerFilesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtectionAppLockerFile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionExemptAppLockerFilesCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtectionAppLockerFile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionExemptAppLockerFilesCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtectionAppLockerFile) (resObj *WindowsInformationProtectionAppLockerFile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ProtectedAppLockerFiles returns request builder for WindowsInformationProtectionAppLockerFile collection rcn
func (b *WindowsInformationProtectionRequestBuilder) ProtectedAppLockerFiles() *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder {
	bb := &WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/protectedAppLockerFiles"
	return bb
}

// WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder is request builder for WindowsInformationProtectionAppLockerFile collection
type WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtectionAppLockerFile collection
func (b *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder) Request() *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest {
	return &WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtectionAppLockerFile item
func (b *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionAppLockerFileRequestBuilder {
	bb := &WindowsInformationProtectionAppLockerFileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest is request for WindowsInformationProtectionAppLockerFile collection
type WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtectionAppLockerFile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtectionAppLockerFile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtectionAppLockerFile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtectionAppLockerFile collection, max N pages
func (r *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtectionAppLockerFile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtectionAppLockerFile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtectionAppLockerFile) (resObj *WindowsInformationProtectionAppLockerFile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CommittedContainedApps returns request builder for MobileContainedApp collection rcn
func (b *WindowsUniversalAppXRequestBuilder) CommittedContainedApps() *WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder {
	bb := &WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/committedContainedApps"
	return bb
}

// WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder is request builder for MobileContainedApp collection
type WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MobileContainedApp collection
func (b *WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder) Request() *WindowsUniversalAppXCommittedContainedAppsCollectionRequest {
	return &WindowsUniversalAppXCommittedContainedAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MobileContainedApp item
func (b *WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder) ID(id string) *MobileContainedAppRequestBuilder {
	bb := &MobileContainedAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUniversalAppXCommittedContainedAppsCollectionRequest is request for MobileContainedApp collection
type WindowsUniversalAppXCommittedContainedAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MobileContainedApp collection
func (r *WindowsUniversalAppXCommittedContainedAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MobileContainedApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MobileContainedApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MobileContainedApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MobileContainedApp collection, max N pages
func (r *WindowsUniversalAppXCommittedContainedAppsCollectionRequest) GetN(ctx context.Context, n int) ([]MobileContainedApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MobileContainedApp collection
func (r *WindowsUniversalAppXCommittedContainedAppsCollectionRequest) Get(ctx context.Context) ([]MobileContainedApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MobileContainedApp collection
func (r *WindowsUniversalAppXCommittedContainedAppsCollectionRequest) Add(ctx context.Context, reqObj *MobileContainedApp) (resObj *MobileContainedApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsAutopilotDeviceIdentityRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsDefenderAdvancedThreatProtectionConfiguration returns request builder for WindowsDefenderAdvancedThreatProtectionConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) WindowsDefenderAdvancedThreatProtectionConfiguration() *DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsDefenderAdvancedThreatProtectionConfiguration"
	return bb
}

// DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder is request builder for WindowsDefenderAdvancedThreatProtectionConfiguration collection
type DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsDefenderAdvancedThreatProtectionConfiguration collection
func (b *DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest {
	return &DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsDefenderAdvancedThreatProtectionConfiguration item
func (b *DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder) ID(id string) *WindowsDefenderAdvancedThreatProtectionConfigurationRequestBuilder {
	bb := &WindowsDefenderAdvancedThreatProtectionConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest is request for WindowsDefenderAdvancedThreatProtectionConfiguration collection
type DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsDefenderAdvancedThreatProtectionConfiguration collection
func (r *DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsDefenderAdvancedThreatProtectionConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsDefenderAdvancedThreatProtectionConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsDefenderAdvancedThreatProtectionConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsDefenderAdvancedThreatProtectionConfiguration collection, max N pages
func (r *DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsDefenderAdvancedThreatProtectionConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsDefenderAdvancedThreatProtectionConfiguration collection
func (r *DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsDefenderAdvancedThreatProtectionConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsDefenderAdvancedThreatProtectionConfiguration collection
func (r *DeviceConfigurationWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsDefenderAdvancedThreatProtectionConfiguration) (resObj *WindowsDefenderAdvancedThreatProtectionConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsHelloForBusinessAuthenticationMethod returns request builder for WindowsHelloForBusinessAuthenticationMethod collection rcn
func (b *AuthenticationMethodRequestBuilder) WindowsHelloForBusinessAuthenticationMethod() *AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder {
	bb := &AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsHelloForBusinessAuthenticationMethod"
	return bb
}

// AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder is request builder for WindowsHelloForBusinessAuthenticationMethod collection
type AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsHelloForBusinessAuthenticationMethod collection
func (b *AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder) Request() *AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequest {
	return &AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsHelloForBusinessAuthenticationMethod item
func (b *AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder) ID(id string) *WindowsHelloForBusinessAuthenticationMethodRequestBuilder {
	bb := &WindowsHelloForBusinessAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequest is request for WindowsHelloForBusinessAuthenticationMethod collection
type AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsHelloForBusinessAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsHelloForBusinessAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsHelloForBusinessAuthenticationMethod collection, max N pages
func (r *AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequest) Get(ctx context.Context) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationMethodWindowsHelloForBusinessAuthenticationMethodCollectionRequest) Add(ctx context.Context, reqObj *WindowsHelloForBusinessAuthenticationMethod) (resObj *WindowsHelloForBusinessAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsInformationProtection returns request builder for WindowsInformationProtection collection rcn
func (b *ManagedAppPolicyRequestBuilder) WindowsInformationProtection() *ManagedAppPolicyWindowsInformationProtectionCollectionRequestBuilder {
	bb := &ManagedAppPolicyWindowsInformationProtectionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsInformationProtection"
	return bb
}

// ManagedAppPolicyWindowsInformationProtectionCollectionRequestBuilder is request builder for WindowsInformationProtection collection
type ManagedAppPolicyWindowsInformationProtectionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtection collection
func (b *ManagedAppPolicyWindowsInformationProtectionCollectionRequestBuilder) Request() *ManagedAppPolicyWindowsInformationProtectionCollectionRequest {
	return &ManagedAppPolicyWindowsInformationProtectionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtection item
func (b *ManagedAppPolicyWindowsInformationProtectionCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionRequestBuilder {
	bb := &WindowsInformationProtectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedAppPolicyWindowsInformationProtectionCollectionRequest is request for WindowsInformationProtection collection
type ManagedAppPolicyWindowsInformationProtectionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtection collection
func (r *ManagedAppPolicyWindowsInformationProtectionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtection collection, max N pages
func (r *ManagedAppPolicyWindowsInformationProtectionCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtection collection
func (r *ManagedAppPolicyWindowsInformationProtectionCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtection collection
func (r *ManagedAppPolicyWindowsInformationProtectionCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtection) (resObj *WindowsInformationProtection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsInformationProtectionAppLearningSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsInformationProtectionAppLockerFileRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsInformationProtectionNetworkLearningSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsMicrosoftEdgeApp returns request builder for WindowsMicrosoftEdgeApp collection rcn
func (b *MobileAppRequestBuilder) WindowsMicrosoftEdgeApp() *MobileAppWindowsMicrosoftEdgeAppCollectionRequestBuilder {
	bb := &MobileAppWindowsMicrosoftEdgeAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsMicrosoftEdgeApp"
	return bb
}

// MobileAppWindowsMicrosoftEdgeAppCollectionRequestBuilder is request builder for WindowsMicrosoftEdgeApp collection
type MobileAppWindowsMicrosoftEdgeAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsMicrosoftEdgeApp collection
func (b *MobileAppWindowsMicrosoftEdgeAppCollectionRequestBuilder) Request() *MobileAppWindowsMicrosoftEdgeAppCollectionRequest {
	return &MobileAppWindowsMicrosoftEdgeAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsMicrosoftEdgeApp item
func (b *MobileAppWindowsMicrosoftEdgeAppCollectionRequestBuilder) ID(id string) *WindowsMicrosoftEdgeAppRequestBuilder {
	bb := &WindowsMicrosoftEdgeAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MobileAppWindowsMicrosoftEdgeAppCollectionRequest is request for WindowsMicrosoftEdgeApp collection
type MobileAppWindowsMicrosoftEdgeAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsMicrosoftEdgeApp collection
func (r *MobileAppWindowsMicrosoftEdgeAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsMicrosoftEdgeApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsMicrosoftEdgeApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsMicrosoftEdgeApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsMicrosoftEdgeApp collection, max N pages
func (r *MobileAppWindowsMicrosoftEdgeAppCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsMicrosoftEdgeApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsMicrosoftEdgeApp collection
func (r *MobileAppWindowsMicrosoftEdgeAppCollectionRequest) Get(ctx context.Context) ([]WindowsMicrosoftEdgeApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsMicrosoftEdgeApp collection
func (r *MobileAppWindowsMicrosoftEdgeAppCollectionRequest) Add(ctx context.Context, reqObj *WindowsMicrosoftEdgeApp) (resObj *WindowsMicrosoftEdgeApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsPhone81CompliancePolicy returns request builder for WindowsPhone81CompliancePolicy collection rcn
func (b *DeviceCompliancePolicyRequestBuilder) WindowsPhone81CompliancePolicy() *DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequestBuilder {
	bb := &DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsPhone81CompliancePolicy"
	return bb
}

// DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequestBuilder is request builder for WindowsPhone81CompliancePolicy collection
type DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhone81CompliancePolicy collection
func (b *DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequestBuilder) Request() *DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequest {
	return &DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhone81CompliancePolicy item
func (b *DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequestBuilder) ID(id string) *WindowsPhone81CompliancePolicyRequestBuilder {
	bb := &WindowsPhone81CompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequest is request for WindowsPhone81CompliancePolicy collection
type DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhone81CompliancePolicy collection
func (r *DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhone81CompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhone81CompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhone81CompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhone81CompliancePolicy collection, max N pages
func (r *DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhone81CompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhone81CompliancePolicy collection
func (r *DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequest) Get(ctx context.Context) ([]WindowsPhone81CompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhone81CompliancePolicy collection
func (r *DeviceCompliancePolicyWindowsPhone81CompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhone81CompliancePolicy) (resObj *WindowsPhone81CompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsPhone81CustomConfiguration returns request builder for WindowsPhone81CustomConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) WindowsPhone81CustomConfiguration() *DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsPhone81CustomConfiguration"
	return bb
}

// DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequestBuilder is request builder for WindowsPhone81CustomConfiguration collection
type DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhone81CustomConfiguration collection
func (b *DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequest {
	return &DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhone81CustomConfiguration item
func (b *DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequestBuilder) ID(id string) *WindowsPhone81CustomConfigurationRequestBuilder {
	bb := &WindowsPhone81CustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequest is request for WindowsPhone81CustomConfiguration collection
type DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhone81CustomConfiguration collection
func (r *DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhone81CustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhone81CustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhone81CustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhone81CustomConfiguration collection, max N pages
func (r *DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhone81CustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhone81CustomConfiguration collection
func (r *DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsPhone81CustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhone81CustomConfiguration collection
func (r *DeviceConfigurationWindowsPhone81CustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhone81CustomConfiguration) (resObj *WindowsPhone81CustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsPhone81GeneralConfiguration returns request builder for WindowsPhone81GeneralConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) WindowsPhone81GeneralConfiguration() *DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsPhone81GeneralConfiguration"
	return bb
}

// DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequestBuilder is request builder for WindowsPhone81GeneralConfiguration collection
type DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhone81GeneralConfiguration collection
func (b *DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequest {
	return &DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhone81GeneralConfiguration item
func (b *DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequestBuilder) ID(id string) *WindowsPhone81GeneralConfigurationRequestBuilder {
	bb := &WindowsPhone81GeneralConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequest is request for WindowsPhone81GeneralConfiguration collection
type DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhone81GeneralConfiguration collection
func (r *DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhone81GeneralConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhone81GeneralConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhone81GeneralConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhone81GeneralConfiguration collection, max N pages
func (r *DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhone81GeneralConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhone81GeneralConfiguration collection
func (r *DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsPhone81GeneralConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhone81GeneralConfiguration collection
func (r *DeviceConfigurationWindowsPhone81GeneralConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhone81GeneralConfiguration) (resObj *WindowsPhone81GeneralConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsUniversalAppXContainedApp returns request builder for WindowsUniversalAppXContainedApp collection rcn
func (b *MobileContainedAppRequestBuilder) WindowsUniversalAppXContainedApp() *MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequestBuilder {
	bb := &MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsUniversalAppXContainedApp"
	return bb
}

// MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequestBuilder is request builder for WindowsUniversalAppXContainedApp collection
type MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUniversalAppXContainedApp collection
func (b *MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequestBuilder) Request() *MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequest {
	return &MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUniversalAppXContainedApp item
func (b *MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequestBuilder) ID(id string) *WindowsUniversalAppXContainedAppRequestBuilder {
	bb := &WindowsUniversalAppXContainedAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequest is request for WindowsUniversalAppXContainedApp collection
type MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUniversalAppXContainedApp collection
func (r *MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUniversalAppXContainedApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUniversalAppXContainedApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUniversalAppXContainedApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUniversalAppXContainedApp collection, max N pages
func (r *MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUniversalAppXContainedApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUniversalAppXContainedApp collection
func (r *MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequest) Get(ctx context.Context) ([]WindowsUniversalAppXContainedApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUniversalAppXContainedApp collection
func (r *MobileContainedAppWindowsUniversalAppXContainedAppCollectionRequest) Add(ctx context.Context, reqObj *WindowsUniversalAppXContainedApp) (resObj *WindowsUniversalAppXContainedApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsUpdateForBusinessConfiguration returns request builder for WindowsUpdateForBusinessConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) WindowsUpdateForBusinessConfiguration() *DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsUpdateForBusinessConfiguration"
	return bb
}

// DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequestBuilder is request builder for WindowsUpdateForBusinessConfiguration collection
type DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdateForBusinessConfiguration collection
func (b *DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequest {
	return &DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdateForBusinessConfiguration item
func (b *DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequestBuilder) ID(id string) *WindowsUpdateForBusinessConfigurationRequestBuilder {
	bb := &WindowsUpdateForBusinessConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequest is request for WindowsUpdateForBusinessConfiguration collection
type DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdateForBusinessConfiguration collection
func (r *DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdateForBusinessConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdateForBusinessConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdateForBusinessConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdateForBusinessConfiguration collection, max N pages
func (r *DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdateForBusinessConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdateForBusinessConfiguration collection
func (r *DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsUpdateForBusinessConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdateForBusinessConfiguration collection
func (r *DeviceConfigurationWindowsUpdateForBusinessConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdateForBusinessConfiguration) (resObj *WindowsUpdateForBusinessConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsWebApp returns request builder for WindowsWebApp collection rcn
func (b *MobileAppRequestBuilder) WindowsWebApp() *MobileAppWindowsWebAppCollectionRequestBuilder {
	bb := &MobileAppWindowsWebAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsWebApp"
	return bb
}

// MobileAppWindowsWebAppCollectionRequestBuilder is request builder for WindowsWebApp collection
type MobileAppWindowsWebAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsWebApp collection
func (b *MobileAppWindowsWebAppCollectionRequestBuilder) Request() *MobileAppWindowsWebAppCollectionRequest {
	return &MobileAppWindowsWebAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsWebApp item
func (b *MobileAppWindowsWebAppCollectionRequestBuilder) ID(id string) *WindowsWebAppRequestBuilder {
	bb := &WindowsWebAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MobileAppWindowsWebAppCollectionRequest is request for WindowsWebApp collection
type MobileAppWindowsWebAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsWebApp collection
func (r *MobileAppWindowsWebAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsWebApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsWebApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsWebApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsWebApp collection, max N pages
func (r *MobileAppWindowsWebAppCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsWebApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsWebApp collection
func (r *MobileAppWindowsWebAppCollectionRequest) Get(ctx context.Context) ([]WindowsWebApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsWebApp collection
func (r *MobileAppWindowsWebAppCollectionRequest) Add(ctx context.Context, reqObj *WindowsWebApp) (resObj *WindowsWebApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
