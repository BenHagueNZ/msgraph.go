// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// UnifiedApprovalStageRequestBuilder is request builder for UnifiedApprovalStage
type UnifiedApprovalStageRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedApprovalStageRequest
func (b *UnifiedApprovalStageRequestBuilder) Request() *UnifiedApprovalStageRequest {
	return &UnifiedApprovalStageRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedApprovalStageRequest is request for UnifiedApprovalStage
type UnifiedApprovalStageRequest struct{ BaseRequest }

// Get performs GET request for UnifiedApprovalStage
func (r *UnifiedApprovalStageRequest) Get(ctx context.Context) (resObj *UnifiedApprovalStage, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedApprovalStage
func (r *UnifiedApprovalStageRequest) Update(ctx context.Context, reqObj *UnifiedApprovalStage) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedApprovalStage
func (r *UnifiedApprovalStageRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleRequestBuilder is request builder for UnifiedRole
type UnifiedRoleRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleRequest
func (b *UnifiedRoleRequestBuilder) Request() *UnifiedRoleRequest {
	return &UnifiedRoleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleRequest is request for UnifiedRole
type UnifiedRoleRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRole
func (r *UnifiedRoleRequest) Get(ctx context.Context) (resObj *UnifiedRole, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRole
func (r *UnifiedRoleRequest) Update(ctx context.Context, reqObj *UnifiedRole) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRole
func (r *UnifiedRoleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleAssignmentRequestBuilder is request builder for UnifiedRoleAssignment
type UnifiedRoleAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleAssignmentRequest
func (b *UnifiedRoleAssignmentRequestBuilder) Request() *UnifiedRoleAssignmentRequest {
	return &UnifiedRoleAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleAssignmentRequest is request for UnifiedRoleAssignment
type UnifiedRoleAssignmentRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleAssignment
func (r *UnifiedRoleAssignmentRequest) Get(ctx context.Context) (resObj *UnifiedRoleAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleAssignment
func (r *UnifiedRoleAssignmentRequest) Update(ctx context.Context, reqObj *UnifiedRoleAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleAssignment
func (r *UnifiedRoleAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleAssignmentScheduleRequestBuilder is request builder for UnifiedRoleAssignmentSchedule
type UnifiedRoleAssignmentScheduleRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleAssignmentScheduleRequest
func (b *UnifiedRoleAssignmentScheduleRequestBuilder) Request() *UnifiedRoleAssignmentScheduleRequest {
	return &UnifiedRoleAssignmentScheduleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleAssignmentScheduleRequest is request for UnifiedRoleAssignmentSchedule
type UnifiedRoleAssignmentScheduleRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleAssignmentSchedule
func (r *UnifiedRoleAssignmentScheduleRequest) Get(ctx context.Context) (resObj *UnifiedRoleAssignmentSchedule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleAssignmentSchedule
func (r *UnifiedRoleAssignmentScheduleRequest) Update(ctx context.Context, reqObj *UnifiedRoleAssignmentSchedule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleAssignmentSchedule
func (r *UnifiedRoleAssignmentScheduleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleAssignmentScheduleInstanceRequestBuilder is request builder for UnifiedRoleAssignmentScheduleInstance
type UnifiedRoleAssignmentScheduleInstanceRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleAssignmentScheduleInstanceRequest
func (b *UnifiedRoleAssignmentScheduleInstanceRequestBuilder) Request() *UnifiedRoleAssignmentScheduleInstanceRequest {
	return &UnifiedRoleAssignmentScheduleInstanceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleAssignmentScheduleInstanceRequest is request for UnifiedRoleAssignmentScheduleInstance
type UnifiedRoleAssignmentScheduleInstanceRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleAssignmentScheduleInstance
func (r *UnifiedRoleAssignmentScheduleInstanceRequest) Get(ctx context.Context) (resObj *UnifiedRoleAssignmentScheduleInstance, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleAssignmentScheduleInstance
func (r *UnifiedRoleAssignmentScheduleInstanceRequest) Update(ctx context.Context, reqObj *UnifiedRoleAssignmentScheduleInstance) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleAssignmentScheduleInstance
func (r *UnifiedRoleAssignmentScheduleInstanceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder is request builder for UnifiedRoleAssignmentScheduleRequestObject
type UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleAssignmentScheduleRequestObjectRequest
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) Request() *UnifiedRoleAssignmentScheduleRequestObjectRequest {
	return &UnifiedRoleAssignmentScheduleRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleAssignmentScheduleRequestObjectRequest is request for UnifiedRoleAssignmentScheduleRequestObject
type UnifiedRoleAssignmentScheduleRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleAssignmentScheduleRequestObject
func (r *UnifiedRoleAssignmentScheduleRequestObjectRequest) Get(ctx context.Context) (resObj *UnifiedRoleAssignmentScheduleRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleAssignmentScheduleRequestObject
func (r *UnifiedRoleAssignmentScheduleRequestObjectRequest) Update(ctx context.Context, reqObj *UnifiedRoleAssignmentScheduleRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleAssignmentScheduleRequestObject
func (r *UnifiedRoleAssignmentScheduleRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleDefinitionRequestBuilder is request builder for UnifiedRoleDefinition
type UnifiedRoleDefinitionRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleDefinitionRequest
func (b *UnifiedRoleDefinitionRequestBuilder) Request() *UnifiedRoleDefinitionRequest {
	return &UnifiedRoleDefinitionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleDefinitionRequest is request for UnifiedRoleDefinition
type UnifiedRoleDefinitionRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleDefinition
func (r *UnifiedRoleDefinitionRequest) Get(ctx context.Context) (resObj *UnifiedRoleDefinition, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleDefinition
func (r *UnifiedRoleDefinitionRequest) Update(ctx context.Context, reqObj *UnifiedRoleDefinition) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleDefinition
func (r *UnifiedRoleDefinitionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleEligibilityScheduleRequestBuilder is request builder for UnifiedRoleEligibilitySchedule
type UnifiedRoleEligibilityScheduleRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleEligibilityScheduleRequest
func (b *UnifiedRoleEligibilityScheduleRequestBuilder) Request() *UnifiedRoleEligibilityScheduleRequest {
	return &UnifiedRoleEligibilityScheduleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleEligibilityScheduleRequest is request for UnifiedRoleEligibilitySchedule
type UnifiedRoleEligibilityScheduleRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleEligibilitySchedule
func (r *UnifiedRoleEligibilityScheduleRequest) Get(ctx context.Context) (resObj *UnifiedRoleEligibilitySchedule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleEligibilitySchedule
func (r *UnifiedRoleEligibilityScheduleRequest) Update(ctx context.Context, reqObj *UnifiedRoleEligibilitySchedule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleEligibilitySchedule
func (r *UnifiedRoleEligibilityScheduleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleEligibilityScheduleInstanceRequestBuilder is request builder for UnifiedRoleEligibilityScheduleInstance
type UnifiedRoleEligibilityScheduleInstanceRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleEligibilityScheduleInstanceRequest
func (b *UnifiedRoleEligibilityScheduleInstanceRequestBuilder) Request() *UnifiedRoleEligibilityScheduleInstanceRequest {
	return &UnifiedRoleEligibilityScheduleInstanceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleEligibilityScheduleInstanceRequest is request for UnifiedRoleEligibilityScheduleInstance
type UnifiedRoleEligibilityScheduleInstanceRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleEligibilityScheduleInstance
func (r *UnifiedRoleEligibilityScheduleInstanceRequest) Get(ctx context.Context) (resObj *UnifiedRoleEligibilityScheduleInstance, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleEligibilityScheduleInstance
func (r *UnifiedRoleEligibilityScheduleInstanceRequest) Update(ctx context.Context, reqObj *UnifiedRoleEligibilityScheduleInstance) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleEligibilityScheduleInstance
func (r *UnifiedRoleEligibilityScheduleInstanceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder is request builder for UnifiedRoleEligibilityScheduleRequestObject
type UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleEligibilityScheduleRequestObjectRequest
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) Request() *UnifiedRoleEligibilityScheduleRequestObjectRequest {
	return &UnifiedRoleEligibilityScheduleRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleEligibilityScheduleRequestObjectRequest is request for UnifiedRoleEligibilityScheduleRequestObject
type UnifiedRoleEligibilityScheduleRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleEligibilityScheduleRequestObject
func (r *UnifiedRoleEligibilityScheduleRequestObjectRequest) Get(ctx context.Context) (resObj *UnifiedRoleEligibilityScheduleRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleEligibilityScheduleRequestObject
func (r *UnifiedRoleEligibilityScheduleRequestObjectRequest) Update(ctx context.Context, reqObj *UnifiedRoleEligibilityScheduleRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleEligibilityScheduleRequestObject
func (r *UnifiedRoleEligibilityScheduleRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleManagementPolicyRequestBuilder is request builder for UnifiedRoleManagementPolicy
type UnifiedRoleManagementPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleManagementPolicyRequest
func (b *UnifiedRoleManagementPolicyRequestBuilder) Request() *UnifiedRoleManagementPolicyRequest {
	return &UnifiedRoleManagementPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleManagementPolicyRequest is request for UnifiedRoleManagementPolicy
type UnifiedRoleManagementPolicyRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleManagementPolicy
func (r *UnifiedRoleManagementPolicyRequest) Get(ctx context.Context) (resObj *UnifiedRoleManagementPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleManagementPolicy
func (r *UnifiedRoleManagementPolicyRequest) Update(ctx context.Context, reqObj *UnifiedRoleManagementPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleManagementPolicy
func (r *UnifiedRoleManagementPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleManagementPolicyApprovalRuleRequestBuilder is request builder for UnifiedRoleManagementPolicyApprovalRule
type UnifiedRoleManagementPolicyApprovalRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleManagementPolicyApprovalRuleRequest
func (b *UnifiedRoleManagementPolicyApprovalRuleRequestBuilder) Request() *UnifiedRoleManagementPolicyApprovalRuleRequest {
	return &UnifiedRoleManagementPolicyApprovalRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleManagementPolicyApprovalRuleRequest is request for UnifiedRoleManagementPolicyApprovalRule
type UnifiedRoleManagementPolicyApprovalRuleRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleManagementPolicyApprovalRule
func (r *UnifiedRoleManagementPolicyApprovalRuleRequest) Get(ctx context.Context) (resObj *UnifiedRoleManagementPolicyApprovalRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleManagementPolicyApprovalRule
func (r *UnifiedRoleManagementPolicyApprovalRuleRequest) Update(ctx context.Context, reqObj *UnifiedRoleManagementPolicyApprovalRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleManagementPolicyApprovalRule
func (r *UnifiedRoleManagementPolicyApprovalRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleManagementPolicyAssignmentRequestBuilder is request builder for UnifiedRoleManagementPolicyAssignment
type UnifiedRoleManagementPolicyAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleManagementPolicyAssignmentRequest
func (b *UnifiedRoleManagementPolicyAssignmentRequestBuilder) Request() *UnifiedRoleManagementPolicyAssignmentRequest {
	return &UnifiedRoleManagementPolicyAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleManagementPolicyAssignmentRequest is request for UnifiedRoleManagementPolicyAssignment
type UnifiedRoleManagementPolicyAssignmentRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleManagementPolicyAssignment
func (r *UnifiedRoleManagementPolicyAssignmentRequest) Get(ctx context.Context) (resObj *UnifiedRoleManagementPolicyAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleManagementPolicyAssignment
func (r *UnifiedRoleManagementPolicyAssignmentRequest) Update(ctx context.Context, reqObj *UnifiedRoleManagementPolicyAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleManagementPolicyAssignment
func (r *UnifiedRoleManagementPolicyAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleManagementPolicyAuthenticationContextRuleRequestBuilder is request builder for UnifiedRoleManagementPolicyAuthenticationContextRule
type UnifiedRoleManagementPolicyAuthenticationContextRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleManagementPolicyAuthenticationContextRuleRequest
func (b *UnifiedRoleManagementPolicyAuthenticationContextRuleRequestBuilder) Request() *UnifiedRoleManagementPolicyAuthenticationContextRuleRequest {
	return &UnifiedRoleManagementPolicyAuthenticationContextRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleManagementPolicyAuthenticationContextRuleRequest is request for UnifiedRoleManagementPolicyAuthenticationContextRule
type UnifiedRoleManagementPolicyAuthenticationContextRuleRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleManagementPolicyAuthenticationContextRule
func (r *UnifiedRoleManagementPolicyAuthenticationContextRuleRequest) Get(ctx context.Context) (resObj *UnifiedRoleManagementPolicyAuthenticationContextRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleManagementPolicyAuthenticationContextRule
func (r *UnifiedRoleManagementPolicyAuthenticationContextRuleRequest) Update(ctx context.Context, reqObj *UnifiedRoleManagementPolicyAuthenticationContextRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleManagementPolicyAuthenticationContextRule
func (r *UnifiedRoleManagementPolicyAuthenticationContextRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleManagementPolicyEnablementRuleRequestBuilder is request builder for UnifiedRoleManagementPolicyEnablementRule
type UnifiedRoleManagementPolicyEnablementRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleManagementPolicyEnablementRuleRequest
func (b *UnifiedRoleManagementPolicyEnablementRuleRequestBuilder) Request() *UnifiedRoleManagementPolicyEnablementRuleRequest {
	return &UnifiedRoleManagementPolicyEnablementRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleManagementPolicyEnablementRuleRequest is request for UnifiedRoleManagementPolicyEnablementRule
type UnifiedRoleManagementPolicyEnablementRuleRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleManagementPolicyEnablementRule
func (r *UnifiedRoleManagementPolicyEnablementRuleRequest) Get(ctx context.Context) (resObj *UnifiedRoleManagementPolicyEnablementRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleManagementPolicyEnablementRule
func (r *UnifiedRoleManagementPolicyEnablementRuleRequest) Update(ctx context.Context, reqObj *UnifiedRoleManagementPolicyEnablementRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleManagementPolicyEnablementRule
func (r *UnifiedRoleManagementPolicyEnablementRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleManagementPolicyExpirationRuleRequestBuilder is request builder for UnifiedRoleManagementPolicyExpirationRule
type UnifiedRoleManagementPolicyExpirationRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleManagementPolicyExpirationRuleRequest
func (b *UnifiedRoleManagementPolicyExpirationRuleRequestBuilder) Request() *UnifiedRoleManagementPolicyExpirationRuleRequest {
	return &UnifiedRoleManagementPolicyExpirationRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleManagementPolicyExpirationRuleRequest is request for UnifiedRoleManagementPolicyExpirationRule
type UnifiedRoleManagementPolicyExpirationRuleRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleManagementPolicyExpirationRule
func (r *UnifiedRoleManagementPolicyExpirationRuleRequest) Get(ctx context.Context) (resObj *UnifiedRoleManagementPolicyExpirationRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleManagementPolicyExpirationRule
func (r *UnifiedRoleManagementPolicyExpirationRuleRequest) Update(ctx context.Context, reqObj *UnifiedRoleManagementPolicyExpirationRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleManagementPolicyExpirationRule
func (r *UnifiedRoleManagementPolicyExpirationRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleManagementPolicyNotificationRuleRequestBuilder is request builder for UnifiedRoleManagementPolicyNotificationRule
type UnifiedRoleManagementPolicyNotificationRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleManagementPolicyNotificationRuleRequest
func (b *UnifiedRoleManagementPolicyNotificationRuleRequestBuilder) Request() *UnifiedRoleManagementPolicyNotificationRuleRequest {
	return &UnifiedRoleManagementPolicyNotificationRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleManagementPolicyNotificationRuleRequest is request for UnifiedRoleManagementPolicyNotificationRule
type UnifiedRoleManagementPolicyNotificationRuleRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleManagementPolicyNotificationRule
func (r *UnifiedRoleManagementPolicyNotificationRuleRequest) Get(ctx context.Context) (resObj *UnifiedRoleManagementPolicyNotificationRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleManagementPolicyNotificationRule
func (r *UnifiedRoleManagementPolicyNotificationRuleRequest) Update(ctx context.Context, reqObj *UnifiedRoleManagementPolicyNotificationRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleManagementPolicyNotificationRule
func (r *UnifiedRoleManagementPolicyNotificationRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleManagementPolicyRuleRequestBuilder is request builder for UnifiedRoleManagementPolicyRule
type UnifiedRoleManagementPolicyRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleManagementPolicyRuleRequest
func (b *UnifiedRoleManagementPolicyRuleRequestBuilder) Request() *UnifiedRoleManagementPolicyRuleRequest {
	return &UnifiedRoleManagementPolicyRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleManagementPolicyRuleRequest is request for UnifiedRoleManagementPolicyRule
type UnifiedRoleManagementPolicyRuleRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleManagementPolicyRule
func (r *UnifiedRoleManagementPolicyRuleRequest) Get(ctx context.Context) (resObj *UnifiedRoleManagementPolicyRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleManagementPolicyRule
func (r *UnifiedRoleManagementPolicyRuleRequest) Update(ctx context.Context, reqObj *UnifiedRoleManagementPolicyRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleManagementPolicyRule
func (r *UnifiedRoleManagementPolicyRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleManagementPolicyRuleTargetRequestBuilder is request builder for UnifiedRoleManagementPolicyRuleTarget
type UnifiedRoleManagementPolicyRuleTargetRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleManagementPolicyRuleTargetRequest
func (b *UnifiedRoleManagementPolicyRuleTargetRequestBuilder) Request() *UnifiedRoleManagementPolicyRuleTargetRequest {
	return &UnifiedRoleManagementPolicyRuleTargetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleManagementPolicyRuleTargetRequest is request for UnifiedRoleManagementPolicyRuleTarget
type UnifiedRoleManagementPolicyRuleTargetRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleManagementPolicyRuleTarget
func (r *UnifiedRoleManagementPolicyRuleTargetRequest) Get(ctx context.Context) (resObj *UnifiedRoleManagementPolicyRuleTarget, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleManagementPolicyRuleTarget
func (r *UnifiedRoleManagementPolicyRuleTargetRequest) Update(ctx context.Context, reqObj *UnifiedRoleManagementPolicyRuleTarget) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleManagementPolicyRuleTarget
func (r *UnifiedRoleManagementPolicyRuleTargetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRolePermissionRequestBuilder is request builder for UnifiedRolePermission
type UnifiedRolePermissionRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRolePermissionRequest
func (b *UnifiedRolePermissionRequestBuilder) Request() *UnifiedRolePermissionRequest {
	return &UnifiedRolePermissionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRolePermissionRequest is request for UnifiedRolePermission
type UnifiedRolePermissionRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRolePermission
func (r *UnifiedRolePermissionRequest) Get(ctx context.Context) (resObj *UnifiedRolePermission, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRolePermission
func (r *UnifiedRolePermissionRequest) Update(ctx context.Context, reqObj *UnifiedRolePermission) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRolePermission
func (r *UnifiedRolePermissionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleScheduleBaseRequestBuilder is request builder for UnifiedRoleScheduleBase
type UnifiedRoleScheduleBaseRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleScheduleBaseRequest
func (b *UnifiedRoleScheduleBaseRequestBuilder) Request() *UnifiedRoleScheduleBaseRequest {
	return &UnifiedRoleScheduleBaseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleScheduleBaseRequest is request for UnifiedRoleScheduleBase
type UnifiedRoleScheduleBaseRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleScheduleBase
func (r *UnifiedRoleScheduleBaseRequest) Get(ctx context.Context) (resObj *UnifiedRoleScheduleBase, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleScheduleBase
func (r *UnifiedRoleScheduleBaseRequest) Update(ctx context.Context, reqObj *UnifiedRoleScheduleBase) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleScheduleBase
func (r *UnifiedRoleScheduleBaseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// UnifiedRoleScheduleInstanceBaseRequestBuilder is request builder for UnifiedRoleScheduleInstanceBase
type UnifiedRoleScheduleInstanceBaseRequestBuilder struct{ BaseRequestBuilder }

// Request returns UnifiedRoleScheduleInstanceBaseRequest
func (b *UnifiedRoleScheduleInstanceBaseRequestBuilder) Request() *UnifiedRoleScheduleInstanceBaseRequest {
	return &UnifiedRoleScheduleInstanceBaseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UnifiedRoleScheduleInstanceBaseRequest is request for UnifiedRoleScheduleInstanceBase
type UnifiedRoleScheduleInstanceBaseRequest struct{ BaseRequest }

// Get performs GET request for UnifiedRoleScheduleInstanceBase
func (r *UnifiedRoleScheduleInstanceBaseRequest) Get(ctx context.Context) (resObj *UnifiedRoleScheduleInstanceBase, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UnifiedRoleScheduleInstanceBase
func (r *UnifiedRoleScheduleInstanceBaseRequest) Update(ctx context.Context, reqObj *UnifiedRoleScheduleInstanceBase) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UnifiedRoleScheduleInstanceBase
func (r *UnifiedRoleScheduleInstanceBaseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type UnifiedRoleAssignmentScheduleRequestObjectCancelRequestBuilder struct{ BaseRequestBuilder }

// Cancel action undocumented
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) Cancel(reqObj *UnifiedRoleAssignmentScheduleRequestObjectCancelRequestParameter) *UnifiedRoleAssignmentScheduleRequestObjectCancelRequestBuilder {
	bb := &UnifiedRoleAssignmentScheduleRequestObjectCancelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Cancel"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type UnifiedRoleAssignmentScheduleRequestObjectCancelRequest struct{ BaseRequest }

func (b *UnifiedRoleAssignmentScheduleRequestObjectCancelRequestBuilder) Request() *UnifiedRoleAssignmentScheduleRequestObjectCancelRequest {
	return &UnifiedRoleAssignmentScheduleRequestObjectCancelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *UnifiedRoleAssignmentScheduleRequestObjectCancelRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type UnifiedRoleEligibilityScheduleRequestObjectCancelRequestBuilder struct{ BaseRequestBuilder }

// Cancel action undocumented
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) Cancel(reqObj *UnifiedRoleEligibilityScheduleRequestObjectCancelRequestParameter) *UnifiedRoleEligibilityScheduleRequestObjectCancelRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleRequestObjectCancelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Cancel"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type UnifiedRoleEligibilityScheduleRequestObjectCancelRequest struct{ BaseRequest }

func (b *UnifiedRoleEligibilityScheduleRequestObjectCancelRequestBuilder) Request() *UnifiedRoleEligibilityScheduleRequestObjectCancelRequest {
	return &UnifiedRoleEligibilityScheduleRequestObjectCancelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *UnifiedRoleEligibilityScheduleRequestObjectCancelRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
