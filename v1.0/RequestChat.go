// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// ChatRequestBuilder is request builder for Chat
type ChatRequestBuilder struct{ BaseRequestBuilder }

// Request returns ChatRequest
func (b *ChatRequestBuilder) Request() *ChatRequest {
	return &ChatRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ChatRequest is request for Chat
type ChatRequest struct{ BaseRequest }

// Get performs GET request for Chat
func (r *ChatRequest) Get(ctx context.Context) (resObj *Chat, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Chat
func (r *ChatRequest) Update(ctx context.Context, reqObj *Chat) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Chat
func (r *ChatRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ChatMessageRequestBuilder is request builder for ChatMessage
type ChatMessageRequestBuilder struct{ BaseRequestBuilder }

// Request returns ChatMessageRequest
func (b *ChatMessageRequestBuilder) Request() *ChatMessageRequest {
	return &ChatMessageRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ChatMessageRequest is request for ChatMessage
type ChatMessageRequest struct{ BaseRequest }

// Get performs GET request for ChatMessage
func (r *ChatMessageRequest) Get(ctx context.Context) (resObj *ChatMessage, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ChatMessage
func (r *ChatMessageRequest) Update(ctx context.Context, reqObj *ChatMessage) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ChatMessage
func (r *ChatMessageRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ChatMessageHostedContentRequestBuilder is request builder for ChatMessageHostedContent
type ChatMessageHostedContentRequestBuilder struct{ BaseRequestBuilder }

// Request returns ChatMessageHostedContentRequest
func (b *ChatMessageHostedContentRequestBuilder) Request() *ChatMessageHostedContentRequest {
	return &ChatMessageHostedContentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ChatMessageHostedContentRequest is request for ChatMessageHostedContent
type ChatMessageHostedContentRequest struct{ BaseRequest }

// Get performs GET request for ChatMessageHostedContent
func (r *ChatMessageHostedContentRequest) Get(ctx context.Context) (resObj *ChatMessageHostedContent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ChatMessageHostedContent
func (r *ChatMessageHostedContentRequest) Update(ctx context.Context, reqObj *ChatMessageHostedContent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ChatMessageHostedContent
func (r *ChatMessageHostedContentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ChatMessageInfoRequestBuilder is request builder for ChatMessageInfo
type ChatMessageInfoRequestBuilder struct{ BaseRequestBuilder }

// Request returns ChatMessageInfoRequest
func (b *ChatMessageInfoRequestBuilder) Request() *ChatMessageInfoRequest {
	return &ChatMessageInfoRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ChatMessageInfoRequest is request for ChatMessageInfo
type ChatMessageInfoRequest struct{ BaseRequest }

// Get performs GET request for ChatMessageInfo
func (r *ChatMessageInfoRequest) Get(ctx context.Context) (resObj *ChatMessageInfo, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ChatMessageInfo
func (r *ChatMessageInfoRequest) Update(ctx context.Context, reqObj *ChatMessageInfo) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ChatMessageInfo
func (r *ChatMessageInfoRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type ChatSendActivityNotificationRequestBuilder struct{ BaseRequestBuilder }

// SendActivityNotification action undocumented
func (b *ChatRequestBuilder) SendActivityNotification(reqObj *ChatSendActivityNotificationRequestParameter) *ChatSendActivityNotificationRequestBuilder {
	bb := &ChatSendActivityNotificationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/sendActivityNotification"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ChatSendActivityNotificationRequest struct{ BaseRequest }

func (b *ChatSendActivityNotificationRequestBuilder) Request() *ChatSendActivityNotificationRequest {
	return &ChatSendActivityNotificationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ChatSendActivityNotificationRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type ChatHideForUserRequestBuilder struct{ BaseRequestBuilder }

// HideForUser action undocumented
func (b *ChatRequestBuilder) HideForUser(reqObj *ChatHideForUserRequestParameter) *ChatHideForUserRequestBuilder {
	bb := &ChatHideForUserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/hideForUser"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ChatHideForUserRequest struct{ BaseRequest }

func (b *ChatHideForUserRequestBuilder) Request() *ChatHideForUserRequest {
	return &ChatHideForUserRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ChatHideForUserRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type ChatMarkChatReadForUserRequestBuilder struct{ BaseRequestBuilder }

// MarkChatReadForUser action undocumented
func (b *ChatRequestBuilder) MarkChatReadForUser(reqObj *ChatMarkChatReadForUserRequestParameter) *ChatMarkChatReadForUserRequestBuilder {
	bb := &ChatMarkChatReadForUserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/markChatReadForUser"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ChatMarkChatReadForUserRequest struct{ BaseRequest }

func (b *ChatMarkChatReadForUserRequestBuilder) Request() *ChatMarkChatReadForUserRequest {
	return &ChatMarkChatReadForUserRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ChatMarkChatReadForUserRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type ChatMarkChatUnreadForUserRequestBuilder struct{ BaseRequestBuilder }

// MarkChatUnreadForUser action undocumented
func (b *ChatRequestBuilder) MarkChatUnreadForUser(reqObj *ChatMarkChatUnreadForUserRequestParameter) *ChatMarkChatUnreadForUserRequestBuilder {
	bb := &ChatMarkChatUnreadForUserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/markChatUnreadForUser"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ChatMarkChatUnreadForUserRequest struct{ BaseRequest }

func (b *ChatMarkChatUnreadForUserRequestBuilder) Request() *ChatMarkChatUnreadForUserRequest {
	return &ChatMarkChatUnreadForUserRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ChatMarkChatUnreadForUserRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type ChatUnhideForUserRequestBuilder struct{ BaseRequestBuilder }

// UnhideForUser action undocumented
func (b *ChatRequestBuilder) UnhideForUser(reqObj *ChatUnhideForUserRequestParameter) *ChatUnhideForUserRequestBuilder {
	bb := &ChatUnhideForUserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/unhideForUser"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ChatUnhideForUserRequest struct{ BaseRequest }

func (b *ChatUnhideForUserRequestBuilder) Request() *ChatUnhideForUserRequest {
	return &ChatUnhideForUserRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ChatUnhideForUserRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type ChatMessageSoftDeleteRequestBuilder struct{ BaseRequestBuilder }

// SoftDelete action undocumented
func (b *ChatMessageRequestBuilder) SoftDelete(reqObj *ChatMessageSoftDeleteRequestParameter) *ChatMessageSoftDeleteRequestBuilder {
	bb := &ChatMessageSoftDeleteRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/softDelete"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ChatMessageSoftDeleteRequest struct{ BaseRequest }

func (b *ChatMessageSoftDeleteRequestBuilder) Request() *ChatMessageSoftDeleteRequest {
	return &ChatMessageSoftDeleteRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ChatMessageSoftDeleteRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type ChatMessageUndoSoftDeleteRequestBuilder struct{ BaseRequestBuilder }

// UndoSoftDelete action undocumented
func (b *ChatMessageRequestBuilder) UndoSoftDelete(reqObj *ChatMessageUndoSoftDeleteRequestParameter) *ChatMessageUndoSoftDeleteRequestBuilder {
	bb := &ChatMessageUndoSoftDeleteRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/undoSoftDelete"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ChatMessageUndoSoftDeleteRequest struct{ BaseRequest }

func (b *ChatMessageUndoSoftDeleteRequestBuilder) Request() *ChatMessageUndoSoftDeleteRequest {
	return &ChatMessageUndoSoftDeleteRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ChatMessageUndoSoftDeleteRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
