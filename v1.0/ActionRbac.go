// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// RoleAssignmentScheduleInstances returns request builder for UnifiedRoleAssignmentScheduleInstance collection rcn
func (b *RbacApplicationRequestBuilder) RoleAssignmentScheduleInstances() *RbacApplicationRoleAssignmentScheduleInstancesCollectionRequestBuilder {
	bb := &RbacApplicationRoleAssignmentScheduleInstancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleAssignmentScheduleInstances"
	return bb
}

// RbacApplicationRoleAssignmentScheduleInstancesCollectionRequestBuilder is request builder for UnifiedRoleAssignmentScheduleInstance collection
type RbacApplicationRoleAssignmentScheduleInstancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleAssignmentScheduleInstance collection
func (b *RbacApplicationRoleAssignmentScheduleInstancesCollectionRequestBuilder) Request() *RbacApplicationRoleAssignmentScheduleInstancesCollectionRequest {
	return &RbacApplicationRoleAssignmentScheduleInstancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleAssignmentScheduleInstance item
func (b *RbacApplicationRoleAssignmentScheduleInstancesCollectionRequestBuilder) ID(id string) *UnifiedRoleAssignmentScheduleInstanceRequestBuilder {
	bb := &UnifiedRoleAssignmentScheduleInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RbacApplicationRoleAssignmentScheduleInstancesCollectionRequest is request for UnifiedRoleAssignmentScheduleInstance collection
type RbacApplicationRoleAssignmentScheduleInstancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleAssignmentScheduleInstance collection
func (r *RbacApplicationRoleAssignmentScheduleInstancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleAssignmentScheduleInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleAssignmentScheduleInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleAssignmentScheduleInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleAssignmentScheduleInstance collection, max N pages
func (r *RbacApplicationRoleAssignmentScheduleInstancesCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleAssignmentScheduleInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleAssignmentScheduleInstance collection
func (r *RbacApplicationRoleAssignmentScheduleInstancesCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleAssignmentScheduleInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleAssignmentScheduleInstance collection
func (r *RbacApplicationRoleAssignmentScheduleInstancesCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleAssignmentScheduleInstance) (resObj *UnifiedRoleAssignmentScheduleInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleAssignmentScheduleRequests returns request builder for UnifiedRoleAssignmentScheduleRequestObject collection rcn
func (b *RbacApplicationRequestBuilder) RoleAssignmentScheduleRequests() *RbacApplicationRoleAssignmentScheduleRequestsCollectionRequestBuilder {
	bb := &RbacApplicationRoleAssignmentScheduleRequestsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleAssignmentScheduleRequests"
	return bb
}

// RbacApplicationRoleAssignmentScheduleRequestsCollectionRequestBuilder is request builder for UnifiedRoleAssignmentScheduleRequestObject collection
type RbacApplicationRoleAssignmentScheduleRequestsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleAssignmentScheduleRequestObject collection
func (b *RbacApplicationRoleAssignmentScheduleRequestsCollectionRequestBuilder) Request() *RbacApplicationRoleAssignmentScheduleRequestsCollectionRequest {
	return &RbacApplicationRoleAssignmentScheduleRequestsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleAssignmentScheduleRequestObject item
func (b *RbacApplicationRoleAssignmentScheduleRequestsCollectionRequestBuilder) ID(id string) *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder {
	bb := &UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RbacApplicationRoleAssignmentScheduleRequestsCollectionRequest is request for UnifiedRoleAssignmentScheduleRequestObject collection
type RbacApplicationRoleAssignmentScheduleRequestsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleAssignmentScheduleRequestObject collection
func (r *RbacApplicationRoleAssignmentScheduleRequestsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleAssignmentScheduleRequestObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleAssignmentScheduleRequestObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleAssignmentScheduleRequestObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleAssignmentScheduleRequestObject collection, max N pages
func (r *RbacApplicationRoleAssignmentScheduleRequestsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleAssignmentScheduleRequestObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleAssignmentScheduleRequestObject collection
func (r *RbacApplicationRoleAssignmentScheduleRequestsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleAssignmentScheduleRequestObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleAssignmentScheduleRequestObject collection
func (r *RbacApplicationRoleAssignmentScheduleRequestsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleAssignmentScheduleRequestObject) (resObj *UnifiedRoleAssignmentScheduleRequestObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleAssignmentSchedules returns request builder for UnifiedRoleAssignmentSchedule collection rcn
func (b *RbacApplicationRequestBuilder) RoleAssignmentSchedules() *RbacApplicationRoleAssignmentSchedulesCollectionRequestBuilder {
	bb := &RbacApplicationRoleAssignmentSchedulesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleAssignmentSchedules"
	return bb
}

// RbacApplicationRoleAssignmentSchedulesCollectionRequestBuilder is request builder for UnifiedRoleAssignmentSchedule collection
type RbacApplicationRoleAssignmentSchedulesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleAssignmentSchedule collection
func (b *RbacApplicationRoleAssignmentSchedulesCollectionRequestBuilder) Request() *RbacApplicationRoleAssignmentSchedulesCollectionRequest {
	return &RbacApplicationRoleAssignmentSchedulesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleAssignmentSchedule item
func (b *RbacApplicationRoleAssignmentSchedulesCollectionRequestBuilder) ID(id string) *UnifiedRoleAssignmentScheduleRequestBuilder {
	bb := &UnifiedRoleAssignmentScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RbacApplicationRoleAssignmentSchedulesCollectionRequest is request for UnifiedRoleAssignmentSchedule collection
type RbacApplicationRoleAssignmentSchedulesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleAssignmentSchedule collection
func (r *RbacApplicationRoleAssignmentSchedulesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleAssignmentSchedule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleAssignmentSchedule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleAssignmentSchedule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleAssignmentSchedule collection, max N pages
func (r *RbacApplicationRoleAssignmentSchedulesCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleAssignmentSchedule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleAssignmentSchedule collection
func (r *RbacApplicationRoleAssignmentSchedulesCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleAssignmentSchedule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleAssignmentSchedule collection
func (r *RbacApplicationRoleAssignmentSchedulesCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleAssignmentSchedule) (resObj *UnifiedRoleAssignmentSchedule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleAssignments returns request builder for UnifiedRoleAssignment collection rcn
func (b *RbacApplicationRequestBuilder) RoleAssignments() *RbacApplicationRoleAssignmentsCollectionRequestBuilder {
	bb := &RbacApplicationRoleAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleAssignments"
	return bb
}

// RbacApplicationRoleAssignmentsCollectionRequestBuilder is request builder for UnifiedRoleAssignment collection
type RbacApplicationRoleAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleAssignment collection
func (b *RbacApplicationRoleAssignmentsCollectionRequestBuilder) Request() *RbacApplicationRoleAssignmentsCollectionRequest {
	return &RbacApplicationRoleAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleAssignment item
func (b *RbacApplicationRoleAssignmentsCollectionRequestBuilder) ID(id string) *UnifiedRoleAssignmentRequestBuilder {
	bb := &UnifiedRoleAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RbacApplicationRoleAssignmentsCollectionRequest is request for UnifiedRoleAssignment collection
type RbacApplicationRoleAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleAssignment collection
func (r *RbacApplicationRoleAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleAssignment collection, max N pages
func (r *RbacApplicationRoleAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleAssignment collection
func (r *RbacApplicationRoleAssignmentsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleAssignment collection
func (r *RbacApplicationRoleAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleAssignment) (resObj *UnifiedRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleDefinitions returns request builder for UnifiedRoleDefinition collection rcn
func (b *RbacApplicationRequestBuilder) RoleDefinitions() *RbacApplicationRoleDefinitionsCollectionRequestBuilder {
	bb := &RbacApplicationRoleDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinitions"
	return bb
}

// RbacApplicationRoleDefinitionsCollectionRequestBuilder is request builder for UnifiedRoleDefinition collection
type RbacApplicationRoleDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleDefinition collection
func (b *RbacApplicationRoleDefinitionsCollectionRequestBuilder) Request() *RbacApplicationRoleDefinitionsCollectionRequest {
	return &RbacApplicationRoleDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleDefinition item
func (b *RbacApplicationRoleDefinitionsCollectionRequestBuilder) ID(id string) *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RbacApplicationRoleDefinitionsCollectionRequest is request for UnifiedRoleDefinition collection
type RbacApplicationRoleDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleDefinition collection
func (r *RbacApplicationRoleDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleDefinition collection, max N pages
func (r *RbacApplicationRoleDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleDefinition collection
func (r *RbacApplicationRoleDefinitionsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleDefinition collection
func (r *RbacApplicationRoleDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleDefinition) (resObj *UnifiedRoleDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleEligibilityScheduleInstances returns request builder for UnifiedRoleEligibilityScheduleInstance collection rcn
func (b *RbacApplicationRequestBuilder) RoleEligibilityScheduleInstances() *RbacApplicationRoleEligibilityScheduleInstancesCollectionRequestBuilder {
	bb := &RbacApplicationRoleEligibilityScheduleInstancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleEligibilityScheduleInstances"
	return bb
}

// RbacApplicationRoleEligibilityScheduleInstancesCollectionRequestBuilder is request builder for UnifiedRoleEligibilityScheduleInstance collection
type RbacApplicationRoleEligibilityScheduleInstancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleEligibilityScheduleInstance collection
func (b *RbacApplicationRoleEligibilityScheduleInstancesCollectionRequestBuilder) Request() *RbacApplicationRoleEligibilityScheduleInstancesCollectionRequest {
	return &RbacApplicationRoleEligibilityScheduleInstancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleEligibilityScheduleInstance item
func (b *RbacApplicationRoleEligibilityScheduleInstancesCollectionRequestBuilder) ID(id string) *UnifiedRoleEligibilityScheduleInstanceRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RbacApplicationRoleEligibilityScheduleInstancesCollectionRequest is request for UnifiedRoleEligibilityScheduleInstance collection
type RbacApplicationRoleEligibilityScheduleInstancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleEligibilityScheduleInstance collection
func (r *RbacApplicationRoleEligibilityScheduleInstancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleEligibilityScheduleInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleEligibilityScheduleInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleEligibilityScheduleInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleEligibilityScheduleInstance collection, max N pages
func (r *RbacApplicationRoleEligibilityScheduleInstancesCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleEligibilityScheduleInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleEligibilityScheduleInstance collection
func (r *RbacApplicationRoleEligibilityScheduleInstancesCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleEligibilityScheduleInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleEligibilityScheduleInstance collection
func (r *RbacApplicationRoleEligibilityScheduleInstancesCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleEligibilityScheduleInstance) (resObj *UnifiedRoleEligibilityScheduleInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleEligibilityScheduleRequests returns request builder for UnifiedRoleEligibilityScheduleRequestObject collection rcn
func (b *RbacApplicationRequestBuilder) RoleEligibilityScheduleRequests() *RbacApplicationRoleEligibilityScheduleRequestsCollectionRequestBuilder {
	bb := &RbacApplicationRoleEligibilityScheduleRequestsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleEligibilityScheduleRequests"
	return bb
}

// RbacApplicationRoleEligibilityScheduleRequestsCollectionRequestBuilder is request builder for UnifiedRoleEligibilityScheduleRequestObject collection
type RbacApplicationRoleEligibilityScheduleRequestsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleEligibilityScheduleRequestObject collection
func (b *RbacApplicationRoleEligibilityScheduleRequestsCollectionRequestBuilder) Request() *RbacApplicationRoleEligibilityScheduleRequestsCollectionRequest {
	return &RbacApplicationRoleEligibilityScheduleRequestsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleEligibilityScheduleRequestObject item
func (b *RbacApplicationRoleEligibilityScheduleRequestsCollectionRequestBuilder) ID(id string) *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RbacApplicationRoleEligibilityScheduleRequestsCollectionRequest is request for UnifiedRoleEligibilityScheduleRequestObject collection
type RbacApplicationRoleEligibilityScheduleRequestsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleEligibilityScheduleRequestObject collection
func (r *RbacApplicationRoleEligibilityScheduleRequestsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleEligibilityScheduleRequestObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleEligibilityScheduleRequestObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleEligibilityScheduleRequestObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleEligibilityScheduleRequestObject collection, max N pages
func (r *RbacApplicationRoleEligibilityScheduleRequestsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleEligibilityScheduleRequestObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleEligibilityScheduleRequestObject collection
func (r *RbacApplicationRoleEligibilityScheduleRequestsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleEligibilityScheduleRequestObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleEligibilityScheduleRequestObject collection
func (r *RbacApplicationRoleEligibilityScheduleRequestsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleEligibilityScheduleRequestObject) (resObj *UnifiedRoleEligibilityScheduleRequestObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleEligibilitySchedules returns request builder for UnifiedRoleEligibilitySchedule collection rcn
func (b *RbacApplicationRequestBuilder) RoleEligibilitySchedules() *RbacApplicationRoleEligibilitySchedulesCollectionRequestBuilder {
	bb := &RbacApplicationRoleEligibilitySchedulesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleEligibilitySchedules"
	return bb
}

// RbacApplicationRoleEligibilitySchedulesCollectionRequestBuilder is request builder for UnifiedRoleEligibilitySchedule collection
type RbacApplicationRoleEligibilitySchedulesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleEligibilitySchedule collection
func (b *RbacApplicationRoleEligibilitySchedulesCollectionRequestBuilder) Request() *RbacApplicationRoleEligibilitySchedulesCollectionRequest {
	return &RbacApplicationRoleEligibilitySchedulesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleEligibilitySchedule item
func (b *RbacApplicationRoleEligibilitySchedulesCollectionRequestBuilder) ID(id string) *UnifiedRoleEligibilityScheduleRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RbacApplicationRoleEligibilitySchedulesCollectionRequest is request for UnifiedRoleEligibilitySchedule collection
type RbacApplicationRoleEligibilitySchedulesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleEligibilitySchedule collection
func (r *RbacApplicationRoleEligibilitySchedulesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleEligibilitySchedule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleEligibilitySchedule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleEligibilitySchedule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleEligibilitySchedule collection, max N pages
func (r *RbacApplicationRoleEligibilitySchedulesCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleEligibilitySchedule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleEligibilitySchedule collection
func (r *RbacApplicationRoleEligibilitySchedulesCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleEligibilitySchedule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleEligibilitySchedule collection
func (r *RbacApplicationRoleEligibilitySchedulesCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleEligibilitySchedule) (resObj *UnifiedRoleEligibilitySchedule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RbacApplication is navigation property rn
func (b *RbacApplicationRequestBuilder) RbacApplication() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
