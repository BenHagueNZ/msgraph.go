// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// VerifiedDomainRequestBuilder is request builder for VerifiedDomain
type VerifiedDomainRequestBuilder struct{ BaseRequestBuilder }

// Request returns VerifiedDomainRequest
func (b *VerifiedDomainRequestBuilder) Request() *VerifiedDomainRequest {
	return &VerifiedDomainRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VerifiedDomainRequest is request for VerifiedDomain
type VerifiedDomainRequest struct{ BaseRequest }

// Get performs GET request for VerifiedDomain
func (r *VerifiedDomainRequest) Get(ctx context.Context) (resObj *VerifiedDomain, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VerifiedDomain
func (r *VerifiedDomainRequest) Update(ctx context.Context, reqObj *VerifiedDomain) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VerifiedDomain
func (r *VerifiedDomainRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// VerifiedPublisherRequestBuilder is request builder for VerifiedPublisher
type VerifiedPublisherRequestBuilder struct{ BaseRequestBuilder }

// Request returns VerifiedPublisherRequest
func (b *VerifiedPublisherRequestBuilder) Request() *VerifiedPublisherRequest {
	return &VerifiedPublisherRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VerifiedPublisherRequest is request for VerifiedPublisher
type VerifiedPublisherRequest struct{ BaseRequest }

// Get performs GET request for VerifiedPublisher
func (r *VerifiedPublisherRequest) Get(ctx context.Context) (resObj *VerifiedPublisher, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VerifiedPublisher
func (r *VerifiedPublisherRequest) Update(ctx context.Context, reqObj *VerifiedPublisher) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VerifiedPublisher
func (r *VerifiedPublisherRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
