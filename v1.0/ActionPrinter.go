// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// PrinterCollectionCreateRequestParameter undocumented
type PrinterCollectionCreateRequestParameter struct {
	// DisplayName undocumented
	DisplayName *string `json:"displayName,omitempty"`
	// Manufacturer undocumented
	Manufacturer *string `json:"manufacturer,omitempty"`
	// Model undocumented
	Model *string `json:"model,omitempty"`
	// PhysicalDeviceID undocumented
	PhysicalDeviceID *string `json:"physicalDeviceId,omitempty"`
	// HasPhysicalDevice undocumented
	HasPhysicalDevice *bool `json:"hasPhysicalDevice,omitempty"`
	// CertificateSigningRequest undocumented
	CertificateSigningRequest *PrintCertificateSigningRequestObject `json:"certificateSigningRequest,omitempty"`
	// ConnectorID undocumented
	ConnectorID *string `json:"connectorId,omitempty"`
}

// PrinterRestoreFactoryDefaultsRequestParameter undocumented
type PrinterRestoreFactoryDefaultsRequestParameter struct {
}

// Connectors returns request builder for PrintConnector collection
func (b *PrinterRequestBuilder) Connectors() *PrinterConnectorsCollectionRequestBuilder {
	bb := &PrinterConnectorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/connectors"
	return bb
}

// PrinterConnectorsCollectionRequestBuilder is request builder for PrintConnector collection rcn
type PrinterConnectorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintConnector collection
func (b *PrinterConnectorsCollectionRequestBuilder) Request() *PrinterConnectorsCollectionRequest {
	return &PrinterConnectorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintConnector item
func (b *PrinterConnectorsCollectionRequestBuilder) ID(id string) *PrintConnectorRequestBuilder {
	bb := &PrintConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrinterConnectorsCollectionRequest is request for PrintConnector collection
type PrinterConnectorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintConnector collection
func (r *PrinterConnectorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintConnector, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintConnector
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintConnector
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintConnector collection, max N pages
func (r *PrinterConnectorsCollectionRequest) GetN(ctx context.Context, n int) ([]PrintConnector, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintConnector collection
func (r *PrinterConnectorsCollectionRequest) Get(ctx context.Context) ([]PrintConnector, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintConnector collection
func (r *PrinterConnectorsCollectionRequest) Add(ctx context.Context, reqObj *PrintConnector) (resObj *PrintConnector, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Shares returns request builder for PrinterShare collection
func (b *PrinterRequestBuilder) Shares() *PrinterSharesCollectionRequestBuilder {
	bb := &PrinterSharesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/shares"
	return bb
}

// PrinterSharesCollectionRequestBuilder is request builder for PrinterShare collection rcn
type PrinterSharesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrinterShare collection
func (b *PrinterSharesCollectionRequestBuilder) Request() *PrinterSharesCollectionRequest {
	return &PrinterSharesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrinterShare item
func (b *PrinterSharesCollectionRequestBuilder) ID(id string) *PrinterShareRequestBuilder {
	bb := &PrinterShareRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrinterSharesCollectionRequest is request for PrinterShare collection
type PrinterSharesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrinterShare collection
func (r *PrinterSharesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrinterShare, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrinterShare
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrinterShare
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrinterShare collection, max N pages
func (r *PrinterSharesCollectionRequest) GetN(ctx context.Context, n int) ([]PrinterShare, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrinterShare collection
func (r *PrinterSharesCollectionRequest) Get(ctx context.Context) ([]PrinterShare, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrinterShare collection
func (r *PrinterSharesCollectionRequest) Add(ctx context.Context, reqObj *PrinterShare) (resObj *PrinterShare, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TaskTriggers returns request builder for PrintTaskTrigger collection
func (b *PrinterRequestBuilder) TaskTriggers() *PrinterTaskTriggersCollectionRequestBuilder {
	bb := &PrinterTaskTriggersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskTriggers"
	return bb
}

// PrinterTaskTriggersCollectionRequestBuilder is request builder for PrintTaskTrigger collection rcn
type PrinterTaskTriggersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintTaskTrigger collection
func (b *PrinterTaskTriggersCollectionRequestBuilder) Request() *PrinterTaskTriggersCollectionRequest {
	return &PrinterTaskTriggersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintTaskTrigger item
func (b *PrinterTaskTriggersCollectionRequestBuilder) ID(id string) *PrintTaskTriggerRequestBuilder {
	bb := &PrintTaskTriggerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrinterTaskTriggersCollectionRequest is request for PrintTaskTrigger collection
type PrinterTaskTriggersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintTaskTrigger collection
func (r *PrinterTaskTriggersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintTaskTrigger, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintTaskTrigger
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintTaskTrigger
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintTaskTrigger collection, max N pages
func (r *PrinterTaskTriggersCollectionRequest) GetN(ctx context.Context, n int) ([]PrintTaskTrigger, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintTaskTrigger collection
func (r *PrinterTaskTriggersCollectionRequest) Get(ctx context.Context) ([]PrintTaskTrigger, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintTaskTrigger collection
func (r *PrinterTaskTriggersCollectionRequest) Add(ctx context.Context, reqObj *PrintTaskTrigger) (resObj *PrintTaskTrigger, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Jobs returns request builder for PrintJob collection
func (b *PrinterBaseRequestBuilder) Jobs() *PrinterBaseJobsCollectionRequestBuilder {
	bb := &PrinterBaseJobsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/jobs"
	return bb
}

// PrinterBaseJobsCollectionRequestBuilder is request builder for PrintJob collection rcn
type PrinterBaseJobsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintJob collection
func (b *PrinterBaseJobsCollectionRequestBuilder) Request() *PrinterBaseJobsCollectionRequest {
	return &PrinterBaseJobsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintJob item
func (b *PrinterBaseJobsCollectionRequestBuilder) ID(id string) *PrintJobRequestBuilder {
	bb := &PrintJobRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrinterBaseJobsCollectionRequest is request for PrintJob collection
type PrinterBaseJobsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintJob collection
func (r *PrinterBaseJobsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintJob, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintJob
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintJob
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintJob collection, max N pages
func (r *PrinterBaseJobsCollectionRequest) GetN(ctx context.Context, n int) ([]PrintJob, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintJob collection
func (r *PrinterBaseJobsCollectionRequest) Get(ctx context.Context) ([]PrintJob, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintJob collection
func (r *PrinterBaseJobsCollectionRequest) Add(ctx context.Context, reqObj *PrintJob) (resObj *PrintJob, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Printer is navigation property rn
func (b *PrinterCreateOperationRequestBuilder) Printer() *PrinterRequestBuilder {
	bb := &PrinterRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/printer"
	return bb
}

// AllowedGroups returns request builder for Group collection
func (b *PrinterShareRequestBuilder) AllowedGroups() *PrinterShareAllowedGroupsCollectionRequestBuilder {
	bb := &PrinterShareAllowedGroupsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/allowedGroups"
	return bb
}

// PrinterShareAllowedGroupsCollectionRequestBuilder is request builder for Group collection rcn
type PrinterShareAllowedGroupsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Group collection
func (b *PrinterShareAllowedGroupsCollectionRequestBuilder) Request() *PrinterShareAllowedGroupsCollectionRequest {
	return &PrinterShareAllowedGroupsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Group item
func (b *PrinterShareAllowedGroupsCollectionRequestBuilder) ID(id string) *GroupRequestBuilder {
	bb := &GroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrinterShareAllowedGroupsCollectionRequest is request for Group collection
type PrinterShareAllowedGroupsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Group collection
func (r *PrinterShareAllowedGroupsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Group, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Group
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Group
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Group collection, max N pages
func (r *PrinterShareAllowedGroupsCollectionRequest) GetN(ctx context.Context, n int) ([]Group, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Group collection
func (r *PrinterShareAllowedGroupsCollectionRequest) Get(ctx context.Context) ([]Group, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Group collection
func (r *PrinterShareAllowedGroupsCollectionRequest) Add(ctx context.Context, reqObj *Group) (resObj *Group, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AllowedUsers returns request builder for User collection
func (b *PrinterShareRequestBuilder) AllowedUsers() *PrinterShareAllowedUsersCollectionRequestBuilder {
	bb := &PrinterShareAllowedUsersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/allowedUsers"
	return bb
}

// PrinterShareAllowedUsersCollectionRequestBuilder is request builder for User collection rcn
type PrinterShareAllowedUsersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for User collection
func (b *PrinterShareAllowedUsersCollectionRequestBuilder) Request() *PrinterShareAllowedUsersCollectionRequest {
	return &PrinterShareAllowedUsersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for User item
func (b *PrinterShareAllowedUsersCollectionRequestBuilder) ID(id string) *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrinterShareAllowedUsersCollectionRequest is request for User collection
type PrinterShareAllowedUsersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for User collection
func (r *PrinterShareAllowedUsersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]User, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []User
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []User
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for User collection, max N pages
func (r *PrinterShareAllowedUsersCollectionRequest) GetN(ctx context.Context, n int) ([]User, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for User collection
func (r *PrinterShareAllowedUsersCollectionRequest) Get(ctx context.Context) ([]User, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for User collection
func (r *PrinterShareAllowedUsersCollectionRequest) Add(ctx context.Context, reqObj *User) (resObj *User, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Printer is navigation property rn
func (b *PrinterShareRequestBuilder) Printer() *PrinterRequestBuilder {
	bb := &PrinterRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/printer"
	return bb
}

// Entity is navigation property rn
func (b *PrinterBaseRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// PrinterCreateOperation returns request builder for PrinterCreateOperation collection
func (b *PrintOperationsCollectionRequestBuilder) PrinterCreateOperation() *PrintOperationsCollectionPrinterCreateOperationCollectionRequestBuilder {
	bb := &PrintOperationsCollectionPrinterCreateOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// PrintOperationsCollectionPrinterCreateOperationCollectionRequestBuilder is request builder for PrinterCreateOperation collection rcn
type PrintOperationsCollectionPrinterCreateOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrinterCreateOperation collection
func (b *PrintOperationsCollectionPrinterCreateOperationCollectionRequestBuilder) Request() *PrintOperationsCollectionPrinterCreateOperationCollectionRequest {
	return &PrintOperationsCollectionPrinterCreateOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrinterCreateOperation item
func (b *PrintOperationsCollectionPrinterCreateOperationCollectionRequestBuilder) ID(id string) *PrinterCreateOperationRequestBuilder {
	bb := &PrinterCreateOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrintOperationsCollectionPrinterCreateOperationCollectionRequest is request for PrinterCreateOperation collection
type PrintOperationsCollectionPrinterCreateOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrinterCreateOperation collection
func (r *PrintOperationsCollectionPrinterCreateOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrinterCreateOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrinterCreateOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrinterCreateOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrinterCreateOperation collection, max N pages
func (r *PrintOperationsCollectionPrinterCreateOperationCollectionRequest) GetN(ctx context.Context, n int) ([]PrinterCreateOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrinterCreateOperation collection
func (r *PrintOperationsCollectionPrinterCreateOperationCollectionRequest) Get(ctx context.Context) ([]PrinterCreateOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrinterCreateOperation collection
func (r *PrintOperationsCollectionPrinterCreateOperationCollectionRequest) Add(ctx context.Context, reqObj *PrinterCreateOperation) (resObj *PrinterCreateOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
