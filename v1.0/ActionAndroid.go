// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// Apps returns request builder for ManagedMobileApp collection rcn
func (b *AndroidManagedAppProtectionRequestBuilder) Apps() *AndroidManagedAppProtectionAppsCollectionRequestBuilder {
	bb := &AndroidManagedAppProtectionAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/apps"
	return bb
}

// AndroidManagedAppProtectionAppsCollectionRequestBuilder is request builder for ManagedMobileApp collection
type AndroidManagedAppProtectionAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedMobileApp collection
func (b *AndroidManagedAppProtectionAppsCollectionRequestBuilder) Request() *AndroidManagedAppProtectionAppsCollectionRequest {
	return &AndroidManagedAppProtectionAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedMobileApp item
func (b *AndroidManagedAppProtectionAppsCollectionRequestBuilder) ID(id string) *ManagedMobileAppRequestBuilder {
	bb := &ManagedMobileAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidManagedAppProtectionAppsCollectionRequest is request for ManagedMobileApp collection
type AndroidManagedAppProtectionAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedMobileApp collection
func (r *AndroidManagedAppProtectionAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedMobileApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedMobileApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedMobileApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedMobileApp collection, max N pages
func (r *AndroidManagedAppProtectionAppsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedMobileApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedMobileApp collection
func (r *AndroidManagedAppProtectionAppsCollectionRequest) Get(ctx context.Context) ([]ManagedMobileApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedMobileApp collection
func (r *AndroidManagedAppProtectionAppsCollectionRequest) Add(ctx context.Context, reqObj *ManagedMobileApp) (resObj *ManagedMobileApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeploymentSummary is navigation property rn
func (b *AndroidManagedAppProtectionRequestBuilder) DeploymentSummary() *ManagedAppPolicyDeploymentSummaryRequestBuilder {
	bb := &ManagedAppPolicyDeploymentSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deploymentSummary"
	return bb
}

// AndroidCompliancePolicy returns request builder for AndroidCompliancePolicy collection rcn
func (b *DeviceCompliancePolicyRequestBuilder) AndroidCompliancePolicy() *DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/AndroidCompliancePolicy"
	return bb
}

// DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequestBuilder is request builder for AndroidCompliancePolicy collection
type DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidCompliancePolicy collection
func (b *DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequestBuilder) Request() *DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequest {
	return &DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidCompliancePolicy item
func (b *DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequestBuilder) ID(id string) *AndroidCompliancePolicyRequestBuilder {
	bb := &AndroidCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequest is request for AndroidCompliancePolicy collection
type DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidCompliancePolicy collection
func (r *DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidCompliancePolicy collection, max N pages
func (r *DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidCompliancePolicy collection
func (r *DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]AndroidCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidCompliancePolicy collection
func (r *DeviceCompliancePolicyAndroidCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *AndroidCompliancePolicy) (resObj *AndroidCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidCustomConfiguration returns request builder for AndroidCustomConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) AndroidCustomConfiguration() *DeviceConfigurationAndroidCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationAndroidCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/AndroidCustomConfiguration"
	return bb
}

// DeviceConfigurationAndroidCustomConfigurationCollectionRequestBuilder is request builder for AndroidCustomConfiguration collection
type DeviceConfigurationAndroidCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidCustomConfiguration collection
func (b *DeviceConfigurationAndroidCustomConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationAndroidCustomConfigurationCollectionRequest {
	return &DeviceConfigurationAndroidCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidCustomConfiguration item
func (b *DeviceConfigurationAndroidCustomConfigurationCollectionRequestBuilder) ID(id string) *AndroidCustomConfigurationRequestBuilder {
	bb := &AndroidCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationAndroidCustomConfigurationCollectionRequest is request for AndroidCustomConfiguration collection
type DeviceConfigurationAndroidCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidCustomConfiguration collection
func (r *DeviceConfigurationAndroidCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidCustomConfiguration collection, max N pages
func (r *DeviceConfigurationAndroidCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidCustomConfiguration collection
func (r *DeviceConfigurationAndroidCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidCustomConfiguration collection
func (r *DeviceConfigurationAndroidCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidCustomConfiguration) (resObj *AndroidCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidGeneralDeviceConfiguration returns request builder for AndroidGeneralDeviceConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) AndroidGeneralDeviceConfiguration() *DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/AndroidGeneralDeviceConfiguration"
	return bb
}

// DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequestBuilder is request builder for AndroidGeneralDeviceConfiguration collection
type DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidGeneralDeviceConfiguration collection
func (b *DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequest {
	return &DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidGeneralDeviceConfiguration item
func (b *DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *AndroidGeneralDeviceConfigurationRequestBuilder {
	bb := &AndroidGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequest is request for AndroidGeneralDeviceConfiguration collection
type DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidGeneralDeviceConfiguration collection
func (r *DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidGeneralDeviceConfiguration collection, max N pages
func (r *DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidGeneralDeviceConfiguration collection
func (r *DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidGeneralDeviceConfiguration collection
func (r *DeviceConfigurationAndroidGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidGeneralDeviceConfiguration) (resObj *AndroidGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidManagedAppRegistration returns request builder for AndroidManagedAppRegistration collection rcn
func (b *ManagedAppRegistrationRequestBuilder) AndroidManagedAppRegistration() *ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequestBuilder {
	bb := &ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/AndroidManagedAppRegistration"
	return bb
}

// ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequestBuilder is request builder for AndroidManagedAppRegistration collection
type ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidManagedAppRegistration collection
func (b *ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequestBuilder) Request() *ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequest {
	return &ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidManagedAppRegistration item
func (b *ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequestBuilder) ID(id string) *AndroidManagedAppRegistrationRequestBuilder {
	bb := &AndroidManagedAppRegistrationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequest is request for AndroidManagedAppRegistration collection
type ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidManagedAppRegistration collection
func (r *ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidManagedAppRegistration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidManagedAppRegistration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidManagedAppRegistration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidManagedAppRegistration collection, max N pages
func (r *ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidManagedAppRegistration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidManagedAppRegistration collection
func (r *ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequest) Get(ctx context.Context) ([]AndroidManagedAppRegistration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidManagedAppRegistration collection
func (r *ManagedAppRegistrationAndroidManagedAppRegistrationCollectionRequest) Add(ctx context.Context, reqObj *AndroidManagedAppRegistration) (resObj *AndroidManagedAppRegistration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidStoreApp returns request builder for AndroidStoreApp collection rcn
func (b *MobileAppRequestBuilder) AndroidStoreApp() *MobileAppAndroidStoreAppCollectionRequestBuilder {
	bb := &MobileAppAndroidStoreAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/AndroidStoreApp"
	return bb
}

// MobileAppAndroidStoreAppCollectionRequestBuilder is request builder for AndroidStoreApp collection
type MobileAppAndroidStoreAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidStoreApp collection
func (b *MobileAppAndroidStoreAppCollectionRequestBuilder) Request() *MobileAppAndroidStoreAppCollectionRequest {
	return &MobileAppAndroidStoreAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidStoreApp item
func (b *MobileAppAndroidStoreAppCollectionRequestBuilder) ID(id string) *AndroidStoreAppRequestBuilder {
	bb := &AndroidStoreAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MobileAppAndroidStoreAppCollectionRequest is request for AndroidStoreApp collection
type MobileAppAndroidStoreAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidStoreApp collection
func (r *MobileAppAndroidStoreAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidStoreApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidStoreApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidStoreApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidStoreApp collection, max N pages
func (r *MobileAppAndroidStoreAppCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidStoreApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidStoreApp collection
func (r *MobileAppAndroidStoreAppCollectionRequest) Get(ctx context.Context) ([]AndroidStoreApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidStoreApp collection
func (r *MobileAppAndroidStoreAppCollectionRequest) Add(ctx context.Context, reqObj *AndroidStoreApp) (resObj *AndroidStoreApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileCompliancePolicy returns request builder for AndroidWorkProfileCompliancePolicy collection rcn
func (b *DeviceCompliancePolicyRequestBuilder) AndroidWorkProfileCompliancePolicy() *DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/AndroidWorkProfileCompliancePolicy"
	return bb
}

// DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequestBuilder is request builder for AndroidWorkProfileCompliancePolicy collection
type DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileCompliancePolicy collection
func (b *DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequestBuilder) Request() *DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequest {
	return &DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileCompliancePolicy item
func (b *DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequestBuilder) ID(id string) *AndroidWorkProfileCompliancePolicyRequestBuilder {
	bb := &AndroidWorkProfileCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequest is request for AndroidWorkProfileCompliancePolicy collection
type DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileCompliancePolicy collection
func (r *DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileCompliancePolicy collection, max N pages
func (r *DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileCompliancePolicy collection
func (r *DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileCompliancePolicy collection
func (r *DeviceCompliancePolicyAndroidWorkProfileCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileCompliancePolicy) (resObj *AndroidWorkProfileCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileCustomConfiguration returns request builder for AndroidWorkProfileCustomConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) AndroidWorkProfileCustomConfiguration() *DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/AndroidWorkProfileCustomConfiguration"
	return bb
}

// DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequestBuilder is request builder for AndroidWorkProfileCustomConfiguration collection
type DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileCustomConfiguration collection
func (b *DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequest {
	return &DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileCustomConfiguration item
func (b *DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequestBuilder) ID(id string) *AndroidWorkProfileCustomConfigurationRequestBuilder {
	bb := &AndroidWorkProfileCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequest is request for AndroidWorkProfileCustomConfiguration collection
type DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileCustomConfiguration collection
func (r *DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileCustomConfiguration collection, max N pages
func (r *DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileCustomConfiguration collection
func (r *DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileCustomConfiguration collection
func (r *DeviceConfigurationAndroidWorkProfileCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileCustomConfiguration) (resObj *AndroidWorkProfileCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileGeneralDeviceConfiguration returns request builder for AndroidWorkProfileGeneralDeviceConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) AndroidWorkProfileGeneralDeviceConfiguration() *DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/AndroidWorkProfileGeneralDeviceConfiguration"
	return bb
}

// DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder is request builder for AndroidWorkProfileGeneralDeviceConfiguration collection
type DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileGeneralDeviceConfiguration collection
func (b *DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest {
	return &DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileGeneralDeviceConfiguration item
func (b *DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *AndroidWorkProfileGeneralDeviceConfigurationRequestBuilder {
	bb := &AndroidWorkProfileGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest is request for AndroidWorkProfileGeneralDeviceConfiguration collection
type DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileGeneralDeviceConfiguration collection
func (r *DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileGeneralDeviceConfiguration collection, max N pages
func (r *DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileGeneralDeviceConfiguration collection
func (r *DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileGeneralDeviceConfiguration collection
func (r *DeviceConfigurationAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileGeneralDeviceConfiguration) (resObj *AndroidWorkProfileGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
