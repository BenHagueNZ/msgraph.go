// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// Apps returns request builder for ManagedMobileApp collection
func (b *AndroidManagedAppProtectionRequestBuilder) Apps() *AndroidManagedAppProtectionAppsCollectionRequestBuilder {
	bb := &AndroidManagedAppProtectionAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/apps"
	return bb
}

// AndroidManagedAppProtectionAppsCollectionRequestBuilder is request builder for ManagedMobileApp collection rcn
type AndroidManagedAppProtectionAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedMobileApp collection
func (b *AndroidManagedAppProtectionAppsCollectionRequestBuilder) Request() *AndroidManagedAppProtectionAppsCollectionRequest {
	return &AndroidManagedAppProtectionAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedMobileApp item
func (b *AndroidManagedAppProtectionAppsCollectionRequestBuilder) ID(id string) *ManagedMobileAppRequestBuilder {
	bb := &ManagedMobileAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidManagedAppProtectionAppsCollectionRequest is request for ManagedMobileApp collection
type AndroidManagedAppProtectionAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedMobileApp collection
func (r *AndroidManagedAppProtectionAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedMobileApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedMobileApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedMobileApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedMobileApp collection, max N pages
func (r *AndroidManagedAppProtectionAppsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedMobileApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedMobileApp collection
func (r *AndroidManagedAppProtectionAppsCollectionRequest) Get(ctx context.Context) ([]ManagedMobileApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedMobileApp collection
func (r *AndroidManagedAppProtectionAppsCollectionRequest) Add(ctx context.Context, reqObj *ManagedMobileApp) (resObj *ManagedMobileApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeploymentSummary is navigation property rn
func (b *AndroidManagedAppProtectionRequestBuilder) DeploymentSummary() *ManagedAppPolicyDeploymentSummaryRequestBuilder {
	bb := &ManagedAppPolicyDeploymentSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deploymentSummary"
	return bb
}

// AndroidCompliancePolicy returns request builder for AndroidCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) AndroidCompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder is request builder for AndroidCompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidCompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder) ID(id string) *AndroidCompliancePolicyRequestBuilder {
	bb := &AndroidCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest is request for AndroidCompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidCompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]AndroidCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *AndroidCompliancePolicy) (resObj *AndroidCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidCustomConfiguration returns request builder for AndroidCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidCustomConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder is request builder for AndroidCustomConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidCustomConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder) ID(id string) *AndroidCustomConfigurationRequestBuilder {
	bb := &AndroidCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest is request for AndroidCustomConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidCustomConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidCustomConfiguration) (resObj *AndroidCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidGeneralDeviceConfiguration returns request builder for AndroidGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidGeneralDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder is request builder for AndroidGeneralDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidGeneralDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *AndroidGeneralDeviceConfigurationRequestBuilder {
	bb := &AndroidGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest is request for AndroidGeneralDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidGeneralDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidGeneralDeviceConfiguration) (resObj *AndroidGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidLobApp returns request builder for AndroidLobApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) AndroidLobApp() *DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequestBuilder is request builder for AndroidLobApp collection rcn
type DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidLobApp collection
func (b *DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidLobApp item
func (b *DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequestBuilder) ID(id string) *AndroidLobAppRequestBuilder {
	bb := &AndroidLobAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequest is request for AndroidLobApp collection
type DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidLobApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidLobApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidLobApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidLobApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidLobApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidLobApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidLobApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequest) Get(ctx context.Context) ([]AndroidLobApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidLobApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidLobAppCollectionRequest) Add(ctx context.Context, reqObj *AndroidLobApp) (resObj *AndroidLobApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidManagedAppRegistration returns request builder for AndroidManagedAppRegistration collection
func (b *DeviceAppManagementManagedAppRegistrationsCollectionRequestBuilder) AndroidManagedAppRegistration() *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder is request builder for AndroidManagedAppRegistration collection rcn
type DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidManagedAppRegistration collection
func (b *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest {
	return &DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidManagedAppRegistration item
func (b *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder) ID(id string) *AndroidManagedAppRegistrationRequestBuilder {
	bb := &AndroidManagedAppRegistrationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest is request for AndroidManagedAppRegistration collection
type DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidManagedAppRegistration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidManagedAppRegistration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidManagedAppRegistration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidManagedAppRegistration collection, max N pages
func (r *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidManagedAppRegistration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest) Get(ctx context.Context) ([]AndroidManagedAppRegistration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest) Add(ctx context.Context, reqObj *AndroidManagedAppRegistration) (resObj *AndroidManagedAppRegistration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidStoreApp returns request builder for AndroidStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) AndroidStoreApp() *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder is request builder for AndroidStoreApp collection rcn
type DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidStoreApp item
func (b *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder) ID(id string) *AndroidStoreAppRequestBuilder {
	bb := &AndroidStoreAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest is request for AndroidStoreApp collection
type DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidStoreApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidStoreApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidStoreApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidStoreApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidStoreApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest) Get(ctx context.Context) ([]AndroidStoreApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest) Add(ctx context.Context, reqObj *AndroidStoreApp) (resObj *AndroidStoreApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileCompliancePolicy returns request builder for AndroidWorkProfileCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) AndroidWorkProfileCompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder is request builder for AndroidWorkProfileCompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileCompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder) ID(id string) *AndroidWorkProfileCompliancePolicyRequestBuilder {
	bb := &AndroidWorkProfileCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest is request for AndroidWorkProfileCompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileCompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileCompliancePolicy) (resObj *AndroidWorkProfileCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileCustomConfiguration returns request builder for AndroidWorkProfileCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidWorkProfileCustomConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder is request builder for AndroidWorkProfileCustomConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileCustomConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder) ID(id string) *AndroidWorkProfileCustomConfigurationRequestBuilder {
	bb := &AndroidWorkProfileCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest is request for AndroidWorkProfileCustomConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileCustomConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileCustomConfiguration) (resObj *AndroidWorkProfileCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileGeneralDeviceConfiguration returns request builder for AndroidWorkProfileGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidWorkProfileGeneralDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder is request builder for AndroidWorkProfileGeneralDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileGeneralDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *AndroidWorkProfileGeneralDeviceConfigurationRequestBuilder {
	bb := &AndroidWorkProfileGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest is request for AndroidWorkProfileGeneralDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileGeneralDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileGeneralDeviceConfiguration) (resObj *AndroidWorkProfileGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
