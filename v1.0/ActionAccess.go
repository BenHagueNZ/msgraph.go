// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// AccessPackageGetApplicablePolicyRequirementsRequestParameter undocumented
type AccessPackageGetApplicablePolicyRequirementsRequestParameter struct {
}

// AccessPackageAssignmentReprocessRequestParameter undocumented
type AccessPackageAssignmentReprocessRequestParameter struct {
}

// AccessPackageAssignmentRequestObjectCancelRequestParameter undocumented
type AccessPackageAssignmentRequestObjectCancelRequestParameter struct {
}

// AccessPackageAssignmentRequestObjectReprocessRequestParameter undocumented
type AccessPackageAssignmentRequestObjectReprocessRequestParameter struct {
}

// AccessReviewHistoryInstanceGenerateDownloadURIRequestParameter undocumented
type AccessReviewHistoryInstanceGenerateDownloadURIRequestParameter struct {
}

// AccessReviewInstanceAcceptRecommendationsRequestParameter undocumented
type AccessReviewInstanceAcceptRecommendationsRequestParameter struct {
}

// AccessReviewInstanceApplyDecisionsRequestParameter undocumented
type AccessReviewInstanceApplyDecisionsRequestParameter struct {
}

// AccessReviewInstanceBatchRecordDecisionsRequestParameter undocumented
type AccessReviewInstanceBatchRecordDecisionsRequestParameter struct {
	// Decision undocumented
	Decision *string `json:"decision,omitempty"`
	// Justification undocumented
	Justification *string `json:"justification,omitempty"`
	// PrincipalID undocumented
	PrincipalID *string `json:"principalId,omitempty"`
	// ResourceID undocumented
	ResourceID *string `json:"resourceId,omitempty"`
}

// AccessReviewInstanceResetDecisionsRequestParameter undocumented
type AccessReviewInstanceResetDecisionsRequestParameter struct {
}

// AccessReviewInstanceSendReminderRequestParameter undocumented
type AccessReviewInstanceSendReminderRequestParameter struct {
}

// AccessReviewInstanceStopRequestParameter undocumented
type AccessReviewInstanceStopRequestParameter struct {
}

// AccessReviewScheduleDefinitionStopRequestParameter undocumented
type AccessReviewScheduleDefinitionStopRequestParameter struct {
}

// AccessReviewStageStopRequestParameter undocumented
type AccessReviewStageStopRequestParameter struct {
}

// AccessPackagesIncompatibleWith returns request builder for AccessPackage collection
func (b *AccessPackageRequestBuilder) AccessPackagesIncompatibleWith() *AccessPackageAccessPackagesIncompatibleWithCollectionRequestBuilder {
	bb := &AccessPackageAccessPackagesIncompatibleWithCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/accessPackagesIncompatibleWith"
	return bb
}

// AccessPackageAccessPackagesIncompatibleWithCollectionRequestBuilder is request builder for AccessPackage collection
type AccessPackageAccessPackagesIncompatibleWithCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessPackage collection
func (b *AccessPackageAccessPackagesIncompatibleWithCollectionRequestBuilder) Request() *AccessPackageAccessPackagesIncompatibleWithCollectionRequest {
	return &AccessPackageAccessPackagesIncompatibleWithCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessPackage item
func (b *AccessPackageAccessPackagesIncompatibleWithCollectionRequestBuilder) ID(id string) *AccessPackageRequestBuilder {
	bb := &AccessPackageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageAccessPackagesIncompatibleWithCollectionRequest is request for AccessPackage collection
type AccessPackageAccessPackagesIncompatibleWithCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessPackage collection
func (r *AccessPackageAccessPackagesIncompatibleWithCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessPackage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessPackage
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessPackage
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessPackage collection, max N pages
func (r *AccessPackageAccessPackagesIncompatibleWithCollectionRequest) GetN(ctx context.Context, n int) ([]AccessPackage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessPackage collection
func (r *AccessPackageAccessPackagesIncompatibleWithCollectionRequest) Get(ctx context.Context) ([]AccessPackage, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessPackage collection
func (r *AccessPackageAccessPackagesIncompatibleWithCollectionRequest) Add(ctx context.Context, reqObj *AccessPackage) (resObj *AccessPackage, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AssignmentPolicies returns request builder for AccessPackageAssignmentPolicy collection
func (b *AccessPackageRequestBuilder) AssignmentPolicies() *AccessPackageAssignmentPoliciesCollectionRequestBuilder {
	bb := &AccessPackageAssignmentPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignmentPolicies"
	return bb
}

// AccessPackageAssignmentPoliciesCollectionRequestBuilder is request builder for AccessPackageAssignmentPolicy collection
type AccessPackageAssignmentPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessPackageAssignmentPolicy collection
func (b *AccessPackageAssignmentPoliciesCollectionRequestBuilder) Request() *AccessPackageAssignmentPoliciesCollectionRequest {
	return &AccessPackageAssignmentPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessPackageAssignmentPolicy item
func (b *AccessPackageAssignmentPoliciesCollectionRequestBuilder) ID(id string) *AccessPackageAssignmentPolicyRequestBuilder {
	bb := &AccessPackageAssignmentPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageAssignmentPoliciesCollectionRequest is request for AccessPackageAssignmentPolicy collection
type AccessPackageAssignmentPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessPackageAssignmentPolicy collection
func (r *AccessPackageAssignmentPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessPackageAssignmentPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessPackageAssignmentPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessPackageAssignmentPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessPackageAssignmentPolicy collection, max N pages
func (r *AccessPackageAssignmentPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]AccessPackageAssignmentPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessPackageAssignmentPolicy collection
func (r *AccessPackageAssignmentPoliciesCollectionRequest) Get(ctx context.Context) ([]AccessPackageAssignmentPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessPackageAssignmentPolicy collection
func (r *AccessPackageAssignmentPoliciesCollectionRequest) Add(ctx context.Context, reqObj *AccessPackageAssignmentPolicy) (resObj *AccessPackageAssignmentPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Catalog is navigation property rn
func (b *AccessPackageRequestBuilder) Catalog() *AccessPackageCatalogRequestBuilder {
	bb := &AccessPackageCatalogRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/catalog"
	return bb
}

// IncompatibleAccessPackages returns request builder for AccessPackage collection
func (b *AccessPackageRequestBuilder) IncompatibleAccessPackages() *AccessPackageIncompatibleAccessPackagesCollectionRequestBuilder {
	bb := &AccessPackageIncompatibleAccessPackagesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/incompatibleAccessPackages"
	return bb
}

// AccessPackageIncompatibleAccessPackagesCollectionRequestBuilder is request builder for AccessPackage collection
type AccessPackageIncompatibleAccessPackagesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessPackage collection
func (b *AccessPackageIncompatibleAccessPackagesCollectionRequestBuilder) Request() *AccessPackageIncompatibleAccessPackagesCollectionRequest {
	return &AccessPackageIncompatibleAccessPackagesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessPackage item
func (b *AccessPackageIncompatibleAccessPackagesCollectionRequestBuilder) ID(id string) *AccessPackageRequestBuilder {
	bb := &AccessPackageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageIncompatibleAccessPackagesCollectionRequest is request for AccessPackage collection
type AccessPackageIncompatibleAccessPackagesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessPackage collection
func (r *AccessPackageIncompatibleAccessPackagesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessPackage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessPackage
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessPackage
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessPackage collection, max N pages
func (r *AccessPackageIncompatibleAccessPackagesCollectionRequest) GetN(ctx context.Context, n int) ([]AccessPackage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessPackage collection
func (r *AccessPackageIncompatibleAccessPackagesCollectionRequest) Get(ctx context.Context) ([]AccessPackage, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessPackage collection
func (r *AccessPackageIncompatibleAccessPackagesCollectionRequest) Add(ctx context.Context, reqObj *AccessPackage) (resObj *AccessPackage, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IncompatibleGroups returns request builder for Group collection
func (b *AccessPackageRequestBuilder) IncompatibleGroups() *AccessPackageIncompatibleGroupsCollectionRequestBuilder {
	bb := &AccessPackageIncompatibleGroupsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/incompatibleGroups"
	return bb
}

// AccessPackageIncompatibleGroupsCollectionRequestBuilder is request builder for Group collection
type AccessPackageIncompatibleGroupsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Group collection
func (b *AccessPackageIncompatibleGroupsCollectionRequestBuilder) Request() *AccessPackageIncompatibleGroupsCollectionRequest {
	return &AccessPackageIncompatibleGroupsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Group item
func (b *AccessPackageIncompatibleGroupsCollectionRequestBuilder) ID(id string) *GroupRequestBuilder {
	bb := &GroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageIncompatibleGroupsCollectionRequest is request for Group collection
type AccessPackageIncompatibleGroupsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Group collection
func (r *AccessPackageIncompatibleGroupsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Group, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Group
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Group
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Group collection, max N pages
func (r *AccessPackageIncompatibleGroupsCollectionRequest) GetN(ctx context.Context, n int) ([]Group, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Group collection
func (r *AccessPackageIncompatibleGroupsCollectionRequest) Get(ctx context.Context) ([]Group, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Group collection
func (r *AccessPackageIncompatibleGroupsCollectionRequest) Add(ctx context.Context, reqObj *Group) (resObj *Group, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AnsweredQuestion is navigation property rn
func (b *AccessPackageAnswerRequestBuilder) AnsweredQuestion() *AccessPackageQuestionRequestBuilder {
	bb := &AccessPackageQuestionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/answeredQuestion"
	return bb
}

// AccessPackage is navigation property rn
func (b *AccessPackageAssignmentRequestBuilder) AccessPackage() *AccessPackageRequestBuilder {
	bb := &AccessPackageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/accessPackage"
	return bb
}

// AssignmentPolicy is navigation property rn
func (b *AccessPackageAssignmentRequestBuilder) AssignmentPolicy() *AccessPackageAssignmentPolicyRequestBuilder {
	bb := &AccessPackageAssignmentPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignmentPolicy"
	return bb
}

// Target is navigation property rn
func (b *AccessPackageAssignmentRequestBuilder) Target() *AccessPackageSubjectRequestBuilder {
	bb := &AccessPackageSubjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/target"
	return bb
}

// AccessPackage is navigation property rn
func (b *AccessPackageAssignmentPolicyRequestBuilder) AccessPackage() *AccessPackageRequestBuilder {
	bb := &AccessPackageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/accessPackage"
	return bb
}

// Catalog is navigation property rn
func (b *AccessPackageAssignmentPolicyRequestBuilder) Catalog() *AccessPackageCatalogRequestBuilder {
	bb := &AccessPackageCatalogRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/catalog"
	return bb
}

// Questions returns request builder for AccessPackageQuestion collection
func (b *AccessPackageAssignmentPolicyRequestBuilder) Questions() *AccessPackageAssignmentPolicyQuestionsCollectionRequestBuilder {
	bb := &AccessPackageAssignmentPolicyQuestionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/questions"
	return bb
}

// AccessPackageAssignmentPolicyQuestionsCollectionRequestBuilder is request builder for AccessPackageQuestion collection
type AccessPackageAssignmentPolicyQuestionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessPackageQuestion collection
func (b *AccessPackageAssignmentPolicyQuestionsCollectionRequestBuilder) Request() *AccessPackageAssignmentPolicyQuestionsCollectionRequest {
	return &AccessPackageAssignmentPolicyQuestionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessPackageQuestion item
func (b *AccessPackageAssignmentPolicyQuestionsCollectionRequestBuilder) ID(id string) *AccessPackageQuestionRequestBuilder {
	bb := &AccessPackageQuestionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageAssignmentPolicyQuestionsCollectionRequest is request for AccessPackageQuestion collection
type AccessPackageAssignmentPolicyQuestionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessPackageQuestion collection
func (r *AccessPackageAssignmentPolicyQuestionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessPackageQuestion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessPackageQuestion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessPackageQuestion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessPackageQuestion collection, max N pages
func (r *AccessPackageAssignmentPolicyQuestionsCollectionRequest) GetN(ctx context.Context, n int) ([]AccessPackageQuestion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessPackageQuestion collection
func (r *AccessPackageAssignmentPolicyQuestionsCollectionRequest) Get(ctx context.Context) ([]AccessPackageQuestion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessPackageQuestion collection
func (r *AccessPackageAssignmentPolicyQuestionsCollectionRequest) Add(ctx context.Context, reqObj *AccessPackageQuestion) (resObj *AccessPackageQuestion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AccessPackage is navigation property rn
func (b *AccessPackageAssignmentRequestObjectRequestBuilder) AccessPackage() *AccessPackageRequestBuilder {
	bb := &AccessPackageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/accessPackage"
	return bb
}

// Assignment is navigation property rn
func (b *AccessPackageAssignmentRequestObjectRequestBuilder) Assignment() *AccessPackageAssignmentRequestBuilder {
	bb := &AccessPackageAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignment"
	return bb
}

// Requestor is navigation property rn
func (b *AccessPackageAssignmentRequestObjectRequestBuilder) Requestor() *AccessPackageSubjectRequestBuilder {
	bb := &AccessPackageSubjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/requestor"
	return bb
}

// Questions returns request builder for AccessPackageQuestion collection
func (b *AccessPackageAssignmentRequestRequirementsRequestBuilder) Questions() *AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequestBuilder {
	bb := &AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/questions"
	return bb
}

// AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequestBuilder is request builder for AccessPackageQuestion collection
type AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessPackageQuestion collection
func (b *AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequestBuilder) Request() *AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequest {
	return &AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessPackageQuestion item
func (b *AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequestBuilder) ID(id string) *AccessPackageQuestionRequestBuilder {
	bb := &AccessPackageQuestionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequest is request for AccessPackageQuestion collection
type AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessPackageQuestion collection
func (r *AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessPackageQuestion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessPackageQuestion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessPackageQuestion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessPackageQuestion collection, max N pages
func (r *AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequest) GetN(ctx context.Context, n int) ([]AccessPackageQuestion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessPackageQuestion collection
func (r *AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequest) Get(ctx context.Context) ([]AccessPackageQuestion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessPackageQuestion collection
func (r *AccessPackageAssignmentRequestRequirementsQuestionsCollectionRequest) Add(ctx context.Context, reqObj *AccessPackageQuestion) (resObj *AccessPackageQuestion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AccessPackages returns request builder for AccessPackage collection
func (b *AccessPackageCatalogRequestBuilder) AccessPackages() *AccessPackageCatalogAccessPackagesCollectionRequestBuilder {
	bb := &AccessPackageCatalogAccessPackagesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/accessPackages"
	return bb
}

// AccessPackageCatalogAccessPackagesCollectionRequestBuilder is request builder for AccessPackage collection
type AccessPackageCatalogAccessPackagesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessPackage collection
func (b *AccessPackageCatalogAccessPackagesCollectionRequestBuilder) Request() *AccessPackageCatalogAccessPackagesCollectionRequest {
	return &AccessPackageCatalogAccessPackagesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessPackage item
func (b *AccessPackageCatalogAccessPackagesCollectionRequestBuilder) ID(id string) *AccessPackageRequestBuilder {
	bb := &AccessPackageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageCatalogAccessPackagesCollectionRequest is request for AccessPackage collection
type AccessPackageCatalogAccessPackagesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessPackage collection
func (r *AccessPackageCatalogAccessPackagesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessPackage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessPackage
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessPackage
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessPackage collection, max N pages
func (r *AccessPackageCatalogAccessPackagesCollectionRequest) GetN(ctx context.Context, n int) ([]AccessPackage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessPackage collection
func (r *AccessPackageCatalogAccessPackagesCollectionRequest) Get(ctx context.Context) ([]AccessPackage, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessPackage collection
func (r *AccessPackageCatalogAccessPackagesCollectionRequest) Add(ctx context.Context, reqObj *AccessPackage) (resObj *AccessPackage, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ConnectedOrganization is navigation property rn
func (b *AccessPackageSubjectRequestBuilder) ConnectedOrganization() *ConnectedOrganizationRequestBuilder {
	bb := &ConnectedOrganizationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/connectedOrganization"
	return bb
}

// Instances returns request builder for AccessReviewHistoryInstance collection
func (b *AccessReviewHistoryDefinitionRequestBuilder) Instances() *AccessReviewHistoryDefinitionInstancesCollectionRequestBuilder {
	bb := &AccessReviewHistoryDefinitionInstancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/instances"
	return bb
}

// AccessReviewHistoryDefinitionInstancesCollectionRequestBuilder is request builder for AccessReviewHistoryInstance collection
type AccessReviewHistoryDefinitionInstancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewHistoryInstance collection
func (b *AccessReviewHistoryDefinitionInstancesCollectionRequestBuilder) Request() *AccessReviewHistoryDefinitionInstancesCollectionRequest {
	return &AccessReviewHistoryDefinitionInstancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewHistoryInstance item
func (b *AccessReviewHistoryDefinitionInstancesCollectionRequestBuilder) ID(id string) *AccessReviewHistoryInstanceRequestBuilder {
	bb := &AccessReviewHistoryInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessReviewHistoryDefinitionInstancesCollectionRequest is request for AccessReviewHistoryInstance collection
type AccessReviewHistoryDefinitionInstancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewHistoryInstance collection
func (r *AccessReviewHistoryDefinitionInstancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessReviewHistoryInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewHistoryInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewHistoryInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessReviewHistoryInstance collection, max N pages
func (r *AccessReviewHistoryDefinitionInstancesCollectionRequest) GetN(ctx context.Context, n int) ([]AccessReviewHistoryInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessReviewHistoryInstance collection
func (r *AccessReviewHistoryDefinitionInstancesCollectionRequest) Get(ctx context.Context) ([]AccessReviewHistoryInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessReviewHistoryInstance collection
func (r *AccessReviewHistoryDefinitionInstancesCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewHistoryInstance) (resObj *AccessReviewHistoryInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ContactedReviewers returns request builder for AccessReviewReviewer collection
func (b *AccessReviewInstanceRequestBuilder) ContactedReviewers() *AccessReviewInstanceContactedReviewersCollectionRequestBuilder {
	bb := &AccessReviewInstanceContactedReviewersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/contactedReviewers"
	return bb
}

// AccessReviewInstanceContactedReviewersCollectionRequestBuilder is request builder for AccessReviewReviewer collection
type AccessReviewInstanceContactedReviewersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewReviewer collection
func (b *AccessReviewInstanceContactedReviewersCollectionRequestBuilder) Request() *AccessReviewInstanceContactedReviewersCollectionRequest {
	return &AccessReviewInstanceContactedReviewersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewReviewer item
func (b *AccessReviewInstanceContactedReviewersCollectionRequestBuilder) ID(id string) *AccessReviewReviewerRequestBuilder {
	bb := &AccessReviewReviewerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessReviewInstanceContactedReviewersCollectionRequest is request for AccessReviewReviewer collection
type AccessReviewInstanceContactedReviewersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewReviewer collection
func (r *AccessReviewInstanceContactedReviewersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessReviewReviewer, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewReviewer
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewReviewer
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessReviewReviewer collection, max N pages
func (r *AccessReviewInstanceContactedReviewersCollectionRequest) GetN(ctx context.Context, n int) ([]AccessReviewReviewer, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessReviewReviewer collection
func (r *AccessReviewInstanceContactedReviewersCollectionRequest) Get(ctx context.Context) ([]AccessReviewReviewer, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessReviewReviewer collection
func (r *AccessReviewInstanceContactedReviewersCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewReviewer) (resObj *AccessReviewReviewer, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Decisions returns request builder for AccessReviewInstanceDecisionItem collection
func (b *AccessReviewInstanceRequestBuilder) Decisions() *AccessReviewInstanceDecisionsCollectionRequestBuilder {
	bb := &AccessReviewInstanceDecisionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/decisions"
	return bb
}

// AccessReviewInstanceDecisionsCollectionRequestBuilder is request builder for AccessReviewInstanceDecisionItem collection
type AccessReviewInstanceDecisionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewInstanceDecisionItem collection
func (b *AccessReviewInstanceDecisionsCollectionRequestBuilder) Request() *AccessReviewInstanceDecisionsCollectionRequest {
	return &AccessReviewInstanceDecisionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewInstanceDecisionItem item
func (b *AccessReviewInstanceDecisionsCollectionRequestBuilder) ID(id string) *AccessReviewInstanceDecisionItemRequestBuilder {
	bb := &AccessReviewInstanceDecisionItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessReviewInstanceDecisionsCollectionRequest is request for AccessReviewInstanceDecisionItem collection
type AccessReviewInstanceDecisionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewInstanceDecisionItem collection
func (r *AccessReviewInstanceDecisionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessReviewInstanceDecisionItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewInstanceDecisionItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewInstanceDecisionItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessReviewInstanceDecisionItem collection, max N pages
func (r *AccessReviewInstanceDecisionsCollectionRequest) GetN(ctx context.Context, n int) ([]AccessReviewInstanceDecisionItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessReviewInstanceDecisionItem collection
func (r *AccessReviewInstanceDecisionsCollectionRequest) Get(ctx context.Context) ([]AccessReviewInstanceDecisionItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessReviewInstanceDecisionItem collection
func (r *AccessReviewInstanceDecisionsCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewInstanceDecisionItem) (resObj *AccessReviewInstanceDecisionItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Stages returns request builder for AccessReviewStage collection
func (b *AccessReviewInstanceRequestBuilder) Stages() *AccessReviewInstanceStagesCollectionRequestBuilder {
	bb := &AccessReviewInstanceStagesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/stages"
	return bb
}

// AccessReviewInstanceStagesCollectionRequestBuilder is request builder for AccessReviewStage collection
type AccessReviewInstanceStagesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewStage collection
func (b *AccessReviewInstanceStagesCollectionRequestBuilder) Request() *AccessReviewInstanceStagesCollectionRequest {
	return &AccessReviewInstanceStagesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewStage item
func (b *AccessReviewInstanceStagesCollectionRequestBuilder) ID(id string) *AccessReviewStageRequestBuilder {
	bb := &AccessReviewStageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessReviewInstanceStagesCollectionRequest is request for AccessReviewStage collection
type AccessReviewInstanceStagesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewStage collection
func (r *AccessReviewInstanceStagesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessReviewStage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewStage
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewStage
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessReviewStage collection, max N pages
func (r *AccessReviewInstanceStagesCollectionRequest) GetN(ctx context.Context, n int) ([]AccessReviewStage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessReviewStage collection
func (r *AccessReviewInstanceStagesCollectionRequest) Get(ctx context.Context) ([]AccessReviewStage, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessReviewStage collection
func (r *AccessReviewInstanceStagesCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewStage) (resObj *AccessReviewStage, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Instances returns request builder for AccessReviewInstance collection
func (b *AccessReviewScheduleDefinitionRequestBuilder) Instances() *AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder {
	bb := &AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/instances"
	return bb
}

// AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder is request builder for AccessReviewInstance collection
type AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewInstance collection
func (b *AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder) Request() *AccessReviewScheduleDefinitionInstancesCollectionRequest {
	return &AccessReviewScheduleDefinitionInstancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewInstance item
func (b *AccessReviewScheduleDefinitionInstancesCollectionRequestBuilder) ID(id string) *AccessReviewInstanceRequestBuilder {
	bb := &AccessReviewInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessReviewScheduleDefinitionInstancesCollectionRequest is request for AccessReviewInstance collection
type AccessReviewScheduleDefinitionInstancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewInstance collection
func (r *AccessReviewScheduleDefinitionInstancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessReviewInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessReviewInstance collection, max N pages
func (r *AccessReviewScheduleDefinitionInstancesCollectionRequest) GetN(ctx context.Context, n int) ([]AccessReviewInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessReviewInstance collection
func (r *AccessReviewScheduleDefinitionInstancesCollectionRequest) Get(ctx context.Context) ([]AccessReviewInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessReviewInstance collection
func (r *AccessReviewScheduleDefinitionInstancesCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewInstance) (resObj *AccessReviewInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Definitions returns request builder for AccessReviewScheduleDefinition collection
func (b *AccessReviewSetRequestBuilder) Definitions() *AccessReviewSetDefinitionsCollectionRequestBuilder {
	bb := &AccessReviewSetDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/definitions"
	return bb
}

// AccessReviewSetDefinitionsCollectionRequestBuilder is request builder for AccessReviewScheduleDefinition collection
type AccessReviewSetDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewScheduleDefinition collection
func (b *AccessReviewSetDefinitionsCollectionRequestBuilder) Request() *AccessReviewSetDefinitionsCollectionRequest {
	return &AccessReviewSetDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewScheduleDefinition item
func (b *AccessReviewSetDefinitionsCollectionRequestBuilder) ID(id string) *AccessReviewScheduleDefinitionRequestBuilder {
	bb := &AccessReviewScheduleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessReviewSetDefinitionsCollectionRequest is request for AccessReviewScheduleDefinition collection
type AccessReviewSetDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewScheduleDefinition collection
func (r *AccessReviewSetDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessReviewScheduleDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewScheduleDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewScheduleDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessReviewScheduleDefinition collection, max N pages
func (r *AccessReviewSetDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]AccessReviewScheduleDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessReviewScheduleDefinition collection
func (r *AccessReviewSetDefinitionsCollectionRequest) Get(ctx context.Context) ([]AccessReviewScheduleDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessReviewScheduleDefinition collection
func (r *AccessReviewSetDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewScheduleDefinition) (resObj *AccessReviewScheduleDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// HistoryDefinitions returns request builder for AccessReviewHistoryDefinition collection
func (b *AccessReviewSetRequestBuilder) HistoryDefinitions() *AccessReviewSetHistoryDefinitionsCollectionRequestBuilder {
	bb := &AccessReviewSetHistoryDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/historyDefinitions"
	return bb
}

// AccessReviewSetHistoryDefinitionsCollectionRequestBuilder is request builder for AccessReviewHistoryDefinition collection
type AccessReviewSetHistoryDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewHistoryDefinition collection
func (b *AccessReviewSetHistoryDefinitionsCollectionRequestBuilder) Request() *AccessReviewSetHistoryDefinitionsCollectionRequest {
	return &AccessReviewSetHistoryDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewHistoryDefinition item
func (b *AccessReviewSetHistoryDefinitionsCollectionRequestBuilder) ID(id string) *AccessReviewHistoryDefinitionRequestBuilder {
	bb := &AccessReviewHistoryDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessReviewSetHistoryDefinitionsCollectionRequest is request for AccessReviewHistoryDefinition collection
type AccessReviewSetHistoryDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewHistoryDefinition collection
func (r *AccessReviewSetHistoryDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessReviewHistoryDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewHistoryDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewHistoryDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessReviewHistoryDefinition collection, max N pages
func (r *AccessReviewSetHistoryDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]AccessReviewHistoryDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessReviewHistoryDefinition collection
func (r *AccessReviewSetHistoryDefinitionsCollectionRequest) Get(ctx context.Context) ([]AccessReviewHistoryDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessReviewHistoryDefinition collection
func (r *AccessReviewSetHistoryDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewHistoryDefinition) (resObj *AccessReviewHistoryDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Decisions returns request builder for AccessReviewInstanceDecisionItem collection
func (b *AccessReviewStageRequestBuilder) Decisions() *AccessReviewStageDecisionsCollectionRequestBuilder {
	bb := &AccessReviewStageDecisionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/decisions"
	return bb
}

// AccessReviewStageDecisionsCollectionRequestBuilder is request builder for AccessReviewInstanceDecisionItem collection
type AccessReviewStageDecisionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewInstanceDecisionItem collection
func (b *AccessReviewStageDecisionsCollectionRequestBuilder) Request() *AccessReviewStageDecisionsCollectionRequest {
	return &AccessReviewStageDecisionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewInstanceDecisionItem item
func (b *AccessReviewStageDecisionsCollectionRequestBuilder) ID(id string) *AccessReviewInstanceDecisionItemRequestBuilder {
	bb := &AccessReviewInstanceDecisionItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessReviewStageDecisionsCollectionRequest is request for AccessReviewInstanceDecisionItem collection
type AccessReviewStageDecisionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewInstanceDecisionItem collection
func (r *AccessReviewStageDecisionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessReviewInstanceDecisionItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewInstanceDecisionItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewInstanceDecisionItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessReviewInstanceDecisionItem collection, max N pages
func (r *AccessReviewStageDecisionsCollectionRequest) GetN(ctx context.Context, n int) ([]AccessReviewInstanceDecisionItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessReviewInstanceDecisionItem collection
func (r *AccessReviewStageDecisionsCollectionRequest) Get(ctx context.Context) ([]AccessReviewInstanceDecisionItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessReviewInstanceDecisionItem collection
func (r *AccessReviewStageDecisionsCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewInstanceDecisionItem) (resObj *AccessReviewInstanceDecisionItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AccessPackageRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessPackageAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessPackageAssignmentPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessPackageAssignmentRequestObjectRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessPackageCatalogRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// AccessPackageMultipleChoiceQuestion returns request builder for AccessPackageMultipleChoiceQuestion collection
func (b *AccessPackageAssignmentPolicyQuestionsCollectionRequestBuilder) AccessPackageMultipleChoiceQuestion() *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequestBuilder {
	bb := &AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequestBuilder is request builder for AccessPackageMultipleChoiceQuestion collection
type AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessPackageMultipleChoiceQuestion collection
func (b *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequestBuilder) Request() *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequest {
	return &AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessPackageMultipleChoiceQuestion item
func (b *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequestBuilder) ID(id string) *AccessPackageMultipleChoiceQuestionRequestBuilder {
	bb := &AccessPackageMultipleChoiceQuestionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequest is request for AccessPackageMultipleChoiceQuestion collection
type AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessPackageMultipleChoiceQuestion collection
func (r *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessPackageMultipleChoiceQuestion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessPackageMultipleChoiceQuestion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessPackageMultipleChoiceQuestion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessPackageMultipleChoiceQuestion collection, max N pages
func (r *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequest) GetN(ctx context.Context, n int) ([]AccessPackageMultipleChoiceQuestion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessPackageMultipleChoiceQuestion collection
func (r *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequest) Get(ctx context.Context) ([]AccessPackageMultipleChoiceQuestion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessPackageMultipleChoiceQuestion collection
func (r *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageMultipleChoiceQuestionCollectionRequest) Add(ctx context.Context, reqObj *AccessPackageMultipleChoiceQuestion) (resObj *AccessPackageMultipleChoiceQuestion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AccessPackageAssignmentPolicyQuestionsCollectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessPackageSubjectRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// AccessPackageTextInputQuestion returns request builder for AccessPackageTextInputQuestion collection
func (b *AccessPackageAssignmentPolicyQuestionsCollectionRequestBuilder) AccessPackageTextInputQuestion() *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequestBuilder {
	bb := &AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequestBuilder is request builder for AccessPackageTextInputQuestion collection
type AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessPackageTextInputQuestion collection
func (b *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequestBuilder) Request() *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequest {
	return &AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessPackageTextInputQuestion item
func (b *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequestBuilder) ID(id string) *AccessPackageTextInputQuestionRequestBuilder {
	bb := &AccessPackageTextInputQuestionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequest is request for AccessPackageTextInputQuestion collection
type AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessPackageTextInputQuestion collection
func (r *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessPackageTextInputQuestion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessPackageTextInputQuestion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessPackageTextInputQuestion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AccessPackageTextInputQuestion collection, max N pages
func (r *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequest) GetN(ctx context.Context, n int) ([]AccessPackageTextInputQuestion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AccessPackageTextInputQuestion collection
func (r *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequest) Get(ctx context.Context) ([]AccessPackageTextInputQuestion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AccessPackageTextInputQuestion collection
func (r *AccessPackageAssignmentPolicyQuestionsCollectionAccessPackageTextInputQuestionCollectionRequest) Add(ctx context.Context, reqObj *AccessPackageTextInputQuestion) (resObj *AccessPackageTextInputQuestion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AccessReviewHistoryDefinitionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessReviewHistoryInstanceRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessReviewInstanceRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessReviewInstanceDecisionItemRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessReviewReviewerRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessReviewScheduleDefinitionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessReviewSetRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AccessReviewStageRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
