// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// ResourceAccessRequestBuilder is request builder for ResourceAccess
type ResourceAccessRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResourceAccessRequest
func (b *ResourceAccessRequestBuilder) Request() *ResourceAccessRequest {
	return &ResourceAccessRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResourceAccessRequest is request for ResourceAccess
type ResourceAccessRequest struct{ BaseRequest }

// Get performs GET request for ResourceAccess
func (r *ResourceAccessRequest) Get(ctx context.Context) (resObj *ResourceAccess, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResourceAccess
func (r *ResourceAccessRequest) Update(ctx context.Context, reqObj *ResourceAccess) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResourceAccess
func (r *ResourceAccessRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ResourceActionRequestBuilder is request builder for ResourceAction
type ResourceActionRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResourceActionRequest
func (b *ResourceActionRequestBuilder) Request() *ResourceActionRequest {
	return &ResourceActionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResourceActionRequest is request for ResourceAction
type ResourceActionRequest struct{ BaseRequest }

// Get performs GET request for ResourceAction
func (r *ResourceActionRequest) Get(ctx context.Context) (resObj *ResourceAction, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResourceAction
func (r *ResourceActionRequest) Update(ctx context.Context, reqObj *ResourceAction) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResourceAction
func (r *ResourceActionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ResourceDataRequestBuilder is request builder for ResourceData
type ResourceDataRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResourceDataRequest
func (b *ResourceDataRequestBuilder) Request() *ResourceDataRequest {
	return &ResourceDataRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResourceDataRequest is request for ResourceData
type ResourceDataRequest struct{ BaseRequest }

// Get performs GET request for ResourceData
func (r *ResourceDataRequest) Get(ctx context.Context) (resObj *ResourceData, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResourceData
func (r *ResourceDataRequest) Update(ctx context.Context, reqObj *ResourceData) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResourceData
func (r *ResourceDataRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ResourceOperationRequestBuilder is request builder for ResourceOperation
type ResourceOperationRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResourceOperationRequest
func (b *ResourceOperationRequestBuilder) Request() *ResourceOperationRequest {
	return &ResourceOperationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResourceOperationRequest is request for ResourceOperation
type ResourceOperationRequest struct{ BaseRequest }

// Get performs GET request for ResourceOperation
func (r *ResourceOperationRequest) Get(ctx context.Context) (resObj *ResourceOperation, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResourceOperation
func (r *ResourceOperationRequest) Update(ctx context.Context, reqObj *ResourceOperation) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResourceOperation
func (r *ResourceOperationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ResourcePermissionRequestBuilder is request builder for ResourcePermission
type ResourcePermissionRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResourcePermissionRequest
func (b *ResourcePermissionRequestBuilder) Request() *ResourcePermissionRequest {
	return &ResourcePermissionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResourcePermissionRequest is request for ResourcePermission
type ResourcePermissionRequest struct{ BaseRequest }

// Get performs GET request for ResourcePermission
func (r *ResourcePermissionRequest) Get(ctx context.Context) (resObj *ResourcePermission, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResourcePermission
func (r *ResourcePermissionRequest) Update(ctx context.Context, reqObj *ResourcePermission) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResourcePermission
func (r *ResourcePermissionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ResourceReferenceRequestBuilder is request builder for ResourceReference
type ResourceReferenceRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResourceReferenceRequest
func (b *ResourceReferenceRequestBuilder) Request() *ResourceReferenceRequest {
	return &ResourceReferenceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResourceReferenceRequest is request for ResourceReference
type ResourceReferenceRequest struct{ BaseRequest }

// Get performs GET request for ResourceReference
func (r *ResourceReferenceRequest) Get(ctx context.Context) (resObj *ResourceReference, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResourceReference
func (r *ResourceReferenceRequest) Update(ctx context.Context, reqObj *ResourceReference) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResourceReference
func (r *ResourceReferenceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ResourceSpecificPermissionRequestBuilder is request builder for ResourceSpecificPermission
type ResourceSpecificPermissionRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResourceSpecificPermissionRequest
func (b *ResourceSpecificPermissionRequestBuilder) Request() *ResourceSpecificPermissionRequest {
	return &ResourceSpecificPermissionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResourceSpecificPermissionRequest is request for ResourceSpecificPermission
type ResourceSpecificPermissionRequest struct{ BaseRequest }

// Get performs GET request for ResourceSpecificPermission
func (r *ResourceSpecificPermissionRequest) Get(ctx context.Context) (resObj *ResourceSpecificPermission, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResourceSpecificPermission
func (r *ResourceSpecificPermissionRequest) Update(ctx context.Context, reqObj *ResourceSpecificPermission) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResourceSpecificPermission
func (r *ResourceSpecificPermissionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ResourceSpecificPermissionGrantRequestBuilder is request builder for ResourceSpecificPermissionGrant
type ResourceSpecificPermissionGrantRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResourceSpecificPermissionGrantRequest
func (b *ResourceSpecificPermissionGrantRequestBuilder) Request() *ResourceSpecificPermissionGrantRequest {
	return &ResourceSpecificPermissionGrantRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResourceSpecificPermissionGrantRequest is request for ResourceSpecificPermissionGrant
type ResourceSpecificPermissionGrantRequest struct{ BaseRequest }

// Get performs GET request for ResourceSpecificPermissionGrant
func (r *ResourceSpecificPermissionGrantRequest) Get(ctx context.Context) (resObj *ResourceSpecificPermissionGrant, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResourceSpecificPermissionGrant
func (r *ResourceSpecificPermissionGrantRequest) Update(ctx context.Context, reqObj *ResourceSpecificPermissionGrant) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResourceSpecificPermissionGrant
func (r *ResourceSpecificPermissionGrantRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ResourceVisualizationRequestBuilder is request builder for ResourceVisualization
type ResourceVisualizationRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResourceVisualizationRequest
func (b *ResourceVisualizationRequestBuilder) Request() *ResourceVisualizationRequest {
	return &ResourceVisualizationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResourceVisualizationRequest is request for ResourceVisualization
type ResourceVisualizationRequest struct{ BaseRequest }

// Get performs GET request for ResourceVisualization
func (r *ResourceVisualizationRequest) Get(ctx context.Context) (resObj *ResourceVisualization, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResourceVisualization
func (r *ResourceVisualizationRequest) Update(ctx context.Context, reqObj *ResourceVisualization) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResourceVisualization
func (r *ResourceVisualizationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
