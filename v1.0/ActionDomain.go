// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// DomainForceDeleteRequestParameter undocumented
type DomainForceDeleteRequestParameter struct {
	// DisableUserAccounts undocumented
	DisableUserAccounts *bool `json:"disableUserAccounts,omitempty"`
}

// DomainPromoteRequestParameter undocumented
type DomainPromoteRequestParameter struct {
}

// DomainVerifyRequestParameter undocumented
type DomainVerifyRequestParameter struct {
}

// DomainNameReferences returns request builder for DirectoryObject collection rcn
func (b *DomainRequestBuilder) DomainNameReferences() *DomainDomainNameReferencesCollectionRequestBuilder {
	bb := &DomainDomainNameReferencesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/domainNameReferences"
	return bb
}

// DomainDomainNameReferencesCollectionRequestBuilder is request builder for DirectoryObject collection
type DomainDomainNameReferencesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *DomainDomainNameReferencesCollectionRequestBuilder) Request() *DomainDomainNameReferencesCollectionRequest {
	return &DomainDomainNameReferencesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *DomainDomainNameReferencesCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DomainDomainNameReferencesCollectionRequest is request for DirectoryObject collection
type DomainDomainNameReferencesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *DomainDomainNameReferencesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *DomainDomainNameReferencesCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *DomainDomainNameReferencesCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *DomainDomainNameReferencesCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// FederationConfiguration returns request builder for InternalDomainFederation collection rcn
func (b *DomainRequestBuilder) FederationConfiguration() *DomainFederationConfigurationCollectionRequestBuilder {
	bb := &DomainFederationConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/federationConfiguration"
	return bb
}

// DomainFederationConfigurationCollectionRequestBuilder is request builder for InternalDomainFederation collection
type DomainFederationConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for InternalDomainFederation collection
func (b *DomainFederationConfigurationCollectionRequestBuilder) Request() *DomainFederationConfigurationCollectionRequest {
	return &DomainFederationConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for InternalDomainFederation item
func (b *DomainFederationConfigurationCollectionRequestBuilder) ID(id string) *InternalDomainFederationRequestBuilder {
	bb := &InternalDomainFederationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DomainFederationConfigurationCollectionRequest is request for InternalDomainFederation collection
type DomainFederationConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for InternalDomainFederation collection
func (r *DomainFederationConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]InternalDomainFederation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []InternalDomainFederation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []InternalDomainFederation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for InternalDomainFederation collection, max N pages
func (r *DomainFederationConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]InternalDomainFederation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for InternalDomainFederation collection
func (r *DomainFederationConfigurationCollectionRequest) Get(ctx context.Context) ([]InternalDomainFederation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for InternalDomainFederation collection
func (r *DomainFederationConfigurationCollectionRequest) Add(ctx context.Context, reqObj *InternalDomainFederation) (resObj *InternalDomainFederation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ServiceConfigurationRecords returns request builder for DomainDnsRecord collection rcn
func (b *DomainRequestBuilder) ServiceConfigurationRecords() *DomainServiceConfigurationRecordsCollectionRequestBuilder {
	bb := &DomainServiceConfigurationRecordsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/serviceConfigurationRecords"
	return bb
}

// DomainServiceConfigurationRecordsCollectionRequestBuilder is request builder for DomainDnsRecord collection
type DomainServiceConfigurationRecordsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DomainDnsRecord collection
func (b *DomainServiceConfigurationRecordsCollectionRequestBuilder) Request() *DomainServiceConfigurationRecordsCollectionRequest {
	return &DomainServiceConfigurationRecordsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DomainDnsRecord item
func (b *DomainServiceConfigurationRecordsCollectionRequestBuilder) ID(id string) *DomainDnsRecordRequestBuilder {
	bb := &DomainDnsRecordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DomainServiceConfigurationRecordsCollectionRequest is request for DomainDnsRecord collection
type DomainServiceConfigurationRecordsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DomainDnsRecord collection
func (r *DomainServiceConfigurationRecordsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DomainDnsRecord, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DomainDnsRecord
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DomainDnsRecord
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DomainDnsRecord collection, max N pages
func (r *DomainServiceConfigurationRecordsCollectionRequest) GetN(ctx context.Context, n int) ([]DomainDnsRecord, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DomainDnsRecord collection
func (r *DomainServiceConfigurationRecordsCollectionRequest) Get(ctx context.Context) ([]DomainDnsRecord, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DomainDnsRecord collection
func (r *DomainServiceConfigurationRecordsCollectionRequest) Add(ctx context.Context, reqObj *DomainDnsRecord) (resObj *DomainDnsRecord, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// VerificationDnsRecords returns request builder for DomainDnsRecord collection rcn
func (b *DomainRequestBuilder) VerificationDnsRecords() *DomainVerificationDnsRecordsCollectionRequestBuilder {
	bb := &DomainVerificationDnsRecordsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/verificationDnsRecords"
	return bb
}

// DomainVerificationDnsRecordsCollectionRequestBuilder is request builder for DomainDnsRecord collection
type DomainVerificationDnsRecordsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DomainDnsRecord collection
func (b *DomainVerificationDnsRecordsCollectionRequestBuilder) Request() *DomainVerificationDnsRecordsCollectionRequest {
	return &DomainVerificationDnsRecordsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DomainDnsRecord item
func (b *DomainVerificationDnsRecordsCollectionRequestBuilder) ID(id string) *DomainDnsRecordRequestBuilder {
	bb := &DomainDnsRecordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DomainVerificationDnsRecordsCollectionRequest is request for DomainDnsRecord collection
type DomainVerificationDnsRecordsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DomainDnsRecord collection
func (r *DomainVerificationDnsRecordsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DomainDnsRecord, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DomainDnsRecord
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DomainDnsRecord
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DomainDnsRecord collection, max N pages
func (r *DomainVerificationDnsRecordsCollectionRequest) GetN(ctx context.Context, n int) ([]DomainDnsRecord, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DomainDnsRecord collection
func (r *DomainVerificationDnsRecordsCollectionRequest) Get(ctx context.Context) ([]DomainDnsRecord, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DomainDnsRecord collection
func (r *DomainVerificationDnsRecordsCollectionRequest) Add(ctx context.Context, reqObj *DomainDnsRecord) (resObj *DomainDnsRecord, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DomainRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DomainDnsCnameRecord returns request builder for DomainDnsCnameRecord collection rcn
func (b *DomainDnsRecordRequestBuilder) DomainDnsCnameRecord() *DomainDnsRecordDomainDnsCnameRecordCollectionRequestBuilder {
	bb := &DomainDnsRecordDomainDnsCnameRecordCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DomainDnsCnameRecord"
	return bb
}

// DomainDnsRecordDomainDnsCnameRecordCollectionRequestBuilder is request builder for DomainDnsCnameRecord collection
type DomainDnsRecordDomainDnsCnameRecordCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DomainDnsCnameRecord collection
func (b *DomainDnsRecordDomainDnsCnameRecordCollectionRequestBuilder) Request() *DomainDnsRecordDomainDnsCnameRecordCollectionRequest {
	return &DomainDnsRecordDomainDnsCnameRecordCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DomainDnsCnameRecord item
func (b *DomainDnsRecordDomainDnsCnameRecordCollectionRequestBuilder) ID(id string) *DomainDnsCnameRecordRequestBuilder {
	bb := &DomainDnsCnameRecordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DomainDnsRecordDomainDnsCnameRecordCollectionRequest is request for DomainDnsCnameRecord collection
type DomainDnsRecordDomainDnsCnameRecordCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DomainDnsCnameRecord collection
func (r *DomainDnsRecordDomainDnsCnameRecordCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DomainDnsCnameRecord, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DomainDnsCnameRecord
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DomainDnsCnameRecord
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DomainDnsCnameRecord collection, max N pages
func (r *DomainDnsRecordDomainDnsCnameRecordCollectionRequest) GetN(ctx context.Context, n int) ([]DomainDnsCnameRecord, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DomainDnsCnameRecord collection
func (r *DomainDnsRecordDomainDnsCnameRecordCollectionRequest) Get(ctx context.Context) ([]DomainDnsCnameRecord, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DomainDnsCnameRecord collection
func (r *DomainDnsRecordDomainDnsCnameRecordCollectionRequest) Add(ctx context.Context, reqObj *DomainDnsCnameRecord) (resObj *DomainDnsCnameRecord, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DomainDnsMxRecord returns request builder for DomainDnsMxRecord collection rcn
func (b *DomainDnsRecordRequestBuilder) DomainDnsMxRecord() *DomainDnsRecordDomainDnsMxRecordCollectionRequestBuilder {
	bb := &DomainDnsRecordDomainDnsMxRecordCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DomainDnsMxRecord"
	return bb
}

// DomainDnsRecordDomainDnsMxRecordCollectionRequestBuilder is request builder for DomainDnsMxRecord collection
type DomainDnsRecordDomainDnsMxRecordCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DomainDnsMxRecord collection
func (b *DomainDnsRecordDomainDnsMxRecordCollectionRequestBuilder) Request() *DomainDnsRecordDomainDnsMxRecordCollectionRequest {
	return &DomainDnsRecordDomainDnsMxRecordCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DomainDnsMxRecord item
func (b *DomainDnsRecordDomainDnsMxRecordCollectionRequestBuilder) ID(id string) *DomainDnsMxRecordRequestBuilder {
	bb := &DomainDnsMxRecordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DomainDnsRecordDomainDnsMxRecordCollectionRequest is request for DomainDnsMxRecord collection
type DomainDnsRecordDomainDnsMxRecordCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DomainDnsMxRecord collection
func (r *DomainDnsRecordDomainDnsMxRecordCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DomainDnsMxRecord, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DomainDnsMxRecord
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DomainDnsMxRecord
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DomainDnsMxRecord collection, max N pages
func (r *DomainDnsRecordDomainDnsMxRecordCollectionRequest) GetN(ctx context.Context, n int) ([]DomainDnsMxRecord, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DomainDnsMxRecord collection
func (r *DomainDnsRecordDomainDnsMxRecordCollectionRequest) Get(ctx context.Context) ([]DomainDnsMxRecord, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DomainDnsMxRecord collection
func (r *DomainDnsRecordDomainDnsMxRecordCollectionRequest) Add(ctx context.Context, reqObj *DomainDnsMxRecord) (resObj *DomainDnsMxRecord, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DomainDnsSrvRecord returns request builder for DomainDnsSrvRecord collection rcn
func (b *DomainDnsRecordRequestBuilder) DomainDnsSrvRecord() *DomainDnsRecordDomainDnsSrvRecordCollectionRequestBuilder {
	bb := &DomainDnsRecordDomainDnsSrvRecordCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DomainDnsSrvRecord"
	return bb
}

// DomainDnsRecordDomainDnsSrvRecordCollectionRequestBuilder is request builder for DomainDnsSrvRecord collection
type DomainDnsRecordDomainDnsSrvRecordCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DomainDnsSrvRecord collection
func (b *DomainDnsRecordDomainDnsSrvRecordCollectionRequestBuilder) Request() *DomainDnsRecordDomainDnsSrvRecordCollectionRequest {
	return &DomainDnsRecordDomainDnsSrvRecordCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DomainDnsSrvRecord item
func (b *DomainDnsRecordDomainDnsSrvRecordCollectionRequestBuilder) ID(id string) *DomainDnsSrvRecordRequestBuilder {
	bb := &DomainDnsSrvRecordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DomainDnsRecordDomainDnsSrvRecordCollectionRequest is request for DomainDnsSrvRecord collection
type DomainDnsRecordDomainDnsSrvRecordCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DomainDnsSrvRecord collection
func (r *DomainDnsRecordDomainDnsSrvRecordCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DomainDnsSrvRecord, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DomainDnsSrvRecord
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DomainDnsSrvRecord
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DomainDnsSrvRecord collection, max N pages
func (r *DomainDnsRecordDomainDnsSrvRecordCollectionRequest) GetN(ctx context.Context, n int) ([]DomainDnsSrvRecord, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DomainDnsSrvRecord collection
func (r *DomainDnsRecordDomainDnsSrvRecordCollectionRequest) Get(ctx context.Context) ([]DomainDnsSrvRecord, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DomainDnsSrvRecord collection
func (r *DomainDnsRecordDomainDnsSrvRecordCollectionRequest) Add(ctx context.Context, reqObj *DomainDnsSrvRecord) (resObj *DomainDnsSrvRecord, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DomainDnsTxtRecord returns request builder for DomainDnsTxtRecord collection rcn
func (b *DomainDnsRecordRequestBuilder) DomainDnsTxtRecord() *DomainDnsRecordDomainDnsTxtRecordCollectionRequestBuilder {
	bb := &DomainDnsRecordDomainDnsTxtRecordCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DomainDnsTxtRecord"
	return bb
}

// DomainDnsRecordDomainDnsTxtRecordCollectionRequestBuilder is request builder for DomainDnsTxtRecord collection
type DomainDnsRecordDomainDnsTxtRecordCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DomainDnsTxtRecord collection
func (b *DomainDnsRecordDomainDnsTxtRecordCollectionRequestBuilder) Request() *DomainDnsRecordDomainDnsTxtRecordCollectionRequest {
	return &DomainDnsRecordDomainDnsTxtRecordCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DomainDnsTxtRecord item
func (b *DomainDnsRecordDomainDnsTxtRecordCollectionRequestBuilder) ID(id string) *DomainDnsTxtRecordRequestBuilder {
	bb := &DomainDnsTxtRecordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DomainDnsRecordDomainDnsTxtRecordCollectionRequest is request for DomainDnsTxtRecord collection
type DomainDnsRecordDomainDnsTxtRecordCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DomainDnsTxtRecord collection
func (r *DomainDnsRecordDomainDnsTxtRecordCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DomainDnsTxtRecord, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DomainDnsTxtRecord
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DomainDnsTxtRecord
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DomainDnsTxtRecord collection, max N pages
func (r *DomainDnsRecordDomainDnsTxtRecordCollectionRequest) GetN(ctx context.Context, n int) ([]DomainDnsTxtRecord, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DomainDnsTxtRecord collection
func (r *DomainDnsRecordDomainDnsTxtRecordCollectionRequest) Get(ctx context.Context) ([]DomainDnsTxtRecord, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DomainDnsTxtRecord collection
func (r *DomainDnsRecordDomainDnsTxtRecordCollectionRequest) Add(ctx context.Context, reqObj *DomainDnsTxtRecord) (resObj *DomainDnsTxtRecord, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DomainDnsUnavailableRecord returns request builder for DomainDnsUnavailableRecord collection rcn
func (b *DomainDnsRecordRequestBuilder) DomainDnsUnavailableRecord() *DomainDnsRecordDomainDnsUnavailableRecordCollectionRequestBuilder {
	bb := &DomainDnsRecordDomainDnsUnavailableRecordCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DomainDnsUnavailableRecord"
	return bb
}

// DomainDnsRecordDomainDnsUnavailableRecordCollectionRequestBuilder is request builder for DomainDnsUnavailableRecord collection
type DomainDnsRecordDomainDnsUnavailableRecordCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DomainDnsUnavailableRecord collection
func (b *DomainDnsRecordDomainDnsUnavailableRecordCollectionRequestBuilder) Request() *DomainDnsRecordDomainDnsUnavailableRecordCollectionRequest {
	return &DomainDnsRecordDomainDnsUnavailableRecordCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DomainDnsUnavailableRecord item
func (b *DomainDnsRecordDomainDnsUnavailableRecordCollectionRequestBuilder) ID(id string) *DomainDnsUnavailableRecordRequestBuilder {
	bb := &DomainDnsUnavailableRecordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DomainDnsRecordDomainDnsUnavailableRecordCollectionRequest is request for DomainDnsUnavailableRecord collection
type DomainDnsRecordDomainDnsUnavailableRecordCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DomainDnsUnavailableRecord collection
func (r *DomainDnsRecordDomainDnsUnavailableRecordCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DomainDnsUnavailableRecord, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DomainDnsUnavailableRecord
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DomainDnsUnavailableRecord
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DomainDnsUnavailableRecord collection, max N pages
func (r *DomainDnsRecordDomainDnsUnavailableRecordCollectionRequest) GetN(ctx context.Context, n int) ([]DomainDnsUnavailableRecord, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DomainDnsUnavailableRecord collection
func (r *DomainDnsRecordDomainDnsUnavailableRecordCollectionRequest) Get(ctx context.Context) ([]DomainDnsUnavailableRecord, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DomainDnsUnavailableRecord collection
func (r *DomainDnsRecordDomainDnsUnavailableRecordCollectionRequest) Add(ctx context.Context, reqObj *DomainDnsUnavailableRecord) (resObj *DomainDnsUnavailableRecord, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
