// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// ResultInfoRequestBuilder is request builder for ResultInfo
type ResultInfoRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResultInfoRequest
func (b *ResultInfoRequestBuilder) Request() *ResultInfoRequest {
	return &ResultInfoRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResultInfoRequest is request for ResultInfo
type ResultInfoRequest struct{ BaseRequest }

// Get performs GET request for ResultInfo
func (r *ResultInfoRequest) Get(ctx context.Context) (resObj *ResultInfo, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResultInfo
func (r *ResultInfoRequest) Update(ctx context.Context, reqObj *ResultInfo) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResultInfo
func (r *ResultInfoRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ResultTemplateRequestBuilder is request builder for ResultTemplate
type ResultTemplateRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResultTemplateRequest
func (b *ResultTemplateRequestBuilder) Request() *ResultTemplateRequest {
	return &ResultTemplateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResultTemplateRequest is request for ResultTemplate
type ResultTemplateRequest struct{ BaseRequest }

// Get performs GET request for ResultTemplate
func (r *ResultTemplateRequest) Get(ctx context.Context) (resObj *ResultTemplate, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResultTemplate
func (r *ResultTemplateRequest) Update(ctx context.Context, reqObj *ResultTemplate) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResultTemplate
func (r *ResultTemplateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ResultTemplateDictionaryRequestBuilder is request builder for ResultTemplateDictionary
type ResultTemplateDictionaryRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResultTemplateDictionaryRequest
func (b *ResultTemplateDictionaryRequestBuilder) Request() *ResultTemplateDictionaryRequest {
	return &ResultTemplateDictionaryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResultTemplateDictionaryRequest is request for ResultTemplateDictionary
type ResultTemplateDictionaryRequest struct{ BaseRequest }

// Get performs GET request for ResultTemplateDictionary
func (r *ResultTemplateDictionaryRequest) Get(ctx context.Context) (resObj *ResultTemplateDictionary, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResultTemplateDictionary
func (r *ResultTemplateDictionaryRequest) Update(ctx context.Context, reqObj *ResultTemplateDictionary) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResultTemplateDictionary
func (r *ResultTemplateDictionaryRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ResultTemplateOptionRequestBuilder is request builder for ResultTemplateOption
type ResultTemplateOptionRequestBuilder struct{ BaseRequestBuilder }

// Request returns ResultTemplateOptionRequest
func (b *ResultTemplateOptionRequestBuilder) Request() *ResultTemplateOptionRequest {
	return &ResultTemplateOptionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ResultTemplateOptionRequest is request for ResultTemplateOption
type ResultTemplateOptionRequest struct{ BaseRequest }

// Get performs GET request for ResultTemplateOption
func (r *ResultTemplateOptionRequest) Get(ctx context.Context) (resObj *ResultTemplateOption, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ResultTemplateOption
func (r *ResultTemplateOptionRequest) Update(ctx context.Context, reqObj *ResultTemplateOption) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ResultTemplateOption
func (r *ResultTemplateOptionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
