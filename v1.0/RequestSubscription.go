// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// SubscriptionRequestBuilder is request builder for Subscription
type SubscriptionRequestBuilder struct{ BaseRequestBuilder }

// Request returns SubscriptionRequest
func (b *SubscriptionRequestBuilder) Request() *SubscriptionRequest {
	return &SubscriptionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// SubscriptionRequest is request for Subscription
type SubscriptionRequest struct{ BaseRequest }

// Get performs GET request for Subscription
func (r *SubscriptionRequest) Get(ctx context.Context) (resObj *Subscription, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Subscription
func (r *SubscriptionRequest) Update(ctx context.Context, reqObj *Subscription) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Subscription
func (r *SubscriptionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type SubscriptionReauthorizeRequestBuilder struct{ BaseRequestBuilder }

// Reauthorize action undocumented
func (b *SubscriptionRequestBuilder) Reauthorize(reqObj *SubscriptionReauthorizeRequestParameter) *SubscriptionReauthorizeRequestBuilder {
	bb := &SubscriptionReauthorizeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Reauthorize"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type SubscriptionReauthorizeRequest struct{ BaseRequest }

func (b *SubscriptionReauthorizeRequestBuilder) Request() *SubscriptionReauthorizeRequest {
	return &SubscriptionReauthorizeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *SubscriptionReauthorizeRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
