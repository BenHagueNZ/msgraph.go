// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// AgreementRequestBuilder is request builder for Agreement
type AgreementRequestBuilder struct{ BaseRequestBuilder }

// Request returns AgreementRequest
func (b *AgreementRequestBuilder) Request() *AgreementRequest {
	return &AgreementRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AgreementRequest is request for Agreement
type AgreementRequest struct{ BaseRequest }

// Get performs GET request for Agreement
func (r *AgreementRequest) Get(ctx context.Context) (resObj *Agreement, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Agreement
func (r *AgreementRequest) Update(ctx context.Context, reqObj *Agreement) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Agreement
func (r *AgreementRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AgreementAcceptanceRequestBuilder is request builder for AgreementAcceptance
type AgreementAcceptanceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AgreementAcceptanceRequest
func (b *AgreementAcceptanceRequestBuilder) Request() *AgreementAcceptanceRequest {
	return &AgreementAcceptanceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AgreementAcceptanceRequest is request for AgreementAcceptance
type AgreementAcceptanceRequest struct{ BaseRequest }

// Get performs GET request for AgreementAcceptance
func (r *AgreementAcceptanceRequest) Get(ctx context.Context) (resObj *AgreementAcceptance, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AgreementAcceptance
func (r *AgreementAcceptanceRequest) Update(ctx context.Context, reqObj *AgreementAcceptance) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AgreementAcceptance
func (r *AgreementAcceptanceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AgreementFileRequestBuilder is request builder for AgreementFile
type AgreementFileRequestBuilder struct{ BaseRequestBuilder }

// Request returns AgreementFileRequest
func (b *AgreementFileRequestBuilder) Request() *AgreementFileRequest {
	return &AgreementFileRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AgreementFileRequest is request for AgreementFile
type AgreementFileRequest struct{ BaseRequest }

// Get performs GET request for AgreementFile
func (r *AgreementFileRequest) Get(ctx context.Context) (resObj *AgreementFile, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AgreementFile
func (r *AgreementFileRequest) Update(ctx context.Context, reqObj *AgreementFile) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AgreementFile
func (r *AgreementFileRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AgreementFileDataRequestBuilder is request builder for AgreementFileData
type AgreementFileDataRequestBuilder struct{ BaseRequestBuilder }

// Request returns AgreementFileDataRequest
func (b *AgreementFileDataRequestBuilder) Request() *AgreementFileDataRequest {
	return &AgreementFileDataRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AgreementFileDataRequest is request for AgreementFileData
type AgreementFileDataRequest struct{ BaseRequest }

// Get performs GET request for AgreementFileData
func (r *AgreementFileDataRequest) Get(ctx context.Context) (resObj *AgreementFileData, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AgreementFileData
func (r *AgreementFileDataRequest) Update(ctx context.Context, reqObj *AgreementFileData) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AgreementFileData
func (r *AgreementFileDataRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AgreementFileLocalizationRequestBuilder is request builder for AgreementFileLocalization
type AgreementFileLocalizationRequestBuilder struct{ BaseRequestBuilder }

// Request returns AgreementFileLocalizationRequest
func (b *AgreementFileLocalizationRequestBuilder) Request() *AgreementFileLocalizationRequest {
	return &AgreementFileLocalizationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AgreementFileLocalizationRequest is request for AgreementFileLocalization
type AgreementFileLocalizationRequest struct{ BaseRequest }

// Get performs GET request for AgreementFileLocalization
func (r *AgreementFileLocalizationRequest) Get(ctx context.Context) (resObj *AgreementFileLocalization, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AgreementFileLocalization
func (r *AgreementFileLocalizationRequest) Update(ctx context.Context, reqObj *AgreementFileLocalization) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AgreementFileLocalization
func (r *AgreementFileLocalizationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AgreementFilePropertiesRequestBuilder is request builder for AgreementFileProperties
type AgreementFilePropertiesRequestBuilder struct{ BaseRequestBuilder }

// Request returns AgreementFilePropertiesRequest
func (b *AgreementFilePropertiesRequestBuilder) Request() *AgreementFilePropertiesRequest {
	return &AgreementFilePropertiesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AgreementFilePropertiesRequest is request for AgreementFileProperties
type AgreementFilePropertiesRequest struct{ BaseRequest }

// Get performs GET request for AgreementFileProperties
func (r *AgreementFilePropertiesRequest) Get(ctx context.Context) (resObj *AgreementFileProperties, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AgreementFileProperties
func (r *AgreementFilePropertiesRequest) Update(ctx context.Context, reqObj *AgreementFileProperties) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AgreementFileProperties
func (r *AgreementFilePropertiesRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AgreementFileVersionRequestBuilder is request builder for AgreementFileVersion
type AgreementFileVersionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AgreementFileVersionRequest
func (b *AgreementFileVersionRequestBuilder) Request() *AgreementFileVersionRequest {
	return &AgreementFileVersionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AgreementFileVersionRequest is request for AgreementFileVersion
type AgreementFileVersionRequest struct{ BaseRequest }

// Get performs GET request for AgreementFileVersion
func (r *AgreementFileVersionRequest) Get(ctx context.Context) (resObj *AgreementFileVersion, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AgreementFileVersion
func (r *AgreementFileVersionRequest) Update(ctx context.Context, reqObj *AgreementFileVersion) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AgreementFileVersion
func (r *AgreementFileVersionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
