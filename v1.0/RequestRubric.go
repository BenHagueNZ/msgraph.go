// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// RubricCriterionRequestBuilder is request builder for RubricCriterion
type RubricCriterionRequestBuilder struct{ BaseRequestBuilder }

// Request returns RubricCriterionRequest
func (b *RubricCriterionRequestBuilder) Request() *RubricCriterionRequest {
	return &RubricCriterionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// RubricCriterionRequest is request for RubricCriterion
type RubricCriterionRequest struct{ BaseRequest }

// Get performs GET request for RubricCriterion
func (r *RubricCriterionRequest) Get(ctx context.Context) (resObj *RubricCriterion, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for RubricCriterion
func (r *RubricCriterionRequest) Update(ctx context.Context, reqObj *RubricCriterion) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for RubricCriterion
func (r *RubricCriterionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// RubricLevelRequestBuilder is request builder for RubricLevel
type RubricLevelRequestBuilder struct{ BaseRequestBuilder }

// Request returns RubricLevelRequest
func (b *RubricLevelRequestBuilder) Request() *RubricLevelRequest {
	return &RubricLevelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// RubricLevelRequest is request for RubricLevel
type RubricLevelRequest struct{ BaseRequest }

// Get performs GET request for RubricLevel
func (r *RubricLevelRequest) Get(ctx context.Context) (resObj *RubricLevel, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for RubricLevel
func (r *RubricLevelRequest) Update(ctx context.Context, reqObj *RubricLevel) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for RubricLevel
func (r *RubricLevelRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// RubricQualityRequestBuilder is request builder for RubricQuality
type RubricQualityRequestBuilder struct{ BaseRequestBuilder }

// Request returns RubricQualityRequest
func (b *RubricQualityRequestBuilder) Request() *RubricQualityRequest {
	return &RubricQualityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// RubricQualityRequest is request for RubricQuality
type RubricQualityRequest struct{ BaseRequest }

// Get performs GET request for RubricQuality
func (r *RubricQualityRequest) Get(ctx context.Context) (resObj *RubricQuality, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for RubricQuality
func (r *RubricQualityRequest) Update(ctx context.Context, reqObj *RubricQuality) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for RubricQuality
func (r *RubricQualityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// RubricQualityFeedbackModelRequestBuilder is request builder for RubricQualityFeedbackModel
type RubricQualityFeedbackModelRequestBuilder struct{ BaseRequestBuilder }

// Request returns RubricQualityFeedbackModelRequest
func (b *RubricQualityFeedbackModelRequestBuilder) Request() *RubricQualityFeedbackModelRequest {
	return &RubricQualityFeedbackModelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// RubricQualityFeedbackModelRequest is request for RubricQualityFeedbackModel
type RubricQualityFeedbackModelRequest struct{ BaseRequest }

// Get performs GET request for RubricQualityFeedbackModel
func (r *RubricQualityFeedbackModelRequest) Get(ctx context.Context) (resObj *RubricQualityFeedbackModel, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for RubricQualityFeedbackModel
func (r *RubricQualityFeedbackModelRequest) Update(ctx context.Context, reqObj *RubricQualityFeedbackModel) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for RubricQualityFeedbackModel
func (r *RubricQualityFeedbackModelRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// RubricQualitySelectedColumnModelRequestBuilder is request builder for RubricQualitySelectedColumnModel
type RubricQualitySelectedColumnModelRequestBuilder struct{ BaseRequestBuilder }

// Request returns RubricQualitySelectedColumnModelRequest
func (b *RubricQualitySelectedColumnModelRequestBuilder) Request() *RubricQualitySelectedColumnModelRequest {
	return &RubricQualitySelectedColumnModelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// RubricQualitySelectedColumnModelRequest is request for RubricQualitySelectedColumnModel
type RubricQualitySelectedColumnModelRequest struct{ BaseRequest }

// Get performs GET request for RubricQualitySelectedColumnModel
func (r *RubricQualitySelectedColumnModelRequest) Get(ctx context.Context) (resObj *RubricQualitySelectedColumnModel, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for RubricQualitySelectedColumnModel
func (r *RubricQualitySelectedColumnModelRequest) Update(ctx context.Context, reqObj *RubricQualitySelectedColumnModel) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for RubricQualitySelectedColumnModel
func (r *RubricQualitySelectedColumnModelRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
