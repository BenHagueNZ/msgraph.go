// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// PrintDocumentCreateUploadSessionRequestParameter undocumented
type PrintDocumentCreateUploadSessionRequestParameter struct {
	// Properties undocumented
	Properties *PrintDocumentUploadProperties `json:"properties,omitempty"`
}

// PrintJobCancelRequestParameter undocumented
type PrintJobCancelRequestParameter struct {
}

// PrintJobAbortRequestParameter undocumented
type PrintJobAbortRequestParameter struct {
	// Reason undocumented
	Reason *string `json:"reason,omitempty"`
}

// PrintJobRedirectRequestParameter undocumented
type PrintJobRedirectRequestParameter struct {
	// DestinationPrinterID undocumented
	DestinationPrinterID *string `json:"destinationPrinterId,omitempty"`
	// Configuration undocumented
	Configuration *PrintJobConfiguration `json:"configuration,omitempty"`
}

// PrintJobStartRequestParameter undocumented
type PrintJobStartRequestParameter struct {
}

// Connectors returns request builder for PrintConnector collection
func (b *PrintRequestBuilder) Connectors() *PrintConnectorsCollectionRequestBuilder {
	bb := &PrintConnectorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/connectors"
	return bb
}

// PrintConnectorsCollectionRequestBuilder is request builder for PrintConnector collection rcn
type PrintConnectorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintConnector collection
func (b *PrintConnectorsCollectionRequestBuilder) Request() *PrintConnectorsCollectionRequest {
	return &PrintConnectorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintConnector item
func (b *PrintConnectorsCollectionRequestBuilder) ID(id string) *PrintConnectorRequestBuilder {
	bb := &PrintConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrintConnectorsCollectionRequest is request for PrintConnector collection
type PrintConnectorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintConnector collection
func (r *PrintConnectorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintConnector, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintConnector
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintConnector
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintConnector collection, max N pages
func (r *PrintConnectorsCollectionRequest) GetN(ctx context.Context, n int) ([]PrintConnector, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintConnector collection
func (r *PrintConnectorsCollectionRequest) Get(ctx context.Context) ([]PrintConnector, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintConnector collection
func (r *PrintConnectorsCollectionRequest) Add(ctx context.Context, reqObj *PrintConnector) (resObj *PrintConnector, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Operations returns request builder for PrintOperation collection
func (b *PrintRequestBuilder) Operations() *PrintOperationsCollectionRequestBuilder {
	bb := &PrintOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// PrintOperationsCollectionRequestBuilder is request builder for PrintOperation collection rcn
type PrintOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintOperation collection
func (b *PrintOperationsCollectionRequestBuilder) Request() *PrintOperationsCollectionRequest {
	return &PrintOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintOperation item
func (b *PrintOperationsCollectionRequestBuilder) ID(id string) *PrintOperationRequestBuilder {
	bb := &PrintOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrintOperationsCollectionRequest is request for PrintOperation collection
type PrintOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintOperation collection
func (r *PrintOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintOperation collection, max N pages
func (r *PrintOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]PrintOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintOperation collection
func (r *PrintOperationsCollectionRequest) Get(ctx context.Context) ([]PrintOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintOperation collection
func (r *PrintOperationsCollectionRequest) Add(ctx context.Context, reqObj *PrintOperation) (resObj *PrintOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Printers returns request builder for Printer collection
func (b *PrintRequestBuilder) Printers() *PrintPrintersCollectionRequestBuilder {
	bb := &PrintPrintersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/printers"
	return bb
}

// PrintPrintersCollectionRequestBuilder is request builder for Printer collection rcn
type PrintPrintersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Printer collection
func (b *PrintPrintersCollectionRequestBuilder) Request() *PrintPrintersCollectionRequest {
	return &PrintPrintersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Printer item
func (b *PrintPrintersCollectionRequestBuilder) ID(id string) *PrinterRequestBuilder {
	bb := &PrinterRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrintPrintersCollectionRequest is request for Printer collection
type PrintPrintersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Printer collection
func (r *PrintPrintersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Printer, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Printer
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Printer
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Printer collection, max N pages
func (r *PrintPrintersCollectionRequest) GetN(ctx context.Context, n int) ([]Printer, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Printer collection
func (r *PrintPrintersCollectionRequest) Get(ctx context.Context) ([]Printer, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Printer collection
func (r *PrintPrintersCollectionRequest) Add(ctx context.Context, reqObj *Printer) (resObj *Printer, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Services returns request builder for PrintService collection
func (b *PrintRequestBuilder) Services() *PrintServicesCollectionRequestBuilder {
	bb := &PrintServicesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/services"
	return bb
}

// PrintServicesCollectionRequestBuilder is request builder for PrintService collection rcn
type PrintServicesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintService collection
func (b *PrintServicesCollectionRequestBuilder) Request() *PrintServicesCollectionRequest {
	return &PrintServicesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintService item
func (b *PrintServicesCollectionRequestBuilder) ID(id string) *PrintServiceRequestBuilder {
	bb := &PrintServiceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrintServicesCollectionRequest is request for PrintService collection
type PrintServicesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintService collection
func (r *PrintServicesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintService, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintService
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintService
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintService collection, max N pages
func (r *PrintServicesCollectionRequest) GetN(ctx context.Context, n int) ([]PrintService, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintService collection
func (r *PrintServicesCollectionRequest) Get(ctx context.Context) ([]PrintService, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintService collection
func (r *PrintServicesCollectionRequest) Add(ctx context.Context, reqObj *PrintService) (resObj *PrintService, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Shares returns request builder for PrinterShare collection
func (b *PrintRequestBuilder) Shares() *PrintSharesCollectionRequestBuilder {
	bb := &PrintSharesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/shares"
	return bb
}

// PrintSharesCollectionRequestBuilder is request builder for PrinterShare collection rcn
type PrintSharesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrinterShare collection
func (b *PrintSharesCollectionRequestBuilder) Request() *PrintSharesCollectionRequest {
	return &PrintSharesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrinterShare item
func (b *PrintSharesCollectionRequestBuilder) ID(id string) *PrinterShareRequestBuilder {
	bb := &PrinterShareRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrintSharesCollectionRequest is request for PrinterShare collection
type PrintSharesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrinterShare collection
func (r *PrintSharesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrinterShare, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrinterShare
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrinterShare
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrinterShare collection, max N pages
func (r *PrintSharesCollectionRequest) GetN(ctx context.Context, n int) ([]PrinterShare, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrinterShare collection
func (r *PrintSharesCollectionRequest) Get(ctx context.Context) ([]PrinterShare, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrinterShare collection
func (r *PrintSharesCollectionRequest) Add(ctx context.Context, reqObj *PrinterShare) (resObj *PrinterShare, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TaskDefinitions returns request builder for PrintTaskDefinition collection
func (b *PrintRequestBuilder) TaskDefinitions() *PrintTaskDefinitionsCollectionRequestBuilder {
	bb := &PrintTaskDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskDefinitions"
	return bb
}

// PrintTaskDefinitionsCollectionRequestBuilder is request builder for PrintTaskDefinition collection rcn
type PrintTaskDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintTaskDefinition collection
func (b *PrintTaskDefinitionsCollectionRequestBuilder) Request() *PrintTaskDefinitionsCollectionRequest {
	return &PrintTaskDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintTaskDefinition item
func (b *PrintTaskDefinitionsCollectionRequestBuilder) ID(id string) *PrintTaskDefinitionRequestBuilder {
	bb := &PrintTaskDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrintTaskDefinitionsCollectionRequest is request for PrintTaskDefinition collection
type PrintTaskDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintTaskDefinition collection
func (r *PrintTaskDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintTaskDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintTaskDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintTaskDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintTaskDefinition collection, max N pages
func (r *PrintTaskDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]PrintTaskDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintTaskDefinition collection
func (r *PrintTaskDefinitionsCollectionRequest) Get(ctx context.Context) ([]PrintTaskDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintTaskDefinition collection
func (r *PrintTaskDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *PrintTaskDefinition) (resObj *PrintTaskDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Documents returns request builder for PrintDocument collection
func (b *PrintJobRequestBuilder) Documents() *PrintJobDocumentsCollectionRequestBuilder {
	bb := &PrintJobDocumentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/documents"
	return bb
}

// PrintJobDocumentsCollectionRequestBuilder is request builder for PrintDocument collection rcn
type PrintJobDocumentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintDocument collection
func (b *PrintJobDocumentsCollectionRequestBuilder) Request() *PrintJobDocumentsCollectionRequest {
	return &PrintJobDocumentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintDocument item
func (b *PrintJobDocumentsCollectionRequestBuilder) ID(id string) *PrintDocumentRequestBuilder {
	bb := &PrintDocumentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrintJobDocumentsCollectionRequest is request for PrintDocument collection
type PrintJobDocumentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintDocument collection
func (r *PrintJobDocumentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintDocument, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintDocument
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintDocument
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintDocument collection, max N pages
func (r *PrintJobDocumentsCollectionRequest) GetN(ctx context.Context, n int) ([]PrintDocument, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintDocument collection
func (r *PrintJobDocumentsCollectionRequest) Get(ctx context.Context) ([]PrintDocument, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintDocument collection
func (r *PrintJobDocumentsCollectionRequest) Add(ctx context.Context, reqObj *PrintDocument) (resObj *PrintDocument, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Tasks returns request builder for PrintTask collection
func (b *PrintJobRequestBuilder) Tasks() *PrintJobTasksCollectionRequestBuilder {
	bb := &PrintJobTasksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tasks"
	return bb
}

// PrintJobTasksCollectionRequestBuilder is request builder for PrintTask collection rcn
type PrintJobTasksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintTask collection
func (b *PrintJobTasksCollectionRequestBuilder) Request() *PrintJobTasksCollectionRequest {
	return &PrintJobTasksCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintTask item
func (b *PrintJobTasksCollectionRequestBuilder) ID(id string) *PrintTaskRequestBuilder {
	bb := &PrintTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrintJobTasksCollectionRequest is request for PrintTask collection
type PrintJobTasksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintTask collection
func (r *PrintJobTasksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintTask, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintTask
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintTask
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintTask collection, max N pages
func (r *PrintJobTasksCollectionRequest) GetN(ctx context.Context, n int) ([]PrintTask, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintTask collection
func (r *PrintJobTasksCollectionRequest) Get(ctx context.Context) ([]PrintTask, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintTask collection
func (r *PrintJobTasksCollectionRequest) Add(ctx context.Context, reqObj *PrintTask) (resObj *PrintTask, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Endpoints returns request builder for PrintServiceEndpoint collection
func (b *PrintServiceRequestBuilder) Endpoints() *PrintServiceEndpointsCollectionRequestBuilder {
	bb := &PrintServiceEndpointsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/endpoints"
	return bb
}

// PrintServiceEndpointsCollectionRequestBuilder is request builder for PrintServiceEndpoint collection rcn
type PrintServiceEndpointsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintServiceEndpoint collection
func (b *PrintServiceEndpointsCollectionRequestBuilder) Request() *PrintServiceEndpointsCollectionRequest {
	return &PrintServiceEndpointsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintServiceEndpoint item
func (b *PrintServiceEndpointsCollectionRequestBuilder) ID(id string) *PrintServiceEndpointRequestBuilder {
	bb := &PrintServiceEndpointRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrintServiceEndpointsCollectionRequest is request for PrintServiceEndpoint collection
type PrintServiceEndpointsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintServiceEndpoint collection
func (r *PrintServiceEndpointsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintServiceEndpoint, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintServiceEndpoint
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintServiceEndpoint
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintServiceEndpoint collection, max N pages
func (r *PrintServiceEndpointsCollectionRequest) GetN(ctx context.Context, n int) ([]PrintServiceEndpoint, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintServiceEndpoint collection
func (r *PrintServiceEndpointsCollectionRequest) Get(ctx context.Context) ([]PrintServiceEndpoint, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintServiceEndpoint collection
func (r *PrintServiceEndpointsCollectionRequest) Add(ctx context.Context, reqObj *PrintServiceEndpoint) (resObj *PrintServiceEndpoint, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Definition is navigation property rn
func (b *PrintTaskRequestBuilder) Definition() *PrintTaskDefinitionRequestBuilder {
	bb := &PrintTaskDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/definition"
	return bb
}

// Trigger is navigation property rn
func (b *PrintTaskRequestBuilder) Trigger() *PrintTaskTriggerRequestBuilder {
	bb := &PrintTaskTriggerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/trigger"
	return bb
}

// Tasks returns request builder for PrintTask collection
func (b *PrintTaskDefinitionRequestBuilder) Tasks() *PrintTaskDefinitionTasksCollectionRequestBuilder {
	bb := &PrintTaskDefinitionTasksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tasks"
	return bb
}

// PrintTaskDefinitionTasksCollectionRequestBuilder is request builder for PrintTask collection rcn
type PrintTaskDefinitionTasksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintTask collection
func (b *PrintTaskDefinitionTasksCollectionRequestBuilder) Request() *PrintTaskDefinitionTasksCollectionRequest {
	return &PrintTaskDefinitionTasksCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintTask item
func (b *PrintTaskDefinitionTasksCollectionRequestBuilder) ID(id string) *PrintTaskRequestBuilder {
	bb := &PrintTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrintTaskDefinitionTasksCollectionRequest is request for PrintTask collection
type PrintTaskDefinitionTasksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintTask collection
func (r *PrintTaskDefinitionTasksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintTask, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintTask
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintTask
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintTask collection, max N pages
func (r *PrintTaskDefinitionTasksCollectionRequest) GetN(ctx context.Context, n int) ([]PrintTask, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintTask collection
func (r *PrintTaskDefinitionTasksCollectionRequest) Get(ctx context.Context) ([]PrintTask, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintTask collection
func (r *PrintTaskDefinitionTasksCollectionRequest) Add(ctx context.Context, reqObj *PrintTask) (resObj *PrintTask, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Definition is navigation property rn
func (b *PrintTaskTriggerRequestBuilder) Definition() *PrintTaskDefinitionRequestBuilder {
	bb := &PrintTaskDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/definition"
	return bb
}

// Entity is navigation property rn
func (b *PrintConnectorRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrintDocumentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrintJobRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrintOperationRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrintServiceRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrintServiceEndpointRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrintTaskRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrintTaskDefinitionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrintTaskTriggerRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrintUsageRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrintUsageByPrinterRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrintUsageByUserRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
