// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// ServiceUpdateMessageCollectionArchiveRequestParameter undocumented
type ServiceUpdateMessageCollectionArchiveRequestParameter struct {
	// MessageIDs undocumented
	MessageIDs []string `json:"messageIds,omitempty"`
}

// ServiceUpdateMessageCollectionFavoriteRequestParameter undocumented
type ServiceUpdateMessageCollectionFavoriteRequestParameter struct {
	// MessageIDs undocumented
	MessageIDs []string `json:"messageIds,omitempty"`
}

// ServiceUpdateMessageCollectionMarkReadRequestParameter undocumented
type ServiceUpdateMessageCollectionMarkReadRequestParameter struct {
	// MessageIDs undocumented
	MessageIDs []string `json:"messageIds,omitempty"`
}

// ServiceUpdateMessageCollectionMarkUnreadRequestParameter undocumented
type ServiceUpdateMessageCollectionMarkUnreadRequestParameter struct {
	// MessageIDs undocumented
	MessageIDs []string `json:"messageIds,omitempty"`
}

// ServiceUpdateMessageCollectionUnarchiveRequestParameter undocumented
type ServiceUpdateMessageCollectionUnarchiveRequestParameter struct {
	// MessageIDs undocumented
	MessageIDs []string `json:"messageIds,omitempty"`
}

// ServiceUpdateMessageCollectionUnfavoriteRequestParameter undocumented
type ServiceUpdateMessageCollectionUnfavoriteRequestParameter struct {
	// MessageIDs undocumented
	MessageIDs []string `json:"messageIds,omitempty"`
}

// ServicePrincipalAddKeyRequestParameter undocumented
type ServicePrincipalAddKeyRequestParameter struct {
	// KeyCredential undocumented
	KeyCredential *KeyCredential `json:"keyCredential,omitempty"`
	// PasswordCredential undocumented
	PasswordCredential *PasswordCredential `json:"passwordCredential,omitempty"`
	// Proof undocumented
	Proof *string `json:"proof,omitempty"`
}

// ServicePrincipalAddPasswordRequestParameter undocumented
type ServicePrincipalAddPasswordRequestParameter struct {
	// PasswordCredential undocumented
	PasswordCredential *PasswordCredential `json:"passwordCredential,omitempty"`
}

// ServicePrincipalRemoveKeyRequestParameter undocumented
type ServicePrincipalRemoveKeyRequestParameter struct {
	// KeyID undocumented
	KeyID *UUID `json:"keyId,omitempty"`
	// Proof undocumented
	Proof *string `json:"proof,omitempty"`
}

// ServicePrincipalRemovePasswordRequestParameter undocumented
type ServicePrincipalRemovePasswordRequestParameter struct {
	// KeyID undocumented
	KeyID *UUID `json:"keyId,omitempty"`
}

// ServicePrincipalAddTokenSigningCertificateRequestParameter undocumented
type ServicePrincipalAddTokenSigningCertificateRequestParameter struct {
	// DisplayName undocumented
	DisplayName *string `json:"displayName,omitempty"`
	// EndDateTime undocumented
	EndDateTime *time.Time `json:"endDateTime,omitempty"`
}

// HealthOverviews returns request builder for ServiceHealth collection rcn
func (b *ServiceAnnouncementRequestBuilder) HealthOverviews() *ServiceAnnouncementHealthOverviewsCollectionRequestBuilder {
	bb := &ServiceAnnouncementHealthOverviewsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/healthOverviews"
	return bb
}

// ServiceAnnouncementHealthOverviewsCollectionRequestBuilder is request builder for ServiceHealth collection
type ServiceAnnouncementHealthOverviewsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ServiceHealth collection
func (b *ServiceAnnouncementHealthOverviewsCollectionRequestBuilder) Request() *ServiceAnnouncementHealthOverviewsCollectionRequest {
	return &ServiceAnnouncementHealthOverviewsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ServiceHealth item
func (b *ServiceAnnouncementHealthOverviewsCollectionRequestBuilder) ID(id string) *ServiceHealthRequestBuilder {
	bb := &ServiceHealthRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServiceAnnouncementHealthOverviewsCollectionRequest is request for ServiceHealth collection
type ServiceAnnouncementHealthOverviewsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ServiceHealth collection
func (r *ServiceAnnouncementHealthOverviewsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ServiceHealth, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ServiceHealth
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ServiceHealth
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ServiceHealth collection, max N pages
func (r *ServiceAnnouncementHealthOverviewsCollectionRequest) GetN(ctx context.Context, n int) ([]ServiceHealth, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ServiceHealth collection
func (r *ServiceAnnouncementHealthOverviewsCollectionRequest) Get(ctx context.Context) ([]ServiceHealth, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ServiceHealth collection
func (r *ServiceAnnouncementHealthOverviewsCollectionRequest) Add(ctx context.Context, reqObj *ServiceHealth) (resObj *ServiceHealth, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Issues returns request builder for ServiceHealthIssue collection rcn
func (b *ServiceAnnouncementRequestBuilder) Issues() *ServiceAnnouncementIssuesCollectionRequestBuilder {
	bb := &ServiceAnnouncementIssuesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/issues"
	return bb
}

// ServiceAnnouncementIssuesCollectionRequestBuilder is request builder for ServiceHealthIssue collection
type ServiceAnnouncementIssuesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ServiceHealthIssue collection
func (b *ServiceAnnouncementIssuesCollectionRequestBuilder) Request() *ServiceAnnouncementIssuesCollectionRequest {
	return &ServiceAnnouncementIssuesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ServiceHealthIssue item
func (b *ServiceAnnouncementIssuesCollectionRequestBuilder) ID(id string) *ServiceHealthIssueRequestBuilder {
	bb := &ServiceHealthIssueRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServiceAnnouncementIssuesCollectionRequest is request for ServiceHealthIssue collection
type ServiceAnnouncementIssuesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ServiceHealthIssue collection
func (r *ServiceAnnouncementIssuesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ServiceHealthIssue, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ServiceHealthIssue
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ServiceHealthIssue
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ServiceHealthIssue collection, max N pages
func (r *ServiceAnnouncementIssuesCollectionRequest) GetN(ctx context.Context, n int) ([]ServiceHealthIssue, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ServiceHealthIssue collection
func (r *ServiceAnnouncementIssuesCollectionRequest) Get(ctx context.Context) ([]ServiceHealthIssue, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ServiceHealthIssue collection
func (r *ServiceAnnouncementIssuesCollectionRequest) Add(ctx context.Context, reqObj *ServiceHealthIssue) (resObj *ServiceHealthIssue, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Messages returns request builder for ServiceUpdateMessage collection rcn
func (b *ServiceAnnouncementRequestBuilder) Messages() *ServiceAnnouncementMessagesCollectionRequestBuilder {
	bb := &ServiceAnnouncementMessagesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/messages"
	return bb
}

// ServiceAnnouncementMessagesCollectionRequestBuilder is request builder for ServiceUpdateMessage collection
type ServiceAnnouncementMessagesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ServiceUpdateMessage collection
func (b *ServiceAnnouncementMessagesCollectionRequestBuilder) Request() *ServiceAnnouncementMessagesCollectionRequest {
	return &ServiceAnnouncementMessagesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ServiceUpdateMessage item
func (b *ServiceAnnouncementMessagesCollectionRequestBuilder) ID(id string) *ServiceUpdateMessageRequestBuilder {
	bb := &ServiceUpdateMessageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServiceAnnouncementMessagesCollectionRequest is request for ServiceUpdateMessage collection
type ServiceAnnouncementMessagesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ServiceUpdateMessage collection
func (r *ServiceAnnouncementMessagesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ServiceUpdateMessage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ServiceUpdateMessage
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ServiceUpdateMessage
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ServiceUpdateMessage collection, max N pages
func (r *ServiceAnnouncementMessagesCollectionRequest) GetN(ctx context.Context, n int) ([]ServiceUpdateMessage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ServiceUpdateMessage collection
func (r *ServiceAnnouncementMessagesCollectionRequest) Get(ctx context.Context) ([]ServiceUpdateMessage, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ServiceUpdateMessage collection
func (r *ServiceAnnouncementMessagesCollectionRequest) Add(ctx context.Context, reqObj *ServiceUpdateMessage) (resObj *ServiceUpdateMessage, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Issues returns request builder for ServiceHealthIssue collection rcn
func (b *ServiceHealthRequestBuilder) Issues() *ServiceHealthIssuesCollectionRequestBuilder {
	bb := &ServiceHealthIssuesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/issues"
	return bb
}

// ServiceHealthIssuesCollectionRequestBuilder is request builder for ServiceHealthIssue collection
type ServiceHealthIssuesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ServiceHealthIssue collection
func (b *ServiceHealthIssuesCollectionRequestBuilder) Request() *ServiceHealthIssuesCollectionRequest {
	return &ServiceHealthIssuesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ServiceHealthIssue item
func (b *ServiceHealthIssuesCollectionRequestBuilder) ID(id string) *ServiceHealthIssueRequestBuilder {
	bb := &ServiceHealthIssueRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServiceHealthIssuesCollectionRequest is request for ServiceHealthIssue collection
type ServiceHealthIssuesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ServiceHealthIssue collection
func (r *ServiceHealthIssuesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ServiceHealthIssue, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ServiceHealthIssue
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ServiceHealthIssue
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ServiceHealthIssue collection, max N pages
func (r *ServiceHealthIssuesCollectionRequest) GetN(ctx context.Context, n int) ([]ServiceHealthIssue, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ServiceHealthIssue collection
func (r *ServiceHealthIssuesCollectionRequest) Get(ctx context.Context) ([]ServiceHealthIssue, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ServiceHealthIssue collection
func (r *ServiceHealthIssuesCollectionRequest) Add(ctx context.Context, reqObj *ServiceHealthIssue) (resObj *ServiceHealthIssue, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppManagementPolicies returns request builder for AppManagementPolicy collection rcn
func (b *ServicePrincipalRequestBuilder) AppManagementPolicies() *ServicePrincipalAppManagementPoliciesCollectionRequestBuilder {
	bb := &ServicePrincipalAppManagementPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appManagementPolicies"
	return bb
}

// ServicePrincipalAppManagementPoliciesCollectionRequestBuilder is request builder for AppManagementPolicy collection
type ServicePrincipalAppManagementPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppManagementPolicy collection
func (b *ServicePrincipalAppManagementPoliciesCollectionRequestBuilder) Request() *ServicePrincipalAppManagementPoliciesCollectionRequest {
	return &ServicePrincipalAppManagementPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppManagementPolicy item
func (b *ServicePrincipalAppManagementPoliciesCollectionRequestBuilder) ID(id string) *AppManagementPolicyRequestBuilder {
	bb := &AppManagementPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalAppManagementPoliciesCollectionRequest is request for AppManagementPolicy collection
type ServicePrincipalAppManagementPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppManagementPolicy collection
func (r *ServicePrincipalAppManagementPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppManagementPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppManagementPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppManagementPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppManagementPolicy collection, max N pages
func (r *ServicePrincipalAppManagementPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]AppManagementPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppManagementPolicy collection
func (r *ServicePrincipalAppManagementPoliciesCollectionRequest) Get(ctx context.Context) ([]AppManagementPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppManagementPolicy collection
func (r *ServicePrincipalAppManagementPoliciesCollectionRequest) Add(ctx context.Context, reqObj *AppManagementPolicy) (resObj *AppManagementPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppRoleAssignedTo returns request builder for AppRoleAssignment collection rcn
func (b *ServicePrincipalRequestBuilder) AppRoleAssignedTo() *ServicePrincipalAppRoleAssignedToCollectionRequestBuilder {
	bb := &ServicePrincipalAppRoleAssignedToCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appRoleAssignedTo"
	return bb
}

// ServicePrincipalAppRoleAssignedToCollectionRequestBuilder is request builder for AppRoleAssignment collection
type ServicePrincipalAppRoleAssignedToCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppRoleAssignment collection
func (b *ServicePrincipalAppRoleAssignedToCollectionRequestBuilder) Request() *ServicePrincipalAppRoleAssignedToCollectionRequest {
	return &ServicePrincipalAppRoleAssignedToCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppRoleAssignment item
func (b *ServicePrincipalAppRoleAssignedToCollectionRequestBuilder) ID(id string) *AppRoleAssignmentRequestBuilder {
	bb := &AppRoleAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalAppRoleAssignedToCollectionRequest is request for AppRoleAssignment collection
type ServicePrincipalAppRoleAssignedToCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppRoleAssignment collection
func (r *ServicePrincipalAppRoleAssignedToCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppRoleAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppRoleAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppRoleAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppRoleAssignment collection, max N pages
func (r *ServicePrincipalAppRoleAssignedToCollectionRequest) GetN(ctx context.Context, n int) ([]AppRoleAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppRoleAssignment collection
func (r *ServicePrincipalAppRoleAssignedToCollectionRequest) Get(ctx context.Context) ([]AppRoleAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppRoleAssignment collection
func (r *ServicePrincipalAppRoleAssignedToCollectionRequest) Add(ctx context.Context, reqObj *AppRoleAssignment) (resObj *AppRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppRoleAssignments returns request builder for AppRoleAssignment collection rcn
func (b *ServicePrincipalRequestBuilder) AppRoleAssignments() *ServicePrincipalAppRoleAssignmentsCollectionRequestBuilder {
	bb := &ServicePrincipalAppRoleAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appRoleAssignments"
	return bb
}

// ServicePrincipalAppRoleAssignmentsCollectionRequestBuilder is request builder for AppRoleAssignment collection
type ServicePrincipalAppRoleAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppRoleAssignment collection
func (b *ServicePrincipalAppRoleAssignmentsCollectionRequestBuilder) Request() *ServicePrincipalAppRoleAssignmentsCollectionRequest {
	return &ServicePrincipalAppRoleAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppRoleAssignment item
func (b *ServicePrincipalAppRoleAssignmentsCollectionRequestBuilder) ID(id string) *AppRoleAssignmentRequestBuilder {
	bb := &AppRoleAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalAppRoleAssignmentsCollectionRequest is request for AppRoleAssignment collection
type ServicePrincipalAppRoleAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppRoleAssignment collection
func (r *ServicePrincipalAppRoleAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppRoleAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppRoleAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppRoleAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppRoleAssignment collection, max N pages
func (r *ServicePrincipalAppRoleAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]AppRoleAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppRoleAssignment collection
func (r *ServicePrincipalAppRoleAssignmentsCollectionRequest) Get(ctx context.Context) ([]AppRoleAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppRoleAssignment collection
func (r *ServicePrincipalAppRoleAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *AppRoleAssignment) (resObj *AppRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ClaimsMappingPolicies returns request builder for ClaimsMappingPolicy collection rcn
func (b *ServicePrincipalRequestBuilder) ClaimsMappingPolicies() *ServicePrincipalClaimsMappingPoliciesCollectionRequestBuilder {
	bb := &ServicePrincipalClaimsMappingPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/claimsMappingPolicies"
	return bb
}

// ServicePrincipalClaimsMappingPoliciesCollectionRequestBuilder is request builder for ClaimsMappingPolicy collection
type ServicePrincipalClaimsMappingPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ClaimsMappingPolicy collection
func (b *ServicePrincipalClaimsMappingPoliciesCollectionRequestBuilder) Request() *ServicePrincipalClaimsMappingPoliciesCollectionRequest {
	return &ServicePrincipalClaimsMappingPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ClaimsMappingPolicy item
func (b *ServicePrincipalClaimsMappingPoliciesCollectionRequestBuilder) ID(id string) *ClaimsMappingPolicyRequestBuilder {
	bb := &ClaimsMappingPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalClaimsMappingPoliciesCollectionRequest is request for ClaimsMappingPolicy collection
type ServicePrincipalClaimsMappingPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ClaimsMappingPolicy collection
func (r *ServicePrincipalClaimsMappingPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ClaimsMappingPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ClaimsMappingPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ClaimsMappingPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ClaimsMappingPolicy collection, max N pages
func (r *ServicePrincipalClaimsMappingPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]ClaimsMappingPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ClaimsMappingPolicy collection
func (r *ServicePrincipalClaimsMappingPoliciesCollectionRequest) Get(ctx context.Context) ([]ClaimsMappingPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ClaimsMappingPolicy collection
func (r *ServicePrincipalClaimsMappingPoliciesCollectionRequest) Add(ctx context.Context, reqObj *ClaimsMappingPolicy) (resObj *ClaimsMappingPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CreatedObjects returns request builder for DirectoryObject collection rcn
func (b *ServicePrincipalRequestBuilder) CreatedObjects() *ServicePrincipalCreatedObjectsCollectionRequestBuilder {
	bb := &ServicePrincipalCreatedObjectsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/createdObjects"
	return bb
}

// ServicePrincipalCreatedObjectsCollectionRequestBuilder is request builder for DirectoryObject collection
type ServicePrincipalCreatedObjectsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *ServicePrincipalCreatedObjectsCollectionRequestBuilder) Request() *ServicePrincipalCreatedObjectsCollectionRequest {
	return &ServicePrincipalCreatedObjectsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *ServicePrincipalCreatedObjectsCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalCreatedObjectsCollectionRequest is request for DirectoryObject collection
type ServicePrincipalCreatedObjectsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *ServicePrincipalCreatedObjectsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *ServicePrincipalCreatedObjectsCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *ServicePrincipalCreatedObjectsCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *ServicePrincipalCreatedObjectsCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DelegatedPermissionClassifications returns request builder for DelegatedPermissionClassification collection rcn
func (b *ServicePrincipalRequestBuilder) DelegatedPermissionClassifications() *ServicePrincipalDelegatedPermissionClassificationsCollectionRequestBuilder {
	bb := &ServicePrincipalDelegatedPermissionClassificationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/delegatedPermissionClassifications"
	return bb
}

// ServicePrincipalDelegatedPermissionClassificationsCollectionRequestBuilder is request builder for DelegatedPermissionClassification collection
type ServicePrincipalDelegatedPermissionClassificationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DelegatedPermissionClassification collection
func (b *ServicePrincipalDelegatedPermissionClassificationsCollectionRequestBuilder) Request() *ServicePrincipalDelegatedPermissionClassificationsCollectionRequest {
	return &ServicePrincipalDelegatedPermissionClassificationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DelegatedPermissionClassification item
func (b *ServicePrincipalDelegatedPermissionClassificationsCollectionRequestBuilder) ID(id string) *DelegatedPermissionClassificationRequestBuilder {
	bb := &DelegatedPermissionClassificationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalDelegatedPermissionClassificationsCollectionRequest is request for DelegatedPermissionClassification collection
type ServicePrincipalDelegatedPermissionClassificationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DelegatedPermissionClassification collection
func (r *ServicePrincipalDelegatedPermissionClassificationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DelegatedPermissionClassification, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DelegatedPermissionClassification
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DelegatedPermissionClassification
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DelegatedPermissionClassification collection, max N pages
func (r *ServicePrincipalDelegatedPermissionClassificationsCollectionRequest) GetN(ctx context.Context, n int) ([]DelegatedPermissionClassification, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DelegatedPermissionClassification collection
func (r *ServicePrincipalDelegatedPermissionClassificationsCollectionRequest) Get(ctx context.Context) ([]DelegatedPermissionClassification, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DelegatedPermissionClassification collection
func (r *ServicePrincipalDelegatedPermissionClassificationsCollectionRequest) Add(ctx context.Context, reqObj *DelegatedPermissionClassification) (resObj *DelegatedPermissionClassification, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Endpoints returns request builder for Endpoint collection rcn
func (b *ServicePrincipalRequestBuilder) Endpoints() *ServicePrincipalEndpointsCollectionRequestBuilder {
	bb := &ServicePrincipalEndpointsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/endpoints"
	return bb
}

// ServicePrincipalEndpointsCollectionRequestBuilder is request builder for Endpoint collection
type ServicePrincipalEndpointsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Endpoint collection
func (b *ServicePrincipalEndpointsCollectionRequestBuilder) Request() *ServicePrincipalEndpointsCollectionRequest {
	return &ServicePrincipalEndpointsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Endpoint item
func (b *ServicePrincipalEndpointsCollectionRequestBuilder) ID(id string) *EndpointRequestBuilder {
	bb := &EndpointRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalEndpointsCollectionRequest is request for Endpoint collection
type ServicePrincipalEndpointsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Endpoint collection
func (r *ServicePrincipalEndpointsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Endpoint, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Endpoint
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Endpoint
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Endpoint collection, max N pages
func (r *ServicePrincipalEndpointsCollectionRequest) GetN(ctx context.Context, n int) ([]Endpoint, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Endpoint collection
func (r *ServicePrincipalEndpointsCollectionRequest) Get(ctx context.Context) ([]Endpoint, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Endpoint collection
func (r *ServicePrincipalEndpointsCollectionRequest) Add(ctx context.Context, reqObj *Endpoint) (resObj *Endpoint, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// FederatedIdentityCredentials returns request builder for FederatedIdentityCredential collection rcn
func (b *ServicePrincipalRequestBuilder) FederatedIdentityCredentials() *ServicePrincipalFederatedIdentityCredentialsCollectionRequestBuilder {
	bb := &ServicePrincipalFederatedIdentityCredentialsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/federatedIdentityCredentials"
	return bb
}

// ServicePrincipalFederatedIdentityCredentialsCollectionRequestBuilder is request builder for FederatedIdentityCredential collection
type ServicePrincipalFederatedIdentityCredentialsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for FederatedIdentityCredential collection
func (b *ServicePrincipalFederatedIdentityCredentialsCollectionRequestBuilder) Request() *ServicePrincipalFederatedIdentityCredentialsCollectionRequest {
	return &ServicePrincipalFederatedIdentityCredentialsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for FederatedIdentityCredential item
func (b *ServicePrincipalFederatedIdentityCredentialsCollectionRequestBuilder) ID(id string) *FederatedIdentityCredentialRequestBuilder {
	bb := &FederatedIdentityCredentialRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalFederatedIdentityCredentialsCollectionRequest is request for FederatedIdentityCredential collection
type ServicePrincipalFederatedIdentityCredentialsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for FederatedIdentityCredential collection
func (r *ServicePrincipalFederatedIdentityCredentialsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]FederatedIdentityCredential, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []FederatedIdentityCredential
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []FederatedIdentityCredential
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for FederatedIdentityCredential collection, max N pages
func (r *ServicePrincipalFederatedIdentityCredentialsCollectionRequest) GetN(ctx context.Context, n int) ([]FederatedIdentityCredential, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for FederatedIdentityCredential collection
func (r *ServicePrincipalFederatedIdentityCredentialsCollectionRequest) Get(ctx context.Context) ([]FederatedIdentityCredential, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for FederatedIdentityCredential collection
func (r *ServicePrincipalFederatedIdentityCredentialsCollectionRequest) Add(ctx context.Context, reqObj *FederatedIdentityCredential) (resObj *FederatedIdentityCredential, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// HomeRealmDiscoveryPolicies returns request builder for HomeRealmDiscoveryPolicy collection rcn
func (b *ServicePrincipalRequestBuilder) HomeRealmDiscoveryPolicies() *ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequestBuilder {
	bb := &ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/homeRealmDiscoveryPolicies"
	return bb
}

// ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequestBuilder is request builder for HomeRealmDiscoveryPolicy collection
type ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for HomeRealmDiscoveryPolicy collection
func (b *ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequestBuilder) Request() *ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequest {
	return &ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for HomeRealmDiscoveryPolicy item
func (b *ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequestBuilder) ID(id string) *HomeRealmDiscoveryPolicyRequestBuilder {
	bb := &HomeRealmDiscoveryPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequest is request for HomeRealmDiscoveryPolicy collection
type ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for HomeRealmDiscoveryPolicy collection
func (r *ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]HomeRealmDiscoveryPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []HomeRealmDiscoveryPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []HomeRealmDiscoveryPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for HomeRealmDiscoveryPolicy collection, max N pages
func (r *ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]HomeRealmDiscoveryPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for HomeRealmDiscoveryPolicy collection
func (r *ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequest) Get(ctx context.Context) ([]HomeRealmDiscoveryPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for HomeRealmDiscoveryPolicy collection
func (r *ServicePrincipalHomeRealmDiscoveryPoliciesCollectionRequest) Add(ctx context.Context, reqObj *HomeRealmDiscoveryPolicy) (resObj *HomeRealmDiscoveryPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MemberOf returns request builder for DirectoryObject collection rcn
func (b *ServicePrincipalRequestBuilder) MemberOf() *ServicePrincipalMemberOfCollectionRequestBuilder {
	bb := &ServicePrincipalMemberOfCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/memberOf"
	return bb
}

// ServicePrincipalMemberOfCollectionRequestBuilder is request builder for DirectoryObject collection
type ServicePrincipalMemberOfCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *ServicePrincipalMemberOfCollectionRequestBuilder) Request() *ServicePrincipalMemberOfCollectionRequest {
	return &ServicePrincipalMemberOfCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *ServicePrincipalMemberOfCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalMemberOfCollectionRequest is request for DirectoryObject collection
type ServicePrincipalMemberOfCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *ServicePrincipalMemberOfCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *ServicePrincipalMemberOfCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *ServicePrincipalMemberOfCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *ServicePrincipalMemberOfCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// OAuth2PermissionGrants returns request builder for OAuth2PermissionGrant collection rcn
func (b *ServicePrincipalRequestBuilder) OAuth2PermissionGrants() *ServicePrincipalOAuth2PermissionGrantsCollectionRequestBuilder {
	bb := &ServicePrincipalOAuth2PermissionGrantsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/oauth2PermissionGrants"
	return bb
}

// ServicePrincipalOAuth2PermissionGrantsCollectionRequestBuilder is request builder for OAuth2PermissionGrant collection
type ServicePrincipalOAuth2PermissionGrantsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for OAuth2PermissionGrant collection
func (b *ServicePrincipalOAuth2PermissionGrantsCollectionRequestBuilder) Request() *ServicePrincipalOAuth2PermissionGrantsCollectionRequest {
	return &ServicePrincipalOAuth2PermissionGrantsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for OAuth2PermissionGrant item
func (b *ServicePrincipalOAuth2PermissionGrantsCollectionRequestBuilder) ID(id string) *OAuth2PermissionGrantRequestBuilder {
	bb := &OAuth2PermissionGrantRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalOAuth2PermissionGrantsCollectionRequest is request for OAuth2PermissionGrant collection
type ServicePrincipalOAuth2PermissionGrantsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for OAuth2PermissionGrant collection
func (r *ServicePrincipalOAuth2PermissionGrantsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]OAuth2PermissionGrant, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []OAuth2PermissionGrant
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []OAuth2PermissionGrant
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for OAuth2PermissionGrant collection, max N pages
func (r *ServicePrincipalOAuth2PermissionGrantsCollectionRequest) GetN(ctx context.Context, n int) ([]OAuth2PermissionGrant, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for OAuth2PermissionGrant collection
func (r *ServicePrincipalOAuth2PermissionGrantsCollectionRequest) Get(ctx context.Context) ([]OAuth2PermissionGrant, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for OAuth2PermissionGrant collection
func (r *ServicePrincipalOAuth2PermissionGrantsCollectionRequest) Add(ctx context.Context, reqObj *OAuth2PermissionGrant) (resObj *OAuth2PermissionGrant, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// OwnedObjects returns request builder for DirectoryObject collection rcn
func (b *ServicePrincipalRequestBuilder) OwnedObjects() *ServicePrincipalOwnedObjectsCollectionRequestBuilder {
	bb := &ServicePrincipalOwnedObjectsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/ownedObjects"
	return bb
}

// ServicePrincipalOwnedObjectsCollectionRequestBuilder is request builder for DirectoryObject collection
type ServicePrincipalOwnedObjectsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *ServicePrincipalOwnedObjectsCollectionRequestBuilder) Request() *ServicePrincipalOwnedObjectsCollectionRequest {
	return &ServicePrincipalOwnedObjectsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *ServicePrincipalOwnedObjectsCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalOwnedObjectsCollectionRequest is request for DirectoryObject collection
type ServicePrincipalOwnedObjectsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *ServicePrincipalOwnedObjectsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *ServicePrincipalOwnedObjectsCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *ServicePrincipalOwnedObjectsCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *ServicePrincipalOwnedObjectsCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Owners returns request builder for DirectoryObject collection rcn
func (b *ServicePrincipalRequestBuilder) Owners() *ServicePrincipalOwnersCollectionRequestBuilder {
	bb := &ServicePrincipalOwnersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/owners"
	return bb
}

// ServicePrincipalOwnersCollectionRequestBuilder is request builder for DirectoryObject collection
type ServicePrincipalOwnersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *ServicePrincipalOwnersCollectionRequestBuilder) Request() *ServicePrincipalOwnersCollectionRequest {
	return &ServicePrincipalOwnersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *ServicePrincipalOwnersCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalOwnersCollectionRequest is request for DirectoryObject collection
type ServicePrincipalOwnersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *ServicePrincipalOwnersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *ServicePrincipalOwnersCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *ServicePrincipalOwnersCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *ServicePrincipalOwnersCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TokenIssuancePolicies returns request builder for TokenIssuancePolicy collection rcn
func (b *ServicePrincipalRequestBuilder) TokenIssuancePolicies() *ServicePrincipalTokenIssuancePoliciesCollectionRequestBuilder {
	bb := &ServicePrincipalTokenIssuancePoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tokenIssuancePolicies"
	return bb
}

// ServicePrincipalTokenIssuancePoliciesCollectionRequestBuilder is request builder for TokenIssuancePolicy collection
type ServicePrincipalTokenIssuancePoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TokenIssuancePolicy collection
func (b *ServicePrincipalTokenIssuancePoliciesCollectionRequestBuilder) Request() *ServicePrincipalTokenIssuancePoliciesCollectionRequest {
	return &ServicePrincipalTokenIssuancePoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TokenIssuancePolicy item
func (b *ServicePrincipalTokenIssuancePoliciesCollectionRequestBuilder) ID(id string) *TokenIssuancePolicyRequestBuilder {
	bb := &TokenIssuancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalTokenIssuancePoliciesCollectionRequest is request for TokenIssuancePolicy collection
type ServicePrincipalTokenIssuancePoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TokenIssuancePolicy collection
func (r *ServicePrincipalTokenIssuancePoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TokenIssuancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TokenIssuancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TokenIssuancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TokenIssuancePolicy collection, max N pages
func (r *ServicePrincipalTokenIssuancePoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]TokenIssuancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TokenIssuancePolicy collection
func (r *ServicePrincipalTokenIssuancePoliciesCollectionRequest) Get(ctx context.Context) ([]TokenIssuancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TokenIssuancePolicy collection
func (r *ServicePrincipalTokenIssuancePoliciesCollectionRequest) Add(ctx context.Context, reqObj *TokenIssuancePolicy) (resObj *TokenIssuancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TokenLifetimePolicies returns request builder for TokenLifetimePolicy collection rcn
func (b *ServicePrincipalRequestBuilder) TokenLifetimePolicies() *ServicePrincipalTokenLifetimePoliciesCollectionRequestBuilder {
	bb := &ServicePrincipalTokenLifetimePoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tokenLifetimePolicies"
	return bb
}

// ServicePrincipalTokenLifetimePoliciesCollectionRequestBuilder is request builder for TokenLifetimePolicy collection
type ServicePrincipalTokenLifetimePoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TokenLifetimePolicy collection
func (b *ServicePrincipalTokenLifetimePoliciesCollectionRequestBuilder) Request() *ServicePrincipalTokenLifetimePoliciesCollectionRequest {
	return &ServicePrincipalTokenLifetimePoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TokenLifetimePolicy item
func (b *ServicePrincipalTokenLifetimePoliciesCollectionRequestBuilder) ID(id string) *TokenLifetimePolicyRequestBuilder {
	bb := &TokenLifetimePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalTokenLifetimePoliciesCollectionRequest is request for TokenLifetimePolicy collection
type ServicePrincipalTokenLifetimePoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TokenLifetimePolicy collection
func (r *ServicePrincipalTokenLifetimePoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TokenLifetimePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TokenLifetimePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TokenLifetimePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TokenLifetimePolicy collection, max N pages
func (r *ServicePrincipalTokenLifetimePoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]TokenLifetimePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TokenLifetimePolicy collection
func (r *ServicePrincipalTokenLifetimePoliciesCollectionRequest) Get(ctx context.Context) ([]TokenLifetimePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TokenLifetimePolicy collection
func (r *ServicePrincipalTokenLifetimePoliciesCollectionRequest) Add(ctx context.Context, reqObj *TokenLifetimePolicy) (resObj *TokenLifetimePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TransitiveMemberOf returns request builder for DirectoryObject collection rcn
func (b *ServicePrincipalRequestBuilder) TransitiveMemberOf() *ServicePrincipalTransitiveMemberOfCollectionRequestBuilder {
	bb := &ServicePrincipalTransitiveMemberOfCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/transitiveMemberOf"
	return bb
}

// ServicePrincipalTransitiveMemberOfCollectionRequestBuilder is request builder for DirectoryObject collection
type ServicePrincipalTransitiveMemberOfCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *ServicePrincipalTransitiveMemberOfCollectionRequestBuilder) Request() *ServicePrincipalTransitiveMemberOfCollectionRequest {
	return &ServicePrincipalTransitiveMemberOfCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *ServicePrincipalTransitiveMemberOfCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServicePrincipalTransitiveMemberOfCollectionRequest is request for DirectoryObject collection
type ServicePrincipalTransitiveMemberOfCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *ServicePrincipalTransitiveMemberOfCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *ServicePrincipalTransitiveMemberOfCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *ServicePrincipalTransitiveMemberOfCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *ServicePrincipalTransitiveMemberOfCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Attachments returns request builder for ServiceAnnouncementAttachment collection rcn
func (b *ServiceUpdateMessageRequestBuilder) Attachments() *ServiceUpdateMessageAttachmentsCollectionRequestBuilder {
	bb := &ServiceUpdateMessageAttachmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/attachments"
	return bb
}

// ServiceUpdateMessageAttachmentsCollectionRequestBuilder is request builder for ServiceAnnouncementAttachment collection
type ServiceUpdateMessageAttachmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ServiceAnnouncementAttachment collection
func (b *ServiceUpdateMessageAttachmentsCollectionRequestBuilder) Request() *ServiceUpdateMessageAttachmentsCollectionRequest {
	return &ServiceUpdateMessageAttachmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ServiceAnnouncementAttachment item
func (b *ServiceUpdateMessageAttachmentsCollectionRequestBuilder) ID(id string) *ServiceAnnouncementAttachmentRequestBuilder {
	bb := &ServiceAnnouncementAttachmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ServiceUpdateMessageAttachmentsCollectionRequest is request for ServiceAnnouncementAttachment collection
type ServiceUpdateMessageAttachmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ServiceAnnouncementAttachment collection
func (r *ServiceUpdateMessageAttachmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ServiceAnnouncementAttachment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ServiceAnnouncementAttachment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ServiceAnnouncementAttachment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ServiceAnnouncementAttachment collection, max N pages
func (r *ServiceUpdateMessageAttachmentsCollectionRequest) GetN(ctx context.Context, n int) ([]ServiceAnnouncementAttachment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ServiceAnnouncementAttachment collection
func (r *ServiceUpdateMessageAttachmentsCollectionRequest) Get(ctx context.Context) ([]ServiceAnnouncementAttachment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ServiceAnnouncementAttachment collection
func (r *ServiceUpdateMessageAttachmentsCollectionRequest) Add(ctx context.Context, reqObj *ServiceAnnouncementAttachment) (resObj *ServiceAnnouncementAttachment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ServiceAnnouncementRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ServiceAnnouncementAttachmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ServiceAnnouncementBaseRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ServiceHealthRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// ServicePrincipal returns request builder for ServicePrincipal collection rcn
func (b *DirectoryObjectRequestBuilder) ServicePrincipal() *DirectoryObjectServicePrincipalCollectionRequestBuilder {
	bb := &DirectoryObjectServicePrincipalCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/ServicePrincipal"
	return bb
}

// DirectoryObjectServicePrincipalCollectionRequestBuilder is request builder for ServicePrincipal collection
type DirectoryObjectServicePrincipalCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ServicePrincipal collection
func (b *DirectoryObjectServicePrincipalCollectionRequestBuilder) Request() *DirectoryObjectServicePrincipalCollectionRequest {
	return &DirectoryObjectServicePrincipalCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ServicePrincipal item
func (b *DirectoryObjectServicePrincipalCollectionRequestBuilder) ID(id string) *ServicePrincipalRequestBuilder {
	bb := &ServicePrincipalRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryObjectServicePrincipalCollectionRequest is request for ServicePrincipal collection
type DirectoryObjectServicePrincipalCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ServicePrincipal collection
func (r *DirectoryObjectServicePrincipalCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ServicePrincipal, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ServicePrincipal
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ServicePrincipal
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ServicePrincipal collection, max N pages
func (r *DirectoryObjectServicePrincipalCollectionRequest) GetN(ctx context.Context, n int) ([]ServicePrincipal, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ServicePrincipal collection
func (r *DirectoryObjectServicePrincipalCollectionRequest) Get(ctx context.Context) ([]ServicePrincipal, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ServicePrincipal collection
func (r *DirectoryObjectServicePrincipalCollectionRequest) Add(ctx context.Context, reqObj *ServicePrincipal) (resObj *ServicePrincipal, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ServicePrincipalRiskDetectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
