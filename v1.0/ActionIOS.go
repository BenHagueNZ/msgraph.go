// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// Apps returns request builder for ManagedMobileApp collection rcn
func (b *IOSManagedAppProtectionRequestBuilder) Apps() *IOSManagedAppProtectionAppsCollectionRequestBuilder {
	bb := &IOSManagedAppProtectionAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/apps"
	return bb
}

// IOSManagedAppProtectionAppsCollectionRequestBuilder is request builder for ManagedMobileApp collection
type IOSManagedAppProtectionAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedMobileApp collection
func (b *IOSManagedAppProtectionAppsCollectionRequestBuilder) Request() *IOSManagedAppProtectionAppsCollectionRequest {
	return &IOSManagedAppProtectionAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedMobileApp item
func (b *IOSManagedAppProtectionAppsCollectionRequestBuilder) ID(id string) *ManagedMobileAppRequestBuilder {
	bb := &ManagedMobileAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSManagedAppProtectionAppsCollectionRequest is request for ManagedMobileApp collection
type IOSManagedAppProtectionAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedMobileApp collection
func (r *IOSManagedAppProtectionAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedMobileApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedMobileApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedMobileApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedMobileApp collection, max N pages
func (r *IOSManagedAppProtectionAppsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedMobileApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedMobileApp collection
func (r *IOSManagedAppProtectionAppsCollectionRequest) Get(ctx context.Context) ([]ManagedMobileApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedMobileApp collection
func (r *IOSManagedAppProtectionAppsCollectionRequest) Add(ctx context.Context, reqObj *ManagedMobileApp) (resObj *ManagedMobileApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeploymentSummary is navigation property rn
func (b *IOSManagedAppProtectionRequestBuilder) DeploymentSummary() *ManagedAppPolicyDeploymentSummaryRequestBuilder {
	bb := &ManagedAppPolicyDeploymentSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deploymentSummary"
	return bb
}

// IOSCertificateProfile returns request builder for IOSCertificateProfile collection rcn
func (b *DeviceConfigurationRequestBuilder) IOSCertificateProfile() *DeviceConfigurationIOSCertificateProfileCollectionRequestBuilder {
	bb := &DeviceConfigurationIOSCertificateProfileCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IosCertificateProfile"
	return bb
}

// DeviceConfigurationIOSCertificateProfileCollectionRequestBuilder is request builder for IOSCertificateProfile collection
type DeviceConfigurationIOSCertificateProfileCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSCertificateProfile collection
func (b *DeviceConfigurationIOSCertificateProfileCollectionRequestBuilder) Request() *DeviceConfigurationIOSCertificateProfileCollectionRequest {
	return &DeviceConfigurationIOSCertificateProfileCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSCertificateProfile item
func (b *DeviceConfigurationIOSCertificateProfileCollectionRequestBuilder) ID(id string) *IOSCertificateProfileRequestBuilder {
	bb := &IOSCertificateProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationIOSCertificateProfileCollectionRequest is request for IOSCertificateProfile collection
type DeviceConfigurationIOSCertificateProfileCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSCertificateProfile collection
func (r *DeviceConfigurationIOSCertificateProfileCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSCertificateProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSCertificateProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSCertificateProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSCertificateProfile collection, max N pages
func (r *DeviceConfigurationIOSCertificateProfileCollectionRequest) GetN(ctx context.Context, n int) ([]IOSCertificateProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSCertificateProfile collection
func (r *DeviceConfigurationIOSCertificateProfileCollectionRequest) Get(ctx context.Context) ([]IOSCertificateProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSCertificateProfile collection
func (r *DeviceConfigurationIOSCertificateProfileCollectionRequest) Add(ctx context.Context, reqObj *IOSCertificateProfile) (resObj *IOSCertificateProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSCompliancePolicy returns request builder for IOSCompliancePolicy collection rcn
func (b *DeviceCompliancePolicyRequestBuilder) IOSCompliancePolicy() *DeviceCompliancePolicyIOSCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceCompliancePolicyIOSCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IosCompliancePolicy"
	return bb
}

// DeviceCompliancePolicyIOSCompliancePolicyCollectionRequestBuilder is request builder for IOSCompliancePolicy collection
type DeviceCompliancePolicyIOSCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSCompliancePolicy collection
func (b *DeviceCompliancePolicyIOSCompliancePolicyCollectionRequestBuilder) Request() *DeviceCompliancePolicyIOSCompliancePolicyCollectionRequest {
	return &DeviceCompliancePolicyIOSCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSCompliancePolicy item
func (b *DeviceCompliancePolicyIOSCompliancePolicyCollectionRequestBuilder) ID(id string) *IOSCompliancePolicyRequestBuilder {
	bb := &IOSCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCompliancePolicyIOSCompliancePolicyCollectionRequest is request for IOSCompliancePolicy collection
type DeviceCompliancePolicyIOSCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSCompliancePolicy collection
func (r *DeviceCompliancePolicyIOSCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSCompliancePolicy collection, max N pages
func (r *DeviceCompliancePolicyIOSCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]IOSCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSCompliancePolicy collection
func (r *DeviceCompliancePolicyIOSCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]IOSCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSCompliancePolicy collection
func (r *DeviceCompliancePolicyIOSCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *IOSCompliancePolicy) (resObj *IOSCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSCustomConfiguration returns request builder for IOSCustomConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) IOSCustomConfiguration() *DeviceConfigurationIOSCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationIOSCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IosCustomConfiguration"
	return bb
}

// DeviceConfigurationIOSCustomConfigurationCollectionRequestBuilder is request builder for IOSCustomConfiguration collection
type DeviceConfigurationIOSCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSCustomConfiguration collection
func (b *DeviceConfigurationIOSCustomConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationIOSCustomConfigurationCollectionRequest {
	return &DeviceConfigurationIOSCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSCustomConfiguration item
func (b *DeviceConfigurationIOSCustomConfigurationCollectionRequestBuilder) ID(id string) *IOSCustomConfigurationRequestBuilder {
	bb := &IOSCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationIOSCustomConfigurationCollectionRequest is request for IOSCustomConfiguration collection
type DeviceConfigurationIOSCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSCustomConfiguration collection
func (r *DeviceConfigurationIOSCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSCustomConfiguration collection, max N pages
func (r *DeviceConfigurationIOSCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSCustomConfiguration collection
func (r *DeviceConfigurationIOSCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSCustomConfiguration collection
func (r *DeviceConfigurationIOSCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSCustomConfiguration) (resObj *IOSCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSGeneralDeviceConfiguration returns request builder for IOSGeneralDeviceConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) IOSGeneralDeviceConfiguration() *DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IosGeneralDeviceConfiguration"
	return bb
}

// DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequestBuilder is request builder for IOSGeneralDeviceConfiguration collection
type DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSGeneralDeviceConfiguration collection
func (b *DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequest {
	return &DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSGeneralDeviceConfiguration item
func (b *DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *IOSGeneralDeviceConfigurationRequestBuilder {
	bb := &IOSGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequest is request for IOSGeneralDeviceConfiguration collection
type DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSGeneralDeviceConfiguration collection
func (r *DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSGeneralDeviceConfiguration collection, max N pages
func (r *DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSGeneralDeviceConfiguration collection
func (r *DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSGeneralDeviceConfiguration collection
func (r *DeviceConfigurationIOSGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSGeneralDeviceConfiguration) (resObj *IOSGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *IOSLobAppProvisioningConfigurationAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// IOSManagedAppRegistration returns request builder for IOSManagedAppRegistration collection rcn
func (b *ManagedAppRegistrationRequestBuilder) IOSManagedAppRegistration() *ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequestBuilder {
	bb := &ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IosManagedAppRegistration"
	return bb
}

// ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequestBuilder is request builder for IOSManagedAppRegistration collection
type ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSManagedAppRegistration collection
func (b *ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequestBuilder) Request() *ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequest {
	return &ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSManagedAppRegistration item
func (b *ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequestBuilder) ID(id string) *IOSManagedAppRegistrationRequestBuilder {
	bb := &IOSManagedAppRegistrationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequest is request for IOSManagedAppRegistration collection
type ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSManagedAppRegistration collection
func (r *ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSManagedAppRegistration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSManagedAppRegistration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSManagedAppRegistration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSManagedAppRegistration collection, max N pages
func (r *ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSManagedAppRegistration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSManagedAppRegistration collection
func (r *ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequest) Get(ctx context.Context) ([]IOSManagedAppRegistration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSManagedAppRegistration collection
func (r *ManagedAppRegistrationIOSManagedAppRegistrationCollectionRequest) Add(ctx context.Context, reqObj *IOSManagedAppRegistration) (resObj *IOSManagedAppRegistration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSMobileAppConfiguration returns request builder for IOSMobileAppConfiguration collection rcn
func (b *ManagedDeviceMobileAppConfigurationRequestBuilder) IOSMobileAppConfiguration() *ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IosMobileAppConfiguration"
	return bb
}

// ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequestBuilder is request builder for IOSMobileAppConfiguration collection
type ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSMobileAppConfiguration collection
func (b *ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequestBuilder) Request() *ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequest {
	return &ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSMobileAppConfiguration item
func (b *ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequestBuilder) ID(id string) *IOSMobileAppConfigurationRequestBuilder {
	bb := &IOSMobileAppConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequest is request for IOSMobileAppConfiguration collection
type ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSMobileAppConfiguration collection
func (r *ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSMobileAppConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSMobileAppConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSMobileAppConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSMobileAppConfiguration collection, max N pages
func (r *ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSMobileAppConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSMobileAppConfiguration collection
func (r *ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSMobileAppConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSMobileAppConfiguration collection
func (r *ManagedDeviceMobileAppConfigurationIOSMobileAppConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSMobileAppConfiguration) (resObj *IOSMobileAppConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSStoreApp returns request builder for IOSStoreApp collection rcn
func (b *MobileAppRequestBuilder) IOSStoreApp() *MobileAppIOSStoreAppCollectionRequestBuilder {
	bb := &MobileAppIOSStoreAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IosStoreApp"
	return bb
}

// MobileAppIOSStoreAppCollectionRequestBuilder is request builder for IOSStoreApp collection
type MobileAppIOSStoreAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSStoreApp collection
func (b *MobileAppIOSStoreAppCollectionRequestBuilder) Request() *MobileAppIOSStoreAppCollectionRequest {
	return &MobileAppIOSStoreAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSStoreApp item
func (b *MobileAppIOSStoreAppCollectionRequestBuilder) ID(id string) *IOSStoreAppRequestBuilder {
	bb := &IOSStoreAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MobileAppIOSStoreAppCollectionRequest is request for IOSStoreApp collection
type MobileAppIOSStoreAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSStoreApp collection
func (r *MobileAppIOSStoreAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSStoreApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSStoreApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSStoreApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSStoreApp collection, max N pages
func (r *MobileAppIOSStoreAppCollectionRequest) GetN(ctx context.Context, n int) ([]IOSStoreApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSStoreApp collection
func (r *MobileAppIOSStoreAppCollectionRequest) Get(ctx context.Context) ([]IOSStoreApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSStoreApp collection
func (r *MobileAppIOSStoreAppCollectionRequest) Add(ctx context.Context, reqObj *IOSStoreApp) (resObj *IOSStoreApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSUpdateConfiguration returns request builder for IOSUpdateConfiguration collection rcn
func (b *DeviceConfigurationRequestBuilder) IOSUpdateConfiguration() *DeviceConfigurationIOSUpdateConfigurationCollectionRequestBuilder {
	bb := &DeviceConfigurationIOSUpdateConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IosUpdateConfiguration"
	return bb
}

// DeviceConfigurationIOSUpdateConfigurationCollectionRequestBuilder is request builder for IOSUpdateConfiguration collection
type DeviceConfigurationIOSUpdateConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSUpdateConfiguration collection
func (b *DeviceConfigurationIOSUpdateConfigurationCollectionRequestBuilder) Request() *DeviceConfigurationIOSUpdateConfigurationCollectionRequest {
	return &DeviceConfigurationIOSUpdateConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSUpdateConfiguration item
func (b *DeviceConfigurationIOSUpdateConfigurationCollectionRequestBuilder) ID(id string) *IOSUpdateConfigurationRequestBuilder {
	bb := &IOSUpdateConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationIOSUpdateConfigurationCollectionRequest is request for IOSUpdateConfiguration collection
type DeviceConfigurationIOSUpdateConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSUpdateConfiguration collection
func (r *DeviceConfigurationIOSUpdateConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSUpdateConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSUpdateConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSUpdateConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSUpdateConfiguration collection, max N pages
func (r *DeviceConfigurationIOSUpdateConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSUpdateConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSUpdateConfiguration collection
func (r *DeviceConfigurationIOSUpdateConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSUpdateConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSUpdateConfiguration collection
func (r *DeviceConfigurationIOSUpdateConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSUpdateConfiguration) (resObj *IOSUpdateConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *IOSUpdateDeviceStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// IOSVPPApp returns request builder for IOSVPPApp collection rcn
func (b *MobileAppRequestBuilder) IOSVPPApp() *MobileAppIOSVPPAppCollectionRequestBuilder {
	bb := &MobileAppIOSVPPAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IosVppApp"
	return bb
}

// MobileAppIOSVPPAppCollectionRequestBuilder is request builder for IOSVPPApp collection
type MobileAppIOSVPPAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPApp collection
func (b *MobileAppIOSVPPAppCollectionRequestBuilder) Request() *MobileAppIOSVPPAppCollectionRequest {
	return &MobileAppIOSVPPAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPApp item
func (b *MobileAppIOSVPPAppCollectionRequestBuilder) ID(id string) *IOSVPPAppRequestBuilder {
	bb := &IOSVPPAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MobileAppIOSVPPAppCollectionRequest is request for IOSVPPApp collection
type MobileAppIOSVPPAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPApp collection
func (r *MobileAppIOSVPPAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPApp collection, max N pages
func (r *MobileAppIOSVPPAppCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPApp collection
func (r *MobileAppIOSVPPAppCollectionRequest) Get(ctx context.Context) ([]IOSVPPApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPApp collection
func (r *MobileAppIOSVPPAppCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPApp) (resObj *IOSVPPApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSVPPEBook returns request builder for IOSVPPEBook collection rcn
func (b *ManagedEBookRequestBuilder) IOSVPPEBook() *ManagedEBookIOSVPPEBookCollectionRequestBuilder {
	bb := &ManagedEBookIOSVPPEBookCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IosVppEBook"
	return bb
}

// ManagedEBookIOSVPPEBookCollectionRequestBuilder is request builder for IOSVPPEBook collection
type ManagedEBookIOSVPPEBookCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPEBook collection
func (b *ManagedEBookIOSVPPEBookCollectionRequestBuilder) Request() *ManagedEBookIOSVPPEBookCollectionRequest {
	return &ManagedEBookIOSVPPEBookCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPEBook item
func (b *ManagedEBookIOSVPPEBookCollectionRequestBuilder) ID(id string) *IOSVPPEBookRequestBuilder {
	bb := &IOSVPPEBookRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedEBookIOSVPPEBookCollectionRequest is request for IOSVPPEBook collection
type ManagedEBookIOSVPPEBookCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPEBook collection
func (r *ManagedEBookIOSVPPEBookCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPEBook, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPEBook
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPEBook
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPEBook collection, max N pages
func (r *ManagedEBookIOSVPPEBookCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPEBook, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPEBook collection
func (r *ManagedEBookIOSVPPEBookCollectionRequest) Get(ctx context.Context) ([]IOSVPPEBook, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPEBook collection
func (r *ManagedEBookIOSVPPEBookCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPEBook) (resObj *IOSVPPEBook, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSVPPEBookAssignment returns request builder for IOSVPPEBookAssignment collection rcn
func (b *ManagedEBookAssignmentRequestBuilder) IOSVPPEBookAssignment() *ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequestBuilder {
	bb := &ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IosVppEBookAssignment"
	return bb
}

// ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequestBuilder is request builder for IOSVPPEBookAssignment collection
type ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPEBookAssignment collection
func (b *ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequestBuilder) Request() *ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequest {
	return &ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPEBookAssignment item
func (b *ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequestBuilder) ID(id string) *IOSVPPEBookAssignmentRequestBuilder {
	bb := &IOSVPPEBookAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequest is request for IOSVPPEBookAssignment collection
type ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPEBookAssignment collection
func (r *ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPEBookAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPEBookAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPEBookAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPEBookAssignment collection, max N pages
func (r *ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPEBookAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPEBookAssignment collection
func (r *ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequest) Get(ctx context.Context) ([]IOSVPPEBookAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPEBookAssignment collection
func (r *ManagedEBookAssignmentIOSVPPEBookAssignmentCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPEBookAssignment) (resObj *IOSVPPEBookAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
