// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// Apps returns request builder for ManagedMobileApp collection
func (b *IOSManagedAppProtectionRequestBuilder) Apps() *IOSManagedAppProtectionAppsCollectionRequestBuilder {
	bb := &IOSManagedAppProtectionAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/apps"
	return bb
}

// IOSManagedAppProtectionAppsCollectionRequestBuilder is request builder for ManagedMobileApp collection rcn
type IOSManagedAppProtectionAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedMobileApp collection
func (b *IOSManagedAppProtectionAppsCollectionRequestBuilder) Request() *IOSManagedAppProtectionAppsCollectionRequest {
	return &IOSManagedAppProtectionAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedMobileApp item
func (b *IOSManagedAppProtectionAppsCollectionRequestBuilder) ID(id string) *ManagedMobileAppRequestBuilder {
	bb := &ManagedMobileAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSManagedAppProtectionAppsCollectionRequest is request for ManagedMobileApp collection
type IOSManagedAppProtectionAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedMobileApp collection
func (r *IOSManagedAppProtectionAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedMobileApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedMobileApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedMobileApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedMobileApp collection, max N pages
func (r *IOSManagedAppProtectionAppsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedMobileApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedMobileApp collection
func (r *IOSManagedAppProtectionAppsCollectionRequest) Get(ctx context.Context) ([]ManagedMobileApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedMobileApp collection
func (r *IOSManagedAppProtectionAppsCollectionRequest) Add(ctx context.Context, reqObj *ManagedMobileApp) (resObj *ManagedMobileApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeploymentSummary is navigation property rn
func (b *IOSManagedAppProtectionRequestBuilder) DeploymentSummary() *ManagedAppPolicyDeploymentSummaryRequestBuilder {
	bb := &ManagedAppPolicyDeploymentSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deploymentSummary"
	return bb
}

// IOSCertificateProfile returns request builder for IOSCertificateProfile collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSCertificateProfile() *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder is request builder for IOSCertificateProfile collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSCertificateProfile collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSCertificateProfile item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder) ID(id string) *IOSCertificateProfileRequestBuilder {
	bb := &IOSCertificateProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest is request for IOSCertificateProfile collection
type DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSCertificateProfile collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSCertificateProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSCertificateProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSCertificateProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSCertificateProfile collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest) GetN(ctx context.Context, n int) ([]IOSCertificateProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSCertificateProfile collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest) Get(ctx context.Context) ([]IOSCertificateProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSCertificateProfile collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest) Add(ctx context.Context, reqObj *IOSCertificateProfile) (resObj *IOSCertificateProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSCompliancePolicy returns request builder for IOSCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) IOSCompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder is request builder for IOSCompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSCompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder) ID(id string) *IOSCompliancePolicyRequestBuilder {
	bb := &IOSCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest is request for IOSCompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSCompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]IOSCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]IOSCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *IOSCompliancePolicy) (resObj *IOSCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSCustomConfiguration returns request builder for IOSCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSCustomConfiguration() *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder is request builder for IOSCustomConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSCustomConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder) ID(id string) *IOSCustomConfigurationRequestBuilder {
	bb := &IOSCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest is request for IOSCustomConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSCustomConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSCustomConfiguration) (resObj *IOSCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSDeviceFeaturesConfiguration returns request builder for IOSDeviceFeaturesConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSDeviceFeaturesConfiguration() *DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequestBuilder is request builder for IOSDeviceFeaturesConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSDeviceFeaturesConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSDeviceFeaturesConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequestBuilder) ID(id string) *IOSDeviceFeaturesConfigurationRequestBuilder {
	bb := &IOSDeviceFeaturesConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequest is request for IOSDeviceFeaturesConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSDeviceFeaturesConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSDeviceFeaturesConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSDeviceFeaturesConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSDeviceFeaturesConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSDeviceFeaturesConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSDeviceFeaturesConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSDeviceFeaturesConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSDeviceFeaturesConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSDeviceFeaturesConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSDeviceFeaturesConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSDeviceFeaturesConfiguration) (resObj *IOSDeviceFeaturesConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSGeneralDeviceConfiguration returns request builder for IOSGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSGeneralDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder is request builder for IOSGeneralDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSGeneralDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *IOSGeneralDeviceConfigurationRequestBuilder {
	bb := &IOSGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest is request for IOSGeneralDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSGeneralDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSGeneralDeviceConfiguration) (resObj *IOSGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSLobApp returns request builder for IOSLobApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) IOSLobApp() *DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequestBuilder is request builder for IOSLobApp collection rcn
type DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSLobApp collection
func (b *DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSLobApp item
func (b *DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequestBuilder) ID(id string) *IOSLobAppRequestBuilder {
	bb := &IOSLobAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequest is request for IOSLobApp collection
type DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSLobApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSLobApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSLobApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSLobApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSLobApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequest) GetN(ctx context.Context, n int) ([]IOSLobApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSLobApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequest) Get(ctx context.Context) ([]IOSLobApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSLobApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSLobAppCollectionRequest) Add(ctx context.Context, reqObj *IOSLobApp) (resObj *IOSLobApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *IOSLobAppProvisioningConfigurationAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// IOSManagedAppRegistration returns request builder for IOSManagedAppRegistration collection
func (b *DeviceAppManagementManagedAppRegistrationsCollectionRequestBuilder) IOSManagedAppRegistration() *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder is request builder for IOSManagedAppRegistration collection rcn
type DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSManagedAppRegistration collection
func (b *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest {
	return &DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSManagedAppRegistration item
func (b *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder) ID(id string) *IOSManagedAppRegistrationRequestBuilder {
	bb := &IOSManagedAppRegistrationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest is request for IOSManagedAppRegistration collection
type DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSManagedAppRegistration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSManagedAppRegistration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSManagedAppRegistration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSManagedAppRegistration collection, max N pages
func (r *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSManagedAppRegistration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest) Get(ctx context.Context) ([]IOSManagedAppRegistration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest) Add(ctx context.Context, reqObj *IOSManagedAppRegistration) (resObj *IOSManagedAppRegistration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSMobileAppConfiguration returns request builder for IOSMobileAppConfiguration collection
func (b *DeviceAppManagementMobileAppConfigurationsCollectionRequestBuilder) IOSMobileAppConfiguration() *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder is request builder for IOSMobileAppConfiguration collection rcn
type DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSMobileAppConfiguration collection
func (b *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest {
	return &DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSMobileAppConfiguration item
func (b *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder) ID(id string) *IOSMobileAppConfigurationRequestBuilder {
	bb := &IOSMobileAppConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest is request for IOSMobileAppConfiguration collection
type DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSMobileAppConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSMobileAppConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSMobileAppConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSMobileAppConfiguration collection, max N pages
func (r *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSMobileAppConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSMobileAppConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSMobileAppConfiguration) (resObj *IOSMobileAppConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSStoreApp returns request builder for IOSStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) IOSStoreApp() *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder is request builder for IOSStoreApp collection rcn
type DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSStoreApp item
func (b *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder) ID(id string) *IOSStoreAppRequestBuilder {
	bb := &IOSStoreAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest is request for IOSStoreApp collection
type DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSStoreApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSStoreApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSStoreApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSStoreApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest) GetN(ctx context.Context, n int) ([]IOSStoreApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest) Get(ctx context.Context) ([]IOSStoreApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest) Add(ctx context.Context, reqObj *IOSStoreApp) (resObj *IOSStoreApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSUpdateConfiguration returns request builder for IOSUpdateConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSUpdateConfiguration() *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder is request builder for IOSUpdateConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSUpdateConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSUpdateConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder) ID(id string) *IOSUpdateConfigurationRequestBuilder {
	bb := &IOSUpdateConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest is request for IOSUpdateConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSUpdateConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSUpdateConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSUpdateConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSUpdateConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSUpdateConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSUpdateConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSUpdateConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSUpdateConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSUpdateConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSUpdateConfiguration) (resObj *IOSUpdateConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *IOSUpdateDeviceStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// IOSVPPApp returns request builder for IOSVPPApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) IOSVPPApp() *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder is request builder for IOSVPPApp collection rcn
type DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPApp collection
func (b *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPApp item
func (b *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder) ID(id string) *IOSVPPAppRequestBuilder {
	bb := &IOSVPPAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest is request for IOSVPPApp collection
type DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest) Get(ctx context.Context) ([]IOSVPPApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPApp) (resObj *IOSVPPApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSVPPEBook returns request builder for IOSVPPEBook collection
func (b *DeviceAppManagementManagedEBooksCollectionRequestBuilder) IOSVPPEBook() *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder is request builder for IOSVPPEBook collection rcn
type DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPEBook collection
func (b *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder) Request() *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest {
	return &DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPEBook item
func (b *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder) ID(id string) *IOSVPPEBookRequestBuilder {
	bb := &IOSVPPEBookRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest is request for IOSVPPEBook collection
type DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPEBook collection
func (r *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPEBook, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPEBook
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPEBook
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPEBook collection, max N pages
func (r *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPEBook, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPEBook collection
func (r *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest) Get(ctx context.Context) ([]IOSVPPEBook, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPEBook collection
func (r *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPEBook) (resObj *IOSVPPEBook, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSVPPEBookAssignment returns request builder for IOSVPPEBookAssignment collection
func (b *ManagedEBookAssignmentsCollectionRequestBuilder) IOSVPPEBookAssignment() *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder {
	bb := &ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder is request builder for IOSVPPEBookAssignment collection rcn
type ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPEBookAssignment collection
func (b *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder) Request() *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest {
	return &ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPEBookAssignment item
func (b *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder) ID(id string) *IOSVPPEBookAssignmentRequestBuilder {
	bb := &IOSVPPEBookAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest is request for IOSVPPEBookAssignment collection
type ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPEBookAssignment collection
func (r *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPEBookAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPEBookAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPEBookAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPEBookAssignment collection, max N pages
func (r *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPEBookAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPEBookAssignment collection
func (r *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest) Get(ctx context.Context) ([]IOSVPPEBookAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPEBookAssignment collection
func (r *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPEBookAssignment) (resObj *IOSVPPEBookAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
