// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// Acceptances returns request builder for AgreementAcceptance collection
func (b *AgreementRequestBuilder) Acceptances() *AgreementAcceptancesCollectionRequestBuilder {
	bb := &AgreementAcceptancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/acceptances"
	return bb
}

// AgreementAcceptancesCollectionRequestBuilder is request builder for AgreementAcceptance collection
type AgreementAcceptancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AgreementAcceptance collection
func (b *AgreementAcceptancesCollectionRequestBuilder) Request() *AgreementAcceptancesCollectionRequest {
	return &AgreementAcceptancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AgreementAcceptance item
func (b *AgreementAcceptancesCollectionRequestBuilder) ID(id string) *AgreementAcceptanceRequestBuilder {
	bb := &AgreementAcceptanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AgreementAcceptancesCollectionRequest is request for AgreementAcceptance collection
type AgreementAcceptancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AgreementAcceptance collection
func (r *AgreementAcceptancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AgreementAcceptance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AgreementAcceptance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AgreementAcceptance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AgreementAcceptance collection, max N pages
func (r *AgreementAcceptancesCollectionRequest) GetN(ctx context.Context, n int) ([]AgreementAcceptance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AgreementAcceptance collection
func (r *AgreementAcceptancesCollectionRequest) Get(ctx context.Context) ([]AgreementAcceptance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AgreementAcceptance collection
func (r *AgreementAcceptancesCollectionRequest) Add(ctx context.Context, reqObj *AgreementAcceptance) (resObj *AgreementAcceptance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// File is navigation property rn
func (b *AgreementRequestBuilder) File() *AgreementFileRequestBuilder {
	bb := &AgreementFileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/file"
	return bb
}

// Files returns request builder for AgreementFileLocalization collection
func (b *AgreementRequestBuilder) Files() *AgreementFilesCollectionRequestBuilder {
	bb := &AgreementFilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/files"
	return bb
}

// AgreementFilesCollectionRequestBuilder is request builder for AgreementFileLocalization collection
type AgreementFilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AgreementFileLocalization collection
func (b *AgreementFilesCollectionRequestBuilder) Request() *AgreementFilesCollectionRequest {
	return &AgreementFilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AgreementFileLocalization item
func (b *AgreementFilesCollectionRequestBuilder) ID(id string) *AgreementFileLocalizationRequestBuilder {
	bb := &AgreementFileLocalizationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AgreementFilesCollectionRequest is request for AgreementFileLocalization collection
type AgreementFilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AgreementFileLocalization collection
func (r *AgreementFilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AgreementFileLocalization, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AgreementFileLocalization
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AgreementFileLocalization
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AgreementFileLocalization collection, max N pages
func (r *AgreementFilesCollectionRequest) GetN(ctx context.Context, n int) ([]AgreementFileLocalization, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AgreementFileLocalization collection
func (r *AgreementFilesCollectionRequest) Get(ctx context.Context) ([]AgreementFileLocalization, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AgreementFileLocalization collection
func (r *AgreementFilesCollectionRequest) Add(ctx context.Context, reqObj *AgreementFileLocalization) (resObj *AgreementFileLocalization, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Localizations returns request builder for AgreementFileLocalization collection
func (b *AgreementFileRequestBuilder) Localizations() *AgreementFileLocalizationsCollectionRequestBuilder {
	bb := &AgreementFileLocalizationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/localizations"
	return bb
}

// AgreementFileLocalizationsCollectionRequestBuilder is request builder for AgreementFileLocalization collection
type AgreementFileLocalizationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AgreementFileLocalization collection
func (b *AgreementFileLocalizationsCollectionRequestBuilder) Request() *AgreementFileLocalizationsCollectionRequest {
	return &AgreementFileLocalizationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AgreementFileLocalization item
func (b *AgreementFileLocalizationsCollectionRequestBuilder) ID(id string) *AgreementFileLocalizationRequestBuilder {
	bb := &AgreementFileLocalizationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AgreementFileLocalizationsCollectionRequest is request for AgreementFileLocalization collection
type AgreementFileLocalizationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AgreementFileLocalization collection
func (r *AgreementFileLocalizationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AgreementFileLocalization, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AgreementFileLocalization
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AgreementFileLocalization
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AgreementFileLocalization collection, max N pages
func (r *AgreementFileLocalizationsCollectionRequest) GetN(ctx context.Context, n int) ([]AgreementFileLocalization, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AgreementFileLocalization collection
func (r *AgreementFileLocalizationsCollectionRequest) Get(ctx context.Context) ([]AgreementFileLocalization, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AgreementFileLocalization collection
func (r *AgreementFileLocalizationsCollectionRequest) Add(ctx context.Context, reqObj *AgreementFileLocalization) (resObj *AgreementFileLocalization, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Versions returns request builder for AgreementFileVersion collection
func (b *AgreementFileLocalizationRequestBuilder) Versions() *AgreementFileLocalizationVersionsCollectionRequestBuilder {
	bb := &AgreementFileLocalizationVersionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/versions"
	return bb
}

// AgreementFileLocalizationVersionsCollectionRequestBuilder is request builder for AgreementFileVersion collection
type AgreementFileLocalizationVersionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AgreementFileVersion collection
func (b *AgreementFileLocalizationVersionsCollectionRequestBuilder) Request() *AgreementFileLocalizationVersionsCollectionRequest {
	return &AgreementFileLocalizationVersionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AgreementFileVersion item
func (b *AgreementFileLocalizationVersionsCollectionRequestBuilder) ID(id string) *AgreementFileVersionRequestBuilder {
	bb := &AgreementFileVersionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AgreementFileLocalizationVersionsCollectionRequest is request for AgreementFileVersion collection
type AgreementFileLocalizationVersionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AgreementFileVersion collection
func (r *AgreementFileLocalizationVersionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AgreementFileVersion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AgreementFileVersion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AgreementFileVersion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AgreementFileVersion collection, max N pages
func (r *AgreementFileLocalizationVersionsCollectionRequest) GetN(ctx context.Context, n int) ([]AgreementFileVersion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AgreementFileVersion collection
func (r *AgreementFileLocalizationVersionsCollectionRequest) Get(ctx context.Context) ([]AgreementFileVersion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AgreementFileVersion collection
func (r *AgreementFileLocalizationVersionsCollectionRequest) Add(ctx context.Context, reqObj *AgreementFileVersion) (resObj *AgreementFileVersion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AgreementRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AgreementAcceptanceRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AgreementFilePropertiesRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
