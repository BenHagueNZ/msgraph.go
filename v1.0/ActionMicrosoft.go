// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// Device is navigation property rn
func (b *MicrosoftAuthenticatorAuthenticationMethodRequestBuilder) Device() *DeviceRequestBuilder {
	bb := &DeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/device"
	return bb
}

// IncludeTargets returns request builder for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (b *MicrosoftAuthenticatorAuthenticationMethodConfigurationRequestBuilder) IncludeTargets() *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder {
	bb := &MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/includeTargets"
	return bb
}

// MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder is request builder for MicrosoftAuthenticatorAuthenticationMethodTarget collection rcn
type MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (b *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder) Request() *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest {
	return &MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftAuthenticatorAuthenticationMethodTarget item
func (b *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder) ID(id string) *MicrosoftAuthenticatorAuthenticationMethodTargetRequestBuilder {
	bb := &MicrosoftAuthenticatorAuthenticationMethodTargetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest is request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
type MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (r *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftAuthenticatorAuthenticationMethodTarget, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftAuthenticatorAuthenticationMethodTarget
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftAuthenticatorAuthenticationMethodTarget
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftAuthenticatorAuthenticationMethodTarget collection, max N pages
func (r *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftAuthenticatorAuthenticationMethodTarget, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (r *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Get(ctx context.Context) ([]MicrosoftAuthenticatorAuthenticationMethodTarget, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (r *MicrosoftAuthenticatorAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftAuthenticatorAuthenticationMethodTarget) (resObj *MicrosoftAuthenticatorAuthenticationMethodTarget, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftAccountUserConversationMember returns request builder for MicrosoftAccountUserConversationMember collection
func (b *ChannelMembersCollectionRequestBuilder) MicrosoftAccountUserConversationMember() *ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequestBuilder {
	bb := &ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequestBuilder is request builder for MicrosoftAccountUserConversationMember collection rcn
type ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftAccountUserConversationMember collection
func (b *ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequestBuilder) Request() *ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequest {
	return &ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftAccountUserConversationMember item
func (b *ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequestBuilder) ID(id string) *MicrosoftAccountUserConversationMemberRequestBuilder {
	bb := &MicrosoftAccountUserConversationMemberRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequest is request for MicrosoftAccountUserConversationMember collection
type ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftAccountUserConversationMember collection
func (r *ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftAccountUserConversationMember, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftAccountUserConversationMember
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftAccountUserConversationMember
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftAccountUserConversationMember collection, max N pages
func (r *ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftAccountUserConversationMember, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftAccountUserConversationMember collection
func (r *ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequest) Get(ctx context.Context) ([]MicrosoftAccountUserConversationMember, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftAccountUserConversationMember collection
func (r *ChannelMembersCollectionMicrosoftAccountUserConversationMemberCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftAccountUserConversationMember) (resObj *MicrosoftAccountUserConversationMember, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftAuthenticatorAuthenticationMethod returns request builder for MicrosoftAuthenticatorAuthenticationMethod collection
func (b *AuthenticationMethodsCollectionRequestBuilder) MicrosoftAuthenticatorAuthenticationMethod() *AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequestBuilder {
	bb := &AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequestBuilder is request builder for MicrosoftAuthenticatorAuthenticationMethod collection rcn
type AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftAuthenticatorAuthenticationMethod collection
func (b *AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequestBuilder) Request() *AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequest {
	return &AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftAuthenticatorAuthenticationMethod item
func (b *AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequestBuilder) ID(id string) *MicrosoftAuthenticatorAuthenticationMethodRequestBuilder {
	bb := &MicrosoftAuthenticatorAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequest is request for MicrosoftAuthenticatorAuthenticationMethod collection
type AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftAuthenticatorAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftAuthenticatorAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftAuthenticatorAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftAuthenticatorAuthenticationMethod collection, max N pages
func (r *AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftAuthenticatorAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequest) Get(ctx context.Context) ([]MicrosoftAuthenticatorAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationMethodsCollectionMicrosoftAuthenticatorAuthenticationMethodCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftAuthenticatorAuthenticationMethod) (resObj *MicrosoftAuthenticatorAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftAuthenticatorAuthenticationMethodConfiguration returns request builder for MicrosoftAuthenticatorAuthenticationMethodConfiguration collection
func (b *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder) MicrosoftAuthenticatorAuthenticationMethodConfiguration() *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequestBuilder {
	bb := &AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequestBuilder is request builder for MicrosoftAuthenticatorAuthenticationMethodConfiguration collection rcn
type AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftAuthenticatorAuthenticationMethodConfiguration collection
func (b *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequestBuilder) Request() *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequest {
	return &AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftAuthenticatorAuthenticationMethodConfiguration item
func (b *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequestBuilder) ID(id string) *MicrosoftAuthenticatorAuthenticationMethodConfigurationRequestBuilder {
	bb := &MicrosoftAuthenticatorAuthenticationMethodConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequest is request for MicrosoftAuthenticatorAuthenticationMethodConfiguration collection
type AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftAuthenticatorAuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftAuthenticatorAuthenticationMethodConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftAuthenticatorAuthenticationMethodConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftAuthenticatorAuthenticationMethodConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftAuthenticatorAuthenticationMethodConfiguration collection, max N pages
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftAuthenticatorAuthenticationMethodConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftAuthenticatorAuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequest) Get(ctx context.Context) ([]MicrosoftAuthenticatorAuthenticationMethodConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftAuthenticatorAuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionMicrosoftAuthenticatorAuthenticationMethodConfigurationCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftAuthenticatorAuthenticationMethodConfiguration) (resObj *MicrosoftAuthenticatorAuthenticationMethodConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftAuthenticatorAuthenticationMethodTarget returns request builder for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (b *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder) MicrosoftAuthenticatorAuthenticationMethodTarget() *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequestBuilder {
	bb := &EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequestBuilder is request builder for MicrosoftAuthenticatorAuthenticationMethodTarget collection rcn
type EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (b *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequestBuilder) Request() *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequest {
	return &EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftAuthenticatorAuthenticationMethodTarget item
func (b *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequestBuilder) ID(id string) *MicrosoftAuthenticatorAuthenticationMethodTargetRequestBuilder {
	bb := &MicrosoftAuthenticatorAuthenticationMethodTargetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequest is request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
type EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (r *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftAuthenticatorAuthenticationMethodTarget, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftAuthenticatorAuthenticationMethodTarget
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftAuthenticatorAuthenticationMethodTarget
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftAuthenticatorAuthenticationMethodTarget collection, max N pages
func (r *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftAuthenticatorAuthenticationMethodTarget, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (r *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequest) Get(ctx context.Context) ([]MicrosoftAuthenticatorAuthenticationMethodTarget, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftAuthenticatorAuthenticationMethodTarget collection
func (r *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionMicrosoftAuthenticatorAuthenticationMethodTargetCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftAuthenticatorAuthenticationMethodTarget) (resObj *MicrosoftAuthenticatorAuthenticationMethodTarget, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftStoreForBusinessApp returns request builder for MicrosoftStoreForBusinessApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) MicrosoftStoreForBusinessApp() *DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequestBuilder is request builder for MicrosoftStoreForBusinessApp collection rcn
type DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftStoreForBusinessApp collection
func (b *DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftStoreForBusinessApp item
func (b *DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequestBuilder) ID(id string) *MicrosoftStoreForBusinessAppRequestBuilder {
	bb := &MicrosoftStoreForBusinessAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequest is request for MicrosoftStoreForBusinessApp collection
type DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftStoreForBusinessApp collection
func (r *DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftStoreForBusinessApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftStoreForBusinessApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftStoreForBusinessApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftStoreForBusinessApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftStoreForBusinessApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftStoreForBusinessApp collection
func (r *DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequest) Get(ctx context.Context) ([]MicrosoftStoreForBusinessApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftStoreForBusinessApp collection
func (r *DeviceAppManagementMobileAppsCollectionMicrosoftStoreForBusinessAppCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftStoreForBusinessApp) (resObj *MicrosoftStoreForBusinessApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
