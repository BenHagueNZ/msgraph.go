// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// Entity is navigation property rn
func (b *ExternalDomainNameRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Connections returns request builder for ExternalConnectorsExternalConnection collection
func (b *ExternalConnectorsExternalRequestBuilder) Connections() *ExternalConnectorsExternalConnectionsCollectionRequestBuilder {
	bb := &ExternalConnectorsExternalConnectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/connections"
	return bb
}

// ExternalConnectorsExternalConnectionsCollectionRequestBuilder is request builder for ExternalConnectorsExternalConnection collection
type ExternalConnectorsExternalConnectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ExternalConnectorsExternalConnection collection
func (b *ExternalConnectorsExternalConnectionsCollectionRequestBuilder) Request() *ExternalConnectorsExternalConnectionsCollectionRequest {
	return &ExternalConnectorsExternalConnectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ExternalConnectorsExternalConnection item
func (b *ExternalConnectorsExternalConnectionsCollectionRequestBuilder) ID(id string) *ExternalConnectorsExternalConnectionRequestBuilder {
	bb := &ExternalConnectorsExternalConnectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ExternalConnectorsExternalConnectionsCollectionRequest is request for ExternalConnectorsExternalConnection collection
type ExternalConnectorsExternalConnectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ExternalConnectorsExternalConnection collection
func (r *ExternalConnectorsExternalConnectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ExternalConnectorsExternalConnection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ExternalConnectorsExternalConnection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ExternalConnectorsExternalConnection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ExternalConnectorsExternalConnection collection, max N pages
func (r *ExternalConnectorsExternalConnectionsCollectionRequest) GetN(ctx context.Context, n int) ([]ExternalConnectorsExternalConnection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ExternalConnectorsExternalConnection collection
func (r *ExternalConnectorsExternalConnectionsCollectionRequest) Get(ctx context.Context) ([]ExternalConnectorsExternalConnection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ExternalConnectorsExternalConnection collection
func (r *ExternalConnectorsExternalConnectionsCollectionRequest) Add(ctx context.Context, reqObj *ExternalConnectorsExternalConnection) (resObj *ExternalConnectorsExternalConnection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Groups returns request builder for ExternalConnectorsExternalGroup collection
func (b *ExternalConnectorsExternalConnectionRequestBuilder) Groups() *ExternalConnectorsExternalConnectionGroupsCollectionRequestBuilder {
	bb := &ExternalConnectorsExternalConnectionGroupsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groups"
	return bb
}

// ExternalConnectorsExternalConnectionGroupsCollectionRequestBuilder is request builder for ExternalConnectorsExternalGroup collection
type ExternalConnectorsExternalConnectionGroupsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ExternalConnectorsExternalGroup collection
func (b *ExternalConnectorsExternalConnectionGroupsCollectionRequestBuilder) Request() *ExternalConnectorsExternalConnectionGroupsCollectionRequest {
	return &ExternalConnectorsExternalConnectionGroupsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ExternalConnectorsExternalGroup item
func (b *ExternalConnectorsExternalConnectionGroupsCollectionRequestBuilder) ID(id string) *ExternalConnectorsExternalGroupRequestBuilder {
	bb := &ExternalConnectorsExternalGroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ExternalConnectorsExternalConnectionGroupsCollectionRequest is request for ExternalConnectorsExternalGroup collection
type ExternalConnectorsExternalConnectionGroupsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ExternalConnectorsExternalGroup collection
func (r *ExternalConnectorsExternalConnectionGroupsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ExternalConnectorsExternalGroup, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ExternalConnectorsExternalGroup
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ExternalConnectorsExternalGroup
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ExternalConnectorsExternalGroup collection, max N pages
func (r *ExternalConnectorsExternalConnectionGroupsCollectionRequest) GetN(ctx context.Context, n int) ([]ExternalConnectorsExternalGroup, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ExternalConnectorsExternalGroup collection
func (r *ExternalConnectorsExternalConnectionGroupsCollectionRequest) Get(ctx context.Context) ([]ExternalConnectorsExternalGroup, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ExternalConnectorsExternalGroup collection
func (r *ExternalConnectorsExternalConnectionGroupsCollectionRequest) Add(ctx context.Context, reqObj *ExternalConnectorsExternalGroup) (resObj *ExternalConnectorsExternalGroup, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Items returns request builder for ExternalConnectorsExternalItem collection
func (b *ExternalConnectorsExternalConnectionRequestBuilder) Items() *ExternalConnectorsExternalConnectionItemsCollectionRequestBuilder {
	bb := &ExternalConnectorsExternalConnectionItemsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/items"
	return bb
}

// ExternalConnectorsExternalConnectionItemsCollectionRequestBuilder is request builder for ExternalConnectorsExternalItem collection
type ExternalConnectorsExternalConnectionItemsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ExternalConnectorsExternalItem collection
func (b *ExternalConnectorsExternalConnectionItemsCollectionRequestBuilder) Request() *ExternalConnectorsExternalConnectionItemsCollectionRequest {
	return &ExternalConnectorsExternalConnectionItemsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ExternalConnectorsExternalItem item
func (b *ExternalConnectorsExternalConnectionItemsCollectionRequestBuilder) ID(id string) *ExternalConnectorsExternalItemRequestBuilder {
	bb := &ExternalConnectorsExternalItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ExternalConnectorsExternalConnectionItemsCollectionRequest is request for ExternalConnectorsExternalItem collection
type ExternalConnectorsExternalConnectionItemsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ExternalConnectorsExternalItem collection
func (r *ExternalConnectorsExternalConnectionItemsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ExternalConnectorsExternalItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ExternalConnectorsExternalItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ExternalConnectorsExternalItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ExternalConnectorsExternalItem collection, max N pages
func (r *ExternalConnectorsExternalConnectionItemsCollectionRequest) GetN(ctx context.Context, n int) ([]ExternalConnectorsExternalItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ExternalConnectorsExternalItem collection
func (r *ExternalConnectorsExternalConnectionItemsCollectionRequest) Get(ctx context.Context) ([]ExternalConnectorsExternalItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ExternalConnectorsExternalItem collection
func (r *ExternalConnectorsExternalConnectionItemsCollectionRequest) Add(ctx context.Context, reqObj *ExternalConnectorsExternalItem) (resObj *ExternalConnectorsExternalItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Operations returns request builder for ExternalConnectorsConnectionOperation collection
func (b *ExternalConnectorsExternalConnectionRequestBuilder) Operations() *ExternalConnectorsExternalConnectionOperationsCollectionRequestBuilder {
	bb := &ExternalConnectorsExternalConnectionOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// ExternalConnectorsExternalConnectionOperationsCollectionRequestBuilder is request builder for ExternalConnectorsConnectionOperation collection
type ExternalConnectorsExternalConnectionOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ExternalConnectorsConnectionOperation collection
func (b *ExternalConnectorsExternalConnectionOperationsCollectionRequestBuilder) Request() *ExternalConnectorsExternalConnectionOperationsCollectionRequest {
	return &ExternalConnectorsExternalConnectionOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ExternalConnectorsConnectionOperation item
func (b *ExternalConnectorsExternalConnectionOperationsCollectionRequestBuilder) ID(id string) *ExternalConnectorsConnectionOperationRequestBuilder {
	bb := &ExternalConnectorsConnectionOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ExternalConnectorsExternalConnectionOperationsCollectionRequest is request for ExternalConnectorsConnectionOperation collection
type ExternalConnectorsExternalConnectionOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ExternalConnectorsConnectionOperation collection
func (r *ExternalConnectorsExternalConnectionOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ExternalConnectorsConnectionOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ExternalConnectorsConnectionOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ExternalConnectorsConnectionOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ExternalConnectorsConnectionOperation collection, max N pages
func (r *ExternalConnectorsExternalConnectionOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]ExternalConnectorsConnectionOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ExternalConnectorsConnectionOperation collection
func (r *ExternalConnectorsExternalConnectionOperationsCollectionRequest) Get(ctx context.Context) ([]ExternalConnectorsConnectionOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ExternalConnectorsConnectionOperation collection
func (r *ExternalConnectorsExternalConnectionOperationsCollectionRequest) Add(ctx context.Context, reqObj *ExternalConnectorsConnectionOperation) (resObj *ExternalConnectorsConnectionOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Schema is navigation property rn
func (b *ExternalConnectorsExternalConnectionRequestBuilder) Schema() *ExternalConnectorsSchemaRequestBuilder {
	bb := &ExternalConnectorsSchemaRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/schema"
	return bb
}

// Members returns request builder for ExternalConnectorsIdentity collection
func (b *ExternalConnectorsExternalGroupRequestBuilder) Members() *ExternalConnectorsExternalGroupMembersCollectionRequestBuilder {
	bb := &ExternalConnectorsExternalGroupMembersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/members"
	return bb
}

// ExternalConnectorsExternalGroupMembersCollectionRequestBuilder is request builder for ExternalConnectorsIdentity collection
type ExternalConnectorsExternalGroupMembersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ExternalConnectorsIdentity collection
func (b *ExternalConnectorsExternalGroupMembersCollectionRequestBuilder) Request() *ExternalConnectorsExternalGroupMembersCollectionRequest {
	return &ExternalConnectorsExternalGroupMembersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ExternalConnectorsIdentity item
func (b *ExternalConnectorsExternalGroupMembersCollectionRequestBuilder) ID(id string) *ExternalConnectorsIdentityRequestBuilder {
	bb := &ExternalConnectorsIdentityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ExternalConnectorsExternalGroupMembersCollectionRequest is request for ExternalConnectorsIdentity collection
type ExternalConnectorsExternalGroupMembersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ExternalConnectorsIdentity collection
func (r *ExternalConnectorsExternalGroupMembersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ExternalConnectorsIdentity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ExternalConnectorsIdentity
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ExternalConnectorsIdentity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ExternalConnectorsIdentity collection, max N pages
func (r *ExternalConnectorsExternalGroupMembersCollectionRequest) GetN(ctx context.Context, n int) ([]ExternalConnectorsIdentity, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ExternalConnectorsIdentity collection
func (r *ExternalConnectorsExternalGroupMembersCollectionRequest) Get(ctx context.Context) ([]ExternalConnectorsIdentity, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ExternalConnectorsIdentity collection
func (r *ExternalConnectorsExternalGroupMembersCollectionRequest) Add(ctx context.Context, reqObj *ExternalConnectorsIdentity) (resObj *ExternalConnectorsIdentity, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
