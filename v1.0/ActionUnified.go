// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// UnifiedRoleAssignmentScheduleRequestObjectCancelRequestParameter undocumented
type UnifiedRoleAssignmentScheduleRequestObjectCancelRequestParameter struct {
}

// UnifiedRoleEligibilityScheduleRequestObjectCancelRequestParameter undocumented
type UnifiedRoleEligibilityScheduleRequestObjectCancelRequestParameter struct {
}

// AppScope is navigation property rn
func (b *UnifiedRoleAssignmentRequestBuilder) AppScope() *AppScopeRequestBuilder {
	bb := &AppScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appScope"
	return bb
}

// DirectoryScope is navigation property rn
func (b *UnifiedRoleAssignmentRequestBuilder) DirectoryScope() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryScope"
	return bb
}

// Principal is navigation property rn
func (b *UnifiedRoleAssignmentRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// RoleDefinition is navigation property rn
func (b *UnifiedRoleAssignmentRequestBuilder) RoleDefinition() *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// ActivatedUsing is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestBuilder) ActivatedUsing() *UnifiedRoleEligibilityScheduleRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activatedUsing"
	return bb
}

// ActivatedUsing is navigation property rn
func (b *UnifiedRoleAssignmentScheduleInstanceRequestBuilder) ActivatedUsing() *UnifiedRoleEligibilityScheduleInstanceRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activatedUsing"
	return bb
}

// ActivatedUsing is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) ActivatedUsing() *UnifiedRoleEligibilityScheduleRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activatedUsing"
	return bb
}

// AppScope is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) AppScope() *AppScopeRequestBuilder {
	bb := &AppScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appScope"
	return bb
}

// DirectoryScope is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) DirectoryScope() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryScope"
	return bb
}

// Principal is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// RoleDefinition is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) RoleDefinition() *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// TargetSchedule is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) TargetSchedule() *UnifiedRoleAssignmentScheduleRequestBuilder {
	bb := &UnifiedRoleAssignmentScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/targetSchedule"
	return bb
}

// InheritsPermissionsFrom returns request builder for UnifiedRoleDefinition collection rcn
func (b *UnifiedRoleDefinitionRequestBuilder) InheritsPermissionsFrom() *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder {
	bb := &UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/inheritsPermissionsFrom"
	return bb
}

// UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder is request builder for UnifiedRoleDefinition collection
type UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleDefinition collection
func (b *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder) Request() *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest {
	return &UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleDefinition item
func (b *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder) ID(id string) *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest is request for UnifiedRoleDefinition collection
type UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleDefinition collection
func (r *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleDefinition collection, max N pages
func (r *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleDefinition collection
func (r *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleDefinition collection
func (r *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleDefinition) (resObj *UnifiedRoleDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppScope is navigation property rn
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) AppScope() *AppScopeRequestBuilder {
	bb := &AppScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appScope"
	return bb
}

// DirectoryScope is navigation property rn
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) DirectoryScope() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryScope"
	return bb
}

// Principal is navigation property rn
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// RoleDefinition is navigation property rn
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) RoleDefinition() *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// TargetSchedule is navigation property rn
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) TargetSchedule() *UnifiedRoleEligibilityScheduleRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/targetSchedule"
	return bb
}

// EffectiveRules returns request builder for UnifiedRoleManagementPolicyRule collection rcn
func (b *UnifiedRoleManagementPolicyRequestBuilder) EffectiveRules() *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/effectiveRules"
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyRule collection
type UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest {
	return &UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyRule item
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest is request for UnifiedRoleManagementPolicyRule collection
type UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyRule collection, max N pages
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyRule) (resObj *UnifiedRoleManagementPolicyRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Rules returns request builder for UnifiedRoleManagementPolicyRule collection rcn
func (b *UnifiedRoleManagementPolicyRequestBuilder) Rules() *UnifiedRoleManagementPolicyRulesCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRulesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rules"
	return bb
}

// UnifiedRoleManagementPolicyRulesCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyRule collection
type UnifiedRoleManagementPolicyRulesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyRule collection
func (b *UnifiedRoleManagementPolicyRulesCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyRulesCollectionRequest {
	return &UnifiedRoleManagementPolicyRulesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyRule item
func (b *UnifiedRoleManagementPolicyRulesCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyRulesCollectionRequest is request for UnifiedRoleManagementPolicyRule collection
type UnifiedRoleManagementPolicyRulesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyRulesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyRule collection, max N pages
func (r *UnifiedRoleManagementPolicyRulesCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyRulesCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyRulesCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyRule) (resObj *UnifiedRoleManagementPolicyRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Policy is navigation property rn
func (b *UnifiedRoleManagementPolicyAssignmentRequestBuilder) Policy() *UnifiedRoleManagementPolicyRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/policy"
	return bb
}

// TargetObjects returns request builder for DirectoryObject collection rcn
func (b *UnifiedRoleManagementPolicyRuleTargetRequestBuilder) TargetObjects() *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/targetObjects"
	return bb
}

// UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder is request builder for DirectoryObject collection
type UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest {
	return &UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest is request for DirectoryObject collection
type UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppScope is navigation property rn
func (b *UnifiedRoleScheduleBaseRequestBuilder) AppScope() *AppScopeRequestBuilder {
	bb := &AppScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appScope"
	return bb
}

// DirectoryScope is navigation property rn
func (b *UnifiedRoleScheduleBaseRequestBuilder) DirectoryScope() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryScope"
	return bb
}

// Principal is navigation property rn
func (b *UnifiedRoleScheduleBaseRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// RoleDefinition is navigation property rn
func (b *UnifiedRoleScheduleBaseRequestBuilder) RoleDefinition() *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// AppScope is navigation property rn
func (b *UnifiedRoleScheduleInstanceBaseRequestBuilder) AppScope() *AppScopeRequestBuilder {
	bb := &AppScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appScope"
	return bb
}

// DirectoryScope is navigation property rn
func (b *UnifiedRoleScheduleInstanceBaseRequestBuilder) DirectoryScope() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryScope"
	return bb
}

// Principal is navigation property rn
func (b *UnifiedRoleScheduleInstanceBaseRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// RoleDefinition is navigation property rn
func (b *UnifiedRoleScheduleInstanceBaseRequestBuilder) RoleDefinition() *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRoleAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRoleDefinitionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRoleManagementPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// UnifiedRoleManagementPolicyApprovalRule returns request builder for UnifiedRoleManagementPolicyApprovalRule collection rcn
func (b *UnifiedRoleManagementPolicyRuleRequestBuilder) UnifiedRoleManagementPolicyApprovalRule() *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/UnifiedRoleManagementPolicyApprovalRule"
	return bb
}

// UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyApprovalRule collection
type UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyApprovalRule collection
func (b *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequest {
	return &UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyApprovalRule item
func (b *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyApprovalRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyApprovalRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequest is request for UnifiedRoleManagementPolicyApprovalRule collection
type UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyApprovalRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyApprovalRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyApprovalRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyApprovalRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyApprovalRule collection, max N pages
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyApprovalRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyApprovalRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyApprovalRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyApprovalRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyApprovalRuleCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyApprovalRule) (resObj *UnifiedRoleManagementPolicyApprovalRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *UnifiedRoleManagementPolicyAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// UnifiedRoleManagementPolicyAuthenticationContextRule returns request builder for UnifiedRoleManagementPolicyAuthenticationContextRule collection rcn
func (b *UnifiedRoleManagementPolicyRuleRequestBuilder) UnifiedRoleManagementPolicyAuthenticationContextRule() *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/UnifiedRoleManagementPolicyAuthenticationContextRule"
	return bb
}

// UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyAuthenticationContextRule collection
type UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyAuthenticationContextRule collection
func (b *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest {
	return &UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyAuthenticationContextRule item
func (b *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyAuthenticationContextRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyAuthenticationContextRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest is request for UnifiedRoleManagementPolicyAuthenticationContextRule collection
type UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyAuthenticationContextRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyAuthenticationContextRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyAuthenticationContextRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyAuthenticationContextRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyAuthenticationContextRule collection, max N pages
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyAuthenticationContextRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyAuthenticationContextRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyAuthenticationContextRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyAuthenticationContextRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyAuthenticationContextRule) (resObj *UnifiedRoleManagementPolicyAuthenticationContextRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UnifiedRoleManagementPolicyEnablementRule returns request builder for UnifiedRoleManagementPolicyEnablementRule collection rcn
func (b *UnifiedRoleManagementPolicyRuleRequestBuilder) UnifiedRoleManagementPolicyEnablementRule() *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/UnifiedRoleManagementPolicyEnablementRule"
	return bb
}

// UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyEnablementRule collection
type UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyEnablementRule collection
func (b *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequest {
	return &UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyEnablementRule item
func (b *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyEnablementRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyEnablementRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequest is request for UnifiedRoleManagementPolicyEnablementRule collection
type UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyEnablementRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyEnablementRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyEnablementRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyEnablementRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyEnablementRule collection, max N pages
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyEnablementRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyEnablementRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyEnablementRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyEnablementRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyEnablementRuleCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyEnablementRule) (resObj *UnifiedRoleManagementPolicyEnablementRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UnifiedRoleManagementPolicyExpirationRule returns request builder for UnifiedRoleManagementPolicyExpirationRule collection rcn
func (b *UnifiedRoleManagementPolicyRuleRequestBuilder) UnifiedRoleManagementPolicyExpirationRule() *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/UnifiedRoleManagementPolicyExpirationRule"
	return bb
}

// UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyExpirationRule collection
type UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyExpirationRule collection
func (b *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequest {
	return &UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyExpirationRule item
func (b *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyExpirationRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyExpirationRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequest is request for UnifiedRoleManagementPolicyExpirationRule collection
type UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyExpirationRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyExpirationRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyExpirationRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyExpirationRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyExpirationRule collection, max N pages
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyExpirationRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyExpirationRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyExpirationRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyExpirationRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyExpirationRuleCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyExpirationRule) (resObj *UnifiedRoleManagementPolicyExpirationRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UnifiedRoleManagementPolicyNotificationRule returns request builder for UnifiedRoleManagementPolicyNotificationRule collection rcn
func (b *UnifiedRoleManagementPolicyRuleRequestBuilder) UnifiedRoleManagementPolicyNotificationRule() *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/UnifiedRoleManagementPolicyNotificationRule"
	return bb
}

// UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyNotificationRule collection
type UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyNotificationRule collection
func (b *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequest {
	return &UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyNotificationRule item
func (b *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyNotificationRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyNotificationRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequest is request for UnifiedRoleManagementPolicyNotificationRule collection
type UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyNotificationRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyNotificationRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyNotificationRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyNotificationRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyNotificationRule collection, max N pages
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyNotificationRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyNotificationRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyNotificationRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyNotificationRule collection
func (r *UnifiedRoleManagementPolicyRuleUnifiedRoleManagementPolicyNotificationRuleCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyNotificationRule) (resObj *UnifiedRoleManagementPolicyNotificationRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *UnifiedRoleScheduleBaseRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRoleScheduleInstanceBaseRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
