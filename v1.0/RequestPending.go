// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// PendingContentUpdateRequestBuilder is request builder for PendingContentUpdate
type PendingContentUpdateRequestBuilder struct{ BaseRequestBuilder }

// Request returns PendingContentUpdateRequest
func (b *PendingContentUpdateRequestBuilder) Request() *PendingContentUpdateRequest {
	return &PendingContentUpdateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PendingContentUpdateRequest is request for PendingContentUpdate
type PendingContentUpdateRequest struct{ BaseRequest }

// Get performs GET request for PendingContentUpdate
func (r *PendingContentUpdateRequest) Get(ctx context.Context) (resObj *PendingContentUpdate, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PendingContentUpdate
func (r *PendingContentUpdateRequest) Update(ctx context.Context, reqObj *PendingContentUpdate) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PendingContentUpdate
func (r *PendingContentUpdateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PendingOperationsRequestBuilder is request builder for PendingOperations
type PendingOperationsRequestBuilder struct{ BaseRequestBuilder }

// Request returns PendingOperationsRequest
func (b *PendingOperationsRequestBuilder) Request() *PendingOperationsRequest {
	return &PendingOperationsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PendingOperationsRequest is request for PendingOperations
type PendingOperationsRequest struct{ BaseRequest }

// Get performs GET request for PendingOperations
func (r *PendingOperationsRequest) Get(ctx context.Context) (resObj *PendingOperations, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PendingOperations
func (r *PendingOperationsRequest) Update(ctx context.Context, reqObj *PendingOperations) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PendingOperations
func (r *PendingOperationsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
