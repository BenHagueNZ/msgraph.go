// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// TargetApplicationOwnersRequestBuilder is request builder for TargetApplicationOwners
type TargetApplicationOwnersRequestBuilder struct{ BaseRequestBuilder }

// Request returns TargetApplicationOwnersRequest
func (b *TargetApplicationOwnersRequestBuilder) Request() *TargetApplicationOwnersRequest {
	return &TargetApplicationOwnersRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TargetApplicationOwnersRequest is request for TargetApplicationOwners
type TargetApplicationOwnersRequest struct{ BaseRequest }

// Get performs GET request for TargetApplicationOwners
func (r *TargetApplicationOwnersRequest) Get(ctx context.Context) (resObj *TargetApplicationOwners, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TargetApplicationOwners
func (r *TargetApplicationOwnersRequest) Update(ctx context.Context, reqObj *TargetApplicationOwners) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TargetApplicationOwners
func (r *TargetApplicationOwnersRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TargetManagerRequestBuilder is request builder for TargetManager
type TargetManagerRequestBuilder struct{ BaseRequestBuilder }

// Request returns TargetManagerRequest
func (b *TargetManagerRequestBuilder) Request() *TargetManagerRequest {
	return &TargetManagerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TargetManagerRequest is request for TargetManager
type TargetManagerRequest struct{ BaseRequest }

// Get performs GET request for TargetManager
func (r *TargetManagerRequest) Get(ctx context.Context) (resObj *TargetManager, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TargetManager
func (r *TargetManagerRequest) Update(ctx context.Context, reqObj *TargetManager) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TargetManager
func (r *TargetManagerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TargetResourceRequestBuilder is request builder for TargetResource
type TargetResourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns TargetResourceRequest
func (b *TargetResourceRequestBuilder) Request() *TargetResourceRequest {
	return &TargetResourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TargetResourceRequest is request for TargetResource
type TargetResourceRequest struct{ BaseRequest }

// Get performs GET request for TargetResource
func (r *TargetResourceRequest) Get(ctx context.Context) (resObj *TargetResource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TargetResource
func (r *TargetResourceRequest) Update(ctx context.Context, reqObj *TargetResource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TargetResource
func (r *TargetResourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
