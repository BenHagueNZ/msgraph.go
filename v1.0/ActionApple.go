// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// AppleDeviceFeaturesConfigurationBase returns request builder for AppleDeviceFeaturesConfigurationBase collection rcn
func (b *DeviceConfigurationRequestBuilder) AppleDeviceFeaturesConfigurationBase() *DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder {
	bb := &DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/AppleDeviceFeaturesConfigurationBase"
	return bb
}

// DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder is request builder for AppleDeviceFeaturesConfigurationBase collection
type DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppleDeviceFeaturesConfigurationBase collection
func (b *DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder) Request() *DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequest {
	return &DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppleDeviceFeaturesConfigurationBase item
func (b *DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder) ID(id string) *AppleDeviceFeaturesConfigurationBaseRequestBuilder {
	bb := &AppleDeviceFeaturesConfigurationBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequest is request for AppleDeviceFeaturesConfigurationBase collection
type DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppleDeviceFeaturesConfigurationBase collection
func (r *DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppleDeviceFeaturesConfigurationBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppleDeviceFeaturesConfigurationBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppleDeviceFeaturesConfigurationBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppleDeviceFeaturesConfigurationBase collection, max N pages
func (r *DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequest) GetN(ctx context.Context, n int) ([]AppleDeviceFeaturesConfigurationBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppleDeviceFeaturesConfigurationBase collection
func (r *DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequest) Get(ctx context.Context) ([]AppleDeviceFeaturesConfigurationBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppleDeviceFeaturesConfigurationBase collection
func (r *DeviceConfigurationAppleDeviceFeaturesConfigurationBaseCollectionRequest) Add(ctx context.Context, reqObj *AppleDeviceFeaturesConfigurationBase) (resObj *AppleDeviceFeaturesConfigurationBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppleManagedIdentityProvider returns request builder for AppleManagedIdentityProvider collection rcn
func (b *IdentityProviderBaseRequestBuilder) AppleManagedIdentityProvider() *IdentityProviderBaseAppleManagedIdentityProviderCollectionRequestBuilder {
	bb := &IdentityProviderBaseAppleManagedIdentityProviderCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/AppleManagedIdentityProvider"
	return bb
}

// IdentityProviderBaseAppleManagedIdentityProviderCollectionRequestBuilder is request builder for AppleManagedIdentityProvider collection
type IdentityProviderBaseAppleManagedIdentityProviderCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppleManagedIdentityProvider collection
func (b *IdentityProviderBaseAppleManagedIdentityProviderCollectionRequestBuilder) Request() *IdentityProviderBaseAppleManagedIdentityProviderCollectionRequest {
	return &IdentityProviderBaseAppleManagedIdentityProviderCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppleManagedIdentityProvider item
func (b *IdentityProviderBaseAppleManagedIdentityProviderCollectionRequestBuilder) ID(id string) *AppleManagedIdentityProviderRequestBuilder {
	bb := &AppleManagedIdentityProviderRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityProviderBaseAppleManagedIdentityProviderCollectionRequest is request for AppleManagedIdentityProvider collection
type IdentityProviderBaseAppleManagedIdentityProviderCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppleManagedIdentityProvider collection
func (r *IdentityProviderBaseAppleManagedIdentityProviderCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppleManagedIdentityProvider, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppleManagedIdentityProvider
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppleManagedIdentityProvider
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppleManagedIdentityProvider collection, max N pages
func (r *IdentityProviderBaseAppleManagedIdentityProviderCollectionRequest) GetN(ctx context.Context, n int) ([]AppleManagedIdentityProvider, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppleManagedIdentityProvider collection
func (r *IdentityProviderBaseAppleManagedIdentityProviderCollectionRequest) Get(ctx context.Context) ([]AppleManagedIdentityProvider, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppleManagedIdentityProvider collection
func (r *IdentityProviderBaseAppleManagedIdentityProviderCollectionRequest) Add(ctx context.Context, reqObj *AppleManagedIdentityProvider) (resObj *AppleManagedIdentityProvider, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ApplePushNotificationCertificateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
