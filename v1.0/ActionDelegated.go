// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// ServiceManagementDetails returns request builder for DelegatedAdminServiceManagementDetail collection
func (b *DelegatedAdminCustomerRequestBuilder) ServiceManagementDetails() *DelegatedAdminCustomerServiceManagementDetailsCollectionRequestBuilder {
	bb := &DelegatedAdminCustomerServiceManagementDetailsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/serviceManagementDetails"
	return bb
}

// DelegatedAdminCustomerServiceManagementDetailsCollectionRequestBuilder is request builder for DelegatedAdminServiceManagementDetail collection
type DelegatedAdminCustomerServiceManagementDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DelegatedAdminServiceManagementDetail collection
func (b *DelegatedAdminCustomerServiceManagementDetailsCollectionRequestBuilder) Request() *DelegatedAdminCustomerServiceManagementDetailsCollectionRequest {
	return &DelegatedAdminCustomerServiceManagementDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DelegatedAdminServiceManagementDetail item
func (b *DelegatedAdminCustomerServiceManagementDetailsCollectionRequestBuilder) ID(id string) *DelegatedAdminServiceManagementDetailRequestBuilder {
	bb := &DelegatedAdminServiceManagementDetailRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DelegatedAdminCustomerServiceManagementDetailsCollectionRequest is request for DelegatedAdminServiceManagementDetail collection
type DelegatedAdminCustomerServiceManagementDetailsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DelegatedAdminServiceManagementDetail collection
func (r *DelegatedAdminCustomerServiceManagementDetailsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DelegatedAdminServiceManagementDetail, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DelegatedAdminServiceManagementDetail
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DelegatedAdminServiceManagementDetail
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DelegatedAdminServiceManagementDetail collection, max N pages
func (r *DelegatedAdminCustomerServiceManagementDetailsCollectionRequest) GetN(ctx context.Context, n int) ([]DelegatedAdminServiceManagementDetail, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DelegatedAdminServiceManagementDetail collection
func (r *DelegatedAdminCustomerServiceManagementDetailsCollectionRequest) Get(ctx context.Context) ([]DelegatedAdminServiceManagementDetail, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DelegatedAdminServiceManagementDetail collection
func (r *DelegatedAdminCustomerServiceManagementDetailsCollectionRequest) Add(ctx context.Context, reqObj *DelegatedAdminServiceManagementDetail) (resObj *DelegatedAdminServiceManagementDetail, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AccessAssignments returns request builder for DelegatedAdminAccessAssignment collection
func (b *DelegatedAdminRelationshipRequestBuilder) AccessAssignments() *DelegatedAdminRelationshipAccessAssignmentsCollectionRequestBuilder {
	bb := &DelegatedAdminRelationshipAccessAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/accessAssignments"
	return bb
}

// DelegatedAdminRelationshipAccessAssignmentsCollectionRequestBuilder is request builder for DelegatedAdminAccessAssignment collection
type DelegatedAdminRelationshipAccessAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DelegatedAdminAccessAssignment collection
func (b *DelegatedAdminRelationshipAccessAssignmentsCollectionRequestBuilder) Request() *DelegatedAdminRelationshipAccessAssignmentsCollectionRequest {
	return &DelegatedAdminRelationshipAccessAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DelegatedAdminAccessAssignment item
func (b *DelegatedAdminRelationshipAccessAssignmentsCollectionRequestBuilder) ID(id string) *DelegatedAdminAccessAssignmentRequestBuilder {
	bb := &DelegatedAdminAccessAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DelegatedAdminRelationshipAccessAssignmentsCollectionRequest is request for DelegatedAdminAccessAssignment collection
type DelegatedAdminRelationshipAccessAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DelegatedAdminAccessAssignment collection
func (r *DelegatedAdminRelationshipAccessAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DelegatedAdminAccessAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DelegatedAdminAccessAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DelegatedAdminAccessAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DelegatedAdminAccessAssignment collection, max N pages
func (r *DelegatedAdminRelationshipAccessAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DelegatedAdminAccessAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DelegatedAdminAccessAssignment collection
func (r *DelegatedAdminRelationshipAccessAssignmentsCollectionRequest) Get(ctx context.Context) ([]DelegatedAdminAccessAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DelegatedAdminAccessAssignment collection
func (r *DelegatedAdminRelationshipAccessAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DelegatedAdminAccessAssignment) (resObj *DelegatedAdminAccessAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Operations returns request builder for DelegatedAdminRelationshipOperation collection
func (b *DelegatedAdminRelationshipRequestBuilder) Operations() *DelegatedAdminRelationshipOperationsCollectionRequestBuilder {
	bb := &DelegatedAdminRelationshipOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// DelegatedAdminRelationshipOperationsCollectionRequestBuilder is request builder for DelegatedAdminRelationshipOperation collection
type DelegatedAdminRelationshipOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DelegatedAdminRelationshipOperation collection
func (b *DelegatedAdminRelationshipOperationsCollectionRequestBuilder) Request() *DelegatedAdminRelationshipOperationsCollectionRequest {
	return &DelegatedAdminRelationshipOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DelegatedAdminRelationshipOperation item
func (b *DelegatedAdminRelationshipOperationsCollectionRequestBuilder) ID(id string) *DelegatedAdminRelationshipOperationRequestBuilder {
	bb := &DelegatedAdminRelationshipOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DelegatedAdminRelationshipOperationsCollectionRequest is request for DelegatedAdminRelationshipOperation collection
type DelegatedAdminRelationshipOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DelegatedAdminRelationshipOperation collection
func (r *DelegatedAdminRelationshipOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DelegatedAdminRelationshipOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DelegatedAdminRelationshipOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DelegatedAdminRelationshipOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DelegatedAdminRelationshipOperation collection, max N pages
func (r *DelegatedAdminRelationshipOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]DelegatedAdminRelationshipOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DelegatedAdminRelationshipOperation collection
func (r *DelegatedAdminRelationshipOperationsCollectionRequest) Get(ctx context.Context) ([]DelegatedAdminRelationshipOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DelegatedAdminRelationshipOperation collection
func (r *DelegatedAdminRelationshipOperationsCollectionRequest) Add(ctx context.Context, reqObj *DelegatedAdminRelationshipOperation) (resObj *DelegatedAdminRelationshipOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Requests returns request builder for DelegatedAdminRelationshipRequest collection
func (b *DelegatedAdminRelationshipRequestBuilder) Requests() *DelegatedAdminRelationshipRequestsCollectionRequestBuilder {
	bb := &DelegatedAdminRelationshipRequestsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/requests"
	return bb
}

// DelegatedAdminRelationshipRequestsCollectionRequestBuilder is request builder for DelegatedAdminRelationshipRequest collection
type DelegatedAdminRelationshipRequestsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DelegatedAdminRelationshipRequest collection
func (b *DelegatedAdminRelationshipRequestsCollectionRequestBuilder) Request() *DelegatedAdminRelationshipRequestsCollectionRequest {
	return &DelegatedAdminRelationshipRequestsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DelegatedAdminRelationshipRequest item
func (b *DelegatedAdminRelationshipRequestsCollectionRequestBuilder) ID(id string) *DelegatedAdminRelationshipRequestRequestBuilder {
	bb := &DelegatedAdminRelationshipRequestRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DelegatedAdminRelationshipRequestsCollectionRequest is request for DelegatedAdminRelationshipRequest collection
type DelegatedAdminRelationshipRequestsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DelegatedAdminRelationshipRequest collection
func (r *DelegatedAdminRelationshipRequestsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DelegatedAdminRelationshipRequest, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DelegatedAdminRelationshipRequest
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DelegatedAdminRelationshipRequest
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DelegatedAdminRelationshipRequest collection, max N pages
func (r *DelegatedAdminRelationshipRequestsCollectionRequest) GetN(ctx context.Context, n int) ([]DelegatedAdminRelationshipRequest, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DelegatedAdminRelationshipRequest collection
func (r *DelegatedAdminRelationshipRequestsCollectionRequest) Get(ctx context.Context) ([]DelegatedAdminRelationshipRequest, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DelegatedAdminRelationshipRequest collection
func (r *DelegatedAdminRelationshipRequestsCollectionRequest) Add(ctx context.Context, reqObj *DelegatedAdminRelationshipRequest) (resObj *DelegatedAdminRelationshipRequest, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
