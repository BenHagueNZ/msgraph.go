// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// Alerts returns request builder for Alert collection rcn
func (b *SecurityRequestBuilder) Alerts() *SecurityAlertsCollectionRequestBuilder {
	bb := &SecurityAlertsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alerts"
	return bb
}

// SecurityAlertsCollectionRequestBuilder is request builder for Alert collection
type SecurityAlertsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Alert collection
func (b *SecurityAlertsCollectionRequestBuilder) Request() *SecurityAlertsCollectionRequest {
	return &SecurityAlertsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Alert item
func (b *SecurityAlertsCollectionRequestBuilder) ID(id string) *AlertRequestBuilder {
	bb := &AlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityAlertsCollectionRequest is request for Alert collection
type SecurityAlertsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Alert collection
func (r *SecurityAlertsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Alert, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Alert
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Alert
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Alert collection, max N pages
func (r *SecurityAlertsCollectionRequest) GetN(ctx context.Context, n int) ([]Alert, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Alert collection
func (r *SecurityAlertsCollectionRequest) Get(ctx context.Context) ([]Alert, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Alert collection
func (r *SecurityAlertsCollectionRequest) Add(ctx context.Context, reqObj *Alert) (resObj *Alert, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Alerts_v2 returns request builder for SecurityAlert collection rcn
func (b *SecurityRequestBuilder) Alerts_v2() *SecurityAlerts_v2CollectionRequestBuilder {
	bb := &SecurityAlerts_v2CollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alerts_v2"
	return bb
}

// SecurityAlerts_v2CollectionRequestBuilder is request builder for SecurityAlert collection
type SecurityAlerts_v2CollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityAlert collection
func (b *SecurityAlerts_v2CollectionRequestBuilder) Request() *SecurityAlerts_v2CollectionRequest {
	return &SecurityAlerts_v2CollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityAlert item
func (b *SecurityAlerts_v2CollectionRequestBuilder) ID(id string) *SecurityAlertRequestBuilder {
	bb := &SecurityAlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityAlerts_v2CollectionRequest is request for SecurityAlert collection
type SecurityAlerts_v2CollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityAlert collection
func (r *SecurityAlerts_v2CollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityAlert, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityAlert
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityAlert
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityAlert collection, max N pages
func (r *SecurityAlerts_v2CollectionRequest) GetN(ctx context.Context, n int) ([]SecurityAlert, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityAlert collection
func (r *SecurityAlerts_v2CollectionRequest) Get(ctx context.Context) ([]SecurityAlert, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityAlert collection
func (r *SecurityAlerts_v2CollectionRequest) Add(ctx context.Context, reqObj *SecurityAlert) (resObj *SecurityAlert, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AttackSimulation is navigation property rn
func (b *SecurityRequestBuilder) AttackSimulation() *AttackSimulationRootRequestBuilder {
	bb := &AttackSimulationRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/attackSimulation"
	return bb
}

// Cases is navigation property rn
func (b *SecurityRequestBuilder) Cases() *SecurityCasesRootRequestBuilder {
	bb := &SecurityCasesRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cases"
	return bb
}

// Incidents returns request builder for SecurityIncident collection rcn
func (b *SecurityRequestBuilder) Incidents() *SecurityIncidentsCollectionRequestBuilder {
	bb := &SecurityIncidentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/incidents"
	return bb
}

// SecurityIncidentsCollectionRequestBuilder is request builder for SecurityIncident collection
type SecurityIncidentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityIncident collection
func (b *SecurityIncidentsCollectionRequestBuilder) Request() *SecurityIncidentsCollectionRequest {
	return &SecurityIncidentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityIncident item
func (b *SecurityIncidentsCollectionRequestBuilder) ID(id string) *SecurityIncidentRequestBuilder {
	bb := &SecurityIncidentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityIncidentsCollectionRequest is request for SecurityIncident collection
type SecurityIncidentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityIncident collection
func (r *SecurityIncidentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityIncident, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityIncident
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityIncident
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityIncident collection, max N pages
func (r *SecurityIncidentsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityIncident, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityIncident collection
func (r *SecurityIncidentsCollectionRequest) Get(ctx context.Context) ([]SecurityIncident, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityIncident collection
func (r *SecurityIncidentsCollectionRequest) Add(ctx context.Context, reqObj *SecurityIncident) (resObj *SecurityIncident, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecureScoreControlProfiles returns request builder for SecureScoreControlProfile collection rcn
func (b *SecurityRequestBuilder) SecureScoreControlProfiles() *SecuritySecureScoreControlProfilesCollectionRequestBuilder {
	bb := &SecuritySecureScoreControlProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/secureScoreControlProfiles"
	return bb
}

// SecuritySecureScoreControlProfilesCollectionRequestBuilder is request builder for SecureScoreControlProfile collection
type SecuritySecureScoreControlProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecureScoreControlProfile collection
func (b *SecuritySecureScoreControlProfilesCollectionRequestBuilder) Request() *SecuritySecureScoreControlProfilesCollectionRequest {
	return &SecuritySecureScoreControlProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecureScoreControlProfile item
func (b *SecuritySecureScoreControlProfilesCollectionRequestBuilder) ID(id string) *SecureScoreControlProfileRequestBuilder {
	bb := &SecureScoreControlProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecuritySecureScoreControlProfilesCollectionRequest is request for SecureScoreControlProfile collection
type SecuritySecureScoreControlProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecureScoreControlProfile collection
func (r *SecuritySecureScoreControlProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecureScoreControlProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecureScoreControlProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecureScoreControlProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecureScoreControlProfile collection, max N pages
func (r *SecuritySecureScoreControlProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]SecureScoreControlProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecureScoreControlProfile collection
func (r *SecuritySecureScoreControlProfilesCollectionRequest) Get(ctx context.Context) ([]SecureScoreControlProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecureScoreControlProfile collection
func (r *SecuritySecureScoreControlProfilesCollectionRequest) Add(ctx context.Context, reqObj *SecureScoreControlProfile) (resObj *SecureScoreControlProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecureScores returns request builder for SecureScore collection rcn
func (b *SecurityRequestBuilder) SecureScores() *SecuritySecureScoresCollectionRequestBuilder {
	bb := &SecuritySecureScoresCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/secureScores"
	return bb
}

// SecuritySecureScoresCollectionRequestBuilder is request builder for SecureScore collection
type SecuritySecureScoresCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecureScore collection
func (b *SecuritySecureScoresCollectionRequestBuilder) Request() *SecuritySecureScoresCollectionRequest {
	return &SecuritySecureScoresCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecureScore item
func (b *SecuritySecureScoresCollectionRequestBuilder) ID(id string) *SecureScoreRequestBuilder {
	bb := &SecureScoreRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecuritySecureScoresCollectionRequest is request for SecureScore collection
type SecuritySecureScoresCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecureScore collection
func (r *SecuritySecureScoresCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecureScore, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecureScore
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecureScore
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecureScore collection, max N pages
func (r *SecuritySecureScoresCollectionRequest) GetN(ctx context.Context, n int) ([]SecureScore, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecureScore collection
func (r *SecuritySecureScoresCollectionRequest) Get(ctx context.Context) ([]SecureScore, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecureScore collection
func (r *SecuritySecureScoresCollectionRequest) Add(ctx context.Context, reqObj *SecureScore) (resObj *SecureScore, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *SecurityRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *SecurityReportsRootRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// SecurityEdiscoveryCustodianCollectionSecurityApplyHoldRequestParameter undocumented
type SecurityEdiscoveryCustodianCollectionSecurityApplyHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// SecurityEdiscoveryCustodianCollectionSecurityRemoveHoldRequestParameter undocumented
type SecurityEdiscoveryCustodianCollectionSecurityRemoveHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// SecurityEdiscoveryNoncustodialDataSourceCollectionSecurityApplyHoldRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceCollectionSecurityApplyHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// SecurityEdiscoveryNoncustodialDataSourceCollectionSecurityRemoveHoldRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceCollectionSecurityRemoveHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// SecuritySecurityRunHuntingQueryRequestParameter undocumented
type SecuritySecurityRunHuntingQueryRequestParameter struct {
	// Query undocumented
	Query *string `json:"query,omitempty"`
}

// SecurityEdiscoveryCaseSecurityCloseRequestParameter undocumented
type SecurityEdiscoveryCaseSecurityCloseRequestParameter struct {
}

// SecurityEdiscoveryCaseSecurityReopenRequestParameter undocumented
type SecurityEdiscoveryCaseSecurityReopenRequestParameter struct {
}

// SecurityEdiscoveryCaseSettingsSecurityResetToDefaultRequestParameter undocumented
type SecurityEdiscoveryCaseSettingsSecurityResetToDefaultRequestParameter struct {
}

// SecurityEdiscoveryCustodianSecurityActivateRequestParameter undocumented
type SecurityEdiscoveryCustodianSecurityActivateRequestParameter struct {
}

// SecurityEdiscoveryCustodianSecurityApplyHoldRequestParameter undocumented
type SecurityEdiscoveryCustodianSecurityApplyHoldRequestParameter struct {
}

// SecurityEdiscoveryCustodianSecurityReleaseRequestParameter undocumented
type SecurityEdiscoveryCustodianSecurityReleaseRequestParameter struct {
}

// SecurityEdiscoveryCustodianSecurityRemoveHoldRequestParameter undocumented
type SecurityEdiscoveryCustodianSecurityRemoveHoldRequestParameter struct {
}

// SecurityEdiscoveryCustodianSecurityUpdateIndexRequestParameter undocumented
type SecurityEdiscoveryCustodianSecurityUpdateIndexRequestParameter struct {
}

// SecurityEdiscoveryNoncustodialDataSourceSecurityApplyHoldRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceSecurityApplyHoldRequestParameter struct {
}

// SecurityEdiscoveryNoncustodialDataSourceSecurityReleaseRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceSecurityReleaseRequestParameter struct {
}

// SecurityEdiscoveryNoncustodialDataSourceSecurityRemoveHoldRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceSecurityRemoveHoldRequestParameter struct {
}

// SecurityEdiscoveryNoncustodialDataSourceSecurityUpdateIndexRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceSecurityUpdateIndexRequestParameter struct {
}

// SecurityEdiscoveryReviewSetSecurityAddToReviewSetRequestParameter undocumented
type SecurityEdiscoveryReviewSetSecurityAddToReviewSetRequestParameter struct {
	// Search undocumented
	Search *SecurityEdiscoverySearch `json:"search,omitempty"`
	// AdditionalDataOptions undocumented
	AdditionalDataOptions *SecurityAdditionalDataOptions `json:"additionalDataOptions,omitempty"`
}

// SecurityEdiscoveryReviewSetQuerySecurityApplyTagsRequestParameter undocumented
type SecurityEdiscoveryReviewSetQuerySecurityApplyTagsRequestParameter struct {
	// TagsToAdd undocumented
	TagsToAdd []SecurityEdiscoveryReviewTag `json:"tagsToAdd,omitempty"`
	// TagsToRemove undocumented
	TagsToRemove []SecurityEdiscoveryReviewTag `json:"tagsToRemove,omitempty"`
}

// SecurityEdiscoverySearchSecurityEstimateStatisticsRequestParameter undocumented
type SecurityEdiscoverySearchSecurityEstimateStatisticsRequestParameter struct {
}

// SecurityEdiscoverySearchSecurityPurgeDataRequestParameter undocumented
type SecurityEdiscoverySearchSecurityPurgeDataRequestParameter struct {
	// PurgeType undocumented
	PurgeType *SecurityPurgeType `json:"purgeType,omitempty"`
	// PurgeAreas undocumented
	PurgeAreas *SecurityPurgeAreas `json:"purgeAreas,omitempty"`
}

// EdiscoveryCases returns request builder for SecurityEdiscoveryCase collection rcn
func (b *SecurityCasesRootRequestBuilder) EdiscoveryCases() *SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder {
	bb := &SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/ediscoveryCases"
	return bb
}

// SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder is request builder for SecurityEdiscoveryCase collection
type SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryCase collection
func (b *SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder) Request() *SecurityCasesRootEdiscoveryCasesCollectionRequest {
	return &SecurityCasesRootEdiscoveryCasesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryCase item
func (b *SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryCaseRequestBuilder {
	bb := &SecurityEdiscoveryCaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCasesRootEdiscoveryCasesCollectionRequest is request for SecurityEdiscoveryCase collection
type SecurityCasesRootEdiscoveryCasesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryCase collection
func (r *SecurityCasesRootEdiscoveryCasesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryCase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryCase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryCase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryCase collection, max N pages
func (r *SecurityCasesRootEdiscoveryCasesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryCase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryCase collection
func (r *SecurityCasesRootEdiscoveryCasesCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryCase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryCase collection
func (r *SecurityCasesRootEdiscoveryCasesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryCase) (resObj *SecurityEdiscoveryCase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReviewSet is navigation property rn
func (b *SecurityEdiscoveryAddToReviewSetOperationRequestBuilder) ReviewSet() *SecurityEdiscoveryReviewSetRequestBuilder {
	bb := &SecurityEdiscoveryReviewSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reviewSet"
	return bb
}

// Search is navigation property rn
func (b *SecurityEdiscoveryAddToReviewSetOperationRequestBuilder) Search() *SecurityEdiscoverySearchRequestBuilder {
	bb := &SecurityEdiscoverySearchRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/search"
	return bb
}

// Custodians returns request builder for SecurityEdiscoveryCustodian collection rcn
func (b *SecurityEdiscoveryCaseRequestBuilder) Custodians() *SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/custodians"
	return bb
}

// SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder is request builder for SecurityEdiscoveryCustodian collection
type SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryCustodian collection
func (b *SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseCustodiansCollectionRequest {
	return &SecurityEdiscoveryCaseCustodiansCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryCustodian item
func (b *SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryCustodianRequestBuilder {
	bb := &SecurityEdiscoveryCustodianRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseCustodiansCollectionRequest is request for SecurityEdiscoveryCustodian collection
type SecurityEdiscoveryCaseCustodiansCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryCustodian collection
func (r *SecurityEdiscoveryCaseCustodiansCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryCustodian, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryCustodian
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryCustodian
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryCustodian collection, max N pages
func (r *SecurityEdiscoveryCaseCustodiansCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryCustodian, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryCustodian collection
func (r *SecurityEdiscoveryCaseCustodiansCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryCustodian, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryCustodian collection
func (r *SecurityEdiscoveryCaseCustodiansCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryCustodian) (resObj *SecurityEdiscoveryCustodian, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// NoncustodialDataSources returns request builder for SecurityEdiscoveryNoncustodialDataSource collection rcn
func (b *SecurityEdiscoveryCaseRequestBuilder) NoncustodialDataSources() *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/noncustodialDataSources"
	return bb
}

// SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder is request builder for SecurityEdiscoveryNoncustodialDataSource collection
type SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryNoncustodialDataSource collection
func (b *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest {
	return &SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryNoncustodialDataSource item
func (b *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryNoncustodialDataSourceRequestBuilder {
	bb := &SecurityEdiscoveryNoncustodialDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest is request for SecurityEdiscoveryNoncustodialDataSource collection
type SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryNoncustodialDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryNoncustodialDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryNoncustodialDataSource collection, max N pages
func (r *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryNoncustodialDataSource) (resObj *SecurityEdiscoveryNoncustodialDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Operations returns request builder for SecurityCaseOperation collection rcn
func (b *SecurityEdiscoveryCaseRequestBuilder) Operations() *SecurityEdiscoveryCaseOperationsCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// SecurityEdiscoveryCaseOperationsCollectionRequestBuilder is request builder for SecurityCaseOperation collection
type SecurityEdiscoveryCaseOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityCaseOperation collection
func (b *SecurityEdiscoveryCaseOperationsCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseOperationsCollectionRequest {
	return &SecurityEdiscoveryCaseOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityCaseOperation item
func (b *SecurityEdiscoveryCaseOperationsCollectionRequestBuilder) ID(id string) *SecurityCaseOperationRequestBuilder {
	bb := &SecurityCaseOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseOperationsCollectionRequest is request for SecurityCaseOperation collection
type SecurityEdiscoveryCaseOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityCaseOperation collection
func (r *SecurityEdiscoveryCaseOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityCaseOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityCaseOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityCaseOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityCaseOperation collection, max N pages
func (r *SecurityEdiscoveryCaseOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityCaseOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityCaseOperation collection
func (r *SecurityEdiscoveryCaseOperationsCollectionRequest) Get(ctx context.Context) ([]SecurityCaseOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityCaseOperation collection
func (r *SecurityEdiscoveryCaseOperationsCollectionRequest) Add(ctx context.Context, reqObj *SecurityCaseOperation) (resObj *SecurityCaseOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReviewSets returns request builder for SecurityEdiscoveryReviewSet collection rcn
func (b *SecurityEdiscoveryCaseRequestBuilder) ReviewSets() *SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reviewSets"
	return bb
}

// SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder is request builder for SecurityEdiscoveryReviewSet collection
type SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryReviewSet collection
func (b *SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseReviewSetsCollectionRequest {
	return &SecurityEdiscoveryCaseReviewSetsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryReviewSet item
func (b *SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryReviewSetRequestBuilder {
	bb := &SecurityEdiscoveryReviewSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseReviewSetsCollectionRequest is request for SecurityEdiscoveryReviewSet collection
type SecurityEdiscoveryCaseReviewSetsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryReviewSet collection
func (r *SecurityEdiscoveryCaseReviewSetsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryReviewSet, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryReviewSet
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryReviewSet
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryReviewSet collection, max N pages
func (r *SecurityEdiscoveryCaseReviewSetsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryReviewSet, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryReviewSet collection
func (r *SecurityEdiscoveryCaseReviewSetsCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryReviewSet, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryReviewSet collection
func (r *SecurityEdiscoveryCaseReviewSetsCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryReviewSet) (resObj *SecurityEdiscoveryReviewSet, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Searches returns request builder for SecurityEdiscoverySearch collection rcn
func (b *SecurityEdiscoveryCaseRequestBuilder) Searches() *SecurityEdiscoveryCaseSearchesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseSearchesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/searches"
	return bb
}

// SecurityEdiscoveryCaseSearchesCollectionRequestBuilder is request builder for SecurityEdiscoverySearch collection
type SecurityEdiscoveryCaseSearchesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoverySearch collection
func (b *SecurityEdiscoveryCaseSearchesCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseSearchesCollectionRequest {
	return &SecurityEdiscoveryCaseSearchesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoverySearch item
func (b *SecurityEdiscoveryCaseSearchesCollectionRequestBuilder) ID(id string) *SecurityEdiscoverySearchRequestBuilder {
	bb := &SecurityEdiscoverySearchRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseSearchesCollectionRequest is request for SecurityEdiscoverySearch collection
type SecurityEdiscoveryCaseSearchesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoverySearch collection
func (r *SecurityEdiscoveryCaseSearchesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoverySearch, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoverySearch
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoverySearch
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoverySearch collection, max N pages
func (r *SecurityEdiscoveryCaseSearchesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoverySearch, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoverySearch collection
func (r *SecurityEdiscoveryCaseSearchesCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoverySearch, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoverySearch collection
func (r *SecurityEdiscoveryCaseSearchesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoverySearch) (resObj *SecurityEdiscoverySearch, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Settings is navigation property rn
func (b *SecurityEdiscoveryCaseRequestBuilder) Settings() *SecurityEdiscoveryCaseSettingsRequestBuilder {
	bb := &SecurityEdiscoveryCaseSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// Tags returns request builder for SecurityEdiscoveryReviewTag collection rcn
func (b *SecurityEdiscoveryCaseRequestBuilder) Tags() *SecurityEdiscoveryCaseTagsCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseTagsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tags"
	return bb
}

// SecurityEdiscoveryCaseTagsCollectionRequestBuilder is request builder for SecurityEdiscoveryReviewTag collection
type SecurityEdiscoveryCaseTagsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryReviewTag collection
func (b *SecurityEdiscoveryCaseTagsCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseTagsCollectionRequest {
	return &SecurityEdiscoveryCaseTagsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryReviewTag item
func (b *SecurityEdiscoveryCaseTagsCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryReviewTagRequestBuilder {
	bb := &SecurityEdiscoveryReviewTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseTagsCollectionRequest is request for SecurityEdiscoveryReviewTag collection
type SecurityEdiscoveryCaseTagsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryCaseTagsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryReviewTag, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryReviewTag
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryReviewTag
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryReviewTag collection, max N pages
func (r *SecurityEdiscoveryCaseTagsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryReviewTag, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryCaseTagsCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryReviewTag, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryCaseTagsCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryReviewTag) (resObj *SecurityEdiscoveryReviewTag, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// LastIndexOperation is navigation property rn
func (b *SecurityEdiscoveryCustodianRequestBuilder) LastIndexOperation() *SecurityEdiscoveryIndexOperationRequestBuilder {
	bb := &SecurityEdiscoveryIndexOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastIndexOperation"
	return bb
}

// SiteSources returns request builder for SecuritySiteSource collection rcn
func (b *SecurityEdiscoveryCustodianRequestBuilder) SiteSources() *SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/siteSources"
	return bb
}

// SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder is request builder for SecuritySiteSource collection
type SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecuritySiteSource collection
func (b *SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder) Request() *SecurityEdiscoveryCustodianSiteSourcesCollectionRequest {
	return &SecurityEdiscoveryCustodianSiteSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecuritySiteSource item
func (b *SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder) ID(id string) *SecuritySiteSourceRequestBuilder {
	bb := &SecuritySiteSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCustodianSiteSourcesCollectionRequest is request for SecuritySiteSource collection
type SecurityEdiscoveryCustodianSiteSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecuritySiteSource collection
func (r *SecurityEdiscoveryCustodianSiteSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecuritySiteSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecuritySiteSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecuritySiteSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecuritySiteSource collection, max N pages
func (r *SecurityEdiscoveryCustodianSiteSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecuritySiteSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecuritySiteSource collection
func (r *SecurityEdiscoveryCustodianSiteSourcesCollectionRequest) Get(ctx context.Context) ([]SecuritySiteSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecuritySiteSource collection
func (r *SecurityEdiscoveryCustodianSiteSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecuritySiteSource) (resObj *SecuritySiteSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UnifiedGroupSources returns request builder for SecurityUnifiedGroupSource collection rcn
func (b *SecurityEdiscoveryCustodianRequestBuilder) UnifiedGroupSources() *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/unifiedGroupSources"
	return bb
}

// SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder is request builder for SecurityUnifiedGroupSource collection
type SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityUnifiedGroupSource collection
func (b *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder) Request() *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest {
	return &SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityUnifiedGroupSource item
func (b *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder) ID(id string) *SecurityUnifiedGroupSourceRequestBuilder {
	bb := &SecurityUnifiedGroupSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest is request for SecurityUnifiedGroupSource collection
type SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityUnifiedGroupSource collection
func (r *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityUnifiedGroupSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityUnifiedGroupSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityUnifiedGroupSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityUnifiedGroupSource collection, max N pages
func (r *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityUnifiedGroupSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityUnifiedGroupSource collection
func (r *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityUnifiedGroupSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityUnifiedGroupSource collection
func (r *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityUnifiedGroupSource) (resObj *SecurityUnifiedGroupSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserSources returns request builder for SecurityUserSource collection rcn
func (b *SecurityEdiscoveryCustodianRequestBuilder) UserSources() *SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userSources"
	return bb
}

// SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder is request builder for SecurityUserSource collection
type SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityUserSource collection
func (b *SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder) Request() *SecurityEdiscoveryCustodianUserSourcesCollectionRequest {
	return &SecurityEdiscoveryCustodianUserSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityUserSource item
func (b *SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder) ID(id string) *SecurityUserSourceRequestBuilder {
	bb := &SecurityUserSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCustodianUserSourcesCollectionRequest is request for SecurityUserSource collection
type SecurityEdiscoveryCustodianUserSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityUserSource collection
func (r *SecurityEdiscoveryCustodianUserSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityUserSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityUserSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityUserSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityUserSource collection, max N pages
func (r *SecurityEdiscoveryCustodianUserSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityUserSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityUserSource collection
func (r *SecurityEdiscoveryCustodianUserSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityUserSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityUserSource collection
func (r *SecurityEdiscoveryCustodianUserSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityUserSource) (resObj *SecurityUserSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Search is navigation property rn
func (b *SecurityEdiscoveryEstimateOperationRequestBuilder) Search() *SecurityEdiscoverySearchRequestBuilder {
	bb := &SecurityEdiscoverySearchRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/search"
	return bb
}

// DataSource is navigation property rn
func (b *SecurityEdiscoveryNoncustodialDataSourceRequestBuilder) DataSource() *SecurityDataSourceRequestBuilder {
	bb := &SecurityDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dataSource"
	return bb
}

// LastIndexOperation is navigation property rn
func (b *SecurityEdiscoveryNoncustodialDataSourceRequestBuilder) LastIndexOperation() *SecurityEdiscoveryIndexOperationRequestBuilder {
	bb := &SecurityEdiscoveryIndexOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastIndexOperation"
	return bb
}

// Queries returns request builder for SecurityEdiscoveryReviewSetQuery collection rcn
func (b *SecurityEdiscoveryReviewSetRequestBuilder) Queries() *SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/queries"
	return bb
}

// SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder is request builder for SecurityEdiscoveryReviewSetQuery collection
type SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryReviewSetQuery collection
func (b *SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder) Request() *SecurityEdiscoveryReviewSetQueriesCollectionRequest {
	return &SecurityEdiscoveryReviewSetQueriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryReviewSetQuery item
func (b *SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryReviewSetQueryRequestBuilder {
	bb := &SecurityEdiscoveryReviewSetQueryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryReviewSetQueriesCollectionRequest is request for SecurityEdiscoveryReviewSetQuery collection
type SecurityEdiscoveryReviewSetQueriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryReviewSetQuery collection
func (r *SecurityEdiscoveryReviewSetQueriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryReviewSetQuery, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryReviewSetQuery
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryReviewSetQuery
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryReviewSetQuery collection, max N pages
func (r *SecurityEdiscoveryReviewSetQueriesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryReviewSetQuery, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryReviewSetQuery collection
func (r *SecurityEdiscoveryReviewSetQueriesCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryReviewSetQuery, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryReviewSetQuery collection
func (r *SecurityEdiscoveryReviewSetQueriesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryReviewSetQuery) (resObj *SecurityEdiscoveryReviewSetQuery, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ChildTags returns request builder for SecurityEdiscoveryReviewTag collection rcn
func (b *SecurityEdiscoveryReviewTagRequestBuilder) ChildTags() *SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder {
	bb := &SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/childTags"
	return bb
}

// SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder is request builder for SecurityEdiscoveryReviewTag collection
type SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryReviewTag collection
func (b *SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder) Request() *SecurityEdiscoveryReviewTagChildTagsCollectionRequest {
	return &SecurityEdiscoveryReviewTagChildTagsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryReviewTag item
func (b *SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryReviewTagRequestBuilder {
	bb := &SecurityEdiscoveryReviewTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryReviewTagChildTagsCollectionRequest is request for SecurityEdiscoveryReviewTag collection
type SecurityEdiscoveryReviewTagChildTagsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryReviewTagChildTagsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryReviewTag, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryReviewTag
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryReviewTag
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryReviewTag collection, max N pages
func (r *SecurityEdiscoveryReviewTagChildTagsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryReviewTag, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryReviewTagChildTagsCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryReviewTag, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryReviewTagChildTagsCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryReviewTag) (resObj *SecurityEdiscoveryReviewTag, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Parent is navigation property rn
func (b *SecurityEdiscoveryReviewTagRequestBuilder) Parent() *SecurityEdiscoveryReviewTagRequestBuilder {
	bb := &SecurityEdiscoveryReviewTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/parent"
	return bb
}

// AddToReviewSetOperation is navigation property rn
func (b *SecurityEdiscoverySearchRequestBuilder) AddToReviewSetOperation() *SecurityEdiscoveryAddToReviewSetOperationRequestBuilder {
	bb := &SecurityEdiscoveryAddToReviewSetOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/addToReviewSetOperation"
	return bb
}

// AdditionalSources returns request builder for SecurityDataSource collection rcn
func (b *SecurityEdiscoverySearchRequestBuilder) AdditionalSources() *SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/additionalSources"
	return bb
}

// SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder is request builder for SecurityDataSource collection
type SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityDataSource collection
func (b *SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder) Request() *SecurityEdiscoverySearchAdditionalSourcesCollectionRequest {
	return &SecurityEdiscoverySearchAdditionalSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityDataSource item
func (b *SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder) ID(id string) *SecurityDataSourceRequestBuilder {
	bb := &SecurityDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoverySearchAdditionalSourcesCollectionRequest is request for SecurityDataSource collection
type SecurityEdiscoverySearchAdditionalSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityDataSource collection
func (r *SecurityEdiscoverySearchAdditionalSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityDataSource collection, max N pages
func (r *SecurityEdiscoverySearchAdditionalSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityDataSource collection
func (r *SecurityEdiscoverySearchAdditionalSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityDataSource collection
func (r *SecurityEdiscoverySearchAdditionalSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityDataSource) (resObj *SecurityDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CustodianSources returns request builder for SecurityDataSource collection rcn
func (b *SecurityEdiscoverySearchRequestBuilder) CustodianSources() *SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/custodianSources"
	return bb
}

// SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder is request builder for SecurityDataSource collection
type SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityDataSource collection
func (b *SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder) Request() *SecurityEdiscoverySearchCustodianSourcesCollectionRequest {
	return &SecurityEdiscoverySearchCustodianSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityDataSource item
func (b *SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder) ID(id string) *SecurityDataSourceRequestBuilder {
	bb := &SecurityDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoverySearchCustodianSourcesCollectionRequest is request for SecurityDataSource collection
type SecurityEdiscoverySearchCustodianSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityDataSource collection
func (r *SecurityEdiscoverySearchCustodianSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityDataSource collection, max N pages
func (r *SecurityEdiscoverySearchCustodianSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityDataSource collection
func (r *SecurityEdiscoverySearchCustodianSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityDataSource collection
func (r *SecurityEdiscoverySearchCustodianSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityDataSource) (resObj *SecurityDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// LastEstimateStatisticsOperation is navigation property rn
func (b *SecurityEdiscoverySearchRequestBuilder) LastEstimateStatisticsOperation() *SecurityEdiscoveryEstimateOperationRequestBuilder {
	bb := &SecurityEdiscoveryEstimateOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastEstimateStatisticsOperation"
	return bb
}

// NoncustodialSources returns request builder for SecurityEdiscoveryNoncustodialDataSource collection rcn
func (b *SecurityEdiscoverySearchRequestBuilder) NoncustodialSources() *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/noncustodialSources"
	return bb
}

// SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder is request builder for SecurityEdiscoveryNoncustodialDataSource collection
type SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryNoncustodialDataSource collection
func (b *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder) Request() *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest {
	return &SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryNoncustodialDataSource item
func (b *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryNoncustodialDataSourceRequestBuilder {
	bb := &SecurityEdiscoveryNoncustodialDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest is request for SecurityEdiscoveryNoncustodialDataSource collection
type SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryNoncustodialDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryNoncustodialDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryNoncustodialDataSource collection, max N pages
func (r *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryNoncustodialDataSource) (resObj *SecurityEdiscoveryNoncustodialDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Alerts returns request builder for SecurityAlert collection rcn
func (b *SecurityIncidentRequestBuilder) Alerts() *SecurityIncidentAlertsCollectionRequestBuilder {
	bb := &SecurityIncidentAlertsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alerts"
	return bb
}

// SecurityIncidentAlertsCollectionRequestBuilder is request builder for SecurityAlert collection
type SecurityIncidentAlertsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityAlert collection
func (b *SecurityIncidentAlertsCollectionRequestBuilder) Request() *SecurityIncidentAlertsCollectionRequest {
	return &SecurityIncidentAlertsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityAlert item
func (b *SecurityIncidentAlertsCollectionRequestBuilder) ID(id string) *SecurityAlertRequestBuilder {
	bb := &SecurityAlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityIncidentAlertsCollectionRequest is request for SecurityAlert collection
type SecurityIncidentAlertsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityAlert collection
func (r *SecurityIncidentAlertsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityAlert, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityAlert
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityAlert
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityAlert collection, max N pages
func (r *SecurityIncidentAlertsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityAlert, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityAlert collection
func (r *SecurityIncidentAlertsCollectionRequest) Get(ctx context.Context) ([]SecurityAlert, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityAlert collection
func (r *SecurityIncidentAlertsCollectionRequest) Add(ctx context.Context, reqObj *SecurityAlert) (resObj *SecurityAlert, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Site is navigation property rn
func (b *SecuritySiteSourceRequestBuilder) Site() *SiteRequestBuilder {
	bb := &SiteRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/site"
	return bb
}

// Group is navigation property rn
func (b *SecurityUnifiedGroupSourceRequestBuilder) Group() *GroupRequestBuilder {
	bb := &GroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/group"
	return bb
}

// SecurityEdiscoveryAddToReviewSetOperation returns request builder for SecurityEdiscoveryAddToReviewSetOperation collection rcn
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryAddToReviewSetOperation() *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityEdiscoveryAddToReviewSetOperation"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryAddToReviewSetOperation collection
type SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryAddToReviewSetOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryAddToReviewSetOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryAddToReviewSetOperationRequestBuilder {
	bb := &SecurityEdiscoveryAddToReviewSetOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest is request for SecurityEdiscoveryAddToReviewSetOperation collection
type SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryAddToReviewSetOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryAddToReviewSetOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryAddToReviewSetOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryAddToReviewSetOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryAddToReviewSetOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryAddToReviewSetOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryAddToReviewSetOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryAddToReviewSetOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryAddToReviewSetOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryAddToReviewSetOperation) (resObj *SecurityEdiscoveryAddToReviewSetOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryEstimateOperation returns request builder for SecurityEdiscoveryEstimateOperation collection rcn
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryEstimateOperation() *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityEdiscoveryEstimateOperation"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryEstimateOperation collection
type SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryEstimateOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryEstimateOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryEstimateOperationRequestBuilder {
	bb := &SecurityEdiscoveryEstimateOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest is request for SecurityEdiscoveryEstimateOperation collection
type SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryEstimateOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryEstimateOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryEstimateOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryEstimateOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryEstimateOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryEstimateOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryEstimateOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryEstimateOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryEstimateOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryEstimateOperation) (resObj *SecurityEdiscoveryEstimateOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryHoldOperation returns request builder for SecurityEdiscoveryHoldOperation collection rcn
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryHoldOperation() *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityEdiscoveryHoldOperation"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryHoldOperation collection
type SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryHoldOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryHoldOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryHoldOperationRequestBuilder {
	bb := &SecurityEdiscoveryHoldOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest is request for SecurityEdiscoveryHoldOperation collection
type SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryHoldOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryHoldOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryHoldOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryHoldOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryHoldOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryHoldOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryHoldOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryHoldOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryHoldOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryHoldOperation) (resObj *SecurityEdiscoveryHoldOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryIndexOperation returns request builder for SecurityEdiscoveryIndexOperation collection rcn
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryIndexOperation() *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityEdiscoveryIndexOperation"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryIndexOperation collection
type SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryIndexOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryIndexOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryIndexOperationRequestBuilder {
	bb := &SecurityEdiscoveryIndexOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest is request for SecurityEdiscoveryIndexOperation collection
type SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryIndexOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryIndexOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryIndexOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryIndexOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryIndexOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryIndexOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryIndexOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryIndexOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryIndexOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryIndexOperation) (resObj *SecurityEdiscoveryIndexOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryPurgeDataOperation returns request builder for SecurityEdiscoveryPurgeDataOperation collection rcn
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryPurgeDataOperation() *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityEdiscoveryPurgeDataOperation"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryPurgeDataOperation collection
type SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryPurgeDataOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryPurgeDataOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryPurgeDataOperationRequestBuilder {
	bb := &SecurityEdiscoveryPurgeDataOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest is request for SecurityEdiscoveryPurgeDataOperation collection
type SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryPurgeDataOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryPurgeDataOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryPurgeDataOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryPurgeDataOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryPurgeDataOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryPurgeDataOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryPurgeDataOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryPurgeDataOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryPurgeDataOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryPurgeDataOperation) (resObj *SecurityEdiscoveryPurgeDataOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryTagOperation returns request builder for SecurityEdiscoveryTagOperation collection rcn
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryTagOperation() *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityEdiscoveryTagOperation"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryTagOperation collection
type SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryTagOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryTagOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryTagOperationRequestBuilder {
	bb := &SecurityEdiscoveryTagOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest is request for SecurityEdiscoveryTagOperation collection
type SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryTagOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryTagOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryTagOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryTagOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryTagOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryTagOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryTagOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryTagOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryTagOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryTagOperation) (resObj *SecurityEdiscoveryTagOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecuritySiteSource returns request builder for SecuritySiteSource collection rcn
func (b *SecurityDataSourceRequestBuilder) SecuritySiteSource() *SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder {
	bb := &SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecuritySiteSource"
	return bb
}

// SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder is request builder for SecuritySiteSource collection
type SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecuritySiteSource collection
func (b *SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder) Request() *SecurityDataSourceSecuritySiteSourceCollectionRequest {
	return &SecurityDataSourceSecuritySiteSourceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecuritySiteSource item
func (b *SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder) ID(id string) *SecuritySiteSourceRequestBuilder {
	bb := &SecuritySiteSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityDataSourceSecuritySiteSourceCollectionRequest is request for SecuritySiteSource collection
type SecurityDataSourceSecuritySiteSourceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecuritySiteSource collection
func (r *SecurityDataSourceSecuritySiteSourceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecuritySiteSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecuritySiteSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecuritySiteSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecuritySiteSource collection, max N pages
func (r *SecurityDataSourceSecuritySiteSourceCollectionRequest) GetN(ctx context.Context, n int) ([]SecuritySiteSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecuritySiteSource collection
func (r *SecurityDataSourceSecuritySiteSourceCollectionRequest) Get(ctx context.Context) ([]SecuritySiteSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecuritySiteSource collection
func (r *SecurityDataSourceSecuritySiteSourceCollectionRequest) Add(ctx context.Context, reqObj *SecuritySiteSource) (resObj *SecuritySiteSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityUnifiedGroupSource returns request builder for SecurityUnifiedGroupSource collection rcn
func (b *SecurityDataSourceRequestBuilder) SecurityUnifiedGroupSource() *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder {
	bb := &SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityUnifiedGroupSource"
	return bb
}

// SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder is request builder for SecurityUnifiedGroupSource collection
type SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityUnifiedGroupSource collection
func (b *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder) Request() *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest {
	return &SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityUnifiedGroupSource item
func (b *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder) ID(id string) *SecurityUnifiedGroupSourceRequestBuilder {
	bb := &SecurityUnifiedGroupSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest is request for SecurityUnifiedGroupSource collection
type SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityUnifiedGroupSource collection
func (r *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityUnifiedGroupSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityUnifiedGroupSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityUnifiedGroupSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityUnifiedGroupSource collection, max N pages
func (r *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityUnifiedGroupSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityUnifiedGroupSource collection
func (r *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest) Get(ctx context.Context) ([]SecurityUnifiedGroupSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityUnifiedGroupSource collection
func (r *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest) Add(ctx context.Context, reqObj *SecurityUnifiedGroupSource) (resObj *SecurityUnifiedGroupSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityUserSource returns request builder for SecurityUserSource collection rcn
func (b *SecurityDataSourceRequestBuilder) SecurityUserSource() *SecurityDataSourceSecurityUserSourceCollectionRequestBuilder {
	bb := &SecurityDataSourceSecurityUserSourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityUserSource"
	return bb
}

// SecurityDataSourceSecurityUserSourceCollectionRequestBuilder is request builder for SecurityUserSource collection
type SecurityDataSourceSecurityUserSourceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityUserSource collection
func (b *SecurityDataSourceSecurityUserSourceCollectionRequestBuilder) Request() *SecurityDataSourceSecurityUserSourceCollectionRequest {
	return &SecurityDataSourceSecurityUserSourceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityUserSource item
func (b *SecurityDataSourceSecurityUserSourceCollectionRequestBuilder) ID(id string) *SecurityUserSourceRequestBuilder {
	bb := &SecurityUserSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityDataSourceSecurityUserSourceCollectionRequest is request for SecurityUserSource collection
type SecurityDataSourceSecurityUserSourceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityUserSource collection
func (r *SecurityDataSourceSecurityUserSourceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityUserSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityUserSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityUserSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityUserSource collection, max N pages
func (r *SecurityDataSourceSecurityUserSourceCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityUserSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityUserSource collection
func (r *SecurityDataSourceSecurityUserSourceCollectionRequest) Get(ctx context.Context) ([]SecurityUserSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityUserSource collection
func (r *SecurityDataSourceSecurityUserSourceCollectionRequest) Add(ctx context.Context, reqObj *SecurityUserSource) (resObj *SecurityUserSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
