// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// Windows10CompliancePolicy returns request builder for DeviceCompliancePolicy collection rcn
func (b *Windows10CompliancePolicyRequestBuilder) Windows10CompliancePolicy() *Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequestBuilder {
	bb := &Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DeviceCompliancePolicy"
	return bb
}

// Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequestBuilder is request builder for DeviceCompliancePolicy collection
type Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceCompliancePolicy collection
func (b *Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequestBuilder) Request() *Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequest {
	return &Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceCompliancePolicy item
func (b *Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequestBuilder) ID(id string) *DeviceCompliancePolicyRequestBuilder {
	bb := &DeviceCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequest is request for DeviceCompliancePolicy collection
type Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceCompliancePolicy collection
func (r *Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceCompliancePolicy collection, max N pages
func (r *Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceCompliancePolicy collection
func (r *Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequest) Get(ctx context.Context) ([]DeviceCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceCompliancePolicy collection
func (r *Windows10CompliancePolicyWindows10CompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *DeviceCompliancePolicy) (resObj *DeviceCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Windows10CustomConfiguration returns request builder for DeviceConfiguration collection rcn
func (b *Windows10CustomConfigurationRequestBuilder) Windows10CustomConfiguration() *Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequestBuilder {
	bb := &Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DeviceConfiguration"
	return bb
}

// Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequestBuilder is request builder for DeviceConfiguration collection
type Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfiguration collection
func (b *Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequestBuilder) Request() *Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequest {
	return &Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfiguration item
func (b *Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequestBuilder) ID(id string) *DeviceConfigurationRequestBuilder {
	bb := &DeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequest is request for DeviceConfiguration collection
type Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfiguration collection
func (r *Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfiguration collection, max N pages
func (r *Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfiguration collection
func (r *Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfiguration collection
func (r *Windows10CustomConfigurationWindows10CustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfiguration) (resObj *DeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Windows10EndpointProtectionConfiguration returns request builder for DeviceConfiguration collection rcn
func (b *Windows10EndpointProtectionConfigurationRequestBuilder) Windows10EndpointProtectionConfiguration() *Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequestBuilder {
	bb := &Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DeviceConfiguration"
	return bb
}

// Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequestBuilder is request builder for DeviceConfiguration collection
type Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfiguration collection
func (b *Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequestBuilder) Request() *Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequest {
	return &Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfiguration item
func (b *Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequestBuilder) ID(id string) *DeviceConfigurationRequestBuilder {
	bb := &DeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequest is request for DeviceConfiguration collection
type Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfiguration collection
func (r *Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfiguration collection, max N pages
func (r *Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfiguration collection
func (r *Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfiguration collection
func (r *Windows10EndpointProtectionConfigurationWindows10EndpointProtectionConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfiguration) (resObj *DeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Windows10EnterpriseModernAppManagementConfiguration returns request builder for DeviceConfiguration collection rcn
func (b *Windows10EnterpriseModernAppManagementConfigurationRequestBuilder) Windows10EnterpriseModernAppManagementConfiguration() *Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequestBuilder {
	bb := &Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DeviceConfiguration"
	return bb
}

// Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequestBuilder is request builder for DeviceConfiguration collection
type Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfiguration collection
func (b *Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequestBuilder) Request() *Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequest {
	return &Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfiguration item
func (b *Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequestBuilder) ID(id string) *DeviceConfigurationRequestBuilder {
	bb := &DeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequest is request for DeviceConfiguration collection
type Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfiguration collection
func (r *Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfiguration collection, max N pages
func (r *Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfiguration collection
func (r *Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfiguration collection
func (r *Windows10EnterpriseModernAppManagementConfigurationWindows10EnterpriseModernAppManagementConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfiguration) (resObj *DeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Windows10GeneralConfiguration returns request builder for DeviceConfiguration collection rcn
func (b *Windows10GeneralConfigurationRequestBuilder) Windows10GeneralConfiguration() *Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequestBuilder {
	bb := &Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DeviceConfiguration"
	return bb
}

// Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequestBuilder is request builder for DeviceConfiguration collection
type Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfiguration collection
func (b *Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequestBuilder) Request() *Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequest {
	return &Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfiguration item
func (b *Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequestBuilder) ID(id string) *DeviceConfigurationRequestBuilder {
	bb := &DeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequest is request for DeviceConfiguration collection
type Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfiguration collection
func (r *Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfiguration collection, max N pages
func (r *Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfiguration collection
func (r *Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfiguration collection
func (r *Windows10GeneralConfigurationWindows10GeneralConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfiguration) (resObj *DeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Windows10MobileCompliancePolicy returns request builder for DeviceCompliancePolicy collection rcn
func (b *Windows10MobileCompliancePolicyRequestBuilder) Windows10MobileCompliancePolicy() *Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequestBuilder {
	bb := &Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DeviceCompliancePolicy"
	return bb
}

// Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequestBuilder is request builder for DeviceCompliancePolicy collection
type Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceCompliancePolicy collection
func (b *Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequestBuilder) Request() *Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequest {
	return &Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceCompliancePolicy item
func (b *Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequestBuilder) ID(id string) *DeviceCompliancePolicyRequestBuilder {
	bb := &DeviceCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequest is request for DeviceCompliancePolicy collection
type Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceCompliancePolicy collection
func (r *Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceCompliancePolicy collection, max N pages
func (r *Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceCompliancePolicy collection
func (r *Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]DeviceCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceCompliancePolicy collection
func (r *Windows10MobileCompliancePolicyWindows10MobileCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *DeviceCompliancePolicy) (resObj *DeviceCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Windows10SecureAssessmentConfiguration returns request builder for DeviceConfiguration collection rcn
func (b *Windows10SecureAssessmentConfigurationRequestBuilder) Windows10SecureAssessmentConfiguration() *Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequestBuilder {
	bb := &Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DeviceConfiguration"
	return bb
}

// Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequestBuilder is request builder for DeviceConfiguration collection
type Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfiguration collection
func (b *Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequestBuilder) Request() *Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequest {
	return &Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfiguration item
func (b *Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequestBuilder) ID(id string) *DeviceConfigurationRequestBuilder {
	bb := &DeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequest is request for DeviceConfiguration collection
type Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfiguration collection
func (r *Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfiguration collection, max N pages
func (r *Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfiguration collection
func (r *Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfiguration collection
func (r *Windows10SecureAssessmentConfigurationWindows10SecureAssessmentConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfiguration) (resObj *DeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Windows10TeamGeneralConfiguration returns request builder for DeviceConfiguration collection rcn
func (b *Windows10TeamGeneralConfigurationRequestBuilder) Windows10TeamGeneralConfiguration() *Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequestBuilder {
	bb := &Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/DeviceConfiguration"
	return bb
}

// Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequestBuilder is request builder for DeviceConfiguration collection
type Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfiguration collection
func (b *Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequestBuilder) Request() *Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequest {
	return &Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfiguration item
func (b *Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequestBuilder) ID(id string) *DeviceConfigurationRequestBuilder {
	bb := &DeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequest is request for DeviceConfiguration collection
type Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfiguration collection
func (r *Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfiguration collection, max N pages
func (r *Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfiguration collection
func (r *Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfiguration collection
func (r *Windows10TeamGeneralConfigurationWindows10TeamGeneralConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfiguration) (resObj *DeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
