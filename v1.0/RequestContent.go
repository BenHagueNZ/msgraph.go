// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// ContentApprovalStatusColumnRequestBuilder is request builder for ContentApprovalStatusColumn
type ContentApprovalStatusColumnRequestBuilder struct{ BaseRequestBuilder }

// Request returns ContentApprovalStatusColumnRequest
func (b *ContentApprovalStatusColumnRequestBuilder) Request() *ContentApprovalStatusColumnRequest {
	return &ContentApprovalStatusColumnRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ContentApprovalStatusColumnRequest is request for ContentApprovalStatusColumn
type ContentApprovalStatusColumnRequest struct{ BaseRequest }

// Get performs GET request for ContentApprovalStatusColumn
func (r *ContentApprovalStatusColumnRequest) Get(ctx context.Context) (resObj *ContentApprovalStatusColumn, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ContentApprovalStatusColumn
func (r *ContentApprovalStatusColumnRequest) Update(ctx context.Context, reqObj *ContentApprovalStatusColumn) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ContentApprovalStatusColumn
func (r *ContentApprovalStatusColumnRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ContentSharingSessionRequestBuilder is request builder for ContentSharingSession
type ContentSharingSessionRequestBuilder struct{ BaseRequestBuilder }

// Request returns ContentSharingSessionRequest
func (b *ContentSharingSessionRequestBuilder) Request() *ContentSharingSessionRequest {
	return &ContentSharingSessionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ContentSharingSessionRequest is request for ContentSharingSession
type ContentSharingSessionRequest struct{ BaseRequest }

// Get performs GET request for ContentSharingSession
func (r *ContentSharingSessionRequest) Get(ctx context.Context) (resObj *ContentSharingSession, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ContentSharingSession
func (r *ContentSharingSessionRequest) Update(ctx context.Context, reqObj *ContentSharingSession) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ContentSharingSession
func (r *ContentSharingSessionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ContentTypeRequestBuilder is request builder for ContentType
type ContentTypeRequestBuilder struct{ BaseRequestBuilder }

// Request returns ContentTypeRequest
func (b *ContentTypeRequestBuilder) Request() *ContentTypeRequest {
	return &ContentTypeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ContentTypeRequest is request for ContentType
type ContentTypeRequest struct{ BaseRequest }

// Get performs GET request for ContentType
func (r *ContentTypeRequest) Get(ctx context.Context) (resObj *ContentType, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ContentType
func (r *ContentTypeRequest) Update(ctx context.Context, reqObj *ContentType) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ContentType
func (r *ContentTypeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ContentTypeInfoRequestBuilder is request builder for ContentTypeInfo
type ContentTypeInfoRequestBuilder struct{ BaseRequestBuilder }

// Request returns ContentTypeInfoRequest
func (b *ContentTypeInfoRequestBuilder) Request() *ContentTypeInfoRequest {
	return &ContentTypeInfoRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ContentTypeInfoRequest is request for ContentTypeInfo
type ContentTypeInfoRequest struct{ BaseRequest }

// Get performs GET request for ContentTypeInfo
func (r *ContentTypeInfoRequest) Get(ctx context.Context) (resObj *ContentTypeInfo, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ContentTypeInfo
func (r *ContentTypeInfoRequest) Update(ctx context.Context, reqObj *ContentTypeInfo) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ContentTypeInfo
func (r *ContentTypeInfoRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ContentTypeOrderRequestBuilder is request builder for ContentTypeOrder
type ContentTypeOrderRequestBuilder struct{ BaseRequestBuilder }

// Request returns ContentTypeOrderRequest
func (b *ContentTypeOrderRequestBuilder) Request() *ContentTypeOrderRequest {
	return &ContentTypeOrderRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ContentTypeOrderRequest is request for ContentTypeOrder
type ContentTypeOrderRequest struct{ BaseRequest }

// Get performs GET request for ContentTypeOrder
func (r *ContentTypeOrderRequest) Get(ctx context.Context) (resObj *ContentTypeOrder, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ContentTypeOrder
func (r *ContentTypeOrderRequest) Update(ctx context.Context, reqObj *ContentTypeOrder) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ContentTypeOrder
func (r *ContentTypeOrderRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type ContentTypePublishRequestBuilder struct{ BaseRequestBuilder }

// Publish action undocumentedrav
func (b *ContentTypeRequestBuilder) Publish(reqObj *ContentTypePublishRequestParameter) *ContentTypePublishRequestBuilder {
	bb := &ContentTypePublishRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Publish"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ContentTypePublishRequest struct{ BaseRequest }

func (b *ContentTypePublishRequestBuilder) Request() *ContentTypePublishRequest {
	return &ContentTypePublishRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ContentTypePublishRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type ContentTypeUnpublishRequestBuilder struct{ BaseRequestBuilder }

// Unpublish action undocumentedrav
func (b *ContentTypeRequestBuilder) Unpublish(reqObj *ContentTypeUnpublishRequestParameter) *ContentTypeUnpublishRequestBuilder {
	bb := &ContentTypeUnpublishRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Unpublish"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ContentTypeUnpublishRequest struct{ BaseRequest }

func (b *ContentTypeUnpublishRequestBuilder) Request() *ContentTypeUnpublishRequest {
	return &ContentTypeUnpublishRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ContentTypeUnpublishRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type ContentTypeAssociateWithHubSitesRequestBuilder struct{ BaseRequestBuilder }

// AssociateWithHubSites action undocumentedrav
func (b *ContentTypeRequestBuilder) AssociateWithHubSites(reqObj *ContentTypeAssociateWithHubSitesRequestParameter) *ContentTypeAssociateWithHubSitesRequestBuilder {
	bb := &ContentTypeAssociateWithHubSitesRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/AssociateWithHubSites"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ContentTypeAssociateWithHubSitesRequest struct{ BaseRequest }

func (b *ContentTypeAssociateWithHubSitesRequestBuilder) Request() *ContentTypeAssociateWithHubSitesRequest {
	return &ContentTypeAssociateWithHubSitesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ContentTypeAssociateWithHubSitesRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type ContentTypeCopyToDefaultContentLocationRequestBuilder struct{ BaseRequestBuilder }

// CopyToDefaultContentLocation action undocumentedrav
func (b *ContentTypeRequestBuilder) CopyToDefaultContentLocation(reqObj *ContentTypeCopyToDefaultContentLocationRequestParameter) *ContentTypeCopyToDefaultContentLocationRequestBuilder {
	bb := &ContentTypeCopyToDefaultContentLocationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/CopyToDefaultContentLocation"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ContentTypeCopyToDefaultContentLocationRequest struct{ BaseRequest }

func (b *ContentTypeCopyToDefaultContentLocationRequestBuilder) Request() *ContentTypeCopyToDefaultContentLocationRequest {
	return &ContentTypeCopyToDefaultContentLocationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ContentTypeCopyToDefaultContentLocationRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
