// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// MemberOf returns request builder for ConnectorGroup collection
func (b *ConnectorRequestBuilder) MemberOf() *ConnectorMemberOfCollectionRequestBuilder {
	bb := &ConnectorMemberOfCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/memberOf"
	return bb
}

// ConnectorMemberOfCollectionRequestBuilder is request builder for ConnectorGroup collection rcn
type ConnectorMemberOfCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ConnectorGroup collection
func (b *ConnectorMemberOfCollectionRequestBuilder) Request() *ConnectorMemberOfCollectionRequest {
	return &ConnectorMemberOfCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ConnectorGroup item
func (b *ConnectorMemberOfCollectionRequestBuilder) ID(id string) *ConnectorGroupRequestBuilder {
	bb := &ConnectorGroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ConnectorMemberOfCollectionRequest is request for ConnectorGroup collection
type ConnectorMemberOfCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ConnectorGroup collection
func (r *ConnectorMemberOfCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ConnectorGroup, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ConnectorGroup
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ConnectorGroup
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ConnectorGroup collection, max N pages
func (r *ConnectorMemberOfCollectionRequest) GetN(ctx context.Context, n int) ([]ConnectorGroup, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ConnectorGroup collection
func (r *ConnectorMemberOfCollectionRequest) Get(ctx context.Context) ([]ConnectorGroup, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ConnectorGroup collection
func (r *ConnectorMemberOfCollectionRequest) Add(ctx context.Context, reqObj *ConnectorGroup) (resObj *ConnectorGroup, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Applications returns request builder for Application collection
func (b *ConnectorGroupRequestBuilder) Applications() *ConnectorGroupApplicationsCollectionRequestBuilder {
	bb := &ConnectorGroupApplicationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/applications"
	return bb
}

// ConnectorGroupApplicationsCollectionRequestBuilder is request builder for Application collection rcn
type ConnectorGroupApplicationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Application collection
func (b *ConnectorGroupApplicationsCollectionRequestBuilder) Request() *ConnectorGroupApplicationsCollectionRequest {
	return &ConnectorGroupApplicationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Application item
func (b *ConnectorGroupApplicationsCollectionRequestBuilder) ID(id string) *ApplicationRequestBuilder {
	bb := &ApplicationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ConnectorGroupApplicationsCollectionRequest is request for Application collection
type ConnectorGroupApplicationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Application collection
func (r *ConnectorGroupApplicationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Application, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Application
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Application
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Application collection, max N pages
func (r *ConnectorGroupApplicationsCollectionRequest) GetN(ctx context.Context, n int) ([]Application, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Application collection
func (r *ConnectorGroupApplicationsCollectionRequest) Get(ctx context.Context) ([]Application, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Application collection
func (r *ConnectorGroupApplicationsCollectionRequest) Add(ctx context.Context, reqObj *Application) (resObj *Application, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Members returns request builder for Connector collection
func (b *ConnectorGroupRequestBuilder) Members() *ConnectorGroupMembersCollectionRequestBuilder {
	bb := &ConnectorGroupMembersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/members"
	return bb
}

// ConnectorGroupMembersCollectionRequestBuilder is request builder for Connector collection rcn
type ConnectorGroupMembersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Connector collection
func (b *ConnectorGroupMembersCollectionRequestBuilder) Request() *ConnectorGroupMembersCollectionRequest {
	return &ConnectorGroupMembersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Connector item
func (b *ConnectorGroupMembersCollectionRequestBuilder) ID(id string) *ConnectorRequestBuilder {
	bb := &ConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ConnectorGroupMembersCollectionRequest is request for Connector collection
type ConnectorGroupMembersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Connector collection
func (r *ConnectorGroupMembersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Connector, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Connector
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Connector
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Connector collection, max N pages
func (r *ConnectorGroupMembersCollectionRequest) GetN(ctx context.Context, n int) ([]Connector, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Connector collection
func (r *ConnectorGroupMembersCollectionRequest) Get(ctx context.Context) ([]Connector, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Connector collection
func (r *ConnectorGroupMembersCollectionRequest) Add(ctx context.Context, reqObj *Connector) (resObj *Connector, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ConnectorRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ConnectorGroupRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
