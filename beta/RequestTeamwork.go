// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// TeamworkRequestBuilder is request builder for Teamwork
type TeamworkRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkRequest
func (b *TeamworkRequestBuilder) Request() *TeamworkRequest {
	return &TeamworkRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkRequest is request for Teamwork
type TeamworkRequest struct{ BaseRequest }

// Get performs GET request for Teamwork
func (r *TeamworkRequest) Get(ctx context.Context) (resObj *Teamwork, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Teamwork
func (r *TeamworkRequest) Update(ctx context.Context, reqObj *Teamwork) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Teamwork
func (r *TeamworkRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkAccountConfigurationRequestBuilder is request builder for TeamworkAccountConfiguration
type TeamworkAccountConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkAccountConfigurationRequest
func (b *TeamworkAccountConfigurationRequestBuilder) Request() *TeamworkAccountConfigurationRequest {
	return &TeamworkAccountConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkAccountConfigurationRequest is request for TeamworkAccountConfiguration
type TeamworkAccountConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkAccountConfiguration
func (r *TeamworkAccountConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkAccountConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkAccountConfiguration
func (r *TeamworkAccountConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkAccountConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkAccountConfiguration
func (r *TeamworkAccountConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkActivePeripheralsRequestBuilder is request builder for TeamworkActivePeripherals
type TeamworkActivePeripheralsRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkActivePeripheralsRequest
func (b *TeamworkActivePeripheralsRequestBuilder) Request() *TeamworkActivePeripheralsRequest {
	return &TeamworkActivePeripheralsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkActivePeripheralsRequest is request for TeamworkActivePeripherals
type TeamworkActivePeripheralsRequest struct{ BaseRequest }

// Get performs GET request for TeamworkActivePeripherals
func (r *TeamworkActivePeripheralsRequest) Get(ctx context.Context) (resObj *TeamworkActivePeripherals, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkActivePeripherals
func (r *TeamworkActivePeripheralsRequest) Update(ctx context.Context, reqObj *TeamworkActivePeripherals) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkActivePeripherals
func (r *TeamworkActivePeripheralsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkActivityTopicRequestBuilder is request builder for TeamworkActivityTopic
type TeamworkActivityTopicRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkActivityTopicRequest
func (b *TeamworkActivityTopicRequestBuilder) Request() *TeamworkActivityTopicRequest {
	return &TeamworkActivityTopicRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkActivityTopicRequest is request for TeamworkActivityTopic
type TeamworkActivityTopicRequest struct{ BaseRequest }

// Get performs GET request for TeamworkActivityTopic
func (r *TeamworkActivityTopicRequest) Get(ctx context.Context) (resObj *TeamworkActivityTopic, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkActivityTopic
func (r *TeamworkActivityTopicRequest) Update(ctx context.Context, reqObj *TeamworkActivityTopic) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkActivityTopic
func (r *TeamworkActivityTopicRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkApplicationIdentityRequestBuilder is request builder for TeamworkApplicationIdentity
type TeamworkApplicationIdentityRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkApplicationIdentityRequest
func (b *TeamworkApplicationIdentityRequestBuilder) Request() *TeamworkApplicationIdentityRequest {
	return &TeamworkApplicationIdentityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkApplicationIdentityRequest is request for TeamworkApplicationIdentity
type TeamworkApplicationIdentityRequest struct{ BaseRequest }

// Get performs GET request for TeamworkApplicationIdentity
func (r *TeamworkApplicationIdentityRequest) Get(ctx context.Context) (resObj *TeamworkApplicationIdentity, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkApplicationIdentity
func (r *TeamworkApplicationIdentityRequest) Update(ctx context.Context, reqObj *TeamworkApplicationIdentity) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkApplicationIdentity
func (r *TeamworkApplicationIdentityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkBotRequestBuilder is request builder for TeamworkBot
type TeamworkBotRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkBotRequest
func (b *TeamworkBotRequestBuilder) Request() *TeamworkBotRequest {
	return &TeamworkBotRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkBotRequest is request for TeamworkBot
type TeamworkBotRequest struct{ BaseRequest }

// Get performs GET request for TeamworkBot
func (r *TeamworkBotRequest) Get(ctx context.Context) (resObj *TeamworkBot, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkBot
func (r *TeamworkBotRequest) Update(ctx context.Context, reqObj *TeamworkBot) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkBot
func (r *TeamworkBotRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkCameraConfigurationRequestBuilder is request builder for TeamworkCameraConfiguration
type TeamworkCameraConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkCameraConfigurationRequest
func (b *TeamworkCameraConfigurationRequestBuilder) Request() *TeamworkCameraConfigurationRequest {
	return &TeamworkCameraConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkCameraConfigurationRequest is request for TeamworkCameraConfiguration
type TeamworkCameraConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkCameraConfiguration
func (r *TeamworkCameraConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkCameraConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkCameraConfiguration
func (r *TeamworkCameraConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkCameraConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkCameraConfiguration
func (r *TeamworkCameraConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkConfiguredPeripheralRequestBuilder is request builder for TeamworkConfiguredPeripheral
type TeamworkConfiguredPeripheralRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkConfiguredPeripheralRequest
func (b *TeamworkConfiguredPeripheralRequestBuilder) Request() *TeamworkConfiguredPeripheralRequest {
	return &TeamworkConfiguredPeripheralRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkConfiguredPeripheralRequest is request for TeamworkConfiguredPeripheral
type TeamworkConfiguredPeripheralRequest struct{ BaseRequest }

// Get performs GET request for TeamworkConfiguredPeripheral
func (r *TeamworkConfiguredPeripheralRequest) Get(ctx context.Context) (resObj *TeamworkConfiguredPeripheral, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkConfiguredPeripheral
func (r *TeamworkConfiguredPeripheralRequest) Update(ctx context.Context, reqObj *TeamworkConfiguredPeripheral) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkConfiguredPeripheral
func (r *TeamworkConfiguredPeripheralRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkConnectionRequestBuilder is request builder for TeamworkConnection
type TeamworkConnectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkConnectionRequest
func (b *TeamworkConnectionRequestBuilder) Request() *TeamworkConnectionRequest {
	return &TeamworkConnectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkConnectionRequest is request for TeamworkConnection
type TeamworkConnectionRequest struct{ BaseRequest }

// Get performs GET request for TeamworkConnection
func (r *TeamworkConnectionRequest) Get(ctx context.Context) (resObj *TeamworkConnection, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkConnection
func (r *TeamworkConnectionRequest) Update(ctx context.Context, reqObj *TeamworkConnection) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkConnection
func (r *TeamworkConnectionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkContentCameraConfigurationRequestBuilder is request builder for TeamworkContentCameraConfiguration
type TeamworkContentCameraConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkContentCameraConfigurationRequest
func (b *TeamworkContentCameraConfigurationRequestBuilder) Request() *TeamworkContentCameraConfigurationRequest {
	return &TeamworkContentCameraConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkContentCameraConfigurationRequest is request for TeamworkContentCameraConfiguration
type TeamworkContentCameraConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkContentCameraConfiguration
func (r *TeamworkContentCameraConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkContentCameraConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkContentCameraConfiguration
func (r *TeamworkContentCameraConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkContentCameraConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkContentCameraConfiguration
func (r *TeamworkContentCameraConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkConversationIdentityRequestBuilder is request builder for TeamworkConversationIdentity
type TeamworkConversationIdentityRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkConversationIdentityRequest
func (b *TeamworkConversationIdentityRequestBuilder) Request() *TeamworkConversationIdentityRequest {
	return &TeamworkConversationIdentityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkConversationIdentityRequest is request for TeamworkConversationIdentity
type TeamworkConversationIdentityRequest struct{ BaseRequest }

// Get performs GET request for TeamworkConversationIdentity
func (r *TeamworkConversationIdentityRequest) Get(ctx context.Context) (resObj *TeamworkConversationIdentity, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkConversationIdentity
func (r *TeamworkConversationIdentityRequest) Update(ctx context.Context, reqObj *TeamworkConversationIdentity) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkConversationIdentity
func (r *TeamworkConversationIdentityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkDateTimeConfigurationRequestBuilder is request builder for TeamworkDateTimeConfiguration
type TeamworkDateTimeConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkDateTimeConfigurationRequest
func (b *TeamworkDateTimeConfigurationRequestBuilder) Request() *TeamworkDateTimeConfigurationRequest {
	return &TeamworkDateTimeConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkDateTimeConfigurationRequest is request for TeamworkDateTimeConfiguration
type TeamworkDateTimeConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkDateTimeConfiguration
func (r *TeamworkDateTimeConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkDateTimeConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkDateTimeConfiguration
func (r *TeamworkDateTimeConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkDateTimeConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkDateTimeConfiguration
func (r *TeamworkDateTimeConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkDeviceRequestBuilder is request builder for TeamworkDevice
type TeamworkDeviceRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkDeviceRequest
func (b *TeamworkDeviceRequestBuilder) Request() *TeamworkDeviceRequest {
	return &TeamworkDeviceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkDeviceRequest is request for TeamworkDevice
type TeamworkDeviceRequest struct{ BaseRequest }

// Get performs GET request for TeamworkDevice
func (r *TeamworkDeviceRequest) Get(ctx context.Context) (resObj *TeamworkDevice, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkDevice
func (r *TeamworkDeviceRequest) Update(ctx context.Context, reqObj *TeamworkDevice) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkDevice
func (r *TeamworkDeviceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkDeviceActivityRequestBuilder is request builder for TeamworkDeviceActivity
type TeamworkDeviceActivityRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkDeviceActivityRequest
func (b *TeamworkDeviceActivityRequestBuilder) Request() *TeamworkDeviceActivityRequest {
	return &TeamworkDeviceActivityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkDeviceActivityRequest is request for TeamworkDeviceActivity
type TeamworkDeviceActivityRequest struct{ BaseRequest }

// Get performs GET request for TeamworkDeviceActivity
func (r *TeamworkDeviceActivityRequest) Get(ctx context.Context) (resObj *TeamworkDeviceActivity, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkDeviceActivity
func (r *TeamworkDeviceActivityRequest) Update(ctx context.Context, reqObj *TeamworkDeviceActivity) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkDeviceActivity
func (r *TeamworkDeviceActivityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkDeviceConfigurationRequestBuilder is request builder for TeamworkDeviceConfiguration
type TeamworkDeviceConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkDeviceConfigurationRequest
func (b *TeamworkDeviceConfigurationRequestBuilder) Request() *TeamworkDeviceConfigurationRequest {
	return &TeamworkDeviceConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkDeviceConfigurationRequest is request for TeamworkDeviceConfiguration
type TeamworkDeviceConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkDeviceConfiguration
func (r *TeamworkDeviceConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkDeviceConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkDeviceConfiguration
func (r *TeamworkDeviceConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkDeviceConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkDeviceConfiguration
func (r *TeamworkDeviceConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkDeviceHealthRequestBuilder is request builder for TeamworkDeviceHealth
type TeamworkDeviceHealthRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkDeviceHealthRequest
func (b *TeamworkDeviceHealthRequestBuilder) Request() *TeamworkDeviceHealthRequest {
	return &TeamworkDeviceHealthRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkDeviceHealthRequest is request for TeamworkDeviceHealth
type TeamworkDeviceHealthRequest struct{ BaseRequest }

// Get performs GET request for TeamworkDeviceHealth
func (r *TeamworkDeviceHealthRequest) Get(ctx context.Context) (resObj *TeamworkDeviceHealth, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkDeviceHealth
func (r *TeamworkDeviceHealthRequest) Update(ctx context.Context, reqObj *TeamworkDeviceHealth) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkDeviceHealth
func (r *TeamworkDeviceHealthRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkDeviceOperationRequestBuilder is request builder for TeamworkDeviceOperation
type TeamworkDeviceOperationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkDeviceOperationRequest
func (b *TeamworkDeviceOperationRequestBuilder) Request() *TeamworkDeviceOperationRequest {
	return &TeamworkDeviceOperationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkDeviceOperationRequest is request for TeamworkDeviceOperation
type TeamworkDeviceOperationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkDeviceOperation
func (r *TeamworkDeviceOperationRequest) Get(ctx context.Context) (resObj *TeamworkDeviceOperation, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkDeviceOperation
func (r *TeamworkDeviceOperationRequest) Update(ctx context.Context, reqObj *TeamworkDeviceOperation) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkDeviceOperation
func (r *TeamworkDeviceOperationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkDeviceSoftwareVersionsRequestBuilder is request builder for TeamworkDeviceSoftwareVersions
type TeamworkDeviceSoftwareVersionsRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkDeviceSoftwareVersionsRequest
func (b *TeamworkDeviceSoftwareVersionsRequestBuilder) Request() *TeamworkDeviceSoftwareVersionsRequest {
	return &TeamworkDeviceSoftwareVersionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkDeviceSoftwareVersionsRequest is request for TeamworkDeviceSoftwareVersions
type TeamworkDeviceSoftwareVersionsRequest struct{ BaseRequest }

// Get performs GET request for TeamworkDeviceSoftwareVersions
func (r *TeamworkDeviceSoftwareVersionsRequest) Get(ctx context.Context) (resObj *TeamworkDeviceSoftwareVersions, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkDeviceSoftwareVersions
func (r *TeamworkDeviceSoftwareVersionsRequest) Update(ctx context.Context, reqObj *TeamworkDeviceSoftwareVersions) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkDeviceSoftwareVersions
func (r *TeamworkDeviceSoftwareVersionsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkDisplayConfigurationRequestBuilder is request builder for TeamworkDisplayConfiguration
type TeamworkDisplayConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkDisplayConfigurationRequest
func (b *TeamworkDisplayConfigurationRequestBuilder) Request() *TeamworkDisplayConfigurationRequest {
	return &TeamworkDisplayConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkDisplayConfigurationRequest is request for TeamworkDisplayConfiguration
type TeamworkDisplayConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkDisplayConfiguration
func (r *TeamworkDisplayConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkDisplayConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkDisplayConfiguration
func (r *TeamworkDisplayConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkDisplayConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkDisplayConfiguration
func (r *TeamworkDisplayConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkDisplayScreenConfigurationRequestBuilder is request builder for TeamworkDisplayScreenConfiguration
type TeamworkDisplayScreenConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkDisplayScreenConfigurationRequest
func (b *TeamworkDisplayScreenConfigurationRequestBuilder) Request() *TeamworkDisplayScreenConfigurationRequest {
	return &TeamworkDisplayScreenConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkDisplayScreenConfigurationRequest is request for TeamworkDisplayScreenConfiguration
type TeamworkDisplayScreenConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkDisplayScreenConfiguration
func (r *TeamworkDisplayScreenConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkDisplayScreenConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkDisplayScreenConfiguration
func (r *TeamworkDisplayScreenConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkDisplayScreenConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkDisplayScreenConfiguration
func (r *TeamworkDisplayScreenConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkFeaturesConfigurationRequestBuilder is request builder for TeamworkFeaturesConfiguration
type TeamworkFeaturesConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkFeaturesConfigurationRequest
func (b *TeamworkFeaturesConfigurationRequestBuilder) Request() *TeamworkFeaturesConfigurationRequest {
	return &TeamworkFeaturesConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkFeaturesConfigurationRequest is request for TeamworkFeaturesConfiguration
type TeamworkFeaturesConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkFeaturesConfiguration
func (r *TeamworkFeaturesConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkFeaturesConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkFeaturesConfiguration
func (r *TeamworkFeaturesConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkFeaturesConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkFeaturesConfiguration
func (r *TeamworkFeaturesConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkHardwareConfigurationRequestBuilder is request builder for TeamworkHardwareConfiguration
type TeamworkHardwareConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkHardwareConfigurationRequest
func (b *TeamworkHardwareConfigurationRequestBuilder) Request() *TeamworkHardwareConfigurationRequest {
	return &TeamworkHardwareConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkHardwareConfigurationRequest is request for TeamworkHardwareConfiguration
type TeamworkHardwareConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkHardwareConfiguration
func (r *TeamworkHardwareConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkHardwareConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkHardwareConfiguration
func (r *TeamworkHardwareConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkHardwareConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkHardwareConfiguration
func (r *TeamworkHardwareConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkHardwareDetailRequestBuilder is request builder for TeamworkHardwareDetail
type TeamworkHardwareDetailRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkHardwareDetailRequest
func (b *TeamworkHardwareDetailRequestBuilder) Request() *TeamworkHardwareDetailRequest {
	return &TeamworkHardwareDetailRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkHardwareDetailRequest is request for TeamworkHardwareDetail
type TeamworkHardwareDetailRequest struct{ BaseRequest }

// Get performs GET request for TeamworkHardwareDetail
func (r *TeamworkHardwareDetailRequest) Get(ctx context.Context) (resObj *TeamworkHardwareDetail, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkHardwareDetail
func (r *TeamworkHardwareDetailRequest) Update(ctx context.Context, reqObj *TeamworkHardwareDetail) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkHardwareDetail
func (r *TeamworkHardwareDetailRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkHardwareHealthRequestBuilder is request builder for TeamworkHardwareHealth
type TeamworkHardwareHealthRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkHardwareHealthRequest
func (b *TeamworkHardwareHealthRequestBuilder) Request() *TeamworkHardwareHealthRequest {
	return &TeamworkHardwareHealthRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkHardwareHealthRequest is request for TeamworkHardwareHealth
type TeamworkHardwareHealthRequest struct{ BaseRequest }

// Get performs GET request for TeamworkHardwareHealth
func (r *TeamworkHardwareHealthRequest) Get(ctx context.Context) (resObj *TeamworkHardwareHealth, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkHardwareHealth
func (r *TeamworkHardwareHealthRequest) Update(ctx context.Context, reqObj *TeamworkHardwareHealth) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkHardwareHealth
func (r *TeamworkHardwareHealthRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkHostedContentRequestBuilder is request builder for TeamworkHostedContent
type TeamworkHostedContentRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkHostedContentRequest
func (b *TeamworkHostedContentRequestBuilder) Request() *TeamworkHostedContentRequest {
	return &TeamworkHostedContentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkHostedContentRequest is request for TeamworkHostedContent
type TeamworkHostedContentRequest struct{ BaseRequest }

// Get performs GET request for TeamworkHostedContent
func (r *TeamworkHostedContentRequest) Get(ctx context.Context) (resObj *TeamworkHostedContent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkHostedContent
func (r *TeamworkHostedContentRequest) Update(ctx context.Context, reqObj *TeamworkHostedContent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkHostedContent
func (r *TeamworkHostedContentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkLoginStatusRequestBuilder is request builder for TeamworkLoginStatus
type TeamworkLoginStatusRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkLoginStatusRequest
func (b *TeamworkLoginStatusRequestBuilder) Request() *TeamworkLoginStatusRequest {
	return &TeamworkLoginStatusRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkLoginStatusRequest is request for TeamworkLoginStatus
type TeamworkLoginStatusRequest struct{ BaseRequest }

// Get performs GET request for TeamworkLoginStatus
func (r *TeamworkLoginStatusRequest) Get(ctx context.Context) (resObj *TeamworkLoginStatus, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkLoginStatus
func (r *TeamworkLoginStatusRequest) Update(ctx context.Context, reqObj *TeamworkLoginStatus) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkLoginStatus
func (r *TeamworkLoginStatusRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkMicrophoneConfigurationRequestBuilder is request builder for TeamworkMicrophoneConfiguration
type TeamworkMicrophoneConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkMicrophoneConfigurationRequest
func (b *TeamworkMicrophoneConfigurationRequestBuilder) Request() *TeamworkMicrophoneConfigurationRequest {
	return &TeamworkMicrophoneConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkMicrophoneConfigurationRequest is request for TeamworkMicrophoneConfiguration
type TeamworkMicrophoneConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkMicrophoneConfiguration
func (r *TeamworkMicrophoneConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkMicrophoneConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkMicrophoneConfiguration
func (r *TeamworkMicrophoneConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkMicrophoneConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkMicrophoneConfiguration
func (r *TeamworkMicrophoneConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkNetworkConfigurationRequestBuilder is request builder for TeamworkNetworkConfiguration
type TeamworkNetworkConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkNetworkConfigurationRequest
func (b *TeamworkNetworkConfigurationRequestBuilder) Request() *TeamworkNetworkConfigurationRequest {
	return &TeamworkNetworkConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkNetworkConfigurationRequest is request for TeamworkNetworkConfiguration
type TeamworkNetworkConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkNetworkConfiguration
func (r *TeamworkNetworkConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkNetworkConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkNetworkConfiguration
func (r *TeamworkNetworkConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkNetworkConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkNetworkConfiguration
func (r *TeamworkNetworkConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkNotificationRecipientRequestBuilder is request builder for TeamworkNotificationRecipient
type TeamworkNotificationRecipientRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkNotificationRecipientRequest
func (b *TeamworkNotificationRecipientRequestBuilder) Request() *TeamworkNotificationRecipientRequest {
	return &TeamworkNotificationRecipientRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkNotificationRecipientRequest is request for TeamworkNotificationRecipient
type TeamworkNotificationRecipientRequest struct{ BaseRequest }

// Get performs GET request for TeamworkNotificationRecipient
func (r *TeamworkNotificationRecipientRequest) Get(ctx context.Context) (resObj *TeamworkNotificationRecipient, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkNotificationRecipient
func (r *TeamworkNotificationRecipientRequest) Update(ctx context.Context, reqObj *TeamworkNotificationRecipient) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkNotificationRecipient
func (r *TeamworkNotificationRecipientRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkOnPremisesCalendarSyncConfigurationRequestBuilder is request builder for TeamworkOnPremisesCalendarSyncConfiguration
type TeamworkOnPremisesCalendarSyncConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkOnPremisesCalendarSyncConfigurationRequest
func (b *TeamworkOnPremisesCalendarSyncConfigurationRequestBuilder) Request() *TeamworkOnPremisesCalendarSyncConfigurationRequest {
	return &TeamworkOnPremisesCalendarSyncConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkOnPremisesCalendarSyncConfigurationRequest is request for TeamworkOnPremisesCalendarSyncConfiguration
type TeamworkOnPremisesCalendarSyncConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkOnPremisesCalendarSyncConfiguration
func (r *TeamworkOnPremisesCalendarSyncConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkOnPremisesCalendarSyncConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkOnPremisesCalendarSyncConfiguration
func (r *TeamworkOnPremisesCalendarSyncConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkOnPremisesCalendarSyncConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkOnPremisesCalendarSyncConfiguration
func (r *TeamworkOnPremisesCalendarSyncConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkOnlineMeetingInfoRequestBuilder is request builder for TeamworkOnlineMeetingInfo
type TeamworkOnlineMeetingInfoRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkOnlineMeetingInfoRequest
func (b *TeamworkOnlineMeetingInfoRequestBuilder) Request() *TeamworkOnlineMeetingInfoRequest {
	return &TeamworkOnlineMeetingInfoRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkOnlineMeetingInfoRequest is request for TeamworkOnlineMeetingInfo
type TeamworkOnlineMeetingInfoRequest struct{ BaseRequest }

// Get performs GET request for TeamworkOnlineMeetingInfo
func (r *TeamworkOnlineMeetingInfoRequest) Get(ctx context.Context) (resObj *TeamworkOnlineMeetingInfo, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkOnlineMeetingInfo
func (r *TeamworkOnlineMeetingInfoRequest) Update(ctx context.Context, reqObj *TeamworkOnlineMeetingInfo) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkOnlineMeetingInfo
func (r *TeamworkOnlineMeetingInfoRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkPeripheralRequestBuilder is request builder for TeamworkPeripheral
type TeamworkPeripheralRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkPeripheralRequest
func (b *TeamworkPeripheralRequestBuilder) Request() *TeamworkPeripheralRequest {
	return &TeamworkPeripheralRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkPeripheralRequest is request for TeamworkPeripheral
type TeamworkPeripheralRequest struct{ BaseRequest }

// Get performs GET request for TeamworkPeripheral
func (r *TeamworkPeripheralRequest) Get(ctx context.Context) (resObj *TeamworkPeripheral, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkPeripheral
func (r *TeamworkPeripheralRequest) Update(ctx context.Context, reqObj *TeamworkPeripheral) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkPeripheral
func (r *TeamworkPeripheralRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkPeripheralHealthRequestBuilder is request builder for TeamworkPeripheralHealth
type TeamworkPeripheralHealthRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkPeripheralHealthRequest
func (b *TeamworkPeripheralHealthRequestBuilder) Request() *TeamworkPeripheralHealthRequest {
	return &TeamworkPeripheralHealthRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkPeripheralHealthRequest is request for TeamworkPeripheralHealth
type TeamworkPeripheralHealthRequest struct{ BaseRequest }

// Get performs GET request for TeamworkPeripheralHealth
func (r *TeamworkPeripheralHealthRequest) Get(ctx context.Context) (resObj *TeamworkPeripheralHealth, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkPeripheralHealth
func (r *TeamworkPeripheralHealthRequest) Update(ctx context.Context, reqObj *TeamworkPeripheralHealth) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkPeripheralHealth
func (r *TeamworkPeripheralHealthRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkPeripheralsHealthRequestBuilder is request builder for TeamworkPeripheralsHealth
type TeamworkPeripheralsHealthRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkPeripheralsHealthRequest
func (b *TeamworkPeripheralsHealthRequestBuilder) Request() *TeamworkPeripheralsHealthRequest {
	return &TeamworkPeripheralsHealthRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkPeripheralsHealthRequest is request for TeamworkPeripheralsHealth
type TeamworkPeripheralsHealthRequest struct{ BaseRequest }

// Get performs GET request for TeamworkPeripheralsHealth
func (r *TeamworkPeripheralsHealthRequest) Get(ctx context.Context) (resObj *TeamworkPeripheralsHealth, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkPeripheralsHealth
func (r *TeamworkPeripheralsHealthRequest) Update(ctx context.Context, reqObj *TeamworkPeripheralsHealth) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkPeripheralsHealth
func (r *TeamworkPeripheralsHealthRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkSoftwareUpdateHealthRequestBuilder is request builder for TeamworkSoftwareUpdateHealth
type TeamworkSoftwareUpdateHealthRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkSoftwareUpdateHealthRequest
func (b *TeamworkSoftwareUpdateHealthRequestBuilder) Request() *TeamworkSoftwareUpdateHealthRequest {
	return &TeamworkSoftwareUpdateHealthRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkSoftwareUpdateHealthRequest is request for TeamworkSoftwareUpdateHealth
type TeamworkSoftwareUpdateHealthRequest struct{ BaseRequest }

// Get performs GET request for TeamworkSoftwareUpdateHealth
func (r *TeamworkSoftwareUpdateHealthRequest) Get(ctx context.Context) (resObj *TeamworkSoftwareUpdateHealth, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkSoftwareUpdateHealth
func (r *TeamworkSoftwareUpdateHealthRequest) Update(ctx context.Context, reqObj *TeamworkSoftwareUpdateHealth) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkSoftwareUpdateHealth
func (r *TeamworkSoftwareUpdateHealthRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkSoftwareUpdateStatusRequestBuilder is request builder for TeamworkSoftwareUpdateStatus
type TeamworkSoftwareUpdateStatusRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkSoftwareUpdateStatusRequest
func (b *TeamworkSoftwareUpdateStatusRequestBuilder) Request() *TeamworkSoftwareUpdateStatusRequest {
	return &TeamworkSoftwareUpdateStatusRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkSoftwareUpdateStatusRequest is request for TeamworkSoftwareUpdateStatus
type TeamworkSoftwareUpdateStatusRequest struct{ BaseRequest }

// Get performs GET request for TeamworkSoftwareUpdateStatus
func (r *TeamworkSoftwareUpdateStatusRequest) Get(ctx context.Context) (resObj *TeamworkSoftwareUpdateStatus, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkSoftwareUpdateStatus
func (r *TeamworkSoftwareUpdateStatusRequest) Update(ctx context.Context, reqObj *TeamworkSoftwareUpdateStatus) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkSoftwareUpdateStatus
func (r *TeamworkSoftwareUpdateStatusRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkSpeakerConfigurationRequestBuilder is request builder for TeamworkSpeakerConfiguration
type TeamworkSpeakerConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkSpeakerConfigurationRequest
func (b *TeamworkSpeakerConfigurationRequestBuilder) Request() *TeamworkSpeakerConfigurationRequest {
	return &TeamworkSpeakerConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkSpeakerConfigurationRequest is request for TeamworkSpeakerConfiguration
type TeamworkSpeakerConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkSpeakerConfiguration
func (r *TeamworkSpeakerConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkSpeakerConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkSpeakerConfiguration
func (r *TeamworkSpeakerConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkSpeakerConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkSpeakerConfiguration
func (r *TeamworkSpeakerConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkSystemConfigurationRequestBuilder is request builder for TeamworkSystemConfiguration
type TeamworkSystemConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkSystemConfigurationRequest
func (b *TeamworkSystemConfigurationRequestBuilder) Request() *TeamworkSystemConfigurationRequest {
	return &TeamworkSystemConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkSystemConfigurationRequest is request for TeamworkSystemConfiguration
type TeamworkSystemConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkSystemConfiguration
func (r *TeamworkSystemConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkSystemConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkSystemConfiguration
func (r *TeamworkSystemConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkSystemConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkSystemConfiguration
func (r *TeamworkSystemConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkTagRequestBuilder is request builder for TeamworkTag
type TeamworkTagRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkTagRequest
func (b *TeamworkTagRequestBuilder) Request() *TeamworkTagRequest {
	return &TeamworkTagRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkTagRequest is request for TeamworkTag
type TeamworkTagRequest struct{ BaseRequest }

// Get performs GET request for TeamworkTag
func (r *TeamworkTagRequest) Get(ctx context.Context) (resObj *TeamworkTag, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkTag
func (r *TeamworkTagRequest) Update(ctx context.Context, reqObj *TeamworkTag) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkTag
func (r *TeamworkTagRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkTagIdentityRequestBuilder is request builder for TeamworkTagIdentity
type TeamworkTagIdentityRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkTagIdentityRequest
func (b *TeamworkTagIdentityRequestBuilder) Request() *TeamworkTagIdentityRequest {
	return &TeamworkTagIdentityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkTagIdentityRequest is request for TeamworkTagIdentity
type TeamworkTagIdentityRequest struct{ BaseRequest }

// Get performs GET request for TeamworkTagIdentity
func (r *TeamworkTagIdentityRequest) Get(ctx context.Context) (resObj *TeamworkTagIdentity, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkTagIdentity
func (r *TeamworkTagIdentityRequest) Update(ctx context.Context, reqObj *TeamworkTagIdentity) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkTagIdentity
func (r *TeamworkTagIdentityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkTagMemberRequestBuilder is request builder for TeamworkTagMember
type TeamworkTagMemberRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkTagMemberRequest
func (b *TeamworkTagMemberRequestBuilder) Request() *TeamworkTagMemberRequest {
	return &TeamworkTagMemberRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkTagMemberRequest is request for TeamworkTagMember
type TeamworkTagMemberRequest struct{ BaseRequest }

// Get performs GET request for TeamworkTagMember
func (r *TeamworkTagMemberRequest) Get(ctx context.Context) (resObj *TeamworkTagMember, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkTagMember
func (r *TeamworkTagMemberRequest) Update(ctx context.Context, reqObj *TeamworkTagMember) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkTagMember
func (r *TeamworkTagMemberRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkTeamsClientConfigurationRequestBuilder is request builder for TeamworkTeamsClientConfiguration
type TeamworkTeamsClientConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkTeamsClientConfigurationRequest
func (b *TeamworkTeamsClientConfigurationRequestBuilder) Request() *TeamworkTeamsClientConfigurationRequest {
	return &TeamworkTeamsClientConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkTeamsClientConfigurationRequest is request for TeamworkTeamsClientConfiguration
type TeamworkTeamsClientConfigurationRequest struct{ BaseRequest }

// Get performs GET request for TeamworkTeamsClientConfiguration
func (r *TeamworkTeamsClientConfigurationRequest) Get(ctx context.Context) (resObj *TeamworkTeamsClientConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkTeamsClientConfiguration
func (r *TeamworkTeamsClientConfigurationRequest) Update(ctx context.Context, reqObj *TeamworkTeamsClientConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkTeamsClientConfiguration
func (r *TeamworkTeamsClientConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TeamworkUserIdentityRequestBuilder is request builder for TeamworkUserIdentity
type TeamworkUserIdentityRequestBuilder struct{ BaseRequestBuilder }

// Request returns TeamworkUserIdentityRequest
func (b *TeamworkUserIdentityRequestBuilder) Request() *TeamworkUserIdentityRequest {
	return &TeamworkUserIdentityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TeamworkUserIdentityRequest is request for TeamworkUserIdentity
type TeamworkUserIdentityRequest struct{ BaseRequest }

// Get performs GET request for TeamworkUserIdentity
func (r *TeamworkUserIdentityRequest) Get(ctx context.Context) (resObj *TeamworkUserIdentity, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TeamworkUserIdentity
func (r *TeamworkUserIdentityRequest) Update(ctx context.Context, reqObj *TeamworkUserIdentity) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TeamworkUserIdentity
func (r *TeamworkUserIdentityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type TeamworkSendActivityNotificationToRecipientsRequestBuilder struct{ BaseRequestBuilder }

// SendActivityNotificationToRecipients action undocumentedrav
func (b *TeamworkRequestBuilder) SendActivityNotificationToRecipients(reqObj *TeamworkSendActivityNotificationToRecipientsRequestParameter) *TeamworkSendActivityNotificationToRecipientsRequestBuilder {
	bb := &TeamworkSendActivityNotificationToRecipientsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/SendActivityNotificationToRecipients"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type TeamworkSendActivityNotificationToRecipientsRequest struct{ BaseRequest }

func (b *TeamworkSendActivityNotificationToRecipientsRequestBuilder) Request() *TeamworkSendActivityNotificationToRecipientsRequest {
	return &TeamworkSendActivityNotificationToRecipientsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *TeamworkSendActivityNotificationToRecipientsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type TeamworkDeviceRestartRequestBuilder struct{ BaseRequestBuilder }

// Restart action undocumentedrav
func (b *TeamworkDeviceRequestBuilder) Restart(reqObj *TeamworkDeviceRestartRequestParameter) *TeamworkDeviceRestartRequestBuilder {
	bb := &TeamworkDeviceRestartRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Restart"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type TeamworkDeviceRestartRequest struct{ BaseRequest }

func (b *TeamworkDeviceRestartRequestBuilder) Request() *TeamworkDeviceRestartRequest {
	return &TeamworkDeviceRestartRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *TeamworkDeviceRestartRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type TeamworkDeviceRunDiagnosticsRequestBuilder struct{ BaseRequestBuilder }

// RunDiagnostics action undocumentedrav
func (b *TeamworkDeviceRequestBuilder) RunDiagnostics(reqObj *TeamworkDeviceRunDiagnosticsRequestParameter) *TeamworkDeviceRunDiagnosticsRequestBuilder {
	bb := &TeamworkDeviceRunDiagnosticsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/RunDiagnostics"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type TeamworkDeviceRunDiagnosticsRequest struct{ BaseRequest }

func (b *TeamworkDeviceRunDiagnosticsRequestBuilder) Request() *TeamworkDeviceRunDiagnosticsRequest {
	return &TeamworkDeviceRunDiagnosticsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *TeamworkDeviceRunDiagnosticsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type TeamworkDeviceUpdateSoftwareRequestBuilder struct{ BaseRequestBuilder }

// UpdateSoftware action undocumentedrav
func (b *TeamworkDeviceRequestBuilder) UpdateSoftware(reqObj *TeamworkDeviceUpdateSoftwareRequestParameter) *TeamworkDeviceUpdateSoftwareRequestBuilder {
	bb := &TeamworkDeviceUpdateSoftwareRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/UpdateSoftware"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type TeamworkDeviceUpdateSoftwareRequest struct{ BaseRequest }

func (b *TeamworkDeviceUpdateSoftwareRequestBuilder) Request() *TeamworkDeviceUpdateSoftwareRequest {
	return &TeamworkDeviceUpdateSoftwareRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *TeamworkDeviceUpdateSoftwareRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
