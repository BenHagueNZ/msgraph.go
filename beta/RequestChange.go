// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// ChangeNotificationRequestBuilder is request builder for ChangeNotification
type ChangeNotificationRequestBuilder struct{ BaseRequestBuilder }

// Request returns ChangeNotificationRequest
func (b *ChangeNotificationRequestBuilder) Request() *ChangeNotificationRequest {
	return &ChangeNotificationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ChangeNotificationRequest is request for ChangeNotification
type ChangeNotificationRequest struct{ BaseRequest }

// Get performs GET request for ChangeNotification
func (r *ChangeNotificationRequest) Get(ctx context.Context) (resObj *ChangeNotification, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ChangeNotification
func (r *ChangeNotificationRequest) Update(ctx context.Context, reqObj *ChangeNotification) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ChangeNotification
func (r *ChangeNotificationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ChangeNotificationCollectionRequestBuilder is request builder for ChangeNotificationCollection
type ChangeNotificationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns ChangeNotificationCollectionRequest
func (b *ChangeNotificationCollectionRequestBuilder) Request() *ChangeNotificationCollectionRequest {
	return &ChangeNotificationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ChangeNotificationCollectionRequest is request for ChangeNotificationCollection
type ChangeNotificationCollectionRequest struct{ BaseRequest }

// Get performs GET request for ChangeNotificationCollection
func (r *ChangeNotificationCollectionRequest) Get(ctx context.Context) (resObj *ChangeNotificationCollection, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ChangeNotificationCollection
func (r *ChangeNotificationCollectionRequest) Update(ctx context.Context, reqObj *ChangeNotificationCollection) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ChangeNotificationCollection
func (r *ChangeNotificationCollectionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ChangeNotificationEncryptedContentRequestBuilder is request builder for ChangeNotificationEncryptedContent
type ChangeNotificationEncryptedContentRequestBuilder struct{ BaseRequestBuilder }

// Request returns ChangeNotificationEncryptedContentRequest
func (b *ChangeNotificationEncryptedContentRequestBuilder) Request() *ChangeNotificationEncryptedContentRequest {
	return &ChangeNotificationEncryptedContentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ChangeNotificationEncryptedContentRequest is request for ChangeNotificationEncryptedContent
type ChangeNotificationEncryptedContentRequest struct{ BaseRequest }

// Get performs GET request for ChangeNotificationEncryptedContent
func (r *ChangeNotificationEncryptedContentRequest) Get(ctx context.Context) (resObj *ChangeNotificationEncryptedContent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ChangeNotificationEncryptedContent
func (r *ChangeNotificationEncryptedContentRequest) Update(ctx context.Context, reqObj *ChangeNotificationEncryptedContent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ChangeNotificationEncryptedContent
func (r *ChangeNotificationEncryptedContentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ChangeTrackedEntityRequestBuilder is request builder for ChangeTrackedEntity
type ChangeTrackedEntityRequestBuilder struct{ BaseRequestBuilder }

// Request returns ChangeTrackedEntityRequest
func (b *ChangeTrackedEntityRequestBuilder) Request() *ChangeTrackedEntityRequest {
	return &ChangeTrackedEntityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ChangeTrackedEntityRequest is request for ChangeTrackedEntity
type ChangeTrackedEntityRequest struct{ BaseRequest }

// Get performs GET request for ChangeTrackedEntity
func (r *ChangeTrackedEntityRequest) Get(ctx context.Context) (resObj *ChangeTrackedEntity, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ChangeTrackedEntity
func (r *ChangeTrackedEntityRequest) Update(ctx context.Context, reqObj *ChangeTrackedEntity) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ChangeTrackedEntity
func (r *ChangeTrackedEntityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type ChangeTrackedEntityStageForDeletionRequestBuilder struct{ BaseRequestBuilder }

// StageForDeletion action undocumentedrav
func (b *ChangeTrackedEntityRequestBuilder) StageForDeletion(reqObj *ChangeTrackedEntityStageForDeletionRequestParameter) *ChangeTrackedEntityStageForDeletionRequestBuilder {
	bb := &ChangeTrackedEntityStageForDeletionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/StageForDeletion"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ChangeTrackedEntityStageForDeletionRequest struct{ BaseRequest }

func (b *ChangeTrackedEntityStageForDeletionRequestBuilder) Request() *ChangeTrackedEntityStageForDeletionRequest {
	return &ChangeTrackedEntityStageForDeletionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ChangeTrackedEntityStageForDeletionRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
