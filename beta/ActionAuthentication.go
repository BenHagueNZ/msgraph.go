// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// AuthenticationMethodDisableSmsSignInRequestParameter undocumented
type AuthenticationMethodDisableSmsSignInRequestParameter struct {
}

// AuthenticationMethodEnableSmsSignInRequestParameter undocumented
type AuthenticationMethodEnableSmsSignInRequestParameter struct {
}

// AuthenticationMethodResetPasswordRequestParameter undocumented
type AuthenticationMethodResetPasswordRequestParameter struct {
	// NewPassword undocumented
	NewPassword *string `json:"newPassword,omitempty"`
}

// AuthenticationStrengthPolicyUpdateAllowedCombinationsRequestParameter undocumented
type AuthenticationStrengthPolicyUpdateAllowedCombinationsRequestParameter struct {
	// AllowedCombinations undocumented
	AllowedCombinations []AuthenticationMethodModes `json:"allowedCombinations,omitempty"`
}

// EmailMethods returns request builder for EmailAuthenticationMethod collection
func (b *AuthenticationRequestBuilder) EmailMethods() *AuthenticationEmailMethodsCollectionRequestBuilder {
	bb := &AuthenticationEmailMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/emailMethods"
	return bb
}

// AuthenticationEmailMethodsCollectionRequestBuilder is request builder for EmailAuthenticationMethod collection rcn
type AuthenticationEmailMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EmailAuthenticationMethod collection
func (b *AuthenticationEmailMethodsCollectionRequestBuilder) Request() *AuthenticationEmailMethodsCollectionRequest {
	return &AuthenticationEmailMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EmailAuthenticationMethod item
func (b *AuthenticationEmailMethodsCollectionRequestBuilder) ID(id string) *EmailAuthenticationMethodRequestBuilder {
	bb := &EmailAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationEmailMethodsCollectionRequest is request for EmailAuthenticationMethod collection
type AuthenticationEmailMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EmailAuthenticationMethod collection
func (r *AuthenticationEmailMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EmailAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EmailAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EmailAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EmailAuthenticationMethod collection, max N pages
func (r *AuthenticationEmailMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]EmailAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EmailAuthenticationMethod collection
func (r *AuthenticationEmailMethodsCollectionRequest) Get(ctx context.Context) ([]EmailAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EmailAuthenticationMethod collection
func (r *AuthenticationEmailMethodsCollectionRequest) Add(ctx context.Context, reqObj *EmailAuthenticationMethod) (resObj *EmailAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Fido2Methods returns request builder for Fido2AuthenticationMethod collection
func (b *AuthenticationRequestBuilder) Fido2Methods() *AuthenticationFido2MethodsCollectionRequestBuilder {
	bb := &AuthenticationFido2MethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/fido2Methods"
	return bb
}

// AuthenticationFido2MethodsCollectionRequestBuilder is request builder for Fido2AuthenticationMethod collection rcn
type AuthenticationFido2MethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Fido2AuthenticationMethod collection
func (b *AuthenticationFido2MethodsCollectionRequestBuilder) Request() *AuthenticationFido2MethodsCollectionRequest {
	return &AuthenticationFido2MethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Fido2AuthenticationMethod item
func (b *AuthenticationFido2MethodsCollectionRequestBuilder) ID(id string) *Fido2AuthenticationMethodRequestBuilder {
	bb := &Fido2AuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationFido2MethodsCollectionRequest is request for Fido2AuthenticationMethod collection
type AuthenticationFido2MethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Fido2AuthenticationMethod collection
func (r *AuthenticationFido2MethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Fido2AuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Fido2AuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Fido2AuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Fido2AuthenticationMethod collection, max N pages
func (r *AuthenticationFido2MethodsCollectionRequest) GetN(ctx context.Context, n int) ([]Fido2AuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Fido2AuthenticationMethod collection
func (r *AuthenticationFido2MethodsCollectionRequest) Get(ctx context.Context) ([]Fido2AuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Fido2AuthenticationMethod collection
func (r *AuthenticationFido2MethodsCollectionRequest) Add(ctx context.Context, reqObj *Fido2AuthenticationMethod) (resObj *Fido2AuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Methods returns request builder for AuthenticationMethod collection
func (b *AuthenticationRequestBuilder) Methods() *AuthenticationMethodsCollectionRequestBuilder {
	bb := &AuthenticationMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/methods"
	return bb
}

// AuthenticationMethodsCollectionRequestBuilder is request builder for AuthenticationMethod collection rcn
type AuthenticationMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationMethod collection
func (b *AuthenticationMethodsCollectionRequestBuilder) Request() *AuthenticationMethodsCollectionRequest {
	return &AuthenticationMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationMethod item
func (b *AuthenticationMethodsCollectionRequestBuilder) ID(id string) *AuthenticationMethodRequestBuilder {
	bb := &AuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodsCollectionRequest is request for AuthenticationMethod collection
type AuthenticationMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationMethod collection
func (r *AuthenticationMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationMethod collection, max N pages
func (r *AuthenticationMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationMethod collection
func (r *AuthenticationMethodsCollectionRequest) Get(ctx context.Context) ([]AuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationMethod collection
func (r *AuthenticationMethodsCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationMethod) (resObj *AuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftAuthenticatorMethods returns request builder for MicrosoftAuthenticatorAuthenticationMethod collection
func (b *AuthenticationRequestBuilder) MicrosoftAuthenticatorMethods() *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder {
	bb := &AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/microsoftAuthenticatorMethods"
	return bb
}

// AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder is request builder for MicrosoftAuthenticatorAuthenticationMethod collection rcn
type AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftAuthenticatorAuthenticationMethod collection
func (b *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder) Request() *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest {
	return &AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftAuthenticatorAuthenticationMethod item
func (b *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequestBuilder) ID(id string) *MicrosoftAuthenticatorAuthenticationMethodRequestBuilder {
	bb := &MicrosoftAuthenticatorAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest is request for MicrosoftAuthenticatorAuthenticationMethod collection
type AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftAuthenticatorAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftAuthenticatorAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftAuthenticatorAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftAuthenticatorAuthenticationMethod collection, max N pages
func (r *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftAuthenticatorAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest) Get(ctx context.Context) ([]MicrosoftAuthenticatorAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationMicrosoftAuthenticatorMethodsCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftAuthenticatorAuthenticationMethod) (resObj *MicrosoftAuthenticatorAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Operations returns request builder for LongRunningOperation collection
func (b *AuthenticationRequestBuilder) Operations() *AuthenticationOperationsCollectionRequestBuilder {
	bb := &AuthenticationOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// AuthenticationOperationsCollectionRequestBuilder is request builder for LongRunningOperation collection rcn
type AuthenticationOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for LongRunningOperation collection
func (b *AuthenticationOperationsCollectionRequestBuilder) Request() *AuthenticationOperationsCollectionRequest {
	return &AuthenticationOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for LongRunningOperation item
func (b *AuthenticationOperationsCollectionRequestBuilder) ID(id string) *LongRunningOperationRequestBuilder {
	bb := &LongRunningOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationOperationsCollectionRequest is request for LongRunningOperation collection
type AuthenticationOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for LongRunningOperation collection
func (r *AuthenticationOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]LongRunningOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []LongRunningOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []LongRunningOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for LongRunningOperation collection, max N pages
func (r *AuthenticationOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]LongRunningOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for LongRunningOperation collection
func (r *AuthenticationOperationsCollectionRequest) Get(ctx context.Context) ([]LongRunningOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for LongRunningOperation collection
func (r *AuthenticationOperationsCollectionRequest) Add(ctx context.Context, reqObj *LongRunningOperation) (resObj *LongRunningOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// PasswordMethods returns request builder for PasswordAuthenticationMethod collection
func (b *AuthenticationRequestBuilder) PasswordMethods() *AuthenticationPasswordMethodsCollectionRequestBuilder {
	bb := &AuthenticationPasswordMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/passwordMethods"
	return bb
}

// AuthenticationPasswordMethodsCollectionRequestBuilder is request builder for PasswordAuthenticationMethod collection rcn
type AuthenticationPasswordMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PasswordAuthenticationMethod collection
func (b *AuthenticationPasswordMethodsCollectionRequestBuilder) Request() *AuthenticationPasswordMethodsCollectionRequest {
	return &AuthenticationPasswordMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PasswordAuthenticationMethod item
func (b *AuthenticationPasswordMethodsCollectionRequestBuilder) ID(id string) *PasswordAuthenticationMethodRequestBuilder {
	bb := &PasswordAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationPasswordMethodsCollectionRequest is request for PasswordAuthenticationMethod collection
type AuthenticationPasswordMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PasswordAuthenticationMethod collection
func (r *AuthenticationPasswordMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PasswordAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PasswordAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PasswordAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PasswordAuthenticationMethod collection, max N pages
func (r *AuthenticationPasswordMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]PasswordAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PasswordAuthenticationMethod collection
func (r *AuthenticationPasswordMethodsCollectionRequest) Get(ctx context.Context) ([]PasswordAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PasswordAuthenticationMethod collection
func (r *AuthenticationPasswordMethodsCollectionRequest) Add(ctx context.Context, reqObj *PasswordAuthenticationMethod) (resObj *PasswordAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// PasswordlessMicrosoftAuthenticatorMethods returns request builder for PasswordlessMicrosoftAuthenticatorAuthenticationMethod collection
func (b *AuthenticationRequestBuilder) PasswordlessMicrosoftAuthenticatorMethods() *AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequestBuilder {
	bb := &AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/passwordlessMicrosoftAuthenticatorMethods"
	return bb
}

// AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequestBuilder is request builder for PasswordlessMicrosoftAuthenticatorAuthenticationMethod collection rcn
type AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PasswordlessMicrosoftAuthenticatorAuthenticationMethod collection
func (b *AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequestBuilder) Request() *AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequest {
	return &AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PasswordlessMicrosoftAuthenticatorAuthenticationMethod item
func (b *AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequestBuilder) ID(id string) *PasswordlessMicrosoftAuthenticatorAuthenticationMethodRequestBuilder {
	bb := &PasswordlessMicrosoftAuthenticatorAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequest is request for PasswordlessMicrosoftAuthenticatorAuthenticationMethod collection
type AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PasswordlessMicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PasswordlessMicrosoftAuthenticatorAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PasswordlessMicrosoftAuthenticatorAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PasswordlessMicrosoftAuthenticatorAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PasswordlessMicrosoftAuthenticatorAuthenticationMethod collection, max N pages
func (r *AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]PasswordlessMicrosoftAuthenticatorAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PasswordlessMicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequest) Get(ctx context.Context) ([]PasswordlessMicrosoftAuthenticatorAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PasswordlessMicrosoftAuthenticatorAuthenticationMethod collection
func (r *AuthenticationPasswordlessMicrosoftAuthenticatorMethodsCollectionRequest) Add(ctx context.Context, reqObj *PasswordlessMicrosoftAuthenticatorAuthenticationMethod) (resObj *PasswordlessMicrosoftAuthenticatorAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// PhoneMethods returns request builder for PhoneAuthenticationMethod collection
func (b *AuthenticationRequestBuilder) PhoneMethods() *AuthenticationPhoneMethodsCollectionRequestBuilder {
	bb := &AuthenticationPhoneMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/phoneMethods"
	return bb
}

// AuthenticationPhoneMethodsCollectionRequestBuilder is request builder for PhoneAuthenticationMethod collection rcn
type AuthenticationPhoneMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PhoneAuthenticationMethod collection
func (b *AuthenticationPhoneMethodsCollectionRequestBuilder) Request() *AuthenticationPhoneMethodsCollectionRequest {
	return &AuthenticationPhoneMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PhoneAuthenticationMethod item
func (b *AuthenticationPhoneMethodsCollectionRequestBuilder) ID(id string) *PhoneAuthenticationMethodRequestBuilder {
	bb := &PhoneAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationPhoneMethodsCollectionRequest is request for PhoneAuthenticationMethod collection
type AuthenticationPhoneMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PhoneAuthenticationMethod collection
func (r *AuthenticationPhoneMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PhoneAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PhoneAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PhoneAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PhoneAuthenticationMethod collection, max N pages
func (r *AuthenticationPhoneMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]PhoneAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PhoneAuthenticationMethod collection
func (r *AuthenticationPhoneMethodsCollectionRequest) Get(ctx context.Context) ([]PhoneAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PhoneAuthenticationMethod collection
func (r *AuthenticationPhoneMethodsCollectionRequest) Add(ctx context.Context, reqObj *PhoneAuthenticationMethod) (resObj *PhoneAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SoftwareOathMethods returns request builder for SoftwareOathAuthenticationMethod collection
func (b *AuthenticationRequestBuilder) SoftwareOathMethods() *AuthenticationSoftwareOathMethodsCollectionRequestBuilder {
	bb := &AuthenticationSoftwareOathMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/softwareOathMethods"
	return bb
}

// AuthenticationSoftwareOathMethodsCollectionRequestBuilder is request builder for SoftwareOathAuthenticationMethod collection rcn
type AuthenticationSoftwareOathMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SoftwareOathAuthenticationMethod collection
func (b *AuthenticationSoftwareOathMethodsCollectionRequestBuilder) Request() *AuthenticationSoftwareOathMethodsCollectionRequest {
	return &AuthenticationSoftwareOathMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SoftwareOathAuthenticationMethod item
func (b *AuthenticationSoftwareOathMethodsCollectionRequestBuilder) ID(id string) *SoftwareOathAuthenticationMethodRequestBuilder {
	bb := &SoftwareOathAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationSoftwareOathMethodsCollectionRequest is request for SoftwareOathAuthenticationMethod collection
type AuthenticationSoftwareOathMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SoftwareOathAuthenticationMethod collection
func (r *AuthenticationSoftwareOathMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SoftwareOathAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SoftwareOathAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SoftwareOathAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SoftwareOathAuthenticationMethod collection, max N pages
func (r *AuthenticationSoftwareOathMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]SoftwareOathAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SoftwareOathAuthenticationMethod collection
func (r *AuthenticationSoftwareOathMethodsCollectionRequest) Get(ctx context.Context) ([]SoftwareOathAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SoftwareOathAuthenticationMethod collection
func (r *AuthenticationSoftwareOathMethodsCollectionRequest) Add(ctx context.Context, reqObj *SoftwareOathAuthenticationMethod) (resObj *SoftwareOathAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TemporaryAccessPassMethods returns request builder for TemporaryAccessPassAuthenticationMethod collection
func (b *AuthenticationRequestBuilder) TemporaryAccessPassMethods() *AuthenticationTemporaryAccessPassMethodsCollectionRequestBuilder {
	bb := &AuthenticationTemporaryAccessPassMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/temporaryAccessPassMethods"
	return bb
}

// AuthenticationTemporaryAccessPassMethodsCollectionRequestBuilder is request builder for TemporaryAccessPassAuthenticationMethod collection rcn
type AuthenticationTemporaryAccessPassMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TemporaryAccessPassAuthenticationMethod collection
func (b *AuthenticationTemporaryAccessPassMethodsCollectionRequestBuilder) Request() *AuthenticationTemporaryAccessPassMethodsCollectionRequest {
	return &AuthenticationTemporaryAccessPassMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TemporaryAccessPassAuthenticationMethod item
func (b *AuthenticationTemporaryAccessPassMethodsCollectionRequestBuilder) ID(id string) *TemporaryAccessPassAuthenticationMethodRequestBuilder {
	bb := &TemporaryAccessPassAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationTemporaryAccessPassMethodsCollectionRequest is request for TemporaryAccessPassAuthenticationMethod collection
type AuthenticationTemporaryAccessPassMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TemporaryAccessPassAuthenticationMethod collection
func (r *AuthenticationTemporaryAccessPassMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TemporaryAccessPassAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TemporaryAccessPassAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TemporaryAccessPassAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TemporaryAccessPassAuthenticationMethod collection, max N pages
func (r *AuthenticationTemporaryAccessPassMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]TemporaryAccessPassAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TemporaryAccessPassAuthenticationMethod collection
func (r *AuthenticationTemporaryAccessPassMethodsCollectionRequest) Get(ctx context.Context) ([]TemporaryAccessPassAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TemporaryAccessPassAuthenticationMethod collection
func (r *AuthenticationTemporaryAccessPassMethodsCollectionRequest) Add(ctx context.Context, reqObj *TemporaryAccessPassAuthenticationMethod) (resObj *TemporaryAccessPassAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsHelloForBusinessMethods returns request builder for WindowsHelloForBusinessAuthenticationMethod collection
func (b *AuthenticationRequestBuilder) WindowsHelloForBusinessMethods() *AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder {
	bb := &AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsHelloForBusinessMethods"
	return bb
}

// AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder is request builder for WindowsHelloForBusinessAuthenticationMethod collection rcn
type AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsHelloForBusinessAuthenticationMethod collection
func (b *AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder) Request() *AuthenticationWindowsHelloForBusinessMethodsCollectionRequest {
	return &AuthenticationWindowsHelloForBusinessMethodsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsHelloForBusinessAuthenticationMethod item
func (b *AuthenticationWindowsHelloForBusinessMethodsCollectionRequestBuilder) ID(id string) *WindowsHelloForBusinessAuthenticationMethodRequestBuilder {
	bb := &WindowsHelloForBusinessAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationWindowsHelloForBusinessMethodsCollectionRequest is request for WindowsHelloForBusinessAuthenticationMethod collection
type AuthenticationWindowsHelloForBusinessMethodsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationWindowsHelloForBusinessMethodsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsHelloForBusinessAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsHelloForBusinessAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsHelloForBusinessAuthenticationMethod collection, max N pages
func (r *AuthenticationWindowsHelloForBusinessMethodsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationWindowsHelloForBusinessMethodsCollectionRequest) Get(ctx context.Context) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationWindowsHelloForBusinessMethodsCollectionRequest) Add(ctx context.Context, reqObj *WindowsHelloForBusinessAuthenticationMethod) (resObj *WindowsHelloForBusinessAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IncludeApplications returns request builder for AuthenticationConditionApplication collection
func (b *AuthenticationConditionsApplicationsRequestBuilder) IncludeApplications() *AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequestBuilder {
	bb := &AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/includeApplications"
	return bb
}

// AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequestBuilder is request builder for AuthenticationConditionApplication collection rcn
type AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationConditionApplication collection
func (b *AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequestBuilder) Request() *AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequest {
	return &AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationConditionApplication item
func (b *AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequestBuilder) ID(id string) *AuthenticationConditionApplicationRequestBuilder {
	bb := &AuthenticationConditionApplicationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequest is request for AuthenticationConditionApplication collection
type AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationConditionApplication collection
func (r *AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationConditionApplication, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationConditionApplication
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationConditionApplication
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationConditionApplication collection, max N pages
func (r *AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationConditionApplication, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationConditionApplication collection
func (r *AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequest) Get(ctx context.Context) ([]AuthenticationConditionApplication, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationConditionApplication collection
func (r *AuthenticationConditionsApplicationsIncludeApplicationsCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationConditionApplication) (resObj *AuthenticationConditionApplication, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// OnSignupStart returns request builder for AuthenticationListener collection
func (b *AuthenticationEventsPolicyRequestBuilder) OnSignupStart() *AuthenticationEventsPolicyOnSignupStartCollectionRequestBuilder {
	bb := &AuthenticationEventsPolicyOnSignupStartCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/onSignupStart"
	return bb
}

// AuthenticationEventsPolicyOnSignupStartCollectionRequestBuilder is request builder for AuthenticationListener collection rcn
type AuthenticationEventsPolicyOnSignupStartCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationListener collection
func (b *AuthenticationEventsPolicyOnSignupStartCollectionRequestBuilder) Request() *AuthenticationEventsPolicyOnSignupStartCollectionRequest {
	return &AuthenticationEventsPolicyOnSignupStartCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationListener item
func (b *AuthenticationEventsPolicyOnSignupStartCollectionRequestBuilder) ID(id string) *AuthenticationListenerRequestBuilder {
	bb := &AuthenticationListenerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationEventsPolicyOnSignupStartCollectionRequest is request for AuthenticationListener collection
type AuthenticationEventsPolicyOnSignupStartCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationListener collection
func (r *AuthenticationEventsPolicyOnSignupStartCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationListener, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationListener
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationListener
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationListener collection, max N pages
func (r *AuthenticationEventsPolicyOnSignupStartCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationListener, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationListener collection
func (r *AuthenticationEventsPolicyOnSignupStartCollectionRequest) Get(ctx context.Context) ([]AuthenticationListener, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationListener collection
func (r *AuthenticationEventsPolicyOnSignupStartCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationListener) (resObj *AuthenticationListener, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AuthenticationMethodConfigurations returns request builder for AuthenticationMethodConfiguration collection
func (b *AuthenticationMethodsPolicyRequestBuilder) AuthenticationMethodConfigurations() *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder {
	bb := &AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/authenticationMethodConfigurations"
	return bb
}

// AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder is request builder for AuthenticationMethodConfiguration collection rcn
type AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationMethodConfiguration collection
func (b *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder) Request() *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest {
	return &AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationMethodConfiguration item
func (b *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder) ID(id string) *AuthenticationMethodConfigurationRequestBuilder {
	bb := &AuthenticationMethodConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest is request for AuthenticationMethodConfiguration collection
type AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationMethodConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationMethodConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationMethodConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationMethodConfiguration collection, max N pages
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationMethodConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest) Get(ctx context.Context) ([]AuthenticationMethodConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationMethodConfiguration) (resObj *AuthenticationMethodConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserRegistrationDetails returns request builder for UserRegistrationDetails collection
func (b *AuthenticationMethodsRootRequestBuilder) UserRegistrationDetails() *AuthenticationMethodsRootUserRegistrationDetailsCollectionRequestBuilder {
	bb := &AuthenticationMethodsRootUserRegistrationDetailsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userRegistrationDetails"
	return bb
}

// AuthenticationMethodsRootUserRegistrationDetailsCollectionRequestBuilder is request builder for UserRegistrationDetails collection rcn
type AuthenticationMethodsRootUserRegistrationDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserRegistrationDetails collection
func (b *AuthenticationMethodsRootUserRegistrationDetailsCollectionRequestBuilder) Request() *AuthenticationMethodsRootUserRegistrationDetailsCollectionRequest {
	return &AuthenticationMethodsRootUserRegistrationDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserRegistrationDetails item
func (b *AuthenticationMethodsRootUserRegistrationDetailsCollectionRequestBuilder) ID(id string) *UserRegistrationDetailsRequestBuilder {
	bb := &UserRegistrationDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodsRootUserRegistrationDetailsCollectionRequest is request for UserRegistrationDetails collection
type AuthenticationMethodsRootUserRegistrationDetailsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserRegistrationDetails collection
func (r *AuthenticationMethodsRootUserRegistrationDetailsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserRegistrationDetails, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserRegistrationDetails
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserRegistrationDetails
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserRegistrationDetails collection, max N pages
func (r *AuthenticationMethodsRootUserRegistrationDetailsCollectionRequest) GetN(ctx context.Context, n int) ([]UserRegistrationDetails, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserRegistrationDetails collection
func (r *AuthenticationMethodsRootUserRegistrationDetailsCollectionRequest) Get(ctx context.Context) ([]UserRegistrationDetails, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserRegistrationDetails collection
func (r *AuthenticationMethodsRootUserRegistrationDetailsCollectionRequest) Add(ctx context.Context, reqObj *UserRegistrationDetails) (resObj *UserRegistrationDetails, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CombinationConfigurations returns request builder for AuthenticationCombinationConfiguration collection
func (b *AuthenticationStrengthPolicyRequestBuilder) CombinationConfigurations() *AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequestBuilder {
	bb := &AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/combinationConfigurations"
	return bb
}

// AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequestBuilder is request builder for AuthenticationCombinationConfiguration collection rcn
type AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationCombinationConfiguration collection
func (b *AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequestBuilder) Request() *AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequest {
	return &AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationCombinationConfiguration item
func (b *AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequestBuilder) ID(id string) *AuthenticationCombinationConfigurationRequestBuilder {
	bb := &AuthenticationCombinationConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequest is request for AuthenticationCombinationConfiguration collection
type AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationCombinationConfiguration collection
func (r *AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationCombinationConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationCombinationConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationCombinationConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationCombinationConfiguration collection, max N pages
func (r *AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationCombinationConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationCombinationConfiguration collection
func (r *AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequest) Get(ctx context.Context) ([]AuthenticationCombinationConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationCombinationConfiguration collection
func (r *AuthenticationStrengthPolicyCombinationConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationCombinationConfiguration) (resObj *AuthenticationCombinationConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AuthenticationMethodModes returns request builder for AuthenticationMethodModeDetail collection
func (b *AuthenticationStrengthRootRequestBuilder) AuthenticationMethodModes() *AuthenticationStrengthRootAuthenticationMethodModesCollectionRequestBuilder {
	bb := &AuthenticationStrengthRootAuthenticationMethodModesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/authenticationMethodModes"
	return bb
}

// AuthenticationStrengthRootAuthenticationMethodModesCollectionRequestBuilder is request builder for AuthenticationMethodModeDetail collection rcn
type AuthenticationStrengthRootAuthenticationMethodModesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationMethodModeDetail collection
func (b *AuthenticationStrengthRootAuthenticationMethodModesCollectionRequestBuilder) Request() *AuthenticationStrengthRootAuthenticationMethodModesCollectionRequest {
	return &AuthenticationStrengthRootAuthenticationMethodModesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationMethodModeDetail item
func (b *AuthenticationStrengthRootAuthenticationMethodModesCollectionRequestBuilder) ID(id string) *AuthenticationMethodModeDetailRequestBuilder {
	bb := &AuthenticationMethodModeDetailRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationStrengthRootAuthenticationMethodModesCollectionRequest is request for AuthenticationMethodModeDetail collection
type AuthenticationStrengthRootAuthenticationMethodModesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationMethodModeDetail collection
func (r *AuthenticationStrengthRootAuthenticationMethodModesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationMethodModeDetail, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationMethodModeDetail
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationMethodModeDetail
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationMethodModeDetail collection, max N pages
func (r *AuthenticationStrengthRootAuthenticationMethodModesCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationMethodModeDetail, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationMethodModeDetail collection
func (r *AuthenticationStrengthRootAuthenticationMethodModesCollectionRequest) Get(ctx context.Context) ([]AuthenticationMethodModeDetail, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationMethodModeDetail collection
func (r *AuthenticationStrengthRootAuthenticationMethodModesCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationMethodModeDetail) (resObj *AuthenticationMethodModeDetail, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Policies returns request builder for AuthenticationStrengthPolicy collection
func (b *AuthenticationStrengthRootRequestBuilder) Policies() *AuthenticationStrengthRootPoliciesCollectionRequestBuilder {
	bb := &AuthenticationStrengthRootPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/policies"
	return bb
}

// AuthenticationStrengthRootPoliciesCollectionRequestBuilder is request builder for AuthenticationStrengthPolicy collection rcn
type AuthenticationStrengthRootPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationStrengthPolicy collection
func (b *AuthenticationStrengthRootPoliciesCollectionRequestBuilder) Request() *AuthenticationStrengthRootPoliciesCollectionRequest {
	return &AuthenticationStrengthRootPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationStrengthPolicy item
func (b *AuthenticationStrengthRootPoliciesCollectionRequestBuilder) ID(id string) *AuthenticationStrengthPolicyRequestBuilder {
	bb := &AuthenticationStrengthPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationStrengthRootPoliciesCollectionRequest is request for AuthenticationStrengthPolicy collection
type AuthenticationStrengthRootPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationStrengthPolicy collection
func (r *AuthenticationStrengthRootPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationStrengthPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationStrengthPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationStrengthPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationStrengthPolicy collection, max N pages
func (r *AuthenticationStrengthRootPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationStrengthPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationStrengthPolicy collection
func (r *AuthenticationStrengthRootPoliciesCollectionRequest) Get(ctx context.Context) ([]AuthenticationStrengthPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationStrengthPolicy collection
func (r *AuthenticationStrengthRootPoliciesCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationStrengthPolicy) (resObj *AuthenticationStrengthPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MFA returns request builder for ConditionalAccessPolicy collection
func (b *AuthenticationStrengthUsageRequestBuilder) MFA() *AuthenticationStrengthUsageMFACollectionRequestBuilder {
	bb := &AuthenticationStrengthUsageMFACollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/mfa"
	return bb
}

// AuthenticationStrengthUsageMFACollectionRequestBuilder is request builder for ConditionalAccessPolicy collection rcn
type AuthenticationStrengthUsageMFACollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ConditionalAccessPolicy collection
func (b *AuthenticationStrengthUsageMFACollectionRequestBuilder) Request() *AuthenticationStrengthUsageMFACollectionRequest {
	return &AuthenticationStrengthUsageMFACollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ConditionalAccessPolicy item
func (b *AuthenticationStrengthUsageMFACollectionRequestBuilder) ID(id string) *ConditionalAccessPolicyRequestBuilder {
	bb := &ConditionalAccessPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationStrengthUsageMFACollectionRequest is request for ConditionalAccessPolicy collection
type AuthenticationStrengthUsageMFACollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ConditionalAccessPolicy collection
func (r *AuthenticationStrengthUsageMFACollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ConditionalAccessPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ConditionalAccessPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ConditionalAccessPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ConditionalAccessPolicy collection, max N pages
func (r *AuthenticationStrengthUsageMFACollectionRequest) GetN(ctx context.Context, n int) ([]ConditionalAccessPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ConditionalAccessPolicy collection
func (r *AuthenticationStrengthUsageMFACollectionRequest) Get(ctx context.Context) ([]ConditionalAccessPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ConditionalAccessPolicy collection
func (r *AuthenticationStrengthUsageMFACollectionRequest) Add(ctx context.Context, reqObj *ConditionalAccessPolicy) (resObj *ConditionalAccessPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// None returns request builder for ConditionalAccessPolicy collection
func (b *AuthenticationStrengthUsageRequestBuilder) None() *AuthenticationStrengthUsageNoneCollectionRequestBuilder {
	bb := &AuthenticationStrengthUsageNoneCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/none"
	return bb
}

// AuthenticationStrengthUsageNoneCollectionRequestBuilder is request builder for ConditionalAccessPolicy collection rcn
type AuthenticationStrengthUsageNoneCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ConditionalAccessPolicy collection
func (b *AuthenticationStrengthUsageNoneCollectionRequestBuilder) Request() *AuthenticationStrengthUsageNoneCollectionRequest {
	return &AuthenticationStrengthUsageNoneCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ConditionalAccessPolicy item
func (b *AuthenticationStrengthUsageNoneCollectionRequestBuilder) ID(id string) *ConditionalAccessPolicyRequestBuilder {
	bb := &ConditionalAccessPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationStrengthUsageNoneCollectionRequest is request for ConditionalAccessPolicy collection
type AuthenticationStrengthUsageNoneCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ConditionalAccessPolicy collection
func (r *AuthenticationStrengthUsageNoneCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ConditionalAccessPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ConditionalAccessPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ConditionalAccessPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ConditionalAccessPolicy collection, max N pages
func (r *AuthenticationStrengthUsageNoneCollectionRequest) GetN(ctx context.Context, n int) ([]ConditionalAccessPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ConditionalAccessPolicy collection
func (r *AuthenticationStrengthUsageNoneCollectionRequest) Get(ctx context.Context) ([]ConditionalAccessPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ConditionalAccessPolicy collection
func (r *AuthenticationStrengthUsageNoneCollectionRequest) Add(ctx context.Context, reqObj *ConditionalAccessPolicy) (resObj *ConditionalAccessPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AuthenticationRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationCombinationConfigurationRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationContextClassReferenceRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationEventListenerRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationEventsPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationFlowsPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationListenerRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationMethodRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationMethodConfigurationRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationMethodModeDetailRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationMethodTargetRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationMethodsPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationMethodsRootRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationStrengthPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationStrengthRootRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AuthenticationOperationsCollectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
