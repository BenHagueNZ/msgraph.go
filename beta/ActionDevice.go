// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// DeviceAndAppManagementAssignmentFilterCollectionEnableRequestParameter undocumented
type DeviceAndAppManagementAssignmentFilterCollectionEnableRequestParameter struct {
	// Enable undocumented
	Enable *bool `json:"enable,omitempty"`
}

// DeviceAndAppManagementAssignmentFilterCollectionValidateFilterRequestParameter undocumented
type DeviceAndAppManagementAssignmentFilterCollectionValidateFilterRequestParameter struct {
	// DeviceAndAppManagementAssignmentFilter undocumented
	DeviceAndAppManagementAssignmentFilter *DeviceAndAppManagementAssignmentFilter `json:"deviceAndAppManagementAssignmentFilter,omitempty"`
}

// DeviceCompliancePolicyCollectionHasPayloadLinksRequestParameter undocumented
type DeviceCompliancePolicyCollectionHasPayloadLinksRequestParameter struct {
	// PayloadIDs undocumented
	PayloadIDs []string `json:"payloadIds,omitempty"`
}

// DeviceCompliancePolicyCollectionGetNoncompliantDevicesToRetireRequestParameter undocumented
type DeviceCompliancePolicyCollectionGetNoncompliantDevicesToRetireRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceCompliancePolicyCollectionRefreshDeviceComplianceReportSummarizationRequestParameter undocumented
type DeviceCompliancePolicyCollectionRefreshDeviceComplianceReportSummarizationRequestParameter struct {
}

// DeviceCompliancePolicyCollectionSetScheduledRetireStateRequestParameter undocumented
type DeviceCompliancePolicyCollectionSetScheduledRetireStateRequestParameter struct {
	// ScopedToAllDevices undocumented
	ScopedToAllDevices *bool `json:"scopedToAllDevices,omitempty"`
	// State undocumented
	State *ScheduledRetireState `json:"state,omitempty"`
	// ManagedDeviceIDs undocumented
	ManagedDeviceIDs []string `json:"managedDeviceIds,omitempty"`
}

// DeviceCompliancePolicyCollectionValidateComplianceScriptRequestParameter undocumented
type DeviceCompliancePolicyCollectionValidateComplianceScriptRequestParameter struct {
	// DeviceCompliancePolicyScript undocumented
	DeviceCompliancePolicyScript *DeviceCompliancePolicyScript `json:"deviceCompliancePolicyScript,omitempty"`
}

// DeviceConfigurationCollectionHasPayloadLinksRequestParameter undocumented
type DeviceConfigurationCollectionHasPayloadLinksRequestParameter struct {
	// PayloadIDs undocumented
	PayloadIDs []string `json:"payloadIds,omitempty"`
}

// DeviceConfigurationCollectionGetTargetedUsersAndDevicesRequestParameter undocumented
type DeviceConfigurationCollectionGetTargetedUsersAndDevicesRequestParameter struct {
	// DeviceConfigurationIDs undocumented
	DeviceConfigurationIDs []string `json:"deviceConfigurationIds,omitempty"`
}

// DeviceEnrollmentConfigurationCollectionHasPayloadLinksRequestParameter undocumented
type DeviceEnrollmentConfigurationCollectionHasPayloadLinksRequestParameter struct {
	// PayloadIDs undocumented
	PayloadIDs []string `json:"payloadIds,omitempty"`
}

// DeviceEnrollmentConfigurationCollectionCreateEnrollmentNotificationConfigurationRequestParameter undocumented
type DeviceEnrollmentConfigurationCollectionCreateEnrollmentNotificationConfigurationRequestParameter struct {
	// DeviceEnrollmentNotificationConfigurations undocumented
	DeviceEnrollmentNotificationConfigurations []DeviceEnrollmentConfiguration `json:"deviceEnrollmentNotificationConfigurations,omitempty"`
}

// DeviceHealthScriptCollectionEnableGlobalScriptsRequestParameter undocumented
type DeviceHealthScriptCollectionEnableGlobalScriptsRequestParameter struct {
}

// DeviceManagementResourceAccessProfileBaseCollectionQueryByPlatformTypeRequestParameter undocumented
type DeviceManagementResourceAccessProfileBaseCollectionQueryByPlatformTypeRequestParameter struct {
	// PlatformType undocumented
	PlatformType *PolicyPlatformType `json:"platformType,omitempty"`
}

// DeviceManagementScriptCollectionHasPayloadLinksRequestParameter undocumented
type DeviceManagementScriptCollectionHasPayloadLinksRequestParameter struct {
	// PayloadIDs undocumented
	PayloadIDs []string `json:"payloadIds,omitempty"`
}

// DeviceManagementTemplateCollectionImportOffice365DeviceConfigurationPoliciesRequestParameter undocumented
type DeviceManagementTemplateCollectionImportOffice365DeviceConfigurationPoliciesRequestParameter struct {
}

// DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequestParameter undocumented
type DeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequestParameter struct {
}

// DeviceAppManagementTaskUpdateStatusRequestParameter undocumented
type DeviceAppManagementTaskUpdateStatusRequestParameter struct {
	// Status undocumented
	Status *DeviceAppManagementTaskStatus `json:"status,omitempty"`
	// Note undocumented
	Note *string `json:"note,omitempty"`
}

// DeviceCompliancePolicyAssignRequestParameter undocumented
type DeviceCompliancePolicyAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []DeviceCompliancePolicyAssignment `json:"assignments,omitempty"`
}

// DeviceCompliancePolicyScheduleActionsForRulesRequestParameter undocumented
type DeviceCompliancePolicyScheduleActionsForRulesRequestParameter struct {
	// DeviceComplianceScheduledActionForRules undocumented
	DeviceComplianceScheduledActionForRules []DeviceComplianceScheduledActionForRule `json:"deviceComplianceScheduledActionForRules,omitempty"`
}

// DeviceComplianceScriptAssignRequestParameter undocumented
type DeviceComplianceScriptAssignRequestParameter struct {
	// DeviceHealthScriptAssignments undocumented
	DeviceHealthScriptAssignments []DeviceHealthScriptAssignment `json:"deviceHealthScriptAssignments,omitempty"`
}

// DeviceConfigurationAssignRequestParameter undocumented
type DeviceConfigurationAssignRequestParameter struct {
	// DeviceConfigurationGroupAssignments undocumented
	DeviceConfigurationGroupAssignments []DeviceConfigurationGroupAssignment `json:"deviceConfigurationGroupAssignments,omitempty"`
	// Assignments undocumented
	Assignments []DeviceConfigurationAssignment `json:"assignments,omitempty"`
}

// DeviceConfigurationAssignedAccessMultiModeProfilesRequestParameter undocumented
type DeviceConfigurationAssignedAccessMultiModeProfilesRequestParameter struct {
	// AssignedAccessMultiModeProfiles undocumented
	AssignedAccessMultiModeProfiles []WindowsAssignedAccessProfile `json:"assignedAccessMultiModeProfiles,omitempty"`
}

// DeviceConfigurationWindowsPrivacyAccessControlsRequestParameter undocumented
type DeviceConfigurationWindowsPrivacyAccessControlsRequestParameter struct {
	// WindowsPrivacyAccessControls undocumented
	WindowsPrivacyAccessControls []WindowsPrivacyDataAccessControlItem `json:"windowsPrivacyAccessControls,omitempty"`
}

// DeviceCustomAttributeShellScriptAssignRequestParameter undocumented
type DeviceCustomAttributeShellScriptAssignRequestParameter struct {
	// DeviceManagementScriptGroupAssignments undocumented
	DeviceManagementScriptGroupAssignments []DeviceManagementScriptGroupAssignment `json:"deviceManagementScriptGroupAssignments,omitempty"`
	// DeviceManagementScriptAssignments undocumented
	DeviceManagementScriptAssignments []DeviceManagementScriptAssignment `json:"deviceManagementScriptAssignments,omitempty"`
}

// DeviceEnrollmentConfigurationAssignRequestParameter undocumented
type DeviceEnrollmentConfigurationAssignRequestParameter struct {
	// EnrollmentConfigurationAssignments undocumented
	EnrollmentConfigurationAssignments []EnrollmentConfigurationAssignment `json:"enrollmentConfigurationAssignments,omitempty"`
}

// DeviceEnrollmentConfigurationSetPriorityRequestParameter undocumented
type DeviceEnrollmentConfigurationSetPriorityRequestParameter struct {
	// Priority undocumented
	Priority *int `json:"priority,omitempty"`
}

// DeviceHealthScriptAssignRequestParameter undocumented
type DeviceHealthScriptAssignRequestParameter struct {
	// DeviceHealthScriptAssignments undocumented
	DeviceHealthScriptAssignments []DeviceHealthScriptAssignment `json:"deviceHealthScriptAssignments,omitempty"`
}

// DeviceHealthScriptGetGlobalScriptHighestAvailableVersionRequestParameter undocumented
type DeviceHealthScriptGetGlobalScriptHighestAvailableVersionRequestParameter struct {
}

// DeviceHealthScriptUpdateGlobalScriptRequestParameter undocumented
type DeviceHealthScriptUpdateGlobalScriptRequestParameter struct {
	// Version undocumented
	Version *string `json:"version,omitempty"`
}

// DeviceLogCollectionResponseCreateDownloadURLRequestParameter undocumented
type DeviceLogCollectionResponseCreateDownloadURLRequestParameter struct {
}

// DeviceManagementSendCustomNotificationToCompanyPortalRequestParameter undocumented
type DeviceManagementSendCustomNotificationToCompanyPortalRequestParameter struct {
	// NotificationTitle undocumented
	NotificationTitle *string `json:"notificationTitle,omitempty"`
	// NotificationBody undocumented
	NotificationBody *string `json:"notificationBody,omitempty"`
	// GroupsToNotify undocumented
	GroupsToNotify []string `json:"groupsToNotify,omitempty"`
}

// DeviceManagementEvaluateAssignmentFilterRequestParameter undocumented
type DeviceManagementEvaluateAssignmentFilterRequestParameter struct {
	// Data undocumented
	Data *AssignmentFilterEvaluateRequestObject `json:"data,omitempty"`
}

// DeviceManagementGetAssignmentFiltersStatusDetailsRequestParameter undocumented
type DeviceManagementGetAssignmentFiltersStatusDetailsRequestParameter struct {
	// ManagedDeviceID undocumented
	ManagedDeviceID *string `json:"managedDeviceId,omitempty"`
	// PayloadID undocumented
	PayloadID *string `json:"payloadId,omitempty"`
	// UserID undocumented
	UserID *string `json:"userId,omitempty"`
	// AssignmentFilterIDs undocumented
	AssignmentFilterIDs []string `json:"assignmentFilterIds,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
}

// DeviceManagementEnableAndroidDeviceAdministratorEnrollmentRequestParameter undocumented
type DeviceManagementEnableAndroidDeviceAdministratorEnrollmentRequestParameter struct {
}

// DeviceManagementEnableLegacyPcManagementRequestParameter undocumented
type DeviceManagementEnableLegacyPcManagementRequestParameter struct {
}

// DeviceManagementEnableUnlicensedAdminstratorsRequestParameter undocumented
type DeviceManagementEnableUnlicensedAdminstratorsRequestParameter struct {
}

// DeviceManagementCompliancePolicyAssignRequestParameter undocumented
type DeviceManagementCompliancePolicyAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []DeviceManagementConfigurationPolicyAssignment `json:"assignments,omitempty"`
}

// DeviceManagementCompliancePolicySetScheduledActionsRequestParameter undocumented
type DeviceManagementCompliancePolicySetScheduledActionsRequestParameter struct {
	// ScheduledActions undocumented
	ScheduledActions []DeviceManagementComplianceScheduledActionForRule `json:"scheduledActions,omitempty"`
}

// DeviceManagementConfigurationPolicyAssignRequestParameter undocumented
type DeviceManagementConfigurationPolicyAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []DeviceManagementConfigurationPolicyAssignment `json:"assignments,omitempty"`
}

// DeviceManagementConfigurationPolicyCreateCopyRequestParameter undocumented
type DeviceManagementConfigurationPolicyCreateCopyRequestParameter struct {
	// DisplayName undocumented
	DisplayName *string `json:"displayName,omitempty"`
	// Description undocumented
	Description *string `json:"description,omitempty"`
}

// DeviceManagementConfigurationPolicyReorderRequestParameter undocumented
type DeviceManagementConfigurationPolicyReorderRequestParameter struct {
	// Priority undocumented
	Priority *int `json:"priority,omitempty"`
}

// DeviceManagementExchangeConnectorSyncRequestParameter undocumented
type DeviceManagementExchangeConnectorSyncRequestParameter struct {
	// SyncType undocumented
	SyncType *DeviceManagementExchangeConnectorSyncType `json:"syncType,omitempty"`
}

// DeviceManagementIntentAssignRequestParameter undocumented
type DeviceManagementIntentAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []DeviceManagementIntentAssignment `json:"assignments,omitempty"`
}

// DeviceManagementIntentCreateCopyRequestParameter undocumented
type DeviceManagementIntentCreateCopyRequestParameter struct {
	// DisplayName undocumented
	DisplayName *string `json:"displayName,omitempty"`
	// Description undocumented
	Description *string `json:"description,omitempty"`
}

// DeviceManagementIntentMigrateToTemplateRequestParameter undocumented
type DeviceManagementIntentMigrateToTemplateRequestParameter struct {
	// NewTemplateID undocumented
	NewTemplateID *string `json:"newTemplateId,omitempty"`
	// PreserveCustomValues undocumented
	PreserveCustomValues *bool `json:"preserveCustomValues,omitempty"`
}

// DeviceManagementIntentUpdateSettingsRequestParameter undocumented
type DeviceManagementIntentUpdateSettingsRequestParameter struct {
	// Settings undocumented
	Settings []DeviceManagementSettingInstance `json:"settings,omitempty"`
}

// DeviceManagementPartnerTerminateRequestParameter undocumented
type DeviceManagementPartnerTerminateRequestParameter struct {
}

// DeviceManagementReportsGetAppsInstallSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetAppsInstallSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetAppStatusOverviewReportRequestParameter undocumented
type DeviceManagementReportsGetAppStatusOverviewReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDeviceInstallStatusReportRequestParameter undocumented
type DeviceManagementReportsGetDeviceInstallStatusReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetFailedMobileAppsReportRequestParameter undocumented
type DeviceManagementReportsGetFailedMobileAppsReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetFailedMobileAppsSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetFailedMobileAppsSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetRelatedAppsStatusReportRequestParameter undocumented
type DeviceManagementReportsGetRelatedAppsStatusReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetUserInstallStatusReportRequestParameter undocumented
type DeviceManagementReportsGetUserInstallStatusReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetCompliancePoliciesReportForDeviceRequestParameter undocumented
type DeviceManagementReportsGetCompliancePoliciesReportForDeviceRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetCompliancePolicyDevicesReportRequestParameter undocumented
type DeviceManagementReportsGetCompliancePolicyDevicesReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetCompliancePolicyDeviceSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetCompliancePolicyDeviceSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetComplianceSettingDetailsReportRequestParameter undocumented
type DeviceManagementReportsGetComplianceSettingDetailsReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetComplianceSettingsReportRequestParameter undocumented
type DeviceManagementReportsGetComplianceSettingsReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetConfigurationPoliciesReportForDeviceRequestParameter undocumented
type DeviceManagementReportsGetConfigurationPoliciesReportForDeviceRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetConfigurationPolicyDevicesReportRequestParameter undocumented
type DeviceManagementReportsGetConfigurationPolicyDevicesReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetConfigurationPolicyDeviceSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetConfigurationPolicyDeviceSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetConfigurationPolicySettingsDeviceSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetConfigurationPolicySettingsDeviceSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetConfigurationSettingDetailsReportRequestParameter undocumented
type DeviceManagementReportsGetConfigurationSettingDetailsReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetConfigurationSettingsReportRequestParameter undocumented
type DeviceManagementReportsGetConfigurationSettingsReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDeviceConfigurationPolicySettingsSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetDeviceConfigurationPolicySettingsSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDeviceConfigurationPolicyStatusSummaryRequestParameter undocumented
type DeviceManagementReportsGetDeviceConfigurationPolicyStatusSummaryRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetEncryptionReportForDevicesRequestParameter undocumented
type DeviceManagementReportsGetEncryptionReportForDevicesRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetQuietTimePolicyUsersReportRequestParameter undocumented
type DeviceManagementReportsGetQuietTimePolicyUsersReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
	// SkipToken undocumented
	SkipToken *string `json:"skipToken,omitempty"`
}

// DeviceManagementReportsGetQuietTimePolicyUserSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetQuietTimePolicyUserSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetEnrollmentConfigurationPoliciesByDeviceRequestParameter undocumented
type DeviceManagementReportsGetEnrollmentConfigurationPoliciesByDeviceRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetActiveMalwareReportRequestParameter undocumented
type DeviceManagementReportsGetActiveMalwareReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetActiveMalwareSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetActiveMalwareSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetMalwareSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetMalwareSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetUnhealthyDefenderAgentsReportRequestParameter undocumented
type DeviceManagementReportsGetUnhealthyDefenderAgentsReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetUnhealthyFirewallReportRequestParameter undocumented
type DeviceManagementReportsGetUnhealthyFirewallReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetUnhealthyFirewallSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetUnhealthyFirewallSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetAllCertificatesReportRequestParameter undocumented
type DeviceManagementReportsGetAllCertificatesReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetCertificatesReportRequestParameter undocumented
type DeviceManagementReportsGetCertificatesReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetZebraFotaDeploymentReportRequestParameter undocumented
type DeviceManagementReportsGetZebraFotaDeploymentReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetGroupPolicySettingsDeviceSettingsReportRequestParameter undocumented
type DeviceManagementReportsGetGroupPolicySettingsDeviceSettingsReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetMobileApplicationManagementAppConfigurationReportRequestParameter undocumented
type DeviceManagementReportsGetMobileApplicationManagementAppConfigurationReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetMobileApplicationManagementAppRegistrationSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetMobileApplicationManagementAppRegistrationSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetConfigManagerDevicePolicyStatusReportRequestParameter undocumented
type DeviceManagementReportsGetConfigManagerDevicePolicyStatusReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetRemoteAssistanceSessionsReportRequestParameter undocumented
type DeviceManagementReportsGetRemoteAssistanceSessionsReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetCachedReportRequestParameter undocumented
type DeviceManagementReportsGetCachedReportRequestParameter struct {
	// ID undocumented
	ID *string `json:"id,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
}

// DeviceManagementReportsGetCompliancePolicyNonComplianceReportRequestParameter undocumented
type DeviceManagementReportsGetCompliancePolicyNonComplianceReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetCompliancePolicyNonComplianceSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetCompliancePolicyNonComplianceSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetComplianceSettingNonComplianceReportRequestParameter undocumented
type DeviceManagementReportsGetComplianceSettingNonComplianceReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetConfigurationPolicyNonComplianceReportRequestParameter undocumented
type DeviceManagementReportsGetConfigurationPolicyNonComplianceReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetConfigurationPolicyNonComplianceSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetConfigurationPolicyNonComplianceSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetConfigurationSettingNonComplianceReportRequestParameter undocumented
type DeviceManagementReportsGetConfigurationSettingNonComplianceReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDeviceManagementIntentPerSettingContributingProfilesRequestParameter undocumented
type DeviceManagementReportsGetDeviceManagementIntentPerSettingContributingProfilesRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDeviceManagementIntentSettingsReportRequestParameter undocumented
type DeviceManagementReportsGetDeviceManagementIntentSettingsReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDeviceNonComplianceReportRequestParameter undocumented
type DeviceManagementReportsGetDeviceNonComplianceReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDevicePoliciesComplianceReportRequestParameter undocumented
type DeviceManagementReportsGetDevicePoliciesComplianceReportRequestParameter struct {
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDevicePolicySettingsComplianceReportRequestParameter undocumented
type DeviceManagementReportsGetDevicePolicySettingsComplianceReportRequestParameter struct {
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDevicesStatusByPolicyPlatformComplianceReportRequestParameter undocumented
type DeviceManagementReportsGetDevicesStatusByPolicyPlatformComplianceReportRequestParameter struct {
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDevicesStatusBySettingReportRequestParameter undocumented
type DeviceManagementReportsGetDevicesStatusBySettingReportRequestParameter struct {
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDeviceStatusByCompliacePolicyReportRequestParameter undocumented
type DeviceManagementReportsGetDeviceStatusByCompliacePolicyReportRequestParameter struct {
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDeviceStatusByCompliancePolicySettingReportRequestParameter undocumented
type DeviceManagementReportsGetDeviceStatusByCompliancePolicySettingReportRequestParameter struct {
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDeviceStatusSummaryByCompliacePolicyReportRequestParameter undocumented
type DeviceManagementReportsGetDeviceStatusSummaryByCompliacePolicyReportRequestParameter struct {
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDeviceStatusSummaryByCompliancePolicySettingsReportRequestParameter undocumented
type DeviceManagementReportsGetDeviceStatusSummaryByCompliancePolicySettingsReportRequestParameter struct {
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequestParameter undocumented
type DeviceManagementReportsGetDevicesWithoutCompliancePolicyReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetHistoricalReportRequestParameter undocumented
type DeviceManagementReportsGetHistoricalReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetNoncompliantDevicesAndSettingsReportRequestParameter undocumented
type DeviceManagementReportsGetNoncompliantDevicesAndSettingsReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetPolicyNonComplianceMetadataRequestParameter undocumented
type DeviceManagementReportsGetPolicyNonComplianceMetadataRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetPolicyNonComplianceReportRequestParameter undocumented
type DeviceManagementReportsGetPolicyNonComplianceReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetPolicyNonComplianceSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetPolicyNonComplianceSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetReportFiltersRequestParameter undocumented
type DeviceManagementReportsGetReportFiltersRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetSettingNonComplianceReportRequestParameter undocumented
type DeviceManagementReportsGetSettingNonComplianceReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetWindowsQualityUpdateAlertsPerPolicyPerDeviceReportRequestParameter undocumented
type DeviceManagementReportsGetWindowsQualityUpdateAlertsPerPolicyPerDeviceReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetWindowsQualityUpdateAlertSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetWindowsQualityUpdateAlertSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetWindowsUpdateAlertsPerPolicyPerDeviceReportRequestParameter undocumented
type DeviceManagementReportsGetWindowsUpdateAlertsPerPolicyPerDeviceReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementReportsGetWindowsUpdateAlertSummaryReportRequestParameter undocumented
type DeviceManagementReportsGetWindowsUpdateAlertSummaryReportRequestParameter struct {
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Select undocumented
	Select []string `json:"select,omitempty"`
	// Search undocumented
	Search *string `json:"search,omitempty"`
	// GroupBy undocumented
	GroupBy []string `json:"groupBy,omitempty"`
	// OrderBy undocumented
	OrderBy []string `json:"orderBy,omitempty"`
	// Skip undocumented
	Skip *int `json:"skip,omitempty"`
	// Top undocumented
	Top *int `json:"top,omitempty"`
	// SessionID undocumented
	SessionID *string `json:"sessionId,omitempty"`
	// Filter undocumented
	Filter *string `json:"filter,omitempty"`
}

// DeviceManagementResourceAccessProfileBaseAssignRequestParameter undocumented
type DeviceManagementResourceAccessProfileBaseAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []DeviceManagementResourceAccessProfileAssignment `json:"assignments,omitempty"`
}

// DeviceManagementReusablePolicySettingCloneRequestParameter undocumented
type DeviceManagementReusablePolicySettingCloneRequestParameter struct {
}

// DeviceManagementScriptAssignRequestParameter undocumented
type DeviceManagementScriptAssignRequestParameter struct {
	// DeviceManagementScriptGroupAssignments undocumented
	DeviceManagementScriptGroupAssignments []DeviceManagementScriptGroupAssignment `json:"deviceManagementScriptGroupAssignments,omitempty"`
	// DeviceManagementScriptAssignments undocumented
	DeviceManagementScriptAssignments []DeviceManagementScriptAssignment `json:"deviceManagementScriptAssignments,omitempty"`
}

// DeviceManagementTemplateCreateInstanceRequestParameter undocumented
type DeviceManagementTemplateCreateInstanceRequestParameter struct {
	// DisplayName undocumented
	DisplayName *string `json:"displayName,omitempty"`
	// Description undocumented
	Description *string `json:"description,omitempty"`
	// SettingsDelta undocumented
	SettingsDelta []DeviceManagementSettingInstance `json:"settingsDelta,omitempty"`
	// RoleScopeTagIDs undocumented
	RoleScopeTagIDs []string `json:"roleScopeTagIds,omitempty"`
}

// DeviceShellScriptAssignRequestParameter undocumented
type DeviceShellScriptAssignRequestParameter struct {
	// DeviceManagementScriptGroupAssignments undocumented
	DeviceManagementScriptGroupAssignments []DeviceManagementScriptGroupAssignment `json:"deviceManagementScriptGroupAssignments,omitempty"`
	// DeviceManagementScriptAssignments undocumented
	DeviceManagementScriptAssignments []DeviceManagementScriptAssignment `json:"deviceManagementScriptAssignments,omitempty"`
}

// Commands returns request builder for Command collection
func (b *DeviceRequestBuilder) Commands() *DeviceCommandsCollectionRequestBuilder {
	bb := &DeviceCommandsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/commands"
	return bb
}

// DeviceCommandsCollectionRequestBuilder is request builder for Command collection rcn
type DeviceCommandsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Command collection
func (b *DeviceCommandsCollectionRequestBuilder) Request() *DeviceCommandsCollectionRequest {
	return &DeviceCommandsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Command item
func (b *DeviceCommandsCollectionRequestBuilder) ID(id string) *CommandRequestBuilder {
	bb := &CommandRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCommandsCollectionRequest is request for Command collection
type DeviceCommandsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Command collection
func (r *DeviceCommandsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Command, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Command
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Command
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Command collection, max N pages
func (r *DeviceCommandsCollectionRequest) GetN(ctx context.Context, n int) ([]Command, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Command collection
func (r *DeviceCommandsCollectionRequest) Get(ctx context.Context) ([]Command, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Command collection
func (r *DeviceCommandsCollectionRequest) Add(ctx context.Context, reqObj *Command) (resObj *Command, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Extensions returns request builder for Extension collection
func (b *DeviceRequestBuilder) Extensions() *DeviceExtensionsCollectionRequestBuilder {
	bb := &DeviceExtensionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/extensions"
	return bb
}

// DeviceExtensionsCollectionRequestBuilder is request builder for Extension collection rcn
type DeviceExtensionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Extension collection
func (b *DeviceExtensionsCollectionRequestBuilder) Request() *DeviceExtensionsCollectionRequest {
	return &DeviceExtensionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Extension item
func (b *DeviceExtensionsCollectionRequestBuilder) ID(id string) *ExtensionRequestBuilder {
	bb := &ExtensionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceExtensionsCollectionRequest is request for Extension collection
type DeviceExtensionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Extension collection
func (r *DeviceExtensionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Extension, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Extension
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Extension
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Extension collection, max N pages
func (r *DeviceExtensionsCollectionRequest) GetN(ctx context.Context, n int) ([]Extension, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Extension collection
func (r *DeviceExtensionsCollectionRequest) Get(ctx context.Context) ([]Extension, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Extension collection
func (r *DeviceExtensionsCollectionRequest) Add(ctx context.Context, reqObj *Extension) (resObj *Extension, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MemberOf returns request builder for DirectoryObject collection
func (b *DeviceRequestBuilder) MemberOf() *DeviceMemberOfCollectionRequestBuilder {
	bb := &DeviceMemberOfCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/memberOf"
	return bb
}

// DeviceMemberOfCollectionRequestBuilder is request builder for DirectoryObject collection rcn
type DeviceMemberOfCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *DeviceMemberOfCollectionRequestBuilder) Request() *DeviceMemberOfCollectionRequest {
	return &DeviceMemberOfCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *DeviceMemberOfCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceMemberOfCollectionRequest is request for DirectoryObject collection
type DeviceMemberOfCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *DeviceMemberOfCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *DeviceMemberOfCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *DeviceMemberOfCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *DeviceMemberOfCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RegisteredOwners returns request builder for DirectoryObject collection
func (b *DeviceRequestBuilder) RegisteredOwners() *DeviceRegisteredOwnersCollectionRequestBuilder {
	bb := &DeviceRegisteredOwnersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/registeredOwners"
	return bb
}

// DeviceRegisteredOwnersCollectionRequestBuilder is request builder for DirectoryObject collection rcn
type DeviceRegisteredOwnersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *DeviceRegisteredOwnersCollectionRequestBuilder) Request() *DeviceRegisteredOwnersCollectionRequest {
	return &DeviceRegisteredOwnersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *DeviceRegisteredOwnersCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceRegisteredOwnersCollectionRequest is request for DirectoryObject collection
type DeviceRegisteredOwnersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *DeviceRegisteredOwnersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *DeviceRegisteredOwnersCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *DeviceRegisteredOwnersCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *DeviceRegisteredOwnersCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RegisteredUsers returns request builder for DirectoryObject collection
func (b *DeviceRequestBuilder) RegisteredUsers() *DeviceRegisteredUsersCollectionRequestBuilder {
	bb := &DeviceRegisteredUsersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/registeredUsers"
	return bb
}

// DeviceRegisteredUsersCollectionRequestBuilder is request builder for DirectoryObject collection rcn
type DeviceRegisteredUsersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *DeviceRegisteredUsersCollectionRequestBuilder) Request() *DeviceRegisteredUsersCollectionRequest {
	return &DeviceRegisteredUsersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *DeviceRegisteredUsersCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceRegisteredUsersCollectionRequest is request for DirectoryObject collection
type DeviceRegisteredUsersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *DeviceRegisteredUsersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *DeviceRegisteredUsersCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *DeviceRegisteredUsersCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *DeviceRegisteredUsersCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TransitiveMemberOf returns request builder for DirectoryObject collection
func (b *DeviceRequestBuilder) TransitiveMemberOf() *DeviceTransitiveMemberOfCollectionRequestBuilder {
	bb := &DeviceTransitiveMemberOfCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/transitiveMemberOf"
	return bb
}

// DeviceTransitiveMemberOfCollectionRequestBuilder is request builder for DirectoryObject collection rcn
type DeviceTransitiveMemberOfCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *DeviceTransitiveMemberOfCollectionRequestBuilder) Request() *DeviceTransitiveMemberOfCollectionRequest {
	return &DeviceTransitiveMemberOfCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *DeviceTransitiveMemberOfCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceTransitiveMemberOfCollectionRequest is request for DirectoryObject collection
type DeviceTransitiveMemberOfCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *DeviceTransitiveMemberOfCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *DeviceTransitiveMemberOfCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *DeviceTransitiveMemberOfCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *DeviceTransitiveMemberOfCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UsageRights returns request builder for UsageRight collection
func (b *DeviceRequestBuilder) UsageRights() *DeviceUsageRightsCollectionRequestBuilder {
	bb := &DeviceUsageRightsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/usageRights"
	return bb
}

// DeviceUsageRightsCollectionRequestBuilder is request builder for UsageRight collection rcn
type DeviceUsageRightsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UsageRight collection
func (b *DeviceUsageRightsCollectionRequestBuilder) Request() *DeviceUsageRightsCollectionRequest {
	return &DeviceUsageRightsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UsageRight item
func (b *DeviceUsageRightsCollectionRequestBuilder) ID(id string) *UsageRightRequestBuilder {
	bb := &UsageRightRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceUsageRightsCollectionRequest is request for UsageRight collection
type DeviceUsageRightsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UsageRight collection
func (r *DeviceUsageRightsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UsageRight, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UsageRight
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UsageRight
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UsageRight collection, max N pages
func (r *DeviceUsageRightsCollectionRequest) GetN(ctx context.Context, n int) ([]UsageRight, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UsageRight collection
func (r *DeviceUsageRightsCollectionRequest) Get(ctx context.Context) ([]UsageRight, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UsageRight collection
func (r *DeviceUsageRightsCollectionRequest) Add(ctx context.Context, reqObj *UsageRight) (resObj *UsageRight, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleScopeTags returns request builder for RoleScopeTag collection
func (b *DeviceAndAppManagementRoleAssignmentRequestBuilder) RoleScopeTags() *DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequestBuilder {
	bb := &DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleScopeTags"
	return bb
}

// DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequestBuilder is request builder for RoleScopeTag collection rcn
type DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RoleScopeTag collection
func (b *DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequestBuilder) Request() *DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequest {
	return &DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RoleScopeTag item
func (b *DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequestBuilder) ID(id string) *RoleScopeTagRequestBuilder {
	bb := &RoleScopeTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequest is request for RoleScopeTag collection
type DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for RoleScopeTag collection
func (r *DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]RoleScopeTag, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RoleScopeTag
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []RoleScopeTag
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for RoleScopeTag collection, max N pages
func (r *DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequest) GetN(ctx context.Context, n int) ([]RoleScopeTag, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for RoleScopeTag collection
func (r *DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequest) Get(ctx context.Context) ([]RoleScopeTag, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for RoleScopeTag collection
func (r *DeviceAndAppManagementRoleAssignmentRoleScopeTagsCollectionRequest) Add(ctx context.Context, reqObj *RoleScopeTag) (resObj *RoleScopeTag, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidManagedAppProtections returns request builder for AndroidManagedAppProtection collection
func (b *DeviceAppManagementRequestBuilder) AndroidManagedAppProtections() *DeviceAppManagementAndroidManagedAppProtectionsCollectionRequestBuilder {
	bb := &DeviceAppManagementAndroidManagedAppProtectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/androidManagedAppProtections"
	return bb
}

// DeviceAppManagementAndroidManagedAppProtectionsCollectionRequestBuilder is request builder for AndroidManagedAppProtection collection rcn
type DeviceAppManagementAndroidManagedAppProtectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidManagedAppProtection collection
func (b *DeviceAppManagementAndroidManagedAppProtectionsCollectionRequestBuilder) Request() *DeviceAppManagementAndroidManagedAppProtectionsCollectionRequest {
	return &DeviceAppManagementAndroidManagedAppProtectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidManagedAppProtection item
func (b *DeviceAppManagementAndroidManagedAppProtectionsCollectionRequestBuilder) ID(id string) *AndroidManagedAppProtectionRequestBuilder {
	bb := &AndroidManagedAppProtectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementAndroidManagedAppProtectionsCollectionRequest is request for AndroidManagedAppProtection collection
type DeviceAppManagementAndroidManagedAppProtectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidManagedAppProtection collection
func (r *DeviceAppManagementAndroidManagedAppProtectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidManagedAppProtection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidManagedAppProtection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidManagedAppProtection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidManagedAppProtection collection, max N pages
func (r *DeviceAppManagementAndroidManagedAppProtectionsCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidManagedAppProtection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidManagedAppProtection collection
func (r *DeviceAppManagementAndroidManagedAppProtectionsCollectionRequest) Get(ctx context.Context) ([]AndroidManagedAppProtection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidManagedAppProtection collection
func (r *DeviceAppManagementAndroidManagedAppProtectionsCollectionRequest) Add(ctx context.Context, reqObj *AndroidManagedAppProtection) (resObj *AndroidManagedAppProtection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DefaultManagedAppProtections returns request builder for DefaultManagedAppProtection collection
func (b *DeviceAppManagementRequestBuilder) DefaultManagedAppProtections() *DeviceAppManagementDefaultManagedAppProtectionsCollectionRequestBuilder {
	bb := &DeviceAppManagementDefaultManagedAppProtectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/defaultManagedAppProtections"
	return bb
}

// DeviceAppManagementDefaultManagedAppProtectionsCollectionRequestBuilder is request builder for DefaultManagedAppProtection collection rcn
type DeviceAppManagementDefaultManagedAppProtectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DefaultManagedAppProtection collection
func (b *DeviceAppManagementDefaultManagedAppProtectionsCollectionRequestBuilder) Request() *DeviceAppManagementDefaultManagedAppProtectionsCollectionRequest {
	return &DeviceAppManagementDefaultManagedAppProtectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DefaultManagedAppProtection item
func (b *DeviceAppManagementDefaultManagedAppProtectionsCollectionRequestBuilder) ID(id string) *DefaultManagedAppProtectionRequestBuilder {
	bb := &DefaultManagedAppProtectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementDefaultManagedAppProtectionsCollectionRequest is request for DefaultManagedAppProtection collection
type DeviceAppManagementDefaultManagedAppProtectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DefaultManagedAppProtection collection
func (r *DeviceAppManagementDefaultManagedAppProtectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DefaultManagedAppProtection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DefaultManagedAppProtection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DefaultManagedAppProtection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DefaultManagedAppProtection collection, max N pages
func (r *DeviceAppManagementDefaultManagedAppProtectionsCollectionRequest) GetN(ctx context.Context, n int) ([]DefaultManagedAppProtection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DefaultManagedAppProtection collection
func (r *DeviceAppManagementDefaultManagedAppProtectionsCollectionRequest) Get(ctx context.Context) ([]DefaultManagedAppProtection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DefaultManagedAppProtection collection
func (r *DeviceAppManagementDefaultManagedAppProtectionsCollectionRequest) Add(ctx context.Context, reqObj *DefaultManagedAppProtection) (resObj *DefaultManagedAppProtection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceAppManagementTasks returns request builder for DeviceAppManagementTask collection
func (b *DeviceAppManagementRequestBuilder) DeviceAppManagementTasks() *DeviceAppManagementDeviceAppManagementTasksCollectionRequestBuilder {
	bb := &DeviceAppManagementDeviceAppManagementTasksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceAppManagementTasks"
	return bb
}

// DeviceAppManagementDeviceAppManagementTasksCollectionRequestBuilder is request builder for DeviceAppManagementTask collection rcn
type DeviceAppManagementDeviceAppManagementTasksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceAppManagementTask collection
func (b *DeviceAppManagementDeviceAppManagementTasksCollectionRequestBuilder) Request() *DeviceAppManagementDeviceAppManagementTasksCollectionRequest {
	return &DeviceAppManagementDeviceAppManagementTasksCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceAppManagementTask item
func (b *DeviceAppManagementDeviceAppManagementTasksCollectionRequestBuilder) ID(id string) *DeviceAppManagementTaskRequestBuilder {
	bb := &DeviceAppManagementTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementDeviceAppManagementTasksCollectionRequest is request for DeviceAppManagementTask collection
type DeviceAppManagementDeviceAppManagementTasksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceAppManagementTask collection
func (r *DeviceAppManagementDeviceAppManagementTasksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceAppManagementTask, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceAppManagementTask
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceAppManagementTask
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceAppManagementTask collection, max N pages
func (r *DeviceAppManagementDeviceAppManagementTasksCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceAppManagementTask, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceAppManagementTask collection
func (r *DeviceAppManagementDeviceAppManagementTasksCollectionRequest) Get(ctx context.Context) ([]DeviceAppManagementTask, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceAppManagementTask collection
func (r *DeviceAppManagementDeviceAppManagementTasksCollectionRequest) Add(ctx context.Context, reqObj *DeviceAppManagementTask) (resObj *DeviceAppManagementTask, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EnterpriseCodeSigningCertificates returns request builder for EnterpriseCodeSigningCertificate collection
func (b *DeviceAppManagementRequestBuilder) EnterpriseCodeSigningCertificates() *DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequestBuilder {
	bb := &DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/enterpriseCodeSigningCertificates"
	return bb
}

// DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequestBuilder is request builder for EnterpriseCodeSigningCertificate collection rcn
type DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EnterpriseCodeSigningCertificate collection
func (b *DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequestBuilder) Request() *DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequest {
	return &DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EnterpriseCodeSigningCertificate item
func (b *DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequestBuilder) ID(id string) *EnterpriseCodeSigningCertificateRequestBuilder {
	bb := &EnterpriseCodeSigningCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequest is request for EnterpriseCodeSigningCertificate collection
type DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EnterpriseCodeSigningCertificate collection
func (r *DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EnterpriseCodeSigningCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EnterpriseCodeSigningCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EnterpriseCodeSigningCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EnterpriseCodeSigningCertificate collection, max N pages
func (r *DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequest) GetN(ctx context.Context, n int) ([]EnterpriseCodeSigningCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EnterpriseCodeSigningCertificate collection
func (r *DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequest) Get(ctx context.Context) ([]EnterpriseCodeSigningCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EnterpriseCodeSigningCertificate collection
func (r *DeviceAppManagementEnterpriseCodeSigningCertificatesCollectionRequest) Add(ctx context.Context, reqObj *EnterpriseCodeSigningCertificate) (resObj *EnterpriseCodeSigningCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSLobAppProvisioningConfigurations returns request builder for IOSLobAppProvisioningConfiguration collection
func (b *DeviceAppManagementRequestBuilder) IOSLobAppProvisioningConfigurations() *DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequestBuilder {
	bb := &DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/iosLobAppProvisioningConfigurations"
	return bb
}

// DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequestBuilder is request builder for IOSLobAppProvisioningConfiguration collection rcn
type DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSLobAppProvisioningConfiguration collection
func (b *DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequestBuilder) Request() *DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequest {
	return &DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSLobAppProvisioningConfiguration item
func (b *DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequestBuilder) ID(id string) *IOSLobAppProvisioningConfigurationRequestBuilder {
	bb := &IOSLobAppProvisioningConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequest is request for IOSLobAppProvisioningConfiguration collection
type DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSLobAppProvisioningConfiguration collection
func (r *DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSLobAppProvisioningConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSLobAppProvisioningConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSLobAppProvisioningConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSLobAppProvisioningConfiguration collection, max N pages
func (r *DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]IOSLobAppProvisioningConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSLobAppProvisioningConfiguration collection
func (r *DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequest) Get(ctx context.Context) ([]IOSLobAppProvisioningConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSLobAppProvisioningConfiguration collection
func (r *DeviceAppManagementIOSLobAppProvisioningConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *IOSLobAppProvisioningConfiguration) (resObj *IOSLobAppProvisioningConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSManagedAppProtections returns request builder for IOSManagedAppProtection collection
func (b *DeviceAppManagementRequestBuilder) IOSManagedAppProtections() *DeviceAppManagementIOSManagedAppProtectionsCollectionRequestBuilder {
	bb := &DeviceAppManagementIOSManagedAppProtectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/iosManagedAppProtections"
	return bb
}

// DeviceAppManagementIOSManagedAppProtectionsCollectionRequestBuilder is request builder for IOSManagedAppProtection collection rcn
type DeviceAppManagementIOSManagedAppProtectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSManagedAppProtection collection
func (b *DeviceAppManagementIOSManagedAppProtectionsCollectionRequestBuilder) Request() *DeviceAppManagementIOSManagedAppProtectionsCollectionRequest {
	return &DeviceAppManagementIOSManagedAppProtectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSManagedAppProtection item
func (b *DeviceAppManagementIOSManagedAppProtectionsCollectionRequestBuilder) ID(id string) *IOSManagedAppProtectionRequestBuilder {
	bb := &IOSManagedAppProtectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementIOSManagedAppProtectionsCollectionRequest is request for IOSManagedAppProtection collection
type DeviceAppManagementIOSManagedAppProtectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSManagedAppProtection collection
func (r *DeviceAppManagementIOSManagedAppProtectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSManagedAppProtection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSManagedAppProtection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSManagedAppProtection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSManagedAppProtection collection, max N pages
func (r *DeviceAppManagementIOSManagedAppProtectionsCollectionRequest) GetN(ctx context.Context, n int) ([]IOSManagedAppProtection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSManagedAppProtection collection
func (r *DeviceAppManagementIOSManagedAppProtectionsCollectionRequest) Get(ctx context.Context) ([]IOSManagedAppProtection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSManagedAppProtection collection
func (r *DeviceAppManagementIOSManagedAppProtectionsCollectionRequest) Add(ctx context.Context, reqObj *IOSManagedAppProtection) (resObj *IOSManagedAppProtection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedAppPolicies returns request builder for ManagedAppPolicy collection
func (b *DeviceAppManagementRequestBuilder) ManagedAppPolicies() *DeviceAppManagementManagedAppPoliciesCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedAppPolicies"
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionRequestBuilder is request builder for ManagedAppPolicy collection rcn
type DeviceAppManagementManagedAppPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAppPolicy collection
func (b *DeviceAppManagementManagedAppPoliciesCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppPoliciesCollectionRequest {
	return &DeviceAppManagementManagedAppPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAppPolicy item
func (b *DeviceAppManagementManagedAppPoliciesCollectionRequestBuilder) ID(id string) *ManagedAppPolicyRequestBuilder {
	bb := &ManagedAppPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionRequest is request for ManagedAppPolicy collection
type DeviceAppManagementManagedAppPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAppPolicy collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAppPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAppPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAppPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAppPolicy collection, max N pages
func (r *DeviceAppManagementManagedAppPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAppPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAppPolicy collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionRequest) Get(ctx context.Context) ([]ManagedAppPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAppPolicy collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionRequest) Add(ctx context.Context, reqObj *ManagedAppPolicy) (resObj *ManagedAppPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedAppRegistrations returns request builder for ManagedAppRegistration collection
func (b *DeviceAppManagementRequestBuilder) ManagedAppRegistrations() *DeviceAppManagementManagedAppRegistrationsCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppRegistrationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedAppRegistrations"
	return bb
}

// DeviceAppManagementManagedAppRegistrationsCollectionRequestBuilder is request builder for ManagedAppRegistration collection rcn
type DeviceAppManagementManagedAppRegistrationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAppRegistration collection
func (b *DeviceAppManagementManagedAppRegistrationsCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppRegistrationsCollectionRequest {
	return &DeviceAppManagementManagedAppRegistrationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAppRegistration item
func (b *DeviceAppManagementManagedAppRegistrationsCollectionRequestBuilder) ID(id string) *ManagedAppRegistrationRequestBuilder {
	bb := &ManagedAppRegistrationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppRegistrationsCollectionRequest is request for ManagedAppRegistration collection
type DeviceAppManagementManagedAppRegistrationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAppRegistration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAppRegistration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAppRegistration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAppRegistration collection, max N pages
func (r *DeviceAppManagementManagedAppRegistrationsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAppRegistration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionRequest) Get(ctx context.Context) ([]ManagedAppRegistration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionRequest) Add(ctx context.Context, reqObj *ManagedAppRegistration) (resObj *ManagedAppRegistration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedAppStatuses returns request builder for ManagedAppStatus collection
func (b *DeviceAppManagementRequestBuilder) ManagedAppStatuses() *DeviceAppManagementManagedAppStatusesCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedAppStatuses"
	return bb
}

// DeviceAppManagementManagedAppStatusesCollectionRequestBuilder is request builder for ManagedAppStatus collection rcn
type DeviceAppManagementManagedAppStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAppStatus collection
func (b *DeviceAppManagementManagedAppStatusesCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppStatusesCollectionRequest {
	return &DeviceAppManagementManagedAppStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAppStatus item
func (b *DeviceAppManagementManagedAppStatusesCollectionRequestBuilder) ID(id string) *ManagedAppStatusRequestBuilder {
	bb := &ManagedAppStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppStatusesCollectionRequest is request for ManagedAppStatus collection
type DeviceAppManagementManagedAppStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAppStatus collection
func (r *DeviceAppManagementManagedAppStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAppStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAppStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAppStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAppStatus collection, max N pages
func (r *DeviceAppManagementManagedAppStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAppStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAppStatus collection
func (r *DeviceAppManagementManagedAppStatusesCollectionRequest) Get(ctx context.Context) ([]ManagedAppStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAppStatus collection
func (r *DeviceAppManagementManagedAppStatusesCollectionRequest) Add(ctx context.Context, reqObj *ManagedAppStatus) (resObj *ManagedAppStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedEBookCategories returns request builder for ManagedEBookCategory collection
func (b *DeviceAppManagementRequestBuilder) ManagedEBookCategories() *DeviceAppManagementManagedEBookCategoriesCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedEBookCategoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedEBookCategories"
	return bb
}

// DeviceAppManagementManagedEBookCategoriesCollectionRequestBuilder is request builder for ManagedEBookCategory collection rcn
type DeviceAppManagementManagedEBookCategoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedEBookCategory collection
func (b *DeviceAppManagementManagedEBookCategoriesCollectionRequestBuilder) Request() *DeviceAppManagementManagedEBookCategoriesCollectionRequest {
	return &DeviceAppManagementManagedEBookCategoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedEBookCategory item
func (b *DeviceAppManagementManagedEBookCategoriesCollectionRequestBuilder) ID(id string) *ManagedEBookCategoryRequestBuilder {
	bb := &ManagedEBookCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedEBookCategoriesCollectionRequest is request for ManagedEBookCategory collection
type DeviceAppManagementManagedEBookCategoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedEBookCategory collection
func (r *DeviceAppManagementManagedEBookCategoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedEBookCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedEBookCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedEBookCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedEBookCategory collection, max N pages
func (r *DeviceAppManagementManagedEBookCategoriesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedEBookCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedEBookCategory collection
func (r *DeviceAppManagementManagedEBookCategoriesCollectionRequest) Get(ctx context.Context) ([]ManagedEBookCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedEBookCategory collection
func (r *DeviceAppManagementManagedEBookCategoriesCollectionRequest) Add(ctx context.Context, reqObj *ManagedEBookCategory) (resObj *ManagedEBookCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedEBooks returns request builder for ManagedEBook collection
func (b *DeviceAppManagementRequestBuilder) ManagedEBooks() *DeviceAppManagementManagedEBooksCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedEBooksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedEBooks"
	return bb
}

// DeviceAppManagementManagedEBooksCollectionRequestBuilder is request builder for ManagedEBook collection rcn
type DeviceAppManagementManagedEBooksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedEBook collection
func (b *DeviceAppManagementManagedEBooksCollectionRequestBuilder) Request() *DeviceAppManagementManagedEBooksCollectionRequest {
	return &DeviceAppManagementManagedEBooksCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedEBook item
func (b *DeviceAppManagementManagedEBooksCollectionRequestBuilder) ID(id string) *ManagedEBookRequestBuilder {
	bb := &ManagedEBookRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedEBooksCollectionRequest is request for ManagedEBook collection
type DeviceAppManagementManagedEBooksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedEBook collection
func (r *DeviceAppManagementManagedEBooksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedEBook, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedEBook
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedEBook
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedEBook collection, max N pages
func (r *DeviceAppManagementManagedEBooksCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedEBook, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedEBook collection
func (r *DeviceAppManagementManagedEBooksCollectionRequest) Get(ctx context.Context) ([]ManagedEBook, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedEBook collection
func (r *DeviceAppManagementManagedEBooksCollectionRequest) Add(ctx context.Context, reqObj *ManagedEBook) (resObj *ManagedEBook, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MDMWindowsInformationProtectionPolicies returns request builder for MDMWindowsInformationProtectionPolicy collection
func (b *DeviceAppManagementRequestBuilder) MDMWindowsInformationProtectionPolicies() *DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequestBuilder {
	bb := &DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/mdmWindowsInformationProtectionPolicies"
	return bb
}

// DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequestBuilder is request builder for MDMWindowsInformationProtectionPolicy collection rcn
type DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MDMWindowsInformationProtectionPolicy collection
func (b *DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequestBuilder) Request() *DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequest {
	return &DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MDMWindowsInformationProtectionPolicy item
func (b *DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequestBuilder) ID(id string) *MDMWindowsInformationProtectionPolicyRequestBuilder {
	bb := &MDMWindowsInformationProtectionPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequest is request for MDMWindowsInformationProtectionPolicy collection
type DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MDMWindowsInformationProtectionPolicy collection
func (r *DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MDMWindowsInformationProtectionPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MDMWindowsInformationProtectionPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MDMWindowsInformationProtectionPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MDMWindowsInformationProtectionPolicy collection, max N pages
func (r *DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]MDMWindowsInformationProtectionPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MDMWindowsInformationProtectionPolicy collection
func (r *DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequest) Get(ctx context.Context) ([]MDMWindowsInformationProtectionPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MDMWindowsInformationProtectionPolicy collection
func (r *DeviceAppManagementMDMWindowsInformationProtectionPoliciesCollectionRequest) Add(ctx context.Context, reqObj *MDMWindowsInformationProtectionPolicy) (resObj *MDMWindowsInformationProtectionPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MobileAppCategories returns request builder for MobileAppCategory collection
func (b *DeviceAppManagementRequestBuilder) MobileAppCategories() *DeviceAppManagementMobileAppCategoriesCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppCategoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/mobileAppCategories"
	return bb
}

// DeviceAppManagementMobileAppCategoriesCollectionRequestBuilder is request builder for MobileAppCategory collection rcn
type DeviceAppManagementMobileAppCategoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MobileAppCategory collection
func (b *DeviceAppManagementMobileAppCategoriesCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppCategoriesCollectionRequest {
	return &DeviceAppManagementMobileAppCategoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MobileAppCategory item
func (b *DeviceAppManagementMobileAppCategoriesCollectionRequestBuilder) ID(id string) *MobileAppCategoryRequestBuilder {
	bb := &MobileAppCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppCategoriesCollectionRequest is request for MobileAppCategory collection
type DeviceAppManagementMobileAppCategoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MobileAppCategory collection
func (r *DeviceAppManagementMobileAppCategoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MobileAppCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MobileAppCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MobileAppCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MobileAppCategory collection, max N pages
func (r *DeviceAppManagementMobileAppCategoriesCollectionRequest) GetN(ctx context.Context, n int) ([]MobileAppCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MobileAppCategory collection
func (r *DeviceAppManagementMobileAppCategoriesCollectionRequest) Get(ctx context.Context) ([]MobileAppCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MobileAppCategory collection
func (r *DeviceAppManagementMobileAppCategoriesCollectionRequest) Add(ctx context.Context, reqObj *MobileAppCategory) (resObj *MobileAppCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MobileAppConfigurations returns request builder for ManagedDeviceMobileAppConfiguration collection
func (b *DeviceAppManagementRequestBuilder) MobileAppConfigurations() *DeviceAppManagementMobileAppConfigurationsCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/mobileAppConfigurations"
	return bb
}

// DeviceAppManagementMobileAppConfigurationsCollectionRequestBuilder is request builder for ManagedDeviceMobileAppConfiguration collection rcn
type DeviceAppManagementMobileAppConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceMobileAppConfiguration collection
func (b *DeviceAppManagementMobileAppConfigurationsCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppConfigurationsCollectionRequest {
	return &DeviceAppManagementMobileAppConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceMobileAppConfiguration item
func (b *DeviceAppManagementMobileAppConfigurationsCollectionRequestBuilder) ID(id string) *ManagedDeviceMobileAppConfigurationRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppConfigurationsCollectionRequest is request for ManagedDeviceMobileAppConfiguration collection
type DeviceAppManagementMobileAppConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceMobileAppConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceMobileAppConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceMobileAppConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceMobileAppConfiguration collection, max N pages
func (r *DeviceAppManagementMobileAppConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceMobileAppConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceMobileAppConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceMobileAppConfiguration) (resObj *ManagedDeviceMobileAppConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MobileApps returns request builder for MobileApp collection
func (b *DeviceAppManagementRequestBuilder) MobileApps() *DeviceAppManagementMobileAppsCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/mobileApps"
	return bb
}

// DeviceAppManagementMobileAppsCollectionRequestBuilder is request builder for MobileApp collection rcn
type DeviceAppManagementMobileAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MobileApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MobileApp item
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) ID(id string) *MobileAppRequestBuilder {
	bb := &MobileAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionRequest is request for MobileApp collection
type DeviceAppManagementMobileAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MobileApp collection
func (r *DeviceAppManagementMobileAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MobileApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MobileApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MobileApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MobileApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionRequest) GetN(ctx context.Context, n int) ([]MobileApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MobileApp collection
func (r *DeviceAppManagementMobileAppsCollectionRequest) Get(ctx context.Context) ([]MobileApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MobileApp collection
func (r *DeviceAppManagementMobileAppsCollectionRequest) Add(ctx context.Context, reqObj *MobileApp) (resObj *MobileApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// PolicySets returns request builder for PolicySet collection
func (b *DeviceAppManagementRequestBuilder) PolicySets() *DeviceAppManagementPolicySetsCollectionRequestBuilder {
	bb := &DeviceAppManagementPolicySetsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/policySets"
	return bb
}

// DeviceAppManagementPolicySetsCollectionRequestBuilder is request builder for PolicySet collection rcn
type DeviceAppManagementPolicySetsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PolicySet collection
func (b *DeviceAppManagementPolicySetsCollectionRequestBuilder) Request() *DeviceAppManagementPolicySetsCollectionRequest {
	return &DeviceAppManagementPolicySetsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PolicySet item
func (b *DeviceAppManagementPolicySetsCollectionRequestBuilder) ID(id string) *PolicySetRequestBuilder {
	bb := &PolicySetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementPolicySetsCollectionRequest is request for PolicySet collection
type DeviceAppManagementPolicySetsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PolicySet collection
func (r *DeviceAppManagementPolicySetsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PolicySet, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PolicySet
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PolicySet
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PolicySet collection, max N pages
func (r *DeviceAppManagementPolicySetsCollectionRequest) GetN(ctx context.Context, n int) ([]PolicySet, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PolicySet collection
func (r *DeviceAppManagementPolicySetsCollectionRequest) Get(ctx context.Context) ([]PolicySet, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PolicySet collection
func (r *DeviceAppManagementPolicySetsCollectionRequest) Add(ctx context.Context, reqObj *PolicySet) (resObj *PolicySet, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SymantecCodeSigningCertificate is navigation property rn
func (b *DeviceAppManagementRequestBuilder) SymantecCodeSigningCertificate() *SymantecCodeSigningCertificateRequestBuilder {
	bb := &SymantecCodeSigningCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/symantecCodeSigningCertificate"
	return bb
}

// TargetedManagedAppConfigurations returns request builder for TargetedManagedAppConfiguration collection
func (b *DeviceAppManagementRequestBuilder) TargetedManagedAppConfigurations() *DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequestBuilder {
	bb := &DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/targetedManagedAppConfigurations"
	return bb
}

// DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequestBuilder is request builder for TargetedManagedAppConfiguration collection rcn
type DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TargetedManagedAppConfiguration collection
func (b *DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequestBuilder) Request() *DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequest {
	return &DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TargetedManagedAppConfiguration item
func (b *DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequestBuilder) ID(id string) *TargetedManagedAppConfigurationRequestBuilder {
	bb := &TargetedManagedAppConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequest is request for TargetedManagedAppConfiguration collection
type DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TargetedManagedAppConfiguration collection
func (r *DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TargetedManagedAppConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TargetedManagedAppConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TargetedManagedAppConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TargetedManagedAppConfiguration collection, max N pages
func (r *DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]TargetedManagedAppConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TargetedManagedAppConfiguration collection
func (r *DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequest) Get(ctx context.Context) ([]TargetedManagedAppConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TargetedManagedAppConfiguration collection
func (r *DeviceAppManagementTargetedManagedAppConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *TargetedManagedAppConfiguration) (resObj *TargetedManagedAppConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// VPPTokens returns request builder for VPPToken collection
func (b *DeviceAppManagementRequestBuilder) VPPTokens() *DeviceAppManagementVPPTokensCollectionRequestBuilder {
	bb := &DeviceAppManagementVPPTokensCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/vppTokens"
	return bb
}

// DeviceAppManagementVPPTokensCollectionRequestBuilder is request builder for VPPToken collection rcn
type DeviceAppManagementVPPTokensCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for VPPToken collection
func (b *DeviceAppManagementVPPTokensCollectionRequestBuilder) Request() *DeviceAppManagementVPPTokensCollectionRequest {
	return &DeviceAppManagementVPPTokensCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for VPPToken item
func (b *DeviceAppManagementVPPTokensCollectionRequestBuilder) ID(id string) *VPPTokenRequestBuilder {
	bb := &VPPTokenRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementVPPTokensCollectionRequest is request for VPPToken collection
type DeviceAppManagementVPPTokensCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for VPPToken collection
func (r *DeviceAppManagementVPPTokensCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]VPPToken, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []VPPToken
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []VPPToken
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for VPPToken collection, max N pages
func (r *DeviceAppManagementVPPTokensCollectionRequest) GetN(ctx context.Context, n int) ([]VPPToken, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for VPPToken collection
func (r *DeviceAppManagementVPPTokensCollectionRequest) Get(ctx context.Context) ([]VPPToken, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for VPPToken collection
func (r *DeviceAppManagementVPPTokensCollectionRequest) Add(ctx context.Context, reqObj *VPPToken) (resObj *VPPToken, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WdacSupplementalPolicies returns request builder for WindowsDefenderApplicationControlSupplementalPolicy collection
func (b *DeviceAppManagementRequestBuilder) WdacSupplementalPolicies() *DeviceAppManagementWdacSupplementalPoliciesCollectionRequestBuilder {
	bb := &DeviceAppManagementWdacSupplementalPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/wdacSupplementalPolicies"
	return bb
}

// DeviceAppManagementWdacSupplementalPoliciesCollectionRequestBuilder is request builder for WindowsDefenderApplicationControlSupplementalPolicy collection rcn
type DeviceAppManagementWdacSupplementalPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsDefenderApplicationControlSupplementalPolicy collection
func (b *DeviceAppManagementWdacSupplementalPoliciesCollectionRequestBuilder) Request() *DeviceAppManagementWdacSupplementalPoliciesCollectionRequest {
	return &DeviceAppManagementWdacSupplementalPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsDefenderApplicationControlSupplementalPolicy item
func (b *DeviceAppManagementWdacSupplementalPoliciesCollectionRequestBuilder) ID(id string) *WindowsDefenderApplicationControlSupplementalPolicyRequestBuilder {
	bb := &WindowsDefenderApplicationControlSupplementalPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementWdacSupplementalPoliciesCollectionRequest is request for WindowsDefenderApplicationControlSupplementalPolicy collection
type DeviceAppManagementWdacSupplementalPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsDefenderApplicationControlSupplementalPolicy collection
func (r *DeviceAppManagementWdacSupplementalPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsDefenderApplicationControlSupplementalPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsDefenderApplicationControlSupplementalPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsDefenderApplicationControlSupplementalPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsDefenderApplicationControlSupplementalPolicy collection, max N pages
func (r *DeviceAppManagementWdacSupplementalPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsDefenderApplicationControlSupplementalPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsDefenderApplicationControlSupplementalPolicy collection
func (r *DeviceAppManagementWdacSupplementalPoliciesCollectionRequest) Get(ctx context.Context) ([]WindowsDefenderApplicationControlSupplementalPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsDefenderApplicationControlSupplementalPolicy collection
func (r *DeviceAppManagementWdacSupplementalPoliciesCollectionRequest) Add(ctx context.Context, reqObj *WindowsDefenderApplicationControlSupplementalPolicy) (resObj *WindowsDefenderApplicationControlSupplementalPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsInformationProtectionDeviceRegistrations returns request builder for WindowsInformationProtectionDeviceRegistration collection
func (b *DeviceAppManagementRequestBuilder) WindowsInformationProtectionDeviceRegistrations() *DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequestBuilder {
	bb := &DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsInformationProtectionDeviceRegistrations"
	return bb
}

// DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequestBuilder is request builder for WindowsInformationProtectionDeviceRegistration collection rcn
type DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtectionDeviceRegistration collection
func (b *DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequestBuilder) Request() *DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequest {
	return &DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtectionDeviceRegistration item
func (b *DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionDeviceRegistrationRequestBuilder {
	bb := &WindowsInformationProtectionDeviceRegistrationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequest is request for WindowsInformationProtectionDeviceRegistration collection
type DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtectionDeviceRegistration collection
func (r *DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtectionDeviceRegistration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtectionDeviceRegistration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtectionDeviceRegistration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtectionDeviceRegistration collection, max N pages
func (r *DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtectionDeviceRegistration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtectionDeviceRegistration collection
func (r *DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtectionDeviceRegistration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtectionDeviceRegistration collection
func (r *DeviceAppManagementWindowsInformationProtectionDeviceRegistrationsCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtectionDeviceRegistration) (resObj *WindowsInformationProtectionDeviceRegistration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsInformationProtectionPolicies returns request builder for WindowsInformationProtectionPolicy collection
func (b *DeviceAppManagementRequestBuilder) WindowsInformationProtectionPolicies() *DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequestBuilder {
	bb := &DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsInformationProtectionPolicies"
	return bb
}

// DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequestBuilder is request builder for WindowsInformationProtectionPolicy collection rcn
type DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtectionPolicy collection
func (b *DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequestBuilder) Request() *DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequest {
	return &DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtectionPolicy item
func (b *DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionPolicyRequestBuilder {
	bb := &WindowsInformationProtectionPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequest is request for WindowsInformationProtectionPolicy collection
type DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtectionPolicy collection
func (r *DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtectionPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtectionPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtectionPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtectionPolicy collection, max N pages
func (r *DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtectionPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtectionPolicy collection
func (r *DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtectionPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtectionPolicy collection
func (r *DeviceAppManagementWindowsInformationProtectionPoliciesCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtectionPolicy) (resObj *WindowsInformationProtectionPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsInformationProtectionWipeActions returns request builder for WindowsInformationProtectionWipeAction collection
func (b *DeviceAppManagementRequestBuilder) WindowsInformationProtectionWipeActions() *DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequestBuilder {
	bb := &DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsInformationProtectionWipeActions"
	return bb
}

// DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequestBuilder is request builder for WindowsInformationProtectionWipeAction collection rcn
type DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtectionWipeAction collection
func (b *DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequestBuilder) Request() *DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequest {
	return &DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtectionWipeAction item
func (b *DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionWipeActionRequestBuilder {
	bb := &WindowsInformationProtectionWipeActionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequest is request for WindowsInformationProtectionWipeAction collection
type DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtectionWipeAction collection
func (r *DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtectionWipeAction, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtectionWipeAction
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtectionWipeAction
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtectionWipeAction collection, max N pages
func (r *DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtectionWipeAction, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtectionWipeAction collection
func (r *DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtectionWipeAction, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtectionWipeAction collection
func (r *DeviceAppManagementWindowsInformationProtectionWipeActionsCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtectionWipeAction) (resObj *WindowsInformationProtectionWipeAction, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsManagedAppProtections returns request builder for WindowsManagedAppProtection collection
func (b *DeviceAppManagementRequestBuilder) WindowsManagedAppProtections() *DeviceAppManagementWindowsManagedAppProtectionsCollectionRequestBuilder {
	bb := &DeviceAppManagementWindowsManagedAppProtectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsManagedAppProtections"
	return bb
}

// DeviceAppManagementWindowsManagedAppProtectionsCollectionRequestBuilder is request builder for WindowsManagedAppProtection collection rcn
type DeviceAppManagementWindowsManagedAppProtectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsManagedAppProtection collection
func (b *DeviceAppManagementWindowsManagedAppProtectionsCollectionRequestBuilder) Request() *DeviceAppManagementWindowsManagedAppProtectionsCollectionRequest {
	return &DeviceAppManagementWindowsManagedAppProtectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsManagedAppProtection item
func (b *DeviceAppManagementWindowsManagedAppProtectionsCollectionRequestBuilder) ID(id string) *WindowsManagedAppProtectionRequestBuilder {
	bb := &WindowsManagedAppProtectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementWindowsManagedAppProtectionsCollectionRequest is request for WindowsManagedAppProtection collection
type DeviceAppManagementWindowsManagedAppProtectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsManagedAppProtection collection
func (r *DeviceAppManagementWindowsManagedAppProtectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsManagedAppProtection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsManagedAppProtection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsManagedAppProtection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsManagedAppProtection collection, max N pages
func (r *DeviceAppManagementWindowsManagedAppProtectionsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsManagedAppProtection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsManagedAppProtection collection
func (r *DeviceAppManagementWindowsManagedAppProtectionsCollectionRequest) Get(ctx context.Context) ([]WindowsManagedAppProtection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsManagedAppProtection collection
func (r *DeviceAppManagementWindowsManagedAppProtectionsCollectionRequest) Add(ctx context.Context, reqObj *WindowsManagedAppProtection) (resObj *WindowsManagedAppProtection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsManagementApp is navigation property rn
func (b *DeviceAppManagementRequestBuilder) WindowsManagementApp() *WindowsManagementAppRequestBuilder {
	bb := &WindowsManagementAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsManagementApp"
	return bb
}

// Assignments returns request builder for DeviceCompliancePolicyAssignment collection
func (b *DeviceCompliancePolicyRequestBuilder) Assignments() *DeviceCompliancePolicyAssignmentsCollectionRequestBuilder {
	bb := &DeviceCompliancePolicyAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceCompliancePolicyAssignmentsCollectionRequestBuilder is request builder for DeviceCompliancePolicyAssignment collection rcn
type DeviceCompliancePolicyAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceCompliancePolicyAssignment collection
func (b *DeviceCompliancePolicyAssignmentsCollectionRequestBuilder) Request() *DeviceCompliancePolicyAssignmentsCollectionRequest {
	return &DeviceCompliancePolicyAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceCompliancePolicyAssignment item
func (b *DeviceCompliancePolicyAssignmentsCollectionRequestBuilder) ID(id string) *DeviceCompliancePolicyAssignmentRequestBuilder {
	bb := &DeviceCompliancePolicyAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCompliancePolicyAssignmentsCollectionRequest is request for DeviceCompliancePolicyAssignment collection
type DeviceCompliancePolicyAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceCompliancePolicyAssignment collection
func (r *DeviceCompliancePolicyAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceCompliancePolicyAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceCompliancePolicyAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceCompliancePolicyAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceCompliancePolicyAssignment collection, max N pages
func (r *DeviceCompliancePolicyAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceCompliancePolicyAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceCompliancePolicyAssignment collection
func (r *DeviceCompliancePolicyAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceCompliancePolicyAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceCompliancePolicyAssignment collection
func (r *DeviceCompliancePolicyAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceCompliancePolicyAssignment) (resObj *DeviceCompliancePolicyAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceSettingStateSummaries returns request builder for SettingStateDeviceSummary collection
func (b *DeviceCompliancePolicyRequestBuilder) DeviceSettingStateSummaries() *DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequestBuilder {
	bb := &DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceSettingStateSummaries"
	return bb
}

// DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequestBuilder is request builder for SettingStateDeviceSummary collection rcn
type DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SettingStateDeviceSummary collection
func (b *DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequestBuilder) Request() *DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequest {
	return &DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SettingStateDeviceSummary item
func (b *DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequestBuilder) ID(id string) *SettingStateDeviceSummaryRequestBuilder {
	bb := &SettingStateDeviceSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequest is request for SettingStateDeviceSummary collection
type DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SettingStateDeviceSummary collection
func (r *DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SettingStateDeviceSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SettingStateDeviceSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SettingStateDeviceSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SettingStateDeviceSummary collection, max N pages
func (r *DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]SettingStateDeviceSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SettingStateDeviceSummary collection
func (r *DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequest) Get(ctx context.Context) ([]SettingStateDeviceSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SettingStateDeviceSummary collection
func (r *DeviceCompliancePolicyDeviceSettingStateSummariesCollectionRequest) Add(ctx context.Context, reqObj *SettingStateDeviceSummary) (resObj *SettingStateDeviceSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceStatusOverview is navigation property rn
func (b *DeviceCompliancePolicyRequestBuilder) DeviceStatusOverview() *DeviceComplianceDeviceOverviewRequestBuilder {
	bb := &DeviceComplianceDeviceOverviewRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStatusOverview"
	return bb
}

// DeviceStatuses returns request builder for DeviceComplianceDeviceStatus collection
func (b *DeviceCompliancePolicyRequestBuilder) DeviceStatuses() *DeviceCompliancePolicyDeviceStatusesCollectionRequestBuilder {
	bb := &DeviceCompliancePolicyDeviceStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStatuses"
	return bb
}

// DeviceCompliancePolicyDeviceStatusesCollectionRequestBuilder is request builder for DeviceComplianceDeviceStatus collection rcn
type DeviceCompliancePolicyDeviceStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceComplianceDeviceStatus collection
func (b *DeviceCompliancePolicyDeviceStatusesCollectionRequestBuilder) Request() *DeviceCompliancePolicyDeviceStatusesCollectionRequest {
	return &DeviceCompliancePolicyDeviceStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceComplianceDeviceStatus item
func (b *DeviceCompliancePolicyDeviceStatusesCollectionRequestBuilder) ID(id string) *DeviceComplianceDeviceStatusRequestBuilder {
	bb := &DeviceComplianceDeviceStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCompliancePolicyDeviceStatusesCollectionRequest is request for DeviceComplianceDeviceStatus collection
type DeviceCompliancePolicyDeviceStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceComplianceDeviceStatus collection
func (r *DeviceCompliancePolicyDeviceStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceComplianceDeviceStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceComplianceDeviceStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceComplianceDeviceStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceComplianceDeviceStatus collection, max N pages
func (r *DeviceCompliancePolicyDeviceStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceComplianceDeviceStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceComplianceDeviceStatus collection
func (r *DeviceCompliancePolicyDeviceStatusesCollectionRequest) Get(ctx context.Context) ([]DeviceComplianceDeviceStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceComplianceDeviceStatus collection
func (r *DeviceCompliancePolicyDeviceStatusesCollectionRequest) Add(ctx context.Context, reqObj *DeviceComplianceDeviceStatus) (resObj *DeviceComplianceDeviceStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ScheduledActionsForRule returns request builder for DeviceComplianceScheduledActionForRule collection
func (b *DeviceCompliancePolicyRequestBuilder) ScheduledActionsForRule() *DeviceCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder {
	bb := &DeviceCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/scheduledActionsForRule"
	return bb
}

// DeviceCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder is request builder for DeviceComplianceScheduledActionForRule collection rcn
type DeviceCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceComplianceScheduledActionForRule collection
func (b *DeviceCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder) Request() *DeviceCompliancePolicyScheduledActionsForRuleCollectionRequest {
	return &DeviceCompliancePolicyScheduledActionsForRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceComplianceScheduledActionForRule item
func (b *DeviceCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder) ID(id string) *DeviceComplianceScheduledActionForRuleRequestBuilder {
	bb := &DeviceComplianceScheduledActionForRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCompliancePolicyScheduledActionsForRuleCollectionRequest is request for DeviceComplianceScheduledActionForRule collection
type DeviceCompliancePolicyScheduledActionsForRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceComplianceScheduledActionForRule collection
func (r *DeviceCompliancePolicyScheduledActionsForRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceComplianceScheduledActionForRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceComplianceScheduledActionForRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceComplianceScheduledActionForRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceComplianceScheduledActionForRule collection, max N pages
func (r *DeviceCompliancePolicyScheduledActionsForRuleCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceComplianceScheduledActionForRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceComplianceScheduledActionForRule collection
func (r *DeviceCompliancePolicyScheduledActionsForRuleCollectionRequest) Get(ctx context.Context) ([]DeviceComplianceScheduledActionForRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceComplianceScheduledActionForRule collection
func (r *DeviceCompliancePolicyScheduledActionsForRuleCollectionRequest) Add(ctx context.Context, reqObj *DeviceComplianceScheduledActionForRule) (resObj *DeviceComplianceScheduledActionForRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserStatusOverview is navigation property rn
func (b *DeviceCompliancePolicyRequestBuilder) UserStatusOverview() *DeviceComplianceUserOverviewRequestBuilder {
	bb := &DeviceComplianceUserOverviewRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userStatusOverview"
	return bb
}

// UserStatuses returns request builder for DeviceComplianceUserStatus collection
func (b *DeviceCompliancePolicyRequestBuilder) UserStatuses() *DeviceCompliancePolicyUserStatusesCollectionRequestBuilder {
	bb := &DeviceCompliancePolicyUserStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userStatuses"
	return bb
}

// DeviceCompliancePolicyUserStatusesCollectionRequestBuilder is request builder for DeviceComplianceUserStatus collection rcn
type DeviceCompliancePolicyUserStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceComplianceUserStatus collection
func (b *DeviceCompliancePolicyUserStatusesCollectionRequestBuilder) Request() *DeviceCompliancePolicyUserStatusesCollectionRequest {
	return &DeviceCompliancePolicyUserStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceComplianceUserStatus item
func (b *DeviceCompliancePolicyUserStatusesCollectionRequestBuilder) ID(id string) *DeviceComplianceUserStatusRequestBuilder {
	bb := &DeviceComplianceUserStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCompliancePolicyUserStatusesCollectionRequest is request for DeviceComplianceUserStatus collection
type DeviceCompliancePolicyUserStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceComplianceUserStatus collection
func (r *DeviceCompliancePolicyUserStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceComplianceUserStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceComplianceUserStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceComplianceUserStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceComplianceUserStatus collection, max N pages
func (r *DeviceCompliancePolicyUserStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceComplianceUserStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceComplianceUserStatus collection
func (r *DeviceCompliancePolicyUserStatusesCollectionRequest) Get(ctx context.Context) ([]DeviceComplianceUserStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceComplianceUserStatus collection
func (r *DeviceCompliancePolicyUserStatusesCollectionRequest) Add(ctx context.Context, reqObj *DeviceComplianceUserStatus) (resObj *DeviceComplianceUserStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceCompliancePolicy is navigation property rn
func (b *DeviceCompliancePolicyGroupAssignmentRequestBuilder) DeviceCompliancePolicy() *DeviceCompliancePolicyRequestBuilder {
	bb := &DeviceCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceCompliancePolicy"
	return bb
}

// DeviceComplianceSettingStates returns request builder for DeviceComplianceSettingState collection
func (b *DeviceCompliancePolicySettingStateSummaryRequestBuilder) DeviceComplianceSettingStates() *DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequestBuilder {
	bb := &DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceComplianceSettingStates"
	return bb
}

// DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequestBuilder is request builder for DeviceComplianceSettingState collection rcn
type DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceComplianceSettingState collection
func (b *DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequestBuilder) Request() *DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequest {
	return &DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceComplianceSettingState item
func (b *DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequestBuilder) ID(id string) *DeviceComplianceSettingStateRequestBuilder {
	bb := &DeviceComplianceSettingStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequest is request for DeviceComplianceSettingState collection
type DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceComplianceSettingState collection
func (r *DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceComplianceSettingState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceComplianceSettingState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceComplianceSettingState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceComplianceSettingState collection, max N pages
func (r *DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceComplianceSettingState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceComplianceSettingState collection
func (r *DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequest) Get(ctx context.Context) ([]DeviceComplianceSettingState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceComplianceSettingState collection
func (r *DeviceCompliancePolicySettingStateSummaryDeviceComplianceSettingStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceComplianceSettingState) (resObj *DeviceComplianceSettingState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ScheduledActionConfigurations returns request builder for DeviceComplianceActionItem collection
func (b *DeviceComplianceScheduledActionForRuleRequestBuilder) ScheduledActionConfigurations() *DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder {
	bb := &DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/scheduledActionConfigurations"
	return bb
}

// DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder is request builder for DeviceComplianceActionItem collection rcn
type DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceComplianceActionItem collection
func (b *DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder) Request() *DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest {
	return &DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceComplianceActionItem item
func (b *DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder) ID(id string) *DeviceComplianceActionItemRequestBuilder {
	bb := &DeviceComplianceActionItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest is request for DeviceComplianceActionItem collection
type DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceComplianceActionItem collection
func (r *DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceComplianceActionItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceComplianceActionItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceComplianceActionItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceComplianceActionItem collection, max N pages
func (r *DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceComplianceActionItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceComplianceActionItem collection
func (r *DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest) Get(ctx context.Context) ([]DeviceComplianceActionItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceComplianceActionItem collection
func (r *DeviceComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *DeviceComplianceActionItem) (resObj *DeviceComplianceActionItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for DeviceHealthScriptAssignment collection
func (b *DeviceComplianceScriptRequestBuilder) Assignments() *DeviceComplianceScriptAssignmentsCollectionRequestBuilder {
	bb := &DeviceComplianceScriptAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceComplianceScriptAssignmentsCollectionRequestBuilder is request builder for DeviceHealthScriptAssignment collection rcn
type DeviceComplianceScriptAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceHealthScriptAssignment collection
func (b *DeviceComplianceScriptAssignmentsCollectionRequestBuilder) Request() *DeviceComplianceScriptAssignmentsCollectionRequest {
	return &DeviceComplianceScriptAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceHealthScriptAssignment item
func (b *DeviceComplianceScriptAssignmentsCollectionRequestBuilder) ID(id string) *DeviceHealthScriptAssignmentRequestBuilder {
	bb := &DeviceHealthScriptAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceComplianceScriptAssignmentsCollectionRequest is request for DeviceHealthScriptAssignment collection
type DeviceComplianceScriptAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceHealthScriptAssignment collection
func (r *DeviceComplianceScriptAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceHealthScriptAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceHealthScriptAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceHealthScriptAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceHealthScriptAssignment collection, max N pages
func (r *DeviceComplianceScriptAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceHealthScriptAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceHealthScriptAssignment collection
func (r *DeviceComplianceScriptAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceHealthScriptAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceHealthScriptAssignment collection
func (r *DeviceComplianceScriptAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceHealthScriptAssignment) (resObj *DeviceHealthScriptAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceRunStates returns request builder for DeviceComplianceScriptDeviceState collection
func (b *DeviceComplianceScriptRequestBuilder) DeviceRunStates() *DeviceComplianceScriptDeviceRunStatesCollectionRequestBuilder {
	bb := &DeviceComplianceScriptDeviceRunStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceRunStates"
	return bb
}

// DeviceComplianceScriptDeviceRunStatesCollectionRequestBuilder is request builder for DeviceComplianceScriptDeviceState collection rcn
type DeviceComplianceScriptDeviceRunStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceComplianceScriptDeviceState collection
func (b *DeviceComplianceScriptDeviceRunStatesCollectionRequestBuilder) Request() *DeviceComplianceScriptDeviceRunStatesCollectionRequest {
	return &DeviceComplianceScriptDeviceRunStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceComplianceScriptDeviceState item
func (b *DeviceComplianceScriptDeviceRunStatesCollectionRequestBuilder) ID(id string) *DeviceComplianceScriptDeviceStateRequestBuilder {
	bb := &DeviceComplianceScriptDeviceStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceComplianceScriptDeviceRunStatesCollectionRequest is request for DeviceComplianceScriptDeviceState collection
type DeviceComplianceScriptDeviceRunStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceComplianceScriptDeviceState collection
func (r *DeviceComplianceScriptDeviceRunStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceComplianceScriptDeviceState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceComplianceScriptDeviceState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceComplianceScriptDeviceState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceComplianceScriptDeviceState collection, max N pages
func (r *DeviceComplianceScriptDeviceRunStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceComplianceScriptDeviceState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceComplianceScriptDeviceState collection
func (r *DeviceComplianceScriptDeviceRunStatesCollectionRequest) Get(ctx context.Context) ([]DeviceComplianceScriptDeviceState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceComplianceScriptDeviceState collection
func (r *DeviceComplianceScriptDeviceRunStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceComplianceScriptDeviceState) (resObj *DeviceComplianceScriptDeviceState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RunSummary is navigation property rn
func (b *DeviceComplianceScriptRequestBuilder) RunSummary() *DeviceComplianceScriptRunSummaryRequestBuilder {
	bb := &DeviceComplianceScriptRunSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/runSummary"
	return bb
}

// ManagedDevice is navigation property rn
func (b *DeviceComplianceScriptDeviceStateRequestBuilder) ManagedDevice() *ManagedDeviceRequestBuilder {
	bb := &ManagedDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDevice"
	return bb
}

// Assignments returns request builder for DeviceConfigurationAssignment collection
func (b *DeviceConfigurationRequestBuilder) Assignments() *DeviceConfigurationAssignmentsCollectionRequestBuilder {
	bb := &DeviceConfigurationAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceConfigurationAssignmentsCollectionRequestBuilder is request builder for DeviceConfigurationAssignment collection rcn
type DeviceConfigurationAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfigurationAssignment collection
func (b *DeviceConfigurationAssignmentsCollectionRequestBuilder) Request() *DeviceConfigurationAssignmentsCollectionRequest {
	return &DeviceConfigurationAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfigurationAssignment item
func (b *DeviceConfigurationAssignmentsCollectionRequestBuilder) ID(id string) *DeviceConfigurationAssignmentRequestBuilder {
	bb := &DeviceConfigurationAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationAssignmentsCollectionRequest is request for DeviceConfigurationAssignment collection
type DeviceConfigurationAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfigurationAssignment collection
func (r *DeviceConfigurationAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfigurationAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfigurationAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfigurationAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfigurationAssignment collection, max N pages
func (r *DeviceConfigurationAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfigurationAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfigurationAssignment collection
func (r *DeviceConfigurationAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceConfigurationAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfigurationAssignment collection
func (r *DeviceConfigurationAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfigurationAssignment) (resObj *DeviceConfigurationAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceSettingStateSummaries returns request builder for SettingStateDeviceSummary collection
func (b *DeviceConfigurationRequestBuilder) DeviceSettingStateSummaries() *DeviceConfigurationDeviceSettingStateSummariesCollectionRequestBuilder {
	bb := &DeviceConfigurationDeviceSettingStateSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceSettingStateSummaries"
	return bb
}

// DeviceConfigurationDeviceSettingStateSummariesCollectionRequestBuilder is request builder for SettingStateDeviceSummary collection rcn
type DeviceConfigurationDeviceSettingStateSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SettingStateDeviceSummary collection
func (b *DeviceConfigurationDeviceSettingStateSummariesCollectionRequestBuilder) Request() *DeviceConfigurationDeviceSettingStateSummariesCollectionRequest {
	return &DeviceConfigurationDeviceSettingStateSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SettingStateDeviceSummary item
func (b *DeviceConfigurationDeviceSettingStateSummariesCollectionRequestBuilder) ID(id string) *SettingStateDeviceSummaryRequestBuilder {
	bb := &SettingStateDeviceSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationDeviceSettingStateSummariesCollectionRequest is request for SettingStateDeviceSummary collection
type DeviceConfigurationDeviceSettingStateSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SettingStateDeviceSummary collection
func (r *DeviceConfigurationDeviceSettingStateSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SettingStateDeviceSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SettingStateDeviceSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SettingStateDeviceSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SettingStateDeviceSummary collection, max N pages
func (r *DeviceConfigurationDeviceSettingStateSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]SettingStateDeviceSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SettingStateDeviceSummary collection
func (r *DeviceConfigurationDeviceSettingStateSummariesCollectionRequest) Get(ctx context.Context) ([]SettingStateDeviceSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SettingStateDeviceSummary collection
func (r *DeviceConfigurationDeviceSettingStateSummariesCollectionRequest) Add(ctx context.Context, reqObj *SettingStateDeviceSummary) (resObj *SettingStateDeviceSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceStatusOverview is navigation property rn
func (b *DeviceConfigurationRequestBuilder) DeviceStatusOverview() *DeviceConfigurationDeviceOverviewRequestBuilder {
	bb := &DeviceConfigurationDeviceOverviewRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStatusOverview"
	return bb
}

// DeviceStatuses returns request builder for DeviceConfigurationDeviceStatus collection
func (b *DeviceConfigurationRequestBuilder) DeviceStatuses() *DeviceConfigurationDeviceStatusesCollectionRequestBuilder {
	bb := &DeviceConfigurationDeviceStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStatuses"
	return bb
}

// DeviceConfigurationDeviceStatusesCollectionRequestBuilder is request builder for DeviceConfigurationDeviceStatus collection rcn
type DeviceConfigurationDeviceStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfigurationDeviceStatus collection
func (b *DeviceConfigurationDeviceStatusesCollectionRequestBuilder) Request() *DeviceConfigurationDeviceStatusesCollectionRequest {
	return &DeviceConfigurationDeviceStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfigurationDeviceStatus item
func (b *DeviceConfigurationDeviceStatusesCollectionRequestBuilder) ID(id string) *DeviceConfigurationDeviceStatusRequestBuilder {
	bb := &DeviceConfigurationDeviceStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationDeviceStatusesCollectionRequest is request for DeviceConfigurationDeviceStatus collection
type DeviceConfigurationDeviceStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfigurationDeviceStatus collection
func (r *DeviceConfigurationDeviceStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfigurationDeviceStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfigurationDeviceStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfigurationDeviceStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfigurationDeviceStatus collection, max N pages
func (r *DeviceConfigurationDeviceStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfigurationDeviceStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfigurationDeviceStatus collection
func (r *DeviceConfigurationDeviceStatusesCollectionRequest) Get(ctx context.Context) ([]DeviceConfigurationDeviceStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfigurationDeviceStatus collection
func (r *DeviceConfigurationDeviceStatusesCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfigurationDeviceStatus) (resObj *DeviceConfigurationDeviceStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GroupAssignments returns request builder for DeviceConfigurationGroupAssignment collection
func (b *DeviceConfigurationRequestBuilder) GroupAssignments() *DeviceConfigurationGroupAssignmentsCollectionRequestBuilder {
	bb := &DeviceConfigurationGroupAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupAssignments"
	return bb
}

// DeviceConfigurationGroupAssignmentsCollectionRequestBuilder is request builder for DeviceConfigurationGroupAssignment collection rcn
type DeviceConfigurationGroupAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfigurationGroupAssignment collection
func (b *DeviceConfigurationGroupAssignmentsCollectionRequestBuilder) Request() *DeviceConfigurationGroupAssignmentsCollectionRequest {
	return &DeviceConfigurationGroupAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfigurationGroupAssignment item
func (b *DeviceConfigurationGroupAssignmentsCollectionRequestBuilder) ID(id string) *DeviceConfigurationGroupAssignmentRequestBuilder {
	bb := &DeviceConfigurationGroupAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationGroupAssignmentsCollectionRequest is request for DeviceConfigurationGroupAssignment collection
type DeviceConfigurationGroupAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfigurationGroupAssignment collection
func (r *DeviceConfigurationGroupAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfigurationGroupAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfigurationGroupAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfigurationGroupAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfigurationGroupAssignment collection, max N pages
func (r *DeviceConfigurationGroupAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfigurationGroupAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfigurationGroupAssignment collection
func (r *DeviceConfigurationGroupAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceConfigurationGroupAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfigurationGroupAssignment collection
func (r *DeviceConfigurationGroupAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfigurationGroupAssignment) (resObj *DeviceConfigurationGroupAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserStatusOverview is navigation property rn
func (b *DeviceConfigurationRequestBuilder) UserStatusOverview() *DeviceConfigurationUserOverviewRequestBuilder {
	bb := &DeviceConfigurationUserOverviewRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userStatusOverview"
	return bb
}

// UserStatuses returns request builder for DeviceConfigurationUserStatus collection
func (b *DeviceConfigurationRequestBuilder) UserStatuses() *DeviceConfigurationUserStatusesCollectionRequestBuilder {
	bb := &DeviceConfigurationUserStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userStatuses"
	return bb
}

// DeviceConfigurationUserStatusesCollectionRequestBuilder is request builder for DeviceConfigurationUserStatus collection rcn
type DeviceConfigurationUserStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfigurationUserStatus collection
func (b *DeviceConfigurationUserStatusesCollectionRequestBuilder) Request() *DeviceConfigurationUserStatusesCollectionRequest {
	return &DeviceConfigurationUserStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfigurationUserStatus item
func (b *DeviceConfigurationUserStatusesCollectionRequestBuilder) ID(id string) *DeviceConfigurationUserStatusRequestBuilder {
	bb := &DeviceConfigurationUserStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceConfigurationUserStatusesCollectionRequest is request for DeviceConfigurationUserStatus collection
type DeviceConfigurationUserStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfigurationUserStatus collection
func (r *DeviceConfigurationUserStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfigurationUserStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfigurationUserStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfigurationUserStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfigurationUserStatus collection, max N pages
func (r *DeviceConfigurationUserStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfigurationUserStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfigurationUserStatus collection
func (r *DeviceConfigurationUserStatusesCollectionRequest) Get(ctx context.Context) ([]DeviceConfigurationUserStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfigurationUserStatus collection
func (r *DeviceConfigurationUserStatusesCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfigurationUserStatus) (resObj *DeviceConfigurationUserStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceConfiguration is navigation property rn
func (b *DeviceConfigurationGroupAssignmentRequestBuilder) DeviceConfiguration() *DeviceConfigurationRequestBuilder {
	bb := &DeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceConfiguration"
	return bb
}

// Assignments returns request builder for DeviceManagementScriptAssignment collection
func (b *DeviceCustomAttributeShellScriptRequestBuilder) Assignments() *DeviceCustomAttributeShellScriptAssignmentsCollectionRequestBuilder {
	bb := &DeviceCustomAttributeShellScriptAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceCustomAttributeShellScriptAssignmentsCollectionRequestBuilder is request builder for DeviceManagementScriptAssignment collection rcn
type DeviceCustomAttributeShellScriptAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptAssignment collection
func (b *DeviceCustomAttributeShellScriptAssignmentsCollectionRequestBuilder) Request() *DeviceCustomAttributeShellScriptAssignmentsCollectionRequest {
	return &DeviceCustomAttributeShellScriptAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptAssignment item
func (b *DeviceCustomAttributeShellScriptAssignmentsCollectionRequestBuilder) ID(id string) *DeviceManagementScriptAssignmentRequestBuilder {
	bb := &DeviceManagementScriptAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCustomAttributeShellScriptAssignmentsCollectionRequest is request for DeviceManagementScriptAssignment collection
type DeviceCustomAttributeShellScriptAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptAssignment collection
func (r *DeviceCustomAttributeShellScriptAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptAssignment collection, max N pages
func (r *DeviceCustomAttributeShellScriptAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptAssignment collection
func (r *DeviceCustomAttributeShellScriptAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptAssignment collection
func (r *DeviceCustomAttributeShellScriptAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptAssignment) (resObj *DeviceManagementScriptAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceRunStates returns request builder for DeviceManagementScriptDeviceState collection
func (b *DeviceCustomAttributeShellScriptRequestBuilder) DeviceRunStates() *DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequestBuilder {
	bb := &DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceRunStates"
	return bb
}

// DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequestBuilder is request builder for DeviceManagementScriptDeviceState collection rcn
type DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptDeviceState collection
func (b *DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequestBuilder) Request() *DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequest {
	return &DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptDeviceState item
func (b *DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequestBuilder) ID(id string) *DeviceManagementScriptDeviceStateRequestBuilder {
	bb := &DeviceManagementScriptDeviceStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequest is request for DeviceManagementScriptDeviceState collection
type DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptDeviceState collection
func (r *DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptDeviceState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptDeviceState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptDeviceState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptDeviceState collection, max N pages
func (r *DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptDeviceState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptDeviceState collection
func (r *DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptDeviceState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptDeviceState collection
func (r *DeviceCustomAttributeShellScriptDeviceRunStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptDeviceState) (resObj *DeviceManagementScriptDeviceState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GroupAssignments returns request builder for DeviceManagementScriptGroupAssignment collection
func (b *DeviceCustomAttributeShellScriptRequestBuilder) GroupAssignments() *DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequestBuilder {
	bb := &DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupAssignments"
	return bb
}

// DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequestBuilder is request builder for DeviceManagementScriptGroupAssignment collection rcn
type DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptGroupAssignment collection
func (b *DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequestBuilder) Request() *DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequest {
	return &DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptGroupAssignment item
func (b *DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequestBuilder) ID(id string) *DeviceManagementScriptGroupAssignmentRequestBuilder {
	bb := &DeviceManagementScriptGroupAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequest is request for DeviceManagementScriptGroupAssignment collection
type DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptGroupAssignment collection
func (r *DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptGroupAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptGroupAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptGroupAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptGroupAssignment collection, max N pages
func (r *DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptGroupAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptGroupAssignment collection
func (r *DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptGroupAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptGroupAssignment collection
func (r *DeviceCustomAttributeShellScriptGroupAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptGroupAssignment) (resObj *DeviceManagementScriptGroupAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RunSummary is navigation property rn
func (b *DeviceCustomAttributeShellScriptRequestBuilder) RunSummary() *DeviceManagementScriptRunSummaryRequestBuilder {
	bb := &DeviceManagementScriptRunSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/runSummary"
	return bb
}

// UserRunStates returns request builder for DeviceManagementScriptUserState collection
func (b *DeviceCustomAttributeShellScriptRequestBuilder) UserRunStates() *DeviceCustomAttributeShellScriptUserRunStatesCollectionRequestBuilder {
	bb := &DeviceCustomAttributeShellScriptUserRunStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userRunStates"
	return bb
}

// DeviceCustomAttributeShellScriptUserRunStatesCollectionRequestBuilder is request builder for DeviceManagementScriptUserState collection rcn
type DeviceCustomAttributeShellScriptUserRunStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptUserState collection
func (b *DeviceCustomAttributeShellScriptUserRunStatesCollectionRequestBuilder) Request() *DeviceCustomAttributeShellScriptUserRunStatesCollectionRequest {
	return &DeviceCustomAttributeShellScriptUserRunStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptUserState item
func (b *DeviceCustomAttributeShellScriptUserRunStatesCollectionRequestBuilder) ID(id string) *DeviceManagementScriptUserStateRequestBuilder {
	bb := &DeviceManagementScriptUserStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceCustomAttributeShellScriptUserRunStatesCollectionRequest is request for DeviceManagementScriptUserState collection
type DeviceCustomAttributeShellScriptUserRunStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptUserState collection
func (r *DeviceCustomAttributeShellScriptUserRunStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptUserState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptUserState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptUserState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptUserState collection, max N pages
func (r *DeviceCustomAttributeShellScriptUserRunStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptUserState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptUserState collection
func (r *DeviceCustomAttributeShellScriptUserRunStatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptUserState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptUserState collection
func (r *DeviceCustomAttributeShellScriptUserRunStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptUserState) (resObj *DeviceManagementScriptUserState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for EnrollmentConfigurationAssignment collection
func (b *DeviceEnrollmentConfigurationRequestBuilder) Assignments() *DeviceEnrollmentConfigurationAssignmentsCollectionRequestBuilder {
	bb := &DeviceEnrollmentConfigurationAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceEnrollmentConfigurationAssignmentsCollectionRequestBuilder is request builder for EnrollmentConfigurationAssignment collection rcn
type DeviceEnrollmentConfigurationAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EnrollmentConfigurationAssignment collection
func (b *DeviceEnrollmentConfigurationAssignmentsCollectionRequestBuilder) Request() *DeviceEnrollmentConfigurationAssignmentsCollectionRequest {
	return &DeviceEnrollmentConfigurationAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EnrollmentConfigurationAssignment item
func (b *DeviceEnrollmentConfigurationAssignmentsCollectionRequestBuilder) ID(id string) *EnrollmentConfigurationAssignmentRequestBuilder {
	bb := &EnrollmentConfigurationAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceEnrollmentConfigurationAssignmentsCollectionRequest is request for EnrollmentConfigurationAssignment collection
type DeviceEnrollmentConfigurationAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EnrollmentConfigurationAssignment collection
func (r *DeviceEnrollmentConfigurationAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EnrollmentConfigurationAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EnrollmentConfigurationAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EnrollmentConfigurationAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EnrollmentConfigurationAssignment collection, max N pages
func (r *DeviceEnrollmentConfigurationAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]EnrollmentConfigurationAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EnrollmentConfigurationAssignment collection
func (r *DeviceEnrollmentConfigurationAssignmentsCollectionRequest) Get(ctx context.Context) ([]EnrollmentConfigurationAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EnrollmentConfigurationAssignment collection
func (r *DeviceEnrollmentConfigurationAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *EnrollmentConfigurationAssignment) (resObj *EnrollmentConfigurationAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for DeviceHealthScriptAssignment collection
func (b *DeviceHealthScriptRequestBuilder) Assignments() *DeviceHealthScriptAssignmentsCollectionRequestBuilder {
	bb := &DeviceHealthScriptAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceHealthScriptAssignmentsCollectionRequestBuilder is request builder for DeviceHealthScriptAssignment collection rcn
type DeviceHealthScriptAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceHealthScriptAssignment collection
func (b *DeviceHealthScriptAssignmentsCollectionRequestBuilder) Request() *DeviceHealthScriptAssignmentsCollectionRequest {
	return &DeviceHealthScriptAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceHealthScriptAssignment item
func (b *DeviceHealthScriptAssignmentsCollectionRequestBuilder) ID(id string) *DeviceHealthScriptAssignmentRequestBuilder {
	bb := &DeviceHealthScriptAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceHealthScriptAssignmentsCollectionRequest is request for DeviceHealthScriptAssignment collection
type DeviceHealthScriptAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceHealthScriptAssignment collection
func (r *DeviceHealthScriptAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceHealthScriptAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceHealthScriptAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceHealthScriptAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceHealthScriptAssignment collection, max N pages
func (r *DeviceHealthScriptAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceHealthScriptAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceHealthScriptAssignment collection
func (r *DeviceHealthScriptAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceHealthScriptAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceHealthScriptAssignment collection
func (r *DeviceHealthScriptAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceHealthScriptAssignment) (resObj *DeviceHealthScriptAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceRunStates returns request builder for DeviceHealthScriptDeviceState collection
func (b *DeviceHealthScriptRequestBuilder) DeviceRunStates() *DeviceHealthScriptDeviceRunStatesCollectionRequestBuilder {
	bb := &DeviceHealthScriptDeviceRunStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceRunStates"
	return bb
}

// DeviceHealthScriptDeviceRunStatesCollectionRequestBuilder is request builder for DeviceHealthScriptDeviceState collection rcn
type DeviceHealthScriptDeviceRunStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceHealthScriptDeviceState collection
func (b *DeviceHealthScriptDeviceRunStatesCollectionRequestBuilder) Request() *DeviceHealthScriptDeviceRunStatesCollectionRequest {
	return &DeviceHealthScriptDeviceRunStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceHealthScriptDeviceState item
func (b *DeviceHealthScriptDeviceRunStatesCollectionRequestBuilder) ID(id string) *DeviceHealthScriptDeviceStateRequestBuilder {
	bb := &DeviceHealthScriptDeviceStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceHealthScriptDeviceRunStatesCollectionRequest is request for DeviceHealthScriptDeviceState collection
type DeviceHealthScriptDeviceRunStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceHealthScriptDeviceState collection
func (r *DeviceHealthScriptDeviceRunStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceHealthScriptDeviceState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceHealthScriptDeviceState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceHealthScriptDeviceState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceHealthScriptDeviceState collection, max N pages
func (r *DeviceHealthScriptDeviceRunStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceHealthScriptDeviceState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceHealthScriptDeviceState collection
func (r *DeviceHealthScriptDeviceRunStatesCollectionRequest) Get(ctx context.Context) ([]DeviceHealthScriptDeviceState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceHealthScriptDeviceState collection
func (r *DeviceHealthScriptDeviceRunStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceHealthScriptDeviceState) (resObj *DeviceHealthScriptDeviceState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RunSummary is navigation property rn
func (b *DeviceHealthScriptRequestBuilder) RunSummary() *DeviceHealthScriptRunSummaryRequestBuilder {
	bb := &DeviceHealthScriptRunSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/runSummary"
	return bb
}

// ManagedDevice is navigation property rn
func (b *DeviceHealthScriptDeviceStateRequestBuilder) ManagedDevice() *ManagedDeviceRequestBuilder {
	bb := &ManagedDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDevice"
	return bb
}

// AdvancedThreatProtectionOnboardingStateSummary is navigation property rn
func (b *DeviceManagementRequestBuilder) AdvancedThreatProtectionOnboardingStateSummary() *AdvancedThreatProtectionOnboardingStateSummaryRequestBuilder {
	bb := &AdvancedThreatProtectionOnboardingStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/advancedThreatProtectionOnboardingStateSummary"
	return bb
}

// AndroidDeviceOwnerEnrollmentProfiles returns request builder for AndroidDeviceOwnerEnrollmentProfile collection
func (b *DeviceManagementRequestBuilder) AndroidDeviceOwnerEnrollmentProfiles() *DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequestBuilder {
	bb := &DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/androidDeviceOwnerEnrollmentProfiles"
	return bb
}

// DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequestBuilder is request builder for AndroidDeviceOwnerEnrollmentProfile collection rcn
type DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidDeviceOwnerEnrollmentProfile collection
func (b *DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequestBuilder) Request() *DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequest {
	return &DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidDeviceOwnerEnrollmentProfile item
func (b *DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequestBuilder) ID(id string) *AndroidDeviceOwnerEnrollmentProfileRequestBuilder {
	bb := &AndroidDeviceOwnerEnrollmentProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequest is request for AndroidDeviceOwnerEnrollmentProfile collection
type DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidDeviceOwnerEnrollmentProfile collection
func (r *DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidDeviceOwnerEnrollmentProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidDeviceOwnerEnrollmentProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidDeviceOwnerEnrollmentProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidDeviceOwnerEnrollmentProfile collection, max N pages
func (r *DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidDeviceOwnerEnrollmentProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidDeviceOwnerEnrollmentProfile collection
func (r *DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequest) Get(ctx context.Context) ([]AndroidDeviceOwnerEnrollmentProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidDeviceOwnerEnrollmentProfile collection
func (r *DeviceManagementAndroidDeviceOwnerEnrollmentProfilesCollectionRequest) Add(ctx context.Context, reqObj *AndroidDeviceOwnerEnrollmentProfile) (resObj *AndroidDeviceOwnerEnrollmentProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidForWorkAppConfigurationSchemas returns request builder for AndroidForWorkAppConfigurationSchema collection
func (b *DeviceManagementRequestBuilder) AndroidForWorkAppConfigurationSchemas() *DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequestBuilder {
	bb := &DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/androidForWorkAppConfigurationSchemas"
	return bb
}

// DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequestBuilder is request builder for AndroidForWorkAppConfigurationSchema collection rcn
type DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkAppConfigurationSchema collection
func (b *DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequestBuilder) Request() *DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequest {
	return &DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkAppConfigurationSchema item
func (b *DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequestBuilder) ID(id string) *AndroidForWorkAppConfigurationSchemaRequestBuilder {
	bb := &AndroidForWorkAppConfigurationSchemaRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequest is request for AndroidForWorkAppConfigurationSchema collection
type DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkAppConfigurationSchema collection
func (r *DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkAppConfigurationSchema, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkAppConfigurationSchema
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkAppConfigurationSchema
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkAppConfigurationSchema collection, max N pages
func (r *DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkAppConfigurationSchema, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkAppConfigurationSchema collection
func (r *DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkAppConfigurationSchema, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkAppConfigurationSchema collection
func (r *DeviceManagementAndroidForWorkAppConfigurationSchemasCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkAppConfigurationSchema) (resObj *AndroidForWorkAppConfigurationSchema, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidForWorkEnrollmentProfiles returns request builder for AndroidForWorkEnrollmentProfile collection
func (b *DeviceManagementRequestBuilder) AndroidForWorkEnrollmentProfiles() *DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequestBuilder {
	bb := &DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/androidForWorkEnrollmentProfiles"
	return bb
}

// DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequestBuilder is request builder for AndroidForWorkEnrollmentProfile collection rcn
type DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkEnrollmentProfile collection
func (b *DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequestBuilder) Request() *DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequest {
	return &DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkEnrollmentProfile item
func (b *DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequestBuilder) ID(id string) *AndroidForWorkEnrollmentProfileRequestBuilder {
	bb := &AndroidForWorkEnrollmentProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequest is request for AndroidForWorkEnrollmentProfile collection
type DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkEnrollmentProfile collection
func (r *DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkEnrollmentProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkEnrollmentProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkEnrollmentProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkEnrollmentProfile collection, max N pages
func (r *DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkEnrollmentProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkEnrollmentProfile collection
func (r *DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkEnrollmentProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkEnrollmentProfile collection
func (r *DeviceManagementAndroidForWorkEnrollmentProfilesCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkEnrollmentProfile) (resObj *AndroidForWorkEnrollmentProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidForWorkSettings is navigation property rn
func (b *DeviceManagementRequestBuilder) AndroidForWorkSettings() *AndroidForWorkSettingsRequestBuilder {
	bb := &AndroidForWorkSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/androidForWorkSettings"
	return bb
}

// AndroidManagedStoreAccountEnterpriseSettings is navigation property rn
func (b *DeviceManagementRequestBuilder) AndroidManagedStoreAccountEnterpriseSettings() *AndroidManagedStoreAccountEnterpriseSettingsRequestBuilder {
	bb := &AndroidManagedStoreAccountEnterpriseSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/androidManagedStoreAccountEnterpriseSettings"
	return bb
}

// AndroidManagedStoreAppConfigurationSchemas returns request builder for AndroidManagedStoreAppConfigurationSchema collection
func (b *DeviceManagementRequestBuilder) AndroidManagedStoreAppConfigurationSchemas() *DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequestBuilder {
	bb := &DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/androidManagedStoreAppConfigurationSchemas"
	return bb
}

// DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequestBuilder is request builder for AndroidManagedStoreAppConfigurationSchema collection rcn
type DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidManagedStoreAppConfigurationSchema collection
func (b *DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequestBuilder) Request() *DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequest {
	return &DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidManagedStoreAppConfigurationSchema item
func (b *DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequestBuilder) ID(id string) *AndroidManagedStoreAppConfigurationSchemaRequestBuilder {
	bb := &AndroidManagedStoreAppConfigurationSchemaRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequest is request for AndroidManagedStoreAppConfigurationSchema collection
type DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidManagedStoreAppConfigurationSchema collection
func (r *DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidManagedStoreAppConfigurationSchema, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidManagedStoreAppConfigurationSchema
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidManagedStoreAppConfigurationSchema
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidManagedStoreAppConfigurationSchema collection, max N pages
func (r *DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidManagedStoreAppConfigurationSchema, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidManagedStoreAppConfigurationSchema collection
func (r *DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequest) Get(ctx context.Context) ([]AndroidManagedStoreAppConfigurationSchema, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidManagedStoreAppConfigurationSchema collection
func (r *DeviceManagementAndroidManagedStoreAppConfigurationSchemasCollectionRequest) Add(ctx context.Context, reqObj *AndroidManagedStoreAppConfigurationSchema) (resObj *AndroidManagedStoreAppConfigurationSchema, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ApplePushNotificationCertificate is navigation property rn
func (b *DeviceManagementRequestBuilder) ApplePushNotificationCertificate() *ApplePushNotificationCertificateRequestBuilder {
	bb := &ApplePushNotificationCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/applePushNotificationCertificate"
	return bb
}

// AppleUserInitiatedEnrollmentProfiles returns request builder for AppleUserInitiatedEnrollmentProfile collection
func (b *DeviceManagementRequestBuilder) AppleUserInitiatedEnrollmentProfiles() *DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequestBuilder {
	bb := &DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appleUserInitiatedEnrollmentProfiles"
	return bb
}

// DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequestBuilder is request builder for AppleUserInitiatedEnrollmentProfile collection rcn
type DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppleUserInitiatedEnrollmentProfile collection
func (b *DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequestBuilder) Request() *DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequest {
	return &DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppleUserInitiatedEnrollmentProfile item
func (b *DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequestBuilder) ID(id string) *AppleUserInitiatedEnrollmentProfileRequestBuilder {
	bb := &AppleUserInitiatedEnrollmentProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequest is request for AppleUserInitiatedEnrollmentProfile collection
type DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppleUserInitiatedEnrollmentProfile collection
func (r *DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppleUserInitiatedEnrollmentProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppleUserInitiatedEnrollmentProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppleUserInitiatedEnrollmentProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppleUserInitiatedEnrollmentProfile collection, max N pages
func (r *DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]AppleUserInitiatedEnrollmentProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppleUserInitiatedEnrollmentProfile collection
func (r *DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequest) Get(ctx context.Context) ([]AppleUserInitiatedEnrollmentProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppleUserInitiatedEnrollmentProfile collection
func (r *DeviceManagementAppleUserInitiatedEnrollmentProfilesCollectionRequest) Add(ctx context.Context, reqObj *AppleUserInitiatedEnrollmentProfile) (resObj *AppleUserInitiatedEnrollmentProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AssignmentFilters returns request builder for DeviceAndAppManagementAssignmentFilter collection
func (b *DeviceManagementRequestBuilder) AssignmentFilters() *DeviceManagementAssignmentFiltersCollectionRequestBuilder {
	bb := &DeviceManagementAssignmentFiltersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignmentFilters"
	return bb
}

// DeviceManagementAssignmentFiltersCollectionRequestBuilder is request builder for DeviceAndAppManagementAssignmentFilter collection rcn
type DeviceManagementAssignmentFiltersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceAndAppManagementAssignmentFilter collection
func (b *DeviceManagementAssignmentFiltersCollectionRequestBuilder) Request() *DeviceManagementAssignmentFiltersCollectionRequest {
	return &DeviceManagementAssignmentFiltersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceAndAppManagementAssignmentFilter item
func (b *DeviceManagementAssignmentFiltersCollectionRequestBuilder) ID(id string) *DeviceAndAppManagementAssignmentFilterRequestBuilder {
	bb := &DeviceAndAppManagementAssignmentFilterRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAssignmentFiltersCollectionRequest is request for DeviceAndAppManagementAssignmentFilter collection
type DeviceManagementAssignmentFiltersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceAndAppManagementAssignmentFilter collection
func (r *DeviceManagementAssignmentFiltersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceAndAppManagementAssignmentFilter, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceAndAppManagementAssignmentFilter
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceAndAppManagementAssignmentFilter
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceAndAppManagementAssignmentFilter collection, max N pages
func (r *DeviceManagementAssignmentFiltersCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceAndAppManagementAssignmentFilter, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceAndAppManagementAssignmentFilter collection
func (r *DeviceManagementAssignmentFiltersCollectionRequest) Get(ctx context.Context) ([]DeviceAndAppManagementAssignmentFilter, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceAndAppManagementAssignmentFilter collection
func (r *DeviceManagementAssignmentFiltersCollectionRequest) Add(ctx context.Context, reqObj *DeviceAndAppManagementAssignmentFilter) (resObj *DeviceAndAppManagementAssignmentFilter, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AuditEvents returns request builder for AuditEvent collection
func (b *DeviceManagementRequestBuilder) AuditEvents() *DeviceManagementAuditEventsCollectionRequestBuilder {
	bb := &DeviceManagementAuditEventsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/auditEvents"
	return bb
}

// DeviceManagementAuditEventsCollectionRequestBuilder is request builder for AuditEvent collection rcn
type DeviceManagementAuditEventsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuditEvent collection
func (b *DeviceManagementAuditEventsCollectionRequestBuilder) Request() *DeviceManagementAuditEventsCollectionRequest {
	return &DeviceManagementAuditEventsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuditEvent item
func (b *DeviceManagementAuditEventsCollectionRequestBuilder) ID(id string) *AuditEventRequestBuilder {
	bb := &AuditEventRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAuditEventsCollectionRequest is request for AuditEvent collection
type DeviceManagementAuditEventsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuditEvent collection
func (r *DeviceManagementAuditEventsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuditEvent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuditEvent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuditEvent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuditEvent collection, max N pages
func (r *DeviceManagementAuditEventsCollectionRequest) GetN(ctx context.Context, n int) ([]AuditEvent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuditEvent collection
func (r *DeviceManagementAuditEventsCollectionRequest) Get(ctx context.Context) ([]AuditEvent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuditEvent collection
func (r *DeviceManagementAuditEventsCollectionRequest) Add(ctx context.Context, reqObj *AuditEvent) (resObj *AuditEvent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AutopilotEvents returns request builder for DeviceManagementAutopilotEvent collection
func (b *DeviceManagementRequestBuilder) AutopilotEvents() *DeviceManagementAutopilotEventsCollectionRequestBuilder {
	bb := &DeviceManagementAutopilotEventsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/autopilotEvents"
	return bb
}

// DeviceManagementAutopilotEventsCollectionRequestBuilder is request builder for DeviceManagementAutopilotEvent collection rcn
type DeviceManagementAutopilotEventsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementAutopilotEvent collection
func (b *DeviceManagementAutopilotEventsCollectionRequestBuilder) Request() *DeviceManagementAutopilotEventsCollectionRequest {
	return &DeviceManagementAutopilotEventsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementAutopilotEvent item
func (b *DeviceManagementAutopilotEventsCollectionRequestBuilder) ID(id string) *DeviceManagementAutopilotEventRequestBuilder {
	bb := &DeviceManagementAutopilotEventRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAutopilotEventsCollectionRequest is request for DeviceManagementAutopilotEvent collection
type DeviceManagementAutopilotEventsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementAutopilotEvent collection
func (r *DeviceManagementAutopilotEventsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementAutopilotEvent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementAutopilotEvent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementAutopilotEvent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementAutopilotEvent collection, max N pages
func (r *DeviceManagementAutopilotEventsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementAutopilotEvent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementAutopilotEvent collection
func (r *DeviceManagementAutopilotEventsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementAutopilotEvent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementAutopilotEvent collection
func (r *DeviceManagementAutopilotEventsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementAutopilotEvent) (resObj *DeviceManagementAutopilotEvent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CartToClassAssociations returns request builder for CartToClassAssociation collection
func (b *DeviceManagementRequestBuilder) CartToClassAssociations() *DeviceManagementCartToClassAssociationsCollectionRequestBuilder {
	bb := &DeviceManagementCartToClassAssociationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cartToClassAssociations"
	return bb
}

// DeviceManagementCartToClassAssociationsCollectionRequestBuilder is request builder for CartToClassAssociation collection rcn
type DeviceManagementCartToClassAssociationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CartToClassAssociation collection
func (b *DeviceManagementCartToClassAssociationsCollectionRequestBuilder) Request() *DeviceManagementCartToClassAssociationsCollectionRequest {
	return &DeviceManagementCartToClassAssociationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CartToClassAssociation item
func (b *DeviceManagementCartToClassAssociationsCollectionRequestBuilder) ID(id string) *CartToClassAssociationRequestBuilder {
	bb := &CartToClassAssociationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementCartToClassAssociationsCollectionRequest is request for CartToClassAssociation collection
type DeviceManagementCartToClassAssociationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CartToClassAssociation collection
func (r *DeviceManagementCartToClassAssociationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CartToClassAssociation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CartToClassAssociation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CartToClassAssociation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CartToClassAssociation collection, max N pages
func (r *DeviceManagementCartToClassAssociationsCollectionRequest) GetN(ctx context.Context, n int) ([]CartToClassAssociation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CartToClassAssociation collection
func (r *DeviceManagementCartToClassAssociationsCollectionRequest) Get(ctx context.Context) ([]CartToClassAssociation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CartToClassAssociation collection
func (r *DeviceManagementCartToClassAssociationsCollectionRequest) Add(ctx context.Context, reqObj *CartToClassAssociation) (resObj *CartToClassAssociation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Categories returns request builder for DeviceManagementSettingCategory collection
func (b *DeviceManagementRequestBuilder) Categories() *DeviceManagementCategoriesCollectionRequestBuilder {
	bb := &DeviceManagementCategoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/categories"
	return bb
}

// DeviceManagementCategoriesCollectionRequestBuilder is request builder for DeviceManagementSettingCategory collection rcn
type DeviceManagementCategoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementSettingCategory collection
func (b *DeviceManagementCategoriesCollectionRequestBuilder) Request() *DeviceManagementCategoriesCollectionRequest {
	return &DeviceManagementCategoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementSettingCategory item
func (b *DeviceManagementCategoriesCollectionRequestBuilder) ID(id string) *DeviceManagementSettingCategoryRequestBuilder {
	bb := &DeviceManagementSettingCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementCategoriesCollectionRequest is request for DeviceManagementSettingCategory collection
type DeviceManagementCategoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementSettingCategory collection
func (r *DeviceManagementCategoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementSettingCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementSettingCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementSettingCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementSettingCategory collection, max N pages
func (r *DeviceManagementCategoriesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementSettingCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementSettingCategory collection
func (r *DeviceManagementCategoriesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementSettingCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementSettingCategory collection
func (r *DeviceManagementCategoriesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementSettingCategory) (resObj *DeviceManagementSettingCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CertificateConnectorDetails returns request builder for CertificateConnectorDetails collection
func (b *DeviceManagementRequestBuilder) CertificateConnectorDetails() *DeviceManagementCertificateConnectorDetailsCollectionRequestBuilder {
	bb := &DeviceManagementCertificateConnectorDetailsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/certificateConnectorDetails"
	return bb
}

// DeviceManagementCertificateConnectorDetailsCollectionRequestBuilder is request builder for CertificateConnectorDetails collection rcn
type DeviceManagementCertificateConnectorDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CertificateConnectorDetails collection
func (b *DeviceManagementCertificateConnectorDetailsCollectionRequestBuilder) Request() *DeviceManagementCertificateConnectorDetailsCollectionRequest {
	return &DeviceManagementCertificateConnectorDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CertificateConnectorDetails item
func (b *DeviceManagementCertificateConnectorDetailsCollectionRequestBuilder) ID(id string) *CertificateConnectorDetailsRequestBuilder {
	bb := &CertificateConnectorDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementCertificateConnectorDetailsCollectionRequest is request for CertificateConnectorDetails collection
type DeviceManagementCertificateConnectorDetailsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CertificateConnectorDetails collection
func (r *DeviceManagementCertificateConnectorDetailsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CertificateConnectorDetails, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CertificateConnectorDetails
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CertificateConnectorDetails
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CertificateConnectorDetails collection, max N pages
func (r *DeviceManagementCertificateConnectorDetailsCollectionRequest) GetN(ctx context.Context, n int) ([]CertificateConnectorDetails, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CertificateConnectorDetails collection
func (r *DeviceManagementCertificateConnectorDetailsCollectionRequest) Get(ctx context.Context) ([]CertificateConnectorDetails, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CertificateConnectorDetails collection
func (r *DeviceManagementCertificateConnectorDetailsCollectionRequest) Add(ctx context.Context, reqObj *CertificateConnectorDetails) (resObj *CertificateConnectorDetails, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ChromeOSOnboardingSettings returns request builder for ChromeOSOnboardingSettings collection
func (b *DeviceManagementRequestBuilder) ChromeOSOnboardingSettings() *DeviceManagementChromeOSOnboardingSettingsCollectionRequestBuilder {
	bb := &DeviceManagementChromeOSOnboardingSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/chromeOSOnboardingSettings"
	return bb
}

// DeviceManagementChromeOSOnboardingSettingsCollectionRequestBuilder is request builder for ChromeOSOnboardingSettings collection rcn
type DeviceManagementChromeOSOnboardingSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ChromeOSOnboardingSettings collection
func (b *DeviceManagementChromeOSOnboardingSettingsCollectionRequestBuilder) Request() *DeviceManagementChromeOSOnboardingSettingsCollectionRequest {
	return &DeviceManagementChromeOSOnboardingSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ChromeOSOnboardingSettings item
func (b *DeviceManagementChromeOSOnboardingSettingsCollectionRequestBuilder) ID(id string) *ChromeOSOnboardingSettingsRequestBuilder {
	bb := &ChromeOSOnboardingSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementChromeOSOnboardingSettingsCollectionRequest is request for ChromeOSOnboardingSettings collection
type DeviceManagementChromeOSOnboardingSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ChromeOSOnboardingSettings collection
func (r *DeviceManagementChromeOSOnboardingSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ChromeOSOnboardingSettings, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ChromeOSOnboardingSettings
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ChromeOSOnboardingSettings
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ChromeOSOnboardingSettings collection, max N pages
func (r *DeviceManagementChromeOSOnboardingSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]ChromeOSOnboardingSettings, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ChromeOSOnboardingSettings collection
func (r *DeviceManagementChromeOSOnboardingSettingsCollectionRequest) Get(ctx context.Context) ([]ChromeOSOnboardingSettings, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ChromeOSOnboardingSettings collection
func (r *DeviceManagementChromeOSOnboardingSettingsCollectionRequest) Add(ctx context.Context, reqObj *ChromeOSOnboardingSettings) (resObj *ChromeOSOnboardingSettings, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CloudPCConnectivityIssues returns request builder for CloudPCConnectivityIssue collection
func (b *DeviceManagementRequestBuilder) CloudPCConnectivityIssues() *DeviceManagementCloudPCConnectivityIssuesCollectionRequestBuilder {
	bb := &DeviceManagementCloudPCConnectivityIssuesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cloudPCConnectivityIssues"
	return bb
}

// DeviceManagementCloudPCConnectivityIssuesCollectionRequestBuilder is request builder for CloudPCConnectivityIssue collection rcn
type DeviceManagementCloudPCConnectivityIssuesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPCConnectivityIssue collection
func (b *DeviceManagementCloudPCConnectivityIssuesCollectionRequestBuilder) Request() *DeviceManagementCloudPCConnectivityIssuesCollectionRequest {
	return &DeviceManagementCloudPCConnectivityIssuesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPCConnectivityIssue item
func (b *DeviceManagementCloudPCConnectivityIssuesCollectionRequestBuilder) ID(id string) *CloudPCConnectivityIssueRequestBuilder {
	bb := &CloudPCConnectivityIssueRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementCloudPCConnectivityIssuesCollectionRequest is request for CloudPCConnectivityIssue collection
type DeviceManagementCloudPCConnectivityIssuesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPCConnectivityIssue collection
func (r *DeviceManagementCloudPCConnectivityIssuesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPCConnectivityIssue, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPCConnectivityIssue
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPCConnectivityIssue
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPCConnectivityIssue collection, max N pages
func (r *DeviceManagementCloudPCConnectivityIssuesCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPCConnectivityIssue, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPCConnectivityIssue collection
func (r *DeviceManagementCloudPCConnectivityIssuesCollectionRequest) Get(ctx context.Context) ([]CloudPCConnectivityIssue, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPCConnectivityIssue collection
func (r *DeviceManagementCloudPCConnectivityIssuesCollectionRequest) Add(ctx context.Context, reqObj *CloudPCConnectivityIssue) (resObj *CloudPCConnectivityIssue, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ComanagedDevices returns request builder for ManagedDevice collection
func (b *DeviceManagementRequestBuilder) ComanagedDevices() *DeviceManagementComanagedDevicesCollectionRequestBuilder {
	bb := &DeviceManagementComanagedDevicesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/comanagedDevices"
	return bb
}

// DeviceManagementComanagedDevicesCollectionRequestBuilder is request builder for ManagedDevice collection rcn
type DeviceManagementComanagedDevicesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDevice collection
func (b *DeviceManagementComanagedDevicesCollectionRequestBuilder) Request() *DeviceManagementComanagedDevicesCollectionRequest {
	return &DeviceManagementComanagedDevicesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDevice item
func (b *DeviceManagementComanagedDevicesCollectionRequestBuilder) ID(id string) *ManagedDeviceRequestBuilder {
	bb := &ManagedDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementComanagedDevicesCollectionRequest is request for ManagedDevice collection
type DeviceManagementComanagedDevicesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDevice collection
func (r *DeviceManagementComanagedDevicesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDevice, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDevice
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDevice
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDevice collection, max N pages
func (r *DeviceManagementComanagedDevicesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDevice, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDevice collection
func (r *DeviceManagementComanagedDevicesCollectionRequest) Get(ctx context.Context) ([]ManagedDevice, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDevice collection
func (r *DeviceManagementComanagedDevicesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDevice) (resObj *ManagedDevice, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ComanagementEligibleDevices returns request builder for ComanagementEligibleDevice collection
func (b *DeviceManagementRequestBuilder) ComanagementEligibleDevices() *DeviceManagementComanagementEligibleDevicesCollectionRequestBuilder {
	bb := &DeviceManagementComanagementEligibleDevicesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/comanagementEligibleDevices"
	return bb
}

// DeviceManagementComanagementEligibleDevicesCollectionRequestBuilder is request builder for ComanagementEligibleDevice collection rcn
type DeviceManagementComanagementEligibleDevicesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ComanagementEligibleDevice collection
func (b *DeviceManagementComanagementEligibleDevicesCollectionRequestBuilder) Request() *DeviceManagementComanagementEligibleDevicesCollectionRequest {
	return &DeviceManagementComanagementEligibleDevicesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ComanagementEligibleDevice item
func (b *DeviceManagementComanagementEligibleDevicesCollectionRequestBuilder) ID(id string) *ComanagementEligibleDeviceRequestBuilder {
	bb := &ComanagementEligibleDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementComanagementEligibleDevicesCollectionRequest is request for ComanagementEligibleDevice collection
type DeviceManagementComanagementEligibleDevicesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ComanagementEligibleDevice collection
func (r *DeviceManagementComanagementEligibleDevicesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ComanagementEligibleDevice, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ComanagementEligibleDevice
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ComanagementEligibleDevice
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ComanagementEligibleDevice collection, max N pages
func (r *DeviceManagementComanagementEligibleDevicesCollectionRequest) GetN(ctx context.Context, n int) ([]ComanagementEligibleDevice, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ComanagementEligibleDevice collection
func (r *DeviceManagementComanagementEligibleDevicesCollectionRequest) Get(ctx context.Context) ([]ComanagementEligibleDevice, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ComanagementEligibleDevice collection
func (r *DeviceManagementComanagementEligibleDevicesCollectionRequest) Add(ctx context.Context, reqObj *ComanagementEligibleDevice) (resObj *ComanagementEligibleDevice, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ComplianceCategories returns request builder for DeviceManagementConfigurationCategory collection
func (b *DeviceManagementRequestBuilder) ComplianceCategories() *DeviceManagementComplianceCategoriesCollectionRequestBuilder {
	bb := &DeviceManagementComplianceCategoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/complianceCategories"
	return bb
}

// DeviceManagementComplianceCategoriesCollectionRequestBuilder is request builder for DeviceManagementConfigurationCategory collection rcn
type DeviceManagementComplianceCategoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationCategory collection
func (b *DeviceManagementComplianceCategoriesCollectionRequestBuilder) Request() *DeviceManagementComplianceCategoriesCollectionRequest {
	return &DeviceManagementComplianceCategoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationCategory item
func (b *DeviceManagementComplianceCategoriesCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationCategoryRequestBuilder {
	bb := &DeviceManagementConfigurationCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementComplianceCategoriesCollectionRequest is request for DeviceManagementConfigurationCategory collection
type DeviceManagementComplianceCategoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationCategory collection
func (r *DeviceManagementComplianceCategoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationCategory collection, max N pages
func (r *DeviceManagementComplianceCategoriesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationCategory collection
func (r *DeviceManagementComplianceCategoriesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationCategory collection
func (r *DeviceManagementComplianceCategoriesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationCategory) (resObj *DeviceManagementConfigurationCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ComplianceManagementPartners returns request builder for ComplianceManagementPartner collection
func (b *DeviceManagementRequestBuilder) ComplianceManagementPartners() *DeviceManagementComplianceManagementPartnersCollectionRequestBuilder {
	bb := &DeviceManagementComplianceManagementPartnersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/complianceManagementPartners"
	return bb
}

// DeviceManagementComplianceManagementPartnersCollectionRequestBuilder is request builder for ComplianceManagementPartner collection rcn
type DeviceManagementComplianceManagementPartnersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ComplianceManagementPartner collection
func (b *DeviceManagementComplianceManagementPartnersCollectionRequestBuilder) Request() *DeviceManagementComplianceManagementPartnersCollectionRequest {
	return &DeviceManagementComplianceManagementPartnersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ComplianceManagementPartner item
func (b *DeviceManagementComplianceManagementPartnersCollectionRequestBuilder) ID(id string) *ComplianceManagementPartnerRequestBuilder {
	bb := &ComplianceManagementPartnerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementComplianceManagementPartnersCollectionRequest is request for ComplianceManagementPartner collection
type DeviceManagementComplianceManagementPartnersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ComplianceManagementPartner collection
func (r *DeviceManagementComplianceManagementPartnersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ComplianceManagementPartner, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ComplianceManagementPartner
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ComplianceManagementPartner
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ComplianceManagementPartner collection, max N pages
func (r *DeviceManagementComplianceManagementPartnersCollectionRequest) GetN(ctx context.Context, n int) ([]ComplianceManagementPartner, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ComplianceManagementPartner collection
func (r *DeviceManagementComplianceManagementPartnersCollectionRequest) Get(ctx context.Context) ([]ComplianceManagementPartner, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ComplianceManagementPartner collection
func (r *DeviceManagementComplianceManagementPartnersCollectionRequest) Add(ctx context.Context, reqObj *ComplianceManagementPartner) (resObj *ComplianceManagementPartner, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CompliancePolicies returns request builder for DeviceManagementCompliancePolicy collection
func (b *DeviceManagementRequestBuilder) CompliancePolicies() *DeviceManagementCompliancePoliciesCollectionRequestBuilder {
	bb := &DeviceManagementCompliancePoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/compliancePolicies"
	return bb
}

// DeviceManagementCompliancePoliciesCollectionRequestBuilder is request builder for DeviceManagementCompliancePolicy collection rcn
type DeviceManagementCompliancePoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementCompliancePolicy collection
func (b *DeviceManagementCompliancePoliciesCollectionRequestBuilder) Request() *DeviceManagementCompliancePoliciesCollectionRequest {
	return &DeviceManagementCompliancePoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementCompliancePolicy item
func (b *DeviceManagementCompliancePoliciesCollectionRequestBuilder) ID(id string) *DeviceManagementCompliancePolicyRequestBuilder {
	bb := &DeviceManagementCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementCompliancePoliciesCollectionRequest is request for DeviceManagementCompliancePolicy collection
type DeviceManagementCompliancePoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementCompliancePolicy collection
func (r *DeviceManagementCompliancePoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementCompliancePolicy collection, max N pages
func (r *DeviceManagementCompliancePoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementCompliancePolicy collection
func (r *DeviceManagementCompliancePoliciesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementCompliancePolicy collection
func (r *DeviceManagementCompliancePoliciesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementCompliancePolicy) (resObj *DeviceManagementCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ComplianceSettings returns request builder for DeviceManagementConfigurationSettingDefinition collection
func (b *DeviceManagementRequestBuilder) ComplianceSettings() *DeviceManagementComplianceSettingsCollectionRequestBuilder {
	bb := &DeviceManagementComplianceSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/complianceSettings"
	return bb
}

// DeviceManagementComplianceSettingsCollectionRequestBuilder is request builder for DeviceManagementConfigurationSettingDefinition collection rcn
type DeviceManagementComplianceSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSettingDefinition collection
func (b *DeviceManagementComplianceSettingsCollectionRequestBuilder) Request() *DeviceManagementComplianceSettingsCollectionRequest {
	return &DeviceManagementComplianceSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSettingDefinition item
func (b *DeviceManagementComplianceSettingsCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSettingDefinitionRequestBuilder {
	bb := &DeviceManagementConfigurationSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementComplianceSettingsCollectionRequest is request for DeviceManagementConfigurationSettingDefinition collection
type DeviceManagementComplianceSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSettingDefinition collection, max N pages
func (r *DeviceManagementComplianceSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSettingDefinition) (resObj *DeviceManagementConfigurationSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ConditionalAccessSettings is navigation property rn
func (b *DeviceManagementRequestBuilder) ConditionalAccessSettings() *OnPremisesConditionalAccessSettingsRequestBuilder {
	bb := &OnPremisesConditionalAccessSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/conditionalAccessSettings"
	return bb
}

// ConfigManagerCollections returns request builder for ConfigManagerCollection collection
func (b *DeviceManagementRequestBuilder) ConfigManagerCollections() *DeviceManagementConfigManagerCollectionsCollectionRequestBuilder {
	bb := &DeviceManagementConfigManagerCollectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/configManagerCollections"
	return bb
}

// DeviceManagementConfigManagerCollectionsCollectionRequestBuilder is request builder for ConfigManagerCollection collection rcn
type DeviceManagementConfigManagerCollectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ConfigManagerCollection collection
func (b *DeviceManagementConfigManagerCollectionsCollectionRequestBuilder) Request() *DeviceManagementConfigManagerCollectionsCollectionRequest {
	return &DeviceManagementConfigManagerCollectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ConfigManagerCollection item
func (b *DeviceManagementConfigManagerCollectionsCollectionRequestBuilder) ID(id string) *ConfigManagerCollectionRequestBuilder {
	bb := &ConfigManagerCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementConfigManagerCollectionsCollectionRequest is request for ConfigManagerCollection collection
type DeviceManagementConfigManagerCollectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ConfigManagerCollection collection
func (r *DeviceManagementConfigManagerCollectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ConfigManagerCollection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ConfigManagerCollection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ConfigManagerCollection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ConfigManagerCollection collection, max N pages
func (r *DeviceManagementConfigManagerCollectionsCollectionRequest) GetN(ctx context.Context, n int) ([]ConfigManagerCollection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ConfigManagerCollection collection
func (r *DeviceManagementConfigManagerCollectionsCollectionRequest) Get(ctx context.Context) ([]ConfigManagerCollection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ConfigManagerCollection collection
func (r *DeviceManagementConfigManagerCollectionsCollectionRequest) Add(ctx context.Context, reqObj *ConfigManagerCollection) (resObj *ConfigManagerCollection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ConfigurationCategories returns request builder for DeviceManagementConfigurationCategory collection
func (b *DeviceManagementRequestBuilder) ConfigurationCategories() *DeviceManagementConfigurationCategoriesCollectionRequestBuilder {
	bb := &DeviceManagementConfigurationCategoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/configurationCategories"
	return bb
}

// DeviceManagementConfigurationCategoriesCollectionRequestBuilder is request builder for DeviceManagementConfigurationCategory collection rcn
type DeviceManagementConfigurationCategoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationCategory collection
func (b *DeviceManagementConfigurationCategoriesCollectionRequestBuilder) Request() *DeviceManagementConfigurationCategoriesCollectionRequest {
	return &DeviceManagementConfigurationCategoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationCategory item
func (b *DeviceManagementConfigurationCategoriesCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationCategoryRequestBuilder {
	bb := &DeviceManagementConfigurationCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementConfigurationCategoriesCollectionRequest is request for DeviceManagementConfigurationCategory collection
type DeviceManagementConfigurationCategoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationCategory collection
func (r *DeviceManagementConfigurationCategoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationCategory collection, max N pages
func (r *DeviceManagementConfigurationCategoriesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationCategory collection
func (r *DeviceManagementConfigurationCategoriesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationCategory collection
func (r *DeviceManagementConfigurationCategoriesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationCategory) (resObj *DeviceManagementConfigurationCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ConfigurationPolicies returns request builder for DeviceManagementConfigurationPolicy collection
func (b *DeviceManagementRequestBuilder) ConfigurationPolicies() *DeviceManagementConfigurationPoliciesCollectionRequestBuilder {
	bb := &DeviceManagementConfigurationPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/configurationPolicies"
	return bb
}

// DeviceManagementConfigurationPoliciesCollectionRequestBuilder is request builder for DeviceManagementConfigurationPolicy collection rcn
type DeviceManagementConfigurationPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationPolicy collection
func (b *DeviceManagementConfigurationPoliciesCollectionRequestBuilder) Request() *DeviceManagementConfigurationPoliciesCollectionRequest {
	return &DeviceManagementConfigurationPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationPolicy item
func (b *DeviceManagementConfigurationPoliciesCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationPolicyRequestBuilder {
	bb := &DeviceManagementConfigurationPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementConfigurationPoliciesCollectionRequest is request for DeviceManagementConfigurationPolicy collection
type DeviceManagementConfigurationPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationPolicy collection
func (r *DeviceManagementConfigurationPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationPolicy collection, max N pages
func (r *DeviceManagementConfigurationPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationPolicy collection
func (r *DeviceManagementConfigurationPoliciesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationPolicy collection
func (r *DeviceManagementConfigurationPoliciesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationPolicy) (resObj *DeviceManagementConfigurationPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ConfigurationPolicyTemplates returns request builder for DeviceManagementConfigurationPolicyTemplate collection
func (b *DeviceManagementRequestBuilder) ConfigurationPolicyTemplates() *DeviceManagementConfigurationPolicyTemplatesCollectionRequestBuilder {
	bb := &DeviceManagementConfigurationPolicyTemplatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/configurationPolicyTemplates"
	return bb
}

// DeviceManagementConfigurationPolicyTemplatesCollectionRequestBuilder is request builder for DeviceManagementConfigurationPolicyTemplate collection rcn
type DeviceManagementConfigurationPolicyTemplatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationPolicyTemplate collection
func (b *DeviceManagementConfigurationPolicyTemplatesCollectionRequestBuilder) Request() *DeviceManagementConfigurationPolicyTemplatesCollectionRequest {
	return &DeviceManagementConfigurationPolicyTemplatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationPolicyTemplate item
func (b *DeviceManagementConfigurationPolicyTemplatesCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationPolicyTemplateRequestBuilder {
	bb := &DeviceManagementConfigurationPolicyTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementConfigurationPolicyTemplatesCollectionRequest is request for DeviceManagementConfigurationPolicyTemplate collection
type DeviceManagementConfigurationPolicyTemplatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationPolicyTemplate collection
func (r *DeviceManagementConfigurationPolicyTemplatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationPolicyTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationPolicyTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationPolicyTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationPolicyTemplate collection, max N pages
func (r *DeviceManagementConfigurationPolicyTemplatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationPolicyTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationPolicyTemplate collection
func (r *DeviceManagementConfigurationPolicyTemplatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationPolicyTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationPolicyTemplate collection
func (r *DeviceManagementConfigurationPolicyTemplatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationPolicyTemplate) (resObj *DeviceManagementConfigurationPolicyTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ConfigurationSettings returns request builder for DeviceManagementConfigurationSettingDefinition collection
func (b *DeviceManagementRequestBuilder) ConfigurationSettings() *DeviceManagementConfigurationSettingsCollectionRequestBuilder {
	bb := &DeviceManagementConfigurationSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/configurationSettings"
	return bb
}

// DeviceManagementConfigurationSettingsCollectionRequestBuilder is request builder for DeviceManagementConfigurationSettingDefinition collection rcn
type DeviceManagementConfigurationSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSettingDefinition collection
func (b *DeviceManagementConfigurationSettingsCollectionRequestBuilder) Request() *DeviceManagementConfigurationSettingsCollectionRequest {
	return &DeviceManagementConfigurationSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSettingDefinition item
func (b *DeviceManagementConfigurationSettingsCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSettingDefinitionRequestBuilder {
	bb := &DeviceManagementConfigurationSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementConfigurationSettingsCollectionRequest is request for DeviceManagementConfigurationSettingDefinition collection
type DeviceManagementConfigurationSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementConfigurationSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSettingDefinition collection, max N pages
func (r *DeviceManagementConfigurationSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementConfigurationSettingsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementConfigurationSettingsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSettingDefinition) (resObj *DeviceManagementConfigurationSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DataSharingConsents returns request builder for DataSharingConsent collection
func (b *DeviceManagementRequestBuilder) DataSharingConsents() *DeviceManagementDataSharingConsentsCollectionRequestBuilder {
	bb := &DeviceManagementDataSharingConsentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dataSharingConsents"
	return bb
}

// DeviceManagementDataSharingConsentsCollectionRequestBuilder is request builder for DataSharingConsent collection rcn
type DeviceManagementDataSharingConsentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DataSharingConsent collection
func (b *DeviceManagementDataSharingConsentsCollectionRequestBuilder) Request() *DeviceManagementDataSharingConsentsCollectionRequest {
	return &DeviceManagementDataSharingConsentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DataSharingConsent item
func (b *DeviceManagementDataSharingConsentsCollectionRequestBuilder) ID(id string) *DataSharingConsentRequestBuilder {
	bb := &DataSharingConsentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDataSharingConsentsCollectionRequest is request for DataSharingConsent collection
type DeviceManagementDataSharingConsentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DataSharingConsent collection
func (r *DeviceManagementDataSharingConsentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DataSharingConsent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DataSharingConsent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DataSharingConsent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DataSharingConsent collection, max N pages
func (r *DeviceManagementDataSharingConsentsCollectionRequest) GetN(ctx context.Context, n int) ([]DataSharingConsent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DataSharingConsent collection
func (r *DeviceManagementDataSharingConsentsCollectionRequest) Get(ctx context.Context) ([]DataSharingConsent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DataSharingConsent collection
func (r *DeviceManagementDataSharingConsentsCollectionRequest) Add(ctx context.Context, reqObj *DataSharingConsent) (resObj *DataSharingConsent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DepOnboardingSettings returns request builder for DepOnboardingSetting collection
func (b *DeviceManagementRequestBuilder) DepOnboardingSettings() *DeviceManagementDepOnboardingSettingsCollectionRequestBuilder {
	bb := &DeviceManagementDepOnboardingSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/depOnboardingSettings"
	return bb
}

// DeviceManagementDepOnboardingSettingsCollectionRequestBuilder is request builder for DepOnboardingSetting collection rcn
type DeviceManagementDepOnboardingSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DepOnboardingSetting collection
func (b *DeviceManagementDepOnboardingSettingsCollectionRequestBuilder) Request() *DeviceManagementDepOnboardingSettingsCollectionRequest {
	return &DeviceManagementDepOnboardingSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DepOnboardingSetting item
func (b *DeviceManagementDepOnboardingSettingsCollectionRequestBuilder) ID(id string) *DepOnboardingSettingRequestBuilder {
	bb := &DepOnboardingSettingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDepOnboardingSettingsCollectionRequest is request for DepOnboardingSetting collection
type DeviceManagementDepOnboardingSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DepOnboardingSetting collection
func (r *DeviceManagementDepOnboardingSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DepOnboardingSetting, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DepOnboardingSetting
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DepOnboardingSetting
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DepOnboardingSetting collection, max N pages
func (r *DeviceManagementDepOnboardingSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DepOnboardingSetting, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DepOnboardingSetting collection
func (r *DeviceManagementDepOnboardingSettingsCollectionRequest) Get(ctx context.Context) ([]DepOnboardingSetting, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DepOnboardingSetting collection
func (r *DeviceManagementDepOnboardingSettingsCollectionRequest) Add(ctx context.Context, reqObj *DepOnboardingSetting) (resObj *DepOnboardingSetting, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DerivedCredentials returns request builder for DeviceManagementDerivedCredentialSettings collection
func (b *DeviceManagementRequestBuilder) DerivedCredentials() *DeviceManagementDerivedCredentialsCollectionRequestBuilder {
	bb := &DeviceManagementDerivedCredentialsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/derivedCredentials"
	return bb
}

// DeviceManagementDerivedCredentialsCollectionRequestBuilder is request builder for DeviceManagementDerivedCredentialSettings collection rcn
type DeviceManagementDerivedCredentialsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementDerivedCredentialSettings collection
func (b *DeviceManagementDerivedCredentialsCollectionRequestBuilder) Request() *DeviceManagementDerivedCredentialsCollectionRequest {
	return &DeviceManagementDerivedCredentialsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementDerivedCredentialSettings item
func (b *DeviceManagementDerivedCredentialsCollectionRequestBuilder) ID(id string) *DeviceManagementDerivedCredentialSettingsRequestBuilder {
	bb := &DeviceManagementDerivedCredentialSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDerivedCredentialsCollectionRequest is request for DeviceManagementDerivedCredentialSettings collection
type DeviceManagementDerivedCredentialsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementDerivedCredentialSettings collection
func (r *DeviceManagementDerivedCredentialsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementDerivedCredentialSettings, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementDerivedCredentialSettings
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementDerivedCredentialSettings
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementDerivedCredentialSettings collection, max N pages
func (r *DeviceManagementDerivedCredentialsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementDerivedCredentialSettings, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementDerivedCredentialSettings collection
func (r *DeviceManagementDerivedCredentialsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementDerivedCredentialSettings, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementDerivedCredentialSettings collection
func (r *DeviceManagementDerivedCredentialsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementDerivedCredentialSettings) (resObj *DeviceManagementDerivedCredentialSettings, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DetectedApps returns request builder for DetectedApp collection
func (b *DeviceManagementRequestBuilder) DetectedApps() *DeviceManagementDetectedAppsCollectionRequestBuilder {
	bb := &DeviceManagementDetectedAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/detectedApps"
	return bb
}

// DeviceManagementDetectedAppsCollectionRequestBuilder is request builder for DetectedApp collection rcn
type DeviceManagementDetectedAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DetectedApp collection
func (b *DeviceManagementDetectedAppsCollectionRequestBuilder) Request() *DeviceManagementDetectedAppsCollectionRequest {
	return &DeviceManagementDetectedAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DetectedApp item
func (b *DeviceManagementDetectedAppsCollectionRequestBuilder) ID(id string) *DetectedAppRequestBuilder {
	bb := &DetectedAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDetectedAppsCollectionRequest is request for DetectedApp collection
type DeviceManagementDetectedAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DetectedApp collection
func (r *DeviceManagementDetectedAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DetectedApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DetectedApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DetectedApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DetectedApp collection, max N pages
func (r *DeviceManagementDetectedAppsCollectionRequest) GetN(ctx context.Context, n int) ([]DetectedApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DetectedApp collection
func (r *DeviceManagementDetectedAppsCollectionRequest) Get(ctx context.Context) ([]DetectedApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DetectedApp collection
func (r *DeviceManagementDetectedAppsCollectionRequest) Add(ctx context.Context, reqObj *DetectedApp) (resObj *DetectedApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceCategories returns request builder for DeviceCategory collection
func (b *DeviceManagementRequestBuilder) DeviceCategories() *DeviceManagementDeviceCategoriesCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCategoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceCategories"
	return bb
}

// DeviceManagementDeviceCategoriesCollectionRequestBuilder is request builder for DeviceCategory collection rcn
type DeviceManagementDeviceCategoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceCategory collection
func (b *DeviceManagementDeviceCategoriesCollectionRequestBuilder) Request() *DeviceManagementDeviceCategoriesCollectionRequest {
	return &DeviceManagementDeviceCategoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceCategory item
func (b *DeviceManagementDeviceCategoriesCollectionRequestBuilder) ID(id string) *DeviceCategoryRequestBuilder {
	bb := &DeviceCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCategoriesCollectionRequest is request for DeviceCategory collection
type DeviceManagementDeviceCategoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceCategory collection
func (r *DeviceManagementDeviceCategoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceCategory collection, max N pages
func (r *DeviceManagementDeviceCategoriesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceCategory collection
func (r *DeviceManagementDeviceCategoriesCollectionRequest) Get(ctx context.Context) ([]DeviceCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceCategory collection
func (r *DeviceManagementDeviceCategoriesCollectionRequest) Add(ctx context.Context, reqObj *DeviceCategory) (resObj *DeviceCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceCompliancePolicies returns request builder for DeviceCompliancePolicy collection
func (b *DeviceManagementRequestBuilder) DeviceCompliancePolicies() *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceCompliancePolicies"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder is request builder for DeviceCompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceCompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) ID(id string) *DeviceCompliancePolicyRequestBuilder {
	bb := &DeviceCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionRequest is request for DeviceCompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceCompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionRequest) Get(ctx context.Context) ([]DeviceCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionRequest) Add(ctx context.Context, reqObj *DeviceCompliancePolicy) (resObj *DeviceCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceCompliancePolicyDeviceStateSummary is navigation property rn
func (b *DeviceManagementRequestBuilder) DeviceCompliancePolicyDeviceStateSummary() *DeviceCompliancePolicyDeviceStateSummaryRequestBuilder {
	bb := &DeviceCompliancePolicyDeviceStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceCompliancePolicyDeviceStateSummary"
	return bb
}

// DeviceCompliancePolicySettingStateSummaries returns request builder for DeviceCompliancePolicySettingStateSummary collection
func (b *DeviceManagementRequestBuilder) DeviceCompliancePolicySettingStateSummaries() *DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceCompliancePolicySettingStateSummaries"
	return bb
}

// DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder is request builder for DeviceCompliancePolicySettingStateSummary collection rcn
type DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceCompliancePolicySettingStateSummary collection
func (b *DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequest {
	return &DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceCompliancePolicySettingStateSummary item
func (b *DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder) ID(id string) *DeviceCompliancePolicySettingStateSummaryRequestBuilder {
	bb := &DeviceCompliancePolicySettingStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequest is request for DeviceCompliancePolicySettingStateSummary collection
type DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceCompliancePolicySettingStateSummary collection
func (r *DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceCompliancePolicySettingStateSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceCompliancePolicySettingStateSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceCompliancePolicySettingStateSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceCompliancePolicySettingStateSummary collection, max N pages
func (r *DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceCompliancePolicySettingStateSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceCompliancePolicySettingStateSummary collection
func (r *DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequest) Get(ctx context.Context) ([]DeviceCompliancePolicySettingStateSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceCompliancePolicySettingStateSummary collection
func (r *DeviceManagementDeviceCompliancePolicySettingStateSummariesCollectionRequest) Add(ctx context.Context, reqObj *DeviceCompliancePolicySettingStateSummary) (resObj *DeviceCompliancePolicySettingStateSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceComplianceScripts returns request builder for DeviceComplianceScript collection
func (b *DeviceManagementRequestBuilder) DeviceComplianceScripts() *DeviceManagementDeviceComplianceScriptsCollectionRequestBuilder {
	bb := &DeviceManagementDeviceComplianceScriptsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceComplianceScripts"
	return bb
}

// DeviceManagementDeviceComplianceScriptsCollectionRequestBuilder is request builder for DeviceComplianceScript collection rcn
type DeviceManagementDeviceComplianceScriptsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceComplianceScript collection
func (b *DeviceManagementDeviceComplianceScriptsCollectionRequestBuilder) Request() *DeviceManagementDeviceComplianceScriptsCollectionRequest {
	return &DeviceManagementDeviceComplianceScriptsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceComplianceScript item
func (b *DeviceManagementDeviceComplianceScriptsCollectionRequestBuilder) ID(id string) *DeviceComplianceScriptRequestBuilder {
	bb := &DeviceComplianceScriptRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceComplianceScriptsCollectionRequest is request for DeviceComplianceScript collection
type DeviceManagementDeviceComplianceScriptsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceComplianceScript collection
func (r *DeviceManagementDeviceComplianceScriptsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceComplianceScript, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceComplianceScript
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceComplianceScript
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceComplianceScript collection, max N pages
func (r *DeviceManagementDeviceComplianceScriptsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceComplianceScript, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceComplianceScript collection
func (r *DeviceManagementDeviceComplianceScriptsCollectionRequest) Get(ctx context.Context) ([]DeviceComplianceScript, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceComplianceScript collection
func (r *DeviceManagementDeviceComplianceScriptsCollectionRequest) Add(ctx context.Context, reqObj *DeviceComplianceScript) (resObj *DeviceComplianceScript, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceConfigurationConflictSummary returns request builder for DeviceConfigurationConflictSummary collection
func (b *DeviceManagementRequestBuilder) DeviceConfigurationConflictSummary() *DeviceManagementDeviceConfigurationConflictSummaryCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationConflictSummaryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceConfigurationConflictSummary"
	return bb
}

// DeviceManagementDeviceConfigurationConflictSummaryCollectionRequestBuilder is request builder for DeviceConfigurationConflictSummary collection rcn
type DeviceManagementDeviceConfigurationConflictSummaryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfigurationConflictSummary collection
func (b *DeviceManagementDeviceConfigurationConflictSummaryCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationConflictSummaryCollectionRequest {
	return &DeviceManagementDeviceConfigurationConflictSummaryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfigurationConflictSummary item
func (b *DeviceManagementDeviceConfigurationConflictSummaryCollectionRequestBuilder) ID(id string) *DeviceConfigurationConflictSummaryRequestBuilder {
	bb := &DeviceConfigurationConflictSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationConflictSummaryCollectionRequest is request for DeviceConfigurationConflictSummary collection
type DeviceManagementDeviceConfigurationConflictSummaryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfigurationConflictSummary collection
func (r *DeviceManagementDeviceConfigurationConflictSummaryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfigurationConflictSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfigurationConflictSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfigurationConflictSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfigurationConflictSummary collection, max N pages
func (r *DeviceManagementDeviceConfigurationConflictSummaryCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfigurationConflictSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfigurationConflictSummary collection
func (r *DeviceManagementDeviceConfigurationConflictSummaryCollectionRequest) Get(ctx context.Context) ([]DeviceConfigurationConflictSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfigurationConflictSummary collection
func (r *DeviceManagementDeviceConfigurationConflictSummaryCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfigurationConflictSummary) (resObj *DeviceConfigurationConflictSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceConfigurationDeviceStateSummaries is navigation property rn
func (b *DeviceManagementRequestBuilder) DeviceConfigurationDeviceStateSummaries() *DeviceConfigurationDeviceStateSummaryRequestBuilder {
	bb := &DeviceConfigurationDeviceStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceConfigurationDeviceStateSummaries"
	return bb
}

// DeviceConfigurationRestrictedAppsViolations returns request builder for RestrictedAppsViolation collection
func (b *DeviceManagementRequestBuilder) DeviceConfigurationRestrictedAppsViolations() *DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceConfigurationRestrictedAppsViolations"
	return bb
}

// DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequestBuilder is request builder for RestrictedAppsViolation collection rcn
type DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RestrictedAppsViolation collection
func (b *DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequest {
	return &DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RestrictedAppsViolation item
func (b *DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequestBuilder) ID(id string) *RestrictedAppsViolationRequestBuilder {
	bb := &RestrictedAppsViolationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequest is request for RestrictedAppsViolation collection
type DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for RestrictedAppsViolation collection
func (r *DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]RestrictedAppsViolation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RestrictedAppsViolation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []RestrictedAppsViolation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for RestrictedAppsViolation collection, max N pages
func (r *DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequest) GetN(ctx context.Context, n int) ([]RestrictedAppsViolation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for RestrictedAppsViolation collection
func (r *DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequest) Get(ctx context.Context) ([]RestrictedAppsViolation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for RestrictedAppsViolation collection
func (r *DeviceManagementDeviceConfigurationRestrictedAppsViolationsCollectionRequest) Add(ctx context.Context, reqObj *RestrictedAppsViolation) (resObj *RestrictedAppsViolation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceConfigurationUserStateSummaries is navigation property rn
func (b *DeviceManagementRequestBuilder) DeviceConfigurationUserStateSummaries() *DeviceConfigurationUserStateSummaryRequestBuilder {
	bb := &DeviceConfigurationUserStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceConfigurationUserStateSummaries"
	return bb
}

// DeviceConfigurations returns request builder for DeviceConfiguration collection
func (b *DeviceManagementRequestBuilder) DeviceConfigurations() *DeviceManagementDeviceConfigurationsCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceConfigurations"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionRequestBuilder is request builder for DeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) ID(id string) *DeviceConfigurationRequestBuilder {
	bb := &DeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionRequest is request for DeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionRequest) Get(ctx context.Context) ([]DeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfiguration) (resObj *DeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceConfigurationsAllManagedDeviceCertificateStates returns request builder for ManagedAllDeviceCertificateState collection
func (b *DeviceManagementRequestBuilder) DeviceConfigurationsAllManagedDeviceCertificateStates() *DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceConfigurationsAllManagedDeviceCertificateStates"
	return bb
}

// DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedAllDeviceCertificateState collection rcn
type DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAllDeviceCertificateState collection
func (b *DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequest {
	return &DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAllDeviceCertificateState item
func (b *DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedAllDeviceCertificateStateRequestBuilder {
	bb := &ManagedAllDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequest is request for ManagedAllDeviceCertificateState collection
type DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAllDeviceCertificateState collection
func (r *DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAllDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAllDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAllDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAllDeviceCertificateState collection, max N pages
func (r *DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAllDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAllDeviceCertificateState collection
func (r *DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedAllDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAllDeviceCertificateState collection
func (r *DeviceManagementDeviceConfigurationsAllManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedAllDeviceCertificateState) (resObj *ManagedAllDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceCustomAttributeShellScripts returns request builder for DeviceCustomAttributeShellScript collection
func (b *DeviceManagementRequestBuilder) DeviceCustomAttributeShellScripts() *DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceCustomAttributeShellScripts"
	return bb
}

// DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequestBuilder is request builder for DeviceCustomAttributeShellScript collection rcn
type DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceCustomAttributeShellScript collection
func (b *DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequestBuilder) Request() *DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequest {
	return &DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceCustomAttributeShellScript item
func (b *DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequestBuilder) ID(id string) *DeviceCustomAttributeShellScriptRequestBuilder {
	bb := &DeviceCustomAttributeShellScriptRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequest is request for DeviceCustomAttributeShellScript collection
type DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceCustomAttributeShellScript collection
func (r *DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceCustomAttributeShellScript, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceCustomAttributeShellScript
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceCustomAttributeShellScript
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceCustomAttributeShellScript collection, max N pages
func (r *DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceCustomAttributeShellScript, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceCustomAttributeShellScript collection
func (r *DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequest) Get(ctx context.Context) ([]DeviceCustomAttributeShellScript, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceCustomAttributeShellScript collection
func (r *DeviceManagementDeviceCustomAttributeShellScriptsCollectionRequest) Add(ctx context.Context, reqObj *DeviceCustomAttributeShellScript) (resObj *DeviceCustomAttributeShellScript, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceEnrollmentConfigurations returns request builder for DeviceEnrollmentConfiguration collection
func (b *DeviceManagementRequestBuilder) DeviceEnrollmentConfigurations() *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder {
	bb := &DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceEnrollmentConfigurations"
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder is request builder for DeviceEnrollmentConfiguration collection rcn
type DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceEnrollmentConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder) Request() *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequest {
	return &DeviceManagementDeviceEnrollmentConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceEnrollmentConfiguration item
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder) ID(id string) *DeviceEnrollmentConfigurationRequestBuilder {
	bb := &DeviceEnrollmentConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionRequest is request for DeviceEnrollmentConfiguration collection
type DeviceManagementDeviceEnrollmentConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceEnrollmentConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceEnrollmentConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceEnrollmentConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceEnrollmentConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceEnrollmentConfiguration collection, max N pages
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceEnrollmentConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceEnrollmentConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequest) Get(ctx context.Context) ([]DeviceEnrollmentConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceEnrollmentConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *DeviceEnrollmentConfiguration) (resObj *DeviceEnrollmentConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceHealthScripts returns request builder for DeviceHealthScript collection
func (b *DeviceManagementRequestBuilder) DeviceHealthScripts() *DeviceManagementDeviceHealthScriptsCollectionRequestBuilder {
	bb := &DeviceManagementDeviceHealthScriptsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceHealthScripts"
	return bb
}

// DeviceManagementDeviceHealthScriptsCollectionRequestBuilder is request builder for DeviceHealthScript collection rcn
type DeviceManagementDeviceHealthScriptsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceHealthScript collection
func (b *DeviceManagementDeviceHealthScriptsCollectionRequestBuilder) Request() *DeviceManagementDeviceHealthScriptsCollectionRequest {
	return &DeviceManagementDeviceHealthScriptsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceHealthScript item
func (b *DeviceManagementDeviceHealthScriptsCollectionRequestBuilder) ID(id string) *DeviceHealthScriptRequestBuilder {
	bb := &DeviceHealthScriptRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceHealthScriptsCollectionRequest is request for DeviceHealthScript collection
type DeviceManagementDeviceHealthScriptsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceHealthScript collection
func (r *DeviceManagementDeviceHealthScriptsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceHealthScript, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceHealthScript
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceHealthScript
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceHealthScript collection, max N pages
func (r *DeviceManagementDeviceHealthScriptsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceHealthScript, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceHealthScript collection
func (r *DeviceManagementDeviceHealthScriptsCollectionRequest) Get(ctx context.Context) ([]DeviceHealthScript, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceHealthScript collection
func (r *DeviceManagementDeviceHealthScriptsCollectionRequest) Add(ctx context.Context, reqObj *DeviceHealthScript) (resObj *DeviceHealthScript, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceManagementPartners returns request builder for DeviceManagementPartner collection
func (b *DeviceManagementRequestBuilder) DeviceManagementPartners() *DeviceManagementDeviceManagementPartnersCollectionRequestBuilder {
	bb := &DeviceManagementDeviceManagementPartnersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceManagementPartners"
	return bb
}

// DeviceManagementDeviceManagementPartnersCollectionRequestBuilder is request builder for DeviceManagementPartner collection rcn
type DeviceManagementDeviceManagementPartnersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementPartner collection
func (b *DeviceManagementDeviceManagementPartnersCollectionRequestBuilder) Request() *DeviceManagementDeviceManagementPartnersCollectionRequest {
	return &DeviceManagementDeviceManagementPartnersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementPartner item
func (b *DeviceManagementDeviceManagementPartnersCollectionRequestBuilder) ID(id string) *DeviceManagementPartnerRequestBuilder {
	bb := &DeviceManagementPartnerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceManagementPartnersCollectionRequest is request for DeviceManagementPartner collection
type DeviceManagementDeviceManagementPartnersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementPartner collection
func (r *DeviceManagementDeviceManagementPartnersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementPartner, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementPartner
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementPartner
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementPartner collection, max N pages
func (r *DeviceManagementDeviceManagementPartnersCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementPartner, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementPartner collection
func (r *DeviceManagementDeviceManagementPartnersCollectionRequest) Get(ctx context.Context) ([]DeviceManagementPartner, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementPartner collection
func (r *DeviceManagementDeviceManagementPartnersCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementPartner) (resObj *DeviceManagementPartner, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceManagementScripts returns request builder for DeviceManagementScript collection
func (b *DeviceManagementRequestBuilder) DeviceManagementScripts() *DeviceManagementDeviceManagementScriptsCollectionRequestBuilder {
	bb := &DeviceManagementDeviceManagementScriptsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceManagementScripts"
	return bb
}

// DeviceManagementDeviceManagementScriptsCollectionRequestBuilder is request builder for DeviceManagementScript collection rcn
type DeviceManagementDeviceManagementScriptsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScript collection
func (b *DeviceManagementDeviceManagementScriptsCollectionRequestBuilder) Request() *DeviceManagementDeviceManagementScriptsCollectionRequest {
	return &DeviceManagementDeviceManagementScriptsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScript item
func (b *DeviceManagementDeviceManagementScriptsCollectionRequestBuilder) ID(id string) *DeviceManagementScriptRequestBuilder {
	bb := &DeviceManagementScriptRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceManagementScriptsCollectionRequest is request for DeviceManagementScript collection
type DeviceManagementDeviceManagementScriptsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScript collection
func (r *DeviceManagementDeviceManagementScriptsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScript, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScript
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScript
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScript collection, max N pages
func (r *DeviceManagementDeviceManagementScriptsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScript, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScript collection
func (r *DeviceManagementDeviceManagementScriptsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScript, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScript collection
func (r *DeviceManagementDeviceManagementScriptsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScript) (resObj *DeviceManagementScript, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceShellScripts returns request builder for DeviceShellScript collection
func (b *DeviceManagementRequestBuilder) DeviceShellScripts() *DeviceManagementDeviceShellScriptsCollectionRequestBuilder {
	bb := &DeviceManagementDeviceShellScriptsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceShellScripts"
	return bb
}

// DeviceManagementDeviceShellScriptsCollectionRequestBuilder is request builder for DeviceShellScript collection rcn
type DeviceManagementDeviceShellScriptsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceShellScript collection
func (b *DeviceManagementDeviceShellScriptsCollectionRequestBuilder) Request() *DeviceManagementDeviceShellScriptsCollectionRequest {
	return &DeviceManagementDeviceShellScriptsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceShellScript item
func (b *DeviceManagementDeviceShellScriptsCollectionRequestBuilder) ID(id string) *DeviceShellScriptRequestBuilder {
	bb := &DeviceShellScriptRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceShellScriptsCollectionRequest is request for DeviceShellScript collection
type DeviceManagementDeviceShellScriptsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceShellScript collection
func (r *DeviceManagementDeviceShellScriptsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceShellScript, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceShellScript
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceShellScript
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceShellScript collection, max N pages
func (r *DeviceManagementDeviceShellScriptsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceShellScript, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceShellScript collection
func (r *DeviceManagementDeviceShellScriptsCollectionRequest) Get(ctx context.Context) ([]DeviceShellScript, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceShellScript collection
func (r *DeviceManagementDeviceShellScriptsCollectionRequest) Add(ctx context.Context, reqObj *DeviceShellScript) (resObj *DeviceShellScript, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DomainJoinConnectors returns request builder for DeviceManagementDomainJoinConnector collection
func (b *DeviceManagementRequestBuilder) DomainJoinConnectors() *DeviceManagementDomainJoinConnectorsCollectionRequestBuilder {
	bb := &DeviceManagementDomainJoinConnectorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/domainJoinConnectors"
	return bb
}

// DeviceManagementDomainJoinConnectorsCollectionRequestBuilder is request builder for DeviceManagementDomainJoinConnector collection rcn
type DeviceManagementDomainJoinConnectorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementDomainJoinConnector collection
func (b *DeviceManagementDomainJoinConnectorsCollectionRequestBuilder) Request() *DeviceManagementDomainJoinConnectorsCollectionRequest {
	return &DeviceManagementDomainJoinConnectorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementDomainJoinConnector item
func (b *DeviceManagementDomainJoinConnectorsCollectionRequestBuilder) ID(id string) *DeviceManagementDomainJoinConnectorRequestBuilder {
	bb := &DeviceManagementDomainJoinConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDomainJoinConnectorsCollectionRequest is request for DeviceManagementDomainJoinConnector collection
type DeviceManagementDomainJoinConnectorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementDomainJoinConnector collection
func (r *DeviceManagementDomainJoinConnectorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementDomainJoinConnector, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementDomainJoinConnector
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementDomainJoinConnector
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementDomainJoinConnector collection, max N pages
func (r *DeviceManagementDomainJoinConnectorsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementDomainJoinConnector, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementDomainJoinConnector collection
func (r *DeviceManagementDomainJoinConnectorsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementDomainJoinConnector, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementDomainJoinConnector collection
func (r *DeviceManagementDomainJoinConnectorsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementDomainJoinConnector) (resObj *DeviceManagementDomainJoinConnector, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EmbeddedSIMActivationCodePools returns request builder for EmbeddedSIMActivationCodePool collection
func (b *DeviceManagementRequestBuilder) EmbeddedSIMActivationCodePools() *DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequestBuilder {
	bb := &DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/embeddedSIMActivationCodePools"
	return bb
}

// DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequestBuilder is request builder for EmbeddedSIMActivationCodePool collection rcn
type DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EmbeddedSIMActivationCodePool collection
func (b *DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequestBuilder) Request() *DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequest {
	return &DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EmbeddedSIMActivationCodePool item
func (b *DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequestBuilder) ID(id string) *EmbeddedSIMActivationCodePoolRequestBuilder {
	bb := &EmbeddedSIMActivationCodePoolRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequest is request for EmbeddedSIMActivationCodePool collection
type DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EmbeddedSIMActivationCodePool collection
func (r *DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EmbeddedSIMActivationCodePool, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EmbeddedSIMActivationCodePool
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EmbeddedSIMActivationCodePool
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EmbeddedSIMActivationCodePool collection, max N pages
func (r *DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequest) GetN(ctx context.Context, n int) ([]EmbeddedSIMActivationCodePool, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EmbeddedSIMActivationCodePool collection
func (r *DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequest) Get(ctx context.Context) ([]EmbeddedSIMActivationCodePool, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EmbeddedSIMActivationCodePool collection
func (r *DeviceManagementEmbeddedSIMActivationCodePoolsCollectionRequest) Add(ctx context.Context, reqObj *EmbeddedSIMActivationCodePool) (resObj *EmbeddedSIMActivationCodePool, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ExchangeConnectors returns request builder for DeviceManagementExchangeConnector collection
func (b *DeviceManagementRequestBuilder) ExchangeConnectors() *DeviceManagementExchangeConnectorsCollectionRequestBuilder {
	bb := &DeviceManagementExchangeConnectorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/exchangeConnectors"
	return bb
}

// DeviceManagementExchangeConnectorsCollectionRequestBuilder is request builder for DeviceManagementExchangeConnector collection rcn
type DeviceManagementExchangeConnectorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementExchangeConnector collection
func (b *DeviceManagementExchangeConnectorsCollectionRequestBuilder) Request() *DeviceManagementExchangeConnectorsCollectionRequest {
	return &DeviceManagementExchangeConnectorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementExchangeConnector item
func (b *DeviceManagementExchangeConnectorsCollectionRequestBuilder) ID(id string) *DeviceManagementExchangeConnectorRequestBuilder {
	bb := &DeviceManagementExchangeConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementExchangeConnectorsCollectionRequest is request for DeviceManagementExchangeConnector collection
type DeviceManagementExchangeConnectorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementExchangeConnector collection
func (r *DeviceManagementExchangeConnectorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementExchangeConnector, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementExchangeConnector
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementExchangeConnector
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementExchangeConnector collection, max N pages
func (r *DeviceManagementExchangeConnectorsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementExchangeConnector, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementExchangeConnector collection
func (r *DeviceManagementExchangeConnectorsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementExchangeConnector, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementExchangeConnector collection
func (r *DeviceManagementExchangeConnectorsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementExchangeConnector) (resObj *DeviceManagementExchangeConnector, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ExchangeOnPremisesPolicies returns request builder for DeviceManagementExchangeOnPremisesPolicy collection
func (b *DeviceManagementRequestBuilder) ExchangeOnPremisesPolicies() *DeviceManagementExchangeOnPremisesPoliciesCollectionRequestBuilder {
	bb := &DeviceManagementExchangeOnPremisesPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/exchangeOnPremisesPolicies"
	return bb
}

// DeviceManagementExchangeOnPremisesPoliciesCollectionRequestBuilder is request builder for DeviceManagementExchangeOnPremisesPolicy collection rcn
type DeviceManagementExchangeOnPremisesPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementExchangeOnPremisesPolicy collection
func (b *DeviceManagementExchangeOnPremisesPoliciesCollectionRequestBuilder) Request() *DeviceManagementExchangeOnPremisesPoliciesCollectionRequest {
	return &DeviceManagementExchangeOnPremisesPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementExchangeOnPremisesPolicy item
func (b *DeviceManagementExchangeOnPremisesPoliciesCollectionRequestBuilder) ID(id string) *DeviceManagementExchangeOnPremisesPolicyRequestBuilder {
	bb := &DeviceManagementExchangeOnPremisesPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementExchangeOnPremisesPoliciesCollectionRequest is request for DeviceManagementExchangeOnPremisesPolicy collection
type DeviceManagementExchangeOnPremisesPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementExchangeOnPremisesPolicy collection
func (r *DeviceManagementExchangeOnPremisesPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementExchangeOnPremisesPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementExchangeOnPremisesPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementExchangeOnPremisesPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementExchangeOnPremisesPolicy collection, max N pages
func (r *DeviceManagementExchangeOnPremisesPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementExchangeOnPremisesPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementExchangeOnPremisesPolicy collection
func (r *DeviceManagementExchangeOnPremisesPoliciesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementExchangeOnPremisesPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementExchangeOnPremisesPolicy collection
func (r *DeviceManagementExchangeOnPremisesPoliciesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementExchangeOnPremisesPolicy) (resObj *DeviceManagementExchangeOnPremisesPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ExchangeOnPremisesPolicy is navigation property rn
func (b *DeviceManagementRequestBuilder) ExchangeOnPremisesPolicy() *DeviceManagementExchangeOnPremisesPolicyRequestBuilder {
	bb := &DeviceManagementExchangeOnPremisesPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/exchangeOnPremisesPolicy"
	return bb
}

// GroupPolicyCategories returns request builder for GroupPolicyCategory collection
func (b *DeviceManagementRequestBuilder) GroupPolicyCategories() *DeviceManagementGroupPolicyCategoriesCollectionRequestBuilder {
	bb := &DeviceManagementGroupPolicyCategoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupPolicyCategories"
	return bb
}

// DeviceManagementGroupPolicyCategoriesCollectionRequestBuilder is request builder for GroupPolicyCategory collection rcn
type DeviceManagementGroupPolicyCategoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GroupPolicyCategory collection
func (b *DeviceManagementGroupPolicyCategoriesCollectionRequestBuilder) Request() *DeviceManagementGroupPolicyCategoriesCollectionRequest {
	return &DeviceManagementGroupPolicyCategoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GroupPolicyCategory item
func (b *DeviceManagementGroupPolicyCategoriesCollectionRequestBuilder) ID(id string) *GroupPolicyCategoryRequestBuilder {
	bb := &GroupPolicyCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementGroupPolicyCategoriesCollectionRequest is request for GroupPolicyCategory collection
type DeviceManagementGroupPolicyCategoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GroupPolicyCategory collection
func (r *DeviceManagementGroupPolicyCategoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GroupPolicyCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GroupPolicyCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GroupPolicyCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GroupPolicyCategory collection, max N pages
func (r *DeviceManagementGroupPolicyCategoriesCollectionRequest) GetN(ctx context.Context, n int) ([]GroupPolicyCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GroupPolicyCategory collection
func (r *DeviceManagementGroupPolicyCategoriesCollectionRequest) Get(ctx context.Context) ([]GroupPolicyCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GroupPolicyCategory collection
func (r *DeviceManagementGroupPolicyCategoriesCollectionRequest) Add(ctx context.Context, reqObj *GroupPolicyCategory) (resObj *GroupPolicyCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GroupPolicyConfigurations returns request builder for GroupPolicyConfiguration collection
func (b *DeviceManagementRequestBuilder) GroupPolicyConfigurations() *DeviceManagementGroupPolicyConfigurationsCollectionRequestBuilder {
	bb := &DeviceManagementGroupPolicyConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupPolicyConfigurations"
	return bb
}

// DeviceManagementGroupPolicyConfigurationsCollectionRequestBuilder is request builder for GroupPolicyConfiguration collection rcn
type DeviceManagementGroupPolicyConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GroupPolicyConfiguration collection
func (b *DeviceManagementGroupPolicyConfigurationsCollectionRequestBuilder) Request() *DeviceManagementGroupPolicyConfigurationsCollectionRequest {
	return &DeviceManagementGroupPolicyConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GroupPolicyConfiguration item
func (b *DeviceManagementGroupPolicyConfigurationsCollectionRequestBuilder) ID(id string) *GroupPolicyConfigurationRequestBuilder {
	bb := &GroupPolicyConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementGroupPolicyConfigurationsCollectionRequest is request for GroupPolicyConfiguration collection
type DeviceManagementGroupPolicyConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GroupPolicyConfiguration collection
func (r *DeviceManagementGroupPolicyConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GroupPolicyConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GroupPolicyConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GroupPolicyConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GroupPolicyConfiguration collection, max N pages
func (r *DeviceManagementGroupPolicyConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]GroupPolicyConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GroupPolicyConfiguration collection
func (r *DeviceManagementGroupPolicyConfigurationsCollectionRequest) Get(ctx context.Context) ([]GroupPolicyConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GroupPolicyConfiguration collection
func (r *DeviceManagementGroupPolicyConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *GroupPolicyConfiguration) (resObj *GroupPolicyConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GroupPolicyDefinitionFiles returns request builder for GroupPolicyDefinitionFile collection
func (b *DeviceManagementRequestBuilder) GroupPolicyDefinitionFiles() *DeviceManagementGroupPolicyDefinitionFilesCollectionRequestBuilder {
	bb := &DeviceManagementGroupPolicyDefinitionFilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupPolicyDefinitionFiles"
	return bb
}

// DeviceManagementGroupPolicyDefinitionFilesCollectionRequestBuilder is request builder for GroupPolicyDefinitionFile collection rcn
type DeviceManagementGroupPolicyDefinitionFilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GroupPolicyDefinitionFile collection
func (b *DeviceManagementGroupPolicyDefinitionFilesCollectionRequestBuilder) Request() *DeviceManagementGroupPolicyDefinitionFilesCollectionRequest {
	return &DeviceManagementGroupPolicyDefinitionFilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GroupPolicyDefinitionFile item
func (b *DeviceManagementGroupPolicyDefinitionFilesCollectionRequestBuilder) ID(id string) *GroupPolicyDefinitionFileRequestBuilder {
	bb := &GroupPolicyDefinitionFileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementGroupPolicyDefinitionFilesCollectionRequest is request for GroupPolicyDefinitionFile collection
type DeviceManagementGroupPolicyDefinitionFilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GroupPolicyDefinitionFile collection
func (r *DeviceManagementGroupPolicyDefinitionFilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GroupPolicyDefinitionFile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GroupPolicyDefinitionFile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GroupPolicyDefinitionFile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GroupPolicyDefinitionFile collection, max N pages
func (r *DeviceManagementGroupPolicyDefinitionFilesCollectionRequest) GetN(ctx context.Context, n int) ([]GroupPolicyDefinitionFile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GroupPolicyDefinitionFile collection
func (r *DeviceManagementGroupPolicyDefinitionFilesCollectionRequest) Get(ctx context.Context) ([]GroupPolicyDefinitionFile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GroupPolicyDefinitionFile collection
func (r *DeviceManagementGroupPolicyDefinitionFilesCollectionRequest) Add(ctx context.Context, reqObj *GroupPolicyDefinitionFile) (resObj *GroupPolicyDefinitionFile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GroupPolicyDefinitions returns request builder for GroupPolicyDefinition collection
func (b *DeviceManagementRequestBuilder) GroupPolicyDefinitions() *DeviceManagementGroupPolicyDefinitionsCollectionRequestBuilder {
	bb := &DeviceManagementGroupPolicyDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupPolicyDefinitions"
	return bb
}

// DeviceManagementGroupPolicyDefinitionsCollectionRequestBuilder is request builder for GroupPolicyDefinition collection rcn
type DeviceManagementGroupPolicyDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GroupPolicyDefinition collection
func (b *DeviceManagementGroupPolicyDefinitionsCollectionRequestBuilder) Request() *DeviceManagementGroupPolicyDefinitionsCollectionRequest {
	return &DeviceManagementGroupPolicyDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GroupPolicyDefinition item
func (b *DeviceManagementGroupPolicyDefinitionsCollectionRequestBuilder) ID(id string) *GroupPolicyDefinitionRequestBuilder {
	bb := &GroupPolicyDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementGroupPolicyDefinitionsCollectionRequest is request for GroupPolicyDefinition collection
type DeviceManagementGroupPolicyDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GroupPolicyDefinition collection
func (r *DeviceManagementGroupPolicyDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GroupPolicyDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GroupPolicyDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GroupPolicyDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GroupPolicyDefinition collection, max N pages
func (r *DeviceManagementGroupPolicyDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]GroupPolicyDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GroupPolicyDefinition collection
func (r *DeviceManagementGroupPolicyDefinitionsCollectionRequest) Get(ctx context.Context) ([]GroupPolicyDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GroupPolicyDefinition collection
func (r *DeviceManagementGroupPolicyDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *GroupPolicyDefinition) (resObj *GroupPolicyDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GroupPolicyMigrationReports returns request builder for GroupPolicyMigrationReport collection
func (b *DeviceManagementRequestBuilder) GroupPolicyMigrationReports() *DeviceManagementGroupPolicyMigrationReportsCollectionRequestBuilder {
	bb := &DeviceManagementGroupPolicyMigrationReportsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupPolicyMigrationReports"
	return bb
}

// DeviceManagementGroupPolicyMigrationReportsCollectionRequestBuilder is request builder for GroupPolicyMigrationReport collection rcn
type DeviceManagementGroupPolicyMigrationReportsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GroupPolicyMigrationReport collection
func (b *DeviceManagementGroupPolicyMigrationReportsCollectionRequestBuilder) Request() *DeviceManagementGroupPolicyMigrationReportsCollectionRequest {
	return &DeviceManagementGroupPolicyMigrationReportsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GroupPolicyMigrationReport item
func (b *DeviceManagementGroupPolicyMigrationReportsCollectionRequestBuilder) ID(id string) *GroupPolicyMigrationReportRequestBuilder {
	bb := &GroupPolicyMigrationReportRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementGroupPolicyMigrationReportsCollectionRequest is request for GroupPolicyMigrationReport collection
type DeviceManagementGroupPolicyMigrationReportsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GroupPolicyMigrationReport collection
func (r *DeviceManagementGroupPolicyMigrationReportsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GroupPolicyMigrationReport, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GroupPolicyMigrationReport
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GroupPolicyMigrationReport
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GroupPolicyMigrationReport collection, max N pages
func (r *DeviceManagementGroupPolicyMigrationReportsCollectionRequest) GetN(ctx context.Context, n int) ([]GroupPolicyMigrationReport, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GroupPolicyMigrationReport collection
func (r *DeviceManagementGroupPolicyMigrationReportsCollectionRequest) Get(ctx context.Context) ([]GroupPolicyMigrationReport, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GroupPolicyMigrationReport collection
func (r *DeviceManagementGroupPolicyMigrationReportsCollectionRequest) Add(ctx context.Context, reqObj *GroupPolicyMigrationReport) (resObj *GroupPolicyMigrationReport, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GroupPolicyObjectFiles returns request builder for GroupPolicyObjectFile collection
func (b *DeviceManagementRequestBuilder) GroupPolicyObjectFiles() *DeviceManagementGroupPolicyObjectFilesCollectionRequestBuilder {
	bb := &DeviceManagementGroupPolicyObjectFilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupPolicyObjectFiles"
	return bb
}

// DeviceManagementGroupPolicyObjectFilesCollectionRequestBuilder is request builder for GroupPolicyObjectFile collection rcn
type DeviceManagementGroupPolicyObjectFilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GroupPolicyObjectFile collection
func (b *DeviceManagementGroupPolicyObjectFilesCollectionRequestBuilder) Request() *DeviceManagementGroupPolicyObjectFilesCollectionRequest {
	return &DeviceManagementGroupPolicyObjectFilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GroupPolicyObjectFile item
func (b *DeviceManagementGroupPolicyObjectFilesCollectionRequestBuilder) ID(id string) *GroupPolicyObjectFileRequestBuilder {
	bb := &GroupPolicyObjectFileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementGroupPolicyObjectFilesCollectionRequest is request for GroupPolicyObjectFile collection
type DeviceManagementGroupPolicyObjectFilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GroupPolicyObjectFile collection
func (r *DeviceManagementGroupPolicyObjectFilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GroupPolicyObjectFile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GroupPolicyObjectFile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GroupPolicyObjectFile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GroupPolicyObjectFile collection, max N pages
func (r *DeviceManagementGroupPolicyObjectFilesCollectionRequest) GetN(ctx context.Context, n int) ([]GroupPolicyObjectFile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GroupPolicyObjectFile collection
func (r *DeviceManagementGroupPolicyObjectFilesCollectionRequest) Get(ctx context.Context) ([]GroupPolicyObjectFile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GroupPolicyObjectFile collection
func (r *DeviceManagementGroupPolicyObjectFilesCollectionRequest) Add(ctx context.Context, reqObj *GroupPolicyObjectFile) (resObj *GroupPolicyObjectFile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GroupPolicyUploadedDefinitionFiles returns request builder for GroupPolicyUploadedDefinitionFile collection
func (b *DeviceManagementRequestBuilder) GroupPolicyUploadedDefinitionFiles() *DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequestBuilder {
	bb := &DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupPolicyUploadedDefinitionFiles"
	return bb
}

// DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequestBuilder is request builder for GroupPolicyUploadedDefinitionFile collection rcn
type DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GroupPolicyUploadedDefinitionFile collection
func (b *DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequestBuilder) Request() *DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequest {
	return &DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GroupPolicyUploadedDefinitionFile item
func (b *DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequestBuilder) ID(id string) *GroupPolicyUploadedDefinitionFileRequestBuilder {
	bb := &GroupPolicyUploadedDefinitionFileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequest is request for GroupPolicyUploadedDefinitionFile collection
type DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GroupPolicyUploadedDefinitionFile collection
func (r *DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GroupPolicyUploadedDefinitionFile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GroupPolicyUploadedDefinitionFile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GroupPolicyUploadedDefinitionFile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GroupPolicyUploadedDefinitionFile collection, max N pages
func (r *DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequest) GetN(ctx context.Context, n int) ([]GroupPolicyUploadedDefinitionFile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GroupPolicyUploadedDefinitionFile collection
func (r *DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequest) Get(ctx context.Context) ([]GroupPolicyUploadedDefinitionFile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GroupPolicyUploadedDefinitionFile collection
func (r *DeviceManagementGroupPolicyUploadedDefinitionFilesCollectionRequest) Add(ctx context.Context, reqObj *GroupPolicyUploadedDefinitionFile) (resObj *GroupPolicyUploadedDefinitionFile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ImportedDeviceIdentities returns request builder for ImportedDeviceIdentity collection
func (b *DeviceManagementRequestBuilder) ImportedDeviceIdentities() *DeviceManagementImportedDeviceIdentitiesCollectionRequestBuilder {
	bb := &DeviceManagementImportedDeviceIdentitiesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/importedDeviceIdentities"
	return bb
}

// DeviceManagementImportedDeviceIdentitiesCollectionRequestBuilder is request builder for ImportedDeviceIdentity collection rcn
type DeviceManagementImportedDeviceIdentitiesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ImportedDeviceIdentity collection
func (b *DeviceManagementImportedDeviceIdentitiesCollectionRequestBuilder) Request() *DeviceManagementImportedDeviceIdentitiesCollectionRequest {
	return &DeviceManagementImportedDeviceIdentitiesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ImportedDeviceIdentity item
func (b *DeviceManagementImportedDeviceIdentitiesCollectionRequestBuilder) ID(id string) *ImportedDeviceIdentityRequestBuilder {
	bb := &ImportedDeviceIdentityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementImportedDeviceIdentitiesCollectionRequest is request for ImportedDeviceIdentity collection
type DeviceManagementImportedDeviceIdentitiesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ImportedDeviceIdentity collection
func (r *DeviceManagementImportedDeviceIdentitiesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ImportedDeviceIdentity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ImportedDeviceIdentity
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ImportedDeviceIdentity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ImportedDeviceIdentity collection, max N pages
func (r *DeviceManagementImportedDeviceIdentitiesCollectionRequest) GetN(ctx context.Context, n int) ([]ImportedDeviceIdentity, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ImportedDeviceIdentity collection
func (r *DeviceManagementImportedDeviceIdentitiesCollectionRequest) Get(ctx context.Context) ([]ImportedDeviceIdentity, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ImportedDeviceIdentity collection
func (r *DeviceManagementImportedDeviceIdentitiesCollectionRequest) Add(ctx context.Context, reqObj *ImportedDeviceIdentity) (resObj *ImportedDeviceIdentity, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ImportedWindowsAutopilotDeviceIdentities returns request builder for ImportedWindowsAutopilotDeviceIdentity collection
func (b *DeviceManagementRequestBuilder) ImportedWindowsAutopilotDeviceIdentities() *DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder {
	bb := &DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/importedWindowsAutopilotDeviceIdentities"
	return bb
}

// DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder is request builder for ImportedWindowsAutopilotDeviceIdentity collection rcn
type DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ImportedWindowsAutopilotDeviceIdentity collection
func (b *DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder) Request() *DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequest {
	return &DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ImportedWindowsAutopilotDeviceIdentity item
func (b *DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder) ID(id string) *ImportedWindowsAutopilotDeviceIdentityRequestBuilder {
	bb := &ImportedWindowsAutopilotDeviceIdentityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequest is request for ImportedWindowsAutopilotDeviceIdentity collection
type DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ImportedWindowsAutopilotDeviceIdentity collection
func (r *DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ImportedWindowsAutopilotDeviceIdentity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ImportedWindowsAutopilotDeviceIdentity
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ImportedWindowsAutopilotDeviceIdentity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ImportedWindowsAutopilotDeviceIdentity collection, max N pages
func (r *DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequest) GetN(ctx context.Context, n int) ([]ImportedWindowsAutopilotDeviceIdentity, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ImportedWindowsAutopilotDeviceIdentity collection
func (r *DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequest) Get(ctx context.Context) ([]ImportedWindowsAutopilotDeviceIdentity, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ImportedWindowsAutopilotDeviceIdentity collection
func (r *DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequest) Add(ctx context.Context, reqObj *ImportedWindowsAutopilotDeviceIdentity) (resObj *ImportedWindowsAutopilotDeviceIdentity, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Intents returns request builder for DeviceManagementIntent collection
func (b *DeviceManagementRequestBuilder) Intents() *DeviceManagementIntentsCollectionRequestBuilder {
	bb := &DeviceManagementIntentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/intents"
	return bb
}

// DeviceManagementIntentsCollectionRequestBuilder is request builder for DeviceManagementIntent collection rcn
type DeviceManagementIntentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementIntent collection
func (b *DeviceManagementIntentsCollectionRequestBuilder) Request() *DeviceManagementIntentsCollectionRequest {
	return &DeviceManagementIntentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementIntent item
func (b *DeviceManagementIntentsCollectionRequestBuilder) ID(id string) *DeviceManagementIntentRequestBuilder {
	bb := &DeviceManagementIntentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementIntentsCollectionRequest is request for DeviceManagementIntent collection
type DeviceManagementIntentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementIntent collection
func (r *DeviceManagementIntentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementIntent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementIntent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementIntent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementIntent collection, max N pages
func (r *DeviceManagementIntentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementIntent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementIntent collection
func (r *DeviceManagementIntentsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementIntent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementIntent collection
func (r *DeviceManagementIntentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementIntent) (resObj *DeviceManagementIntent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IntuneBrandingProfiles returns request builder for IntuneBrandingProfile collection
func (b *DeviceManagementRequestBuilder) IntuneBrandingProfiles() *DeviceManagementIntuneBrandingProfilesCollectionRequestBuilder {
	bb := &DeviceManagementIntuneBrandingProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/intuneBrandingProfiles"
	return bb
}

// DeviceManagementIntuneBrandingProfilesCollectionRequestBuilder is request builder for IntuneBrandingProfile collection rcn
type DeviceManagementIntuneBrandingProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IntuneBrandingProfile collection
func (b *DeviceManagementIntuneBrandingProfilesCollectionRequestBuilder) Request() *DeviceManagementIntuneBrandingProfilesCollectionRequest {
	return &DeviceManagementIntuneBrandingProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IntuneBrandingProfile item
func (b *DeviceManagementIntuneBrandingProfilesCollectionRequestBuilder) ID(id string) *IntuneBrandingProfileRequestBuilder {
	bb := &IntuneBrandingProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementIntuneBrandingProfilesCollectionRequest is request for IntuneBrandingProfile collection
type DeviceManagementIntuneBrandingProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IntuneBrandingProfile collection
func (r *DeviceManagementIntuneBrandingProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IntuneBrandingProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IntuneBrandingProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IntuneBrandingProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IntuneBrandingProfile collection, max N pages
func (r *DeviceManagementIntuneBrandingProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]IntuneBrandingProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IntuneBrandingProfile collection
func (r *DeviceManagementIntuneBrandingProfilesCollectionRequest) Get(ctx context.Context) ([]IntuneBrandingProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IntuneBrandingProfile collection
func (r *DeviceManagementIntuneBrandingProfilesCollectionRequest) Add(ctx context.Context, reqObj *IntuneBrandingProfile) (resObj *IntuneBrandingProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSUpdateStatuses returns request builder for IOSUpdateDeviceStatus collection
func (b *DeviceManagementRequestBuilder) IOSUpdateStatuses() *DeviceManagementIOSUpdateStatusesCollectionRequestBuilder {
	bb := &DeviceManagementIOSUpdateStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/iosUpdateStatuses"
	return bb
}

// DeviceManagementIOSUpdateStatusesCollectionRequestBuilder is request builder for IOSUpdateDeviceStatus collection rcn
type DeviceManagementIOSUpdateStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSUpdateDeviceStatus collection
func (b *DeviceManagementIOSUpdateStatusesCollectionRequestBuilder) Request() *DeviceManagementIOSUpdateStatusesCollectionRequest {
	return &DeviceManagementIOSUpdateStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSUpdateDeviceStatus item
func (b *DeviceManagementIOSUpdateStatusesCollectionRequestBuilder) ID(id string) *IOSUpdateDeviceStatusRequestBuilder {
	bb := &IOSUpdateDeviceStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementIOSUpdateStatusesCollectionRequest is request for IOSUpdateDeviceStatus collection
type DeviceManagementIOSUpdateStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSUpdateDeviceStatus collection
func (r *DeviceManagementIOSUpdateStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSUpdateDeviceStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSUpdateDeviceStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSUpdateDeviceStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSUpdateDeviceStatus collection, max N pages
func (r *DeviceManagementIOSUpdateStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]IOSUpdateDeviceStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSUpdateDeviceStatus collection
func (r *DeviceManagementIOSUpdateStatusesCollectionRequest) Get(ctx context.Context) ([]IOSUpdateDeviceStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSUpdateDeviceStatus collection
func (r *DeviceManagementIOSUpdateStatusesCollectionRequest) Add(ctx context.Context, reqObj *IOSUpdateDeviceStatus) (resObj *IOSUpdateDeviceStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSSoftwareUpdateAccountSummaries returns request builder for MacOSSoftwareUpdateAccountSummary collection
func (b *DeviceManagementRequestBuilder) MacOSSoftwareUpdateAccountSummaries() *DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequestBuilder {
	bb := &DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/macOSSoftwareUpdateAccountSummaries"
	return bb
}

// DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequestBuilder is request builder for MacOSSoftwareUpdateAccountSummary collection rcn
type DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSSoftwareUpdateAccountSummary collection
func (b *DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequestBuilder) Request() *DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequest {
	return &DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSSoftwareUpdateAccountSummary item
func (b *DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequestBuilder) ID(id string) *MacOSSoftwareUpdateAccountSummaryRequestBuilder {
	bb := &MacOSSoftwareUpdateAccountSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequest is request for MacOSSoftwareUpdateAccountSummary collection
type DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSSoftwareUpdateAccountSummary collection
func (r *DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSSoftwareUpdateAccountSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSSoftwareUpdateAccountSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSSoftwareUpdateAccountSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSSoftwareUpdateAccountSummary collection, max N pages
func (r *DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSSoftwareUpdateAccountSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSSoftwareUpdateAccountSummary collection
func (r *DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequest) Get(ctx context.Context) ([]MacOSSoftwareUpdateAccountSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSSoftwareUpdateAccountSummary collection
func (r *DeviceManagementMacOSSoftwareUpdateAccountSummariesCollectionRequest) Add(ctx context.Context, reqObj *MacOSSoftwareUpdateAccountSummary) (resObj *MacOSSoftwareUpdateAccountSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceEncryptionStates returns request builder for ManagedDeviceEncryptionState collection
func (b *DeviceManagementRequestBuilder) ManagedDeviceEncryptionStates() *DeviceManagementManagedDeviceEncryptionStatesCollectionRequestBuilder {
	bb := &DeviceManagementManagedDeviceEncryptionStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceEncryptionStates"
	return bb
}

// DeviceManagementManagedDeviceEncryptionStatesCollectionRequestBuilder is request builder for ManagedDeviceEncryptionState collection rcn
type DeviceManagementManagedDeviceEncryptionStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceEncryptionState collection
func (b *DeviceManagementManagedDeviceEncryptionStatesCollectionRequestBuilder) Request() *DeviceManagementManagedDeviceEncryptionStatesCollectionRequest {
	return &DeviceManagementManagedDeviceEncryptionStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceEncryptionState item
func (b *DeviceManagementManagedDeviceEncryptionStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceEncryptionStateRequestBuilder {
	bb := &ManagedDeviceEncryptionStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementManagedDeviceEncryptionStatesCollectionRequest is request for ManagedDeviceEncryptionState collection
type DeviceManagementManagedDeviceEncryptionStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceEncryptionState collection
func (r *DeviceManagementManagedDeviceEncryptionStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceEncryptionState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceEncryptionState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceEncryptionState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceEncryptionState collection, max N pages
func (r *DeviceManagementManagedDeviceEncryptionStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceEncryptionState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceEncryptionState collection
func (r *DeviceManagementManagedDeviceEncryptionStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceEncryptionState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceEncryptionState collection
func (r *DeviceManagementManagedDeviceEncryptionStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceEncryptionState) (resObj *ManagedDeviceEncryptionState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceOverview is navigation property rn
func (b *DeviceManagementRequestBuilder) ManagedDeviceOverview() *ManagedDeviceOverviewRequestBuilder {
	bb := &ManagedDeviceOverviewRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceOverview"
	return bb
}

// ManagedDevices returns request builder for ManagedDevice collection
func (b *DeviceManagementRequestBuilder) ManagedDevices() *DeviceManagementManagedDevicesCollectionRequestBuilder {
	bb := &DeviceManagementManagedDevicesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDevices"
	return bb
}

// DeviceManagementManagedDevicesCollectionRequestBuilder is request builder for ManagedDevice collection rcn
type DeviceManagementManagedDevicesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDevice collection
func (b *DeviceManagementManagedDevicesCollectionRequestBuilder) Request() *DeviceManagementManagedDevicesCollectionRequest {
	return &DeviceManagementManagedDevicesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDevice item
func (b *DeviceManagementManagedDevicesCollectionRequestBuilder) ID(id string) *ManagedDeviceRequestBuilder {
	bb := &ManagedDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementManagedDevicesCollectionRequest is request for ManagedDevice collection
type DeviceManagementManagedDevicesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDevice collection
func (r *DeviceManagementManagedDevicesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDevice, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDevice
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDevice
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDevice collection, max N pages
func (r *DeviceManagementManagedDevicesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDevice, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDevice collection
func (r *DeviceManagementManagedDevicesCollectionRequest) Get(ctx context.Context) ([]ManagedDevice, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDevice collection
func (r *DeviceManagementManagedDevicesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDevice) (resObj *ManagedDevice, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftTunnelConfigurations returns request builder for MicrosoftTunnelConfiguration collection
func (b *DeviceManagementRequestBuilder) MicrosoftTunnelConfigurations() *DeviceManagementMicrosoftTunnelConfigurationsCollectionRequestBuilder {
	bb := &DeviceManagementMicrosoftTunnelConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/microsoftTunnelConfigurations"
	return bb
}

// DeviceManagementMicrosoftTunnelConfigurationsCollectionRequestBuilder is request builder for MicrosoftTunnelConfiguration collection rcn
type DeviceManagementMicrosoftTunnelConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftTunnelConfiguration collection
func (b *DeviceManagementMicrosoftTunnelConfigurationsCollectionRequestBuilder) Request() *DeviceManagementMicrosoftTunnelConfigurationsCollectionRequest {
	return &DeviceManagementMicrosoftTunnelConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftTunnelConfiguration item
func (b *DeviceManagementMicrosoftTunnelConfigurationsCollectionRequestBuilder) ID(id string) *MicrosoftTunnelConfigurationRequestBuilder {
	bb := &MicrosoftTunnelConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementMicrosoftTunnelConfigurationsCollectionRequest is request for MicrosoftTunnelConfiguration collection
type DeviceManagementMicrosoftTunnelConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftTunnelConfiguration collection
func (r *DeviceManagementMicrosoftTunnelConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftTunnelConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftTunnelConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftTunnelConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftTunnelConfiguration collection, max N pages
func (r *DeviceManagementMicrosoftTunnelConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftTunnelConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftTunnelConfiguration collection
func (r *DeviceManagementMicrosoftTunnelConfigurationsCollectionRequest) Get(ctx context.Context) ([]MicrosoftTunnelConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftTunnelConfiguration collection
func (r *DeviceManagementMicrosoftTunnelConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftTunnelConfiguration) (resObj *MicrosoftTunnelConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftTunnelHealthThresholds returns request builder for MicrosoftTunnelHealthThreshold collection
func (b *DeviceManagementRequestBuilder) MicrosoftTunnelHealthThresholds() *DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequestBuilder {
	bb := &DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/microsoftTunnelHealthThresholds"
	return bb
}

// DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequestBuilder is request builder for MicrosoftTunnelHealthThreshold collection rcn
type DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftTunnelHealthThreshold collection
func (b *DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequestBuilder) Request() *DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequest {
	return &DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftTunnelHealthThreshold item
func (b *DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequestBuilder) ID(id string) *MicrosoftTunnelHealthThresholdRequestBuilder {
	bb := &MicrosoftTunnelHealthThresholdRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequest is request for MicrosoftTunnelHealthThreshold collection
type DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftTunnelHealthThreshold collection
func (r *DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftTunnelHealthThreshold, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftTunnelHealthThreshold
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftTunnelHealthThreshold
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftTunnelHealthThreshold collection, max N pages
func (r *DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftTunnelHealthThreshold, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftTunnelHealthThreshold collection
func (r *DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequest) Get(ctx context.Context) ([]MicrosoftTunnelHealthThreshold, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftTunnelHealthThreshold collection
func (r *DeviceManagementMicrosoftTunnelHealthThresholdsCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftTunnelHealthThreshold) (resObj *MicrosoftTunnelHealthThreshold, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftTunnelServerLogCollectionResponses returns request builder for MicrosoftTunnelServerLogCollectionResponse collection
func (b *DeviceManagementRequestBuilder) MicrosoftTunnelServerLogCollectionResponses() *DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequestBuilder {
	bb := &DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/microsoftTunnelServerLogCollectionResponses"
	return bb
}

// DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequestBuilder is request builder for MicrosoftTunnelServerLogCollectionResponse collection rcn
type DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftTunnelServerLogCollectionResponse collection
func (b *DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequestBuilder) Request() *DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequest {
	return &DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftTunnelServerLogCollectionResponse item
func (b *DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequestBuilder) ID(id string) *MicrosoftTunnelServerLogCollectionResponseRequestBuilder {
	bb := &MicrosoftTunnelServerLogCollectionResponseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequest is request for MicrosoftTunnelServerLogCollectionResponse collection
type DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftTunnelServerLogCollectionResponse collection
func (r *DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftTunnelServerLogCollectionResponse, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftTunnelServerLogCollectionResponse
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftTunnelServerLogCollectionResponse
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftTunnelServerLogCollectionResponse collection, max N pages
func (r *DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftTunnelServerLogCollectionResponse, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftTunnelServerLogCollectionResponse collection
func (r *DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequest) Get(ctx context.Context) ([]MicrosoftTunnelServerLogCollectionResponse, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftTunnelServerLogCollectionResponse collection
func (r *DeviceManagementMicrosoftTunnelServerLogCollectionResponsesCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftTunnelServerLogCollectionResponse) (resObj *MicrosoftTunnelServerLogCollectionResponse, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MicrosoftTunnelSites returns request builder for MicrosoftTunnelSite collection
func (b *DeviceManagementRequestBuilder) MicrosoftTunnelSites() *DeviceManagementMicrosoftTunnelSitesCollectionRequestBuilder {
	bb := &DeviceManagementMicrosoftTunnelSitesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/microsoftTunnelSites"
	return bb
}

// DeviceManagementMicrosoftTunnelSitesCollectionRequestBuilder is request builder for MicrosoftTunnelSite collection rcn
type DeviceManagementMicrosoftTunnelSitesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MicrosoftTunnelSite collection
func (b *DeviceManagementMicrosoftTunnelSitesCollectionRequestBuilder) Request() *DeviceManagementMicrosoftTunnelSitesCollectionRequest {
	return &DeviceManagementMicrosoftTunnelSitesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MicrosoftTunnelSite item
func (b *DeviceManagementMicrosoftTunnelSitesCollectionRequestBuilder) ID(id string) *MicrosoftTunnelSiteRequestBuilder {
	bb := &MicrosoftTunnelSiteRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementMicrosoftTunnelSitesCollectionRequest is request for MicrosoftTunnelSite collection
type DeviceManagementMicrosoftTunnelSitesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MicrosoftTunnelSite collection
func (r *DeviceManagementMicrosoftTunnelSitesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MicrosoftTunnelSite, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MicrosoftTunnelSite
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MicrosoftTunnelSite
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MicrosoftTunnelSite collection, max N pages
func (r *DeviceManagementMicrosoftTunnelSitesCollectionRequest) GetN(ctx context.Context, n int) ([]MicrosoftTunnelSite, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MicrosoftTunnelSite collection
func (r *DeviceManagementMicrosoftTunnelSitesCollectionRequest) Get(ctx context.Context) ([]MicrosoftTunnelSite, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MicrosoftTunnelSite collection
func (r *DeviceManagementMicrosoftTunnelSitesCollectionRequest) Add(ctx context.Context, reqObj *MicrosoftTunnelSite) (resObj *MicrosoftTunnelSite, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MobileAppTroubleshootingEvents returns request builder for MobileAppTroubleshootingEvent collection
func (b *DeviceManagementRequestBuilder) MobileAppTroubleshootingEvents() *DeviceManagementMobileAppTroubleshootingEventsCollectionRequestBuilder {
	bb := &DeviceManagementMobileAppTroubleshootingEventsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/mobileAppTroubleshootingEvents"
	return bb
}

// DeviceManagementMobileAppTroubleshootingEventsCollectionRequestBuilder is request builder for MobileAppTroubleshootingEvent collection rcn
type DeviceManagementMobileAppTroubleshootingEventsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MobileAppTroubleshootingEvent collection
func (b *DeviceManagementMobileAppTroubleshootingEventsCollectionRequestBuilder) Request() *DeviceManagementMobileAppTroubleshootingEventsCollectionRequest {
	return &DeviceManagementMobileAppTroubleshootingEventsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MobileAppTroubleshootingEvent item
func (b *DeviceManagementMobileAppTroubleshootingEventsCollectionRequestBuilder) ID(id string) *MobileAppTroubleshootingEventRequestBuilder {
	bb := &MobileAppTroubleshootingEventRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementMobileAppTroubleshootingEventsCollectionRequest is request for MobileAppTroubleshootingEvent collection
type DeviceManagementMobileAppTroubleshootingEventsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MobileAppTroubleshootingEvent collection
func (r *DeviceManagementMobileAppTroubleshootingEventsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MobileAppTroubleshootingEvent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MobileAppTroubleshootingEvent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MobileAppTroubleshootingEvent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MobileAppTroubleshootingEvent collection, max N pages
func (r *DeviceManagementMobileAppTroubleshootingEventsCollectionRequest) GetN(ctx context.Context, n int) ([]MobileAppTroubleshootingEvent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MobileAppTroubleshootingEvent collection
func (r *DeviceManagementMobileAppTroubleshootingEventsCollectionRequest) Get(ctx context.Context) ([]MobileAppTroubleshootingEvent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MobileAppTroubleshootingEvent collection
func (r *DeviceManagementMobileAppTroubleshootingEventsCollectionRequest) Add(ctx context.Context, reqObj *MobileAppTroubleshootingEvent) (resObj *MobileAppTroubleshootingEvent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MobileThreatDefenseConnectors returns request builder for MobileThreatDefenseConnector collection
func (b *DeviceManagementRequestBuilder) MobileThreatDefenseConnectors() *DeviceManagementMobileThreatDefenseConnectorsCollectionRequestBuilder {
	bb := &DeviceManagementMobileThreatDefenseConnectorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/mobileThreatDefenseConnectors"
	return bb
}

// DeviceManagementMobileThreatDefenseConnectorsCollectionRequestBuilder is request builder for MobileThreatDefenseConnector collection rcn
type DeviceManagementMobileThreatDefenseConnectorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MobileThreatDefenseConnector collection
func (b *DeviceManagementMobileThreatDefenseConnectorsCollectionRequestBuilder) Request() *DeviceManagementMobileThreatDefenseConnectorsCollectionRequest {
	return &DeviceManagementMobileThreatDefenseConnectorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MobileThreatDefenseConnector item
func (b *DeviceManagementMobileThreatDefenseConnectorsCollectionRequestBuilder) ID(id string) *MobileThreatDefenseConnectorRequestBuilder {
	bb := &MobileThreatDefenseConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementMobileThreatDefenseConnectorsCollectionRequest is request for MobileThreatDefenseConnector collection
type DeviceManagementMobileThreatDefenseConnectorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MobileThreatDefenseConnector collection
func (r *DeviceManagementMobileThreatDefenseConnectorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MobileThreatDefenseConnector, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MobileThreatDefenseConnector
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MobileThreatDefenseConnector
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MobileThreatDefenseConnector collection, max N pages
func (r *DeviceManagementMobileThreatDefenseConnectorsCollectionRequest) GetN(ctx context.Context, n int) ([]MobileThreatDefenseConnector, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MobileThreatDefenseConnector collection
func (r *DeviceManagementMobileThreatDefenseConnectorsCollectionRequest) Get(ctx context.Context) ([]MobileThreatDefenseConnector, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MobileThreatDefenseConnector collection
func (r *DeviceManagementMobileThreatDefenseConnectorsCollectionRequest) Add(ctx context.Context, reqObj *MobileThreatDefenseConnector) (resObj *MobileThreatDefenseConnector, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Monitoring is navigation property rn
func (b *DeviceManagementRequestBuilder) Monitoring() *DeviceManagementMonitoringRequestBuilder {
	bb := &DeviceManagementMonitoringRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/monitoring"
	return bb
}

// NDESConnectors returns request builder for NDESConnector collection
func (b *DeviceManagementRequestBuilder) NDESConnectors() *DeviceManagementNDESConnectorsCollectionRequestBuilder {
	bb := &DeviceManagementNDESConnectorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/ndesConnectors"
	return bb
}

// DeviceManagementNDESConnectorsCollectionRequestBuilder is request builder for NDESConnector collection rcn
type DeviceManagementNDESConnectorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for NDESConnector collection
func (b *DeviceManagementNDESConnectorsCollectionRequestBuilder) Request() *DeviceManagementNDESConnectorsCollectionRequest {
	return &DeviceManagementNDESConnectorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for NDESConnector item
func (b *DeviceManagementNDESConnectorsCollectionRequestBuilder) ID(id string) *NDESConnectorRequestBuilder {
	bb := &NDESConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementNDESConnectorsCollectionRequest is request for NDESConnector collection
type DeviceManagementNDESConnectorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for NDESConnector collection
func (r *DeviceManagementNDESConnectorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]NDESConnector, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []NDESConnector
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []NDESConnector
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for NDESConnector collection, max N pages
func (r *DeviceManagementNDESConnectorsCollectionRequest) GetN(ctx context.Context, n int) ([]NDESConnector, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for NDESConnector collection
func (r *DeviceManagementNDESConnectorsCollectionRequest) Get(ctx context.Context) ([]NDESConnector, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for NDESConnector collection
func (r *DeviceManagementNDESConnectorsCollectionRequest) Add(ctx context.Context, reqObj *NDESConnector) (resObj *NDESConnector, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// NotificationMessageTemplates returns request builder for NotificationMessageTemplate collection
func (b *DeviceManagementRequestBuilder) NotificationMessageTemplates() *DeviceManagementNotificationMessageTemplatesCollectionRequestBuilder {
	bb := &DeviceManagementNotificationMessageTemplatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/notificationMessageTemplates"
	return bb
}

// DeviceManagementNotificationMessageTemplatesCollectionRequestBuilder is request builder for NotificationMessageTemplate collection rcn
type DeviceManagementNotificationMessageTemplatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for NotificationMessageTemplate collection
func (b *DeviceManagementNotificationMessageTemplatesCollectionRequestBuilder) Request() *DeviceManagementNotificationMessageTemplatesCollectionRequest {
	return &DeviceManagementNotificationMessageTemplatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for NotificationMessageTemplate item
func (b *DeviceManagementNotificationMessageTemplatesCollectionRequestBuilder) ID(id string) *NotificationMessageTemplateRequestBuilder {
	bb := &NotificationMessageTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementNotificationMessageTemplatesCollectionRequest is request for NotificationMessageTemplate collection
type DeviceManagementNotificationMessageTemplatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for NotificationMessageTemplate collection
func (r *DeviceManagementNotificationMessageTemplatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]NotificationMessageTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []NotificationMessageTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []NotificationMessageTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for NotificationMessageTemplate collection, max N pages
func (r *DeviceManagementNotificationMessageTemplatesCollectionRequest) GetN(ctx context.Context, n int) ([]NotificationMessageTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for NotificationMessageTemplate collection
func (r *DeviceManagementNotificationMessageTemplatesCollectionRequest) Get(ctx context.Context) ([]NotificationMessageTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for NotificationMessageTemplate collection
func (r *DeviceManagementNotificationMessageTemplatesCollectionRequest) Add(ctx context.Context, reqObj *NotificationMessageTemplate) (resObj *NotificationMessageTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// OemWarrantyInformationOnboarding returns request builder for OemWarrantyInformationOnboarding collection
func (b *DeviceManagementRequestBuilder) OemWarrantyInformationOnboarding() *DeviceManagementOemWarrantyInformationOnboardingCollectionRequestBuilder {
	bb := &DeviceManagementOemWarrantyInformationOnboardingCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/oemWarrantyInformationOnboarding"
	return bb
}

// DeviceManagementOemWarrantyInformationOnboardingCollectionRequestBuilder is request builder for OemWarrantyInformationOnboarding collection rcn
type DeviceManagementOemWarrantyInformationOnboardingCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for OemWarrantyInformationOnboarding collection
func (b *DeviceManagementOemWarrantyInformationOnboardingCollectionRequestBuilder) Request() *DeviceManagementOemWarrantyInformationOnboardingCollectionRequest {
	return &DeviceManagementOemWarrantyInformationOnboardingCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for OemWarrantyInformationOnboarding item
func (b *DeviceManagementOemWarrantyInformationOnboardingCollectionRequestBuilder) ID(id string) *OemWarrantyInformationOnboardingRequestBuilder {
	bb := &OemWarrantyInformationOnboardingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementOemWarrantyInformationOnboardingCollectionRequest is request for OemWarrantyInformationOnboarding collection
type DeviceManagementOemWarrantyInformationOnboardingCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for OemWarrantyInformationOnboarding collection
func (r *DeviceManagementOemWarrantyInformationOnboardingCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]OemWarrantyInformationOnboarding, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []OemWarrantyInformationOnboarding
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []OemWarrantyInformationOnboarding
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for OemWarrantyInformationOnboarding collection, max N pages
func (r *DeviceManagementOemWarrantyInformationOnboardingCollectionRequest) GetN(ctx context.Context, n int) ([]OemWarrantyInformationOnboarding, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for OemWarrantyInformationOnboarding collection
func (r *DeviceManagementOemWarrantyInformationOnboardingCollectionRequest) Get(ctx context.Context) ([]OemWarrantyInformationOnboarding, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for OemWarrantyInformationOnboarding collection
func (r *DeviceManagementOemWarrantyInformationOnboardingCollectionRequest) Add(ctx context.Context, reqObj *OemWarrantyInformationOnboarding) (resObj *OemWarrantyInformationOnboarding, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// PrivilegeManagementElevations returns request builder for PrivilegeManagementElevation collection
func (b *DeviceManagementRequestBuilder) PrivilegeManagementElevations() *DeviceManagementPrivilegeManagementElevationsCollectionRequestBuilder {
	bb := &DeviceManagementPrivilegeManagementElevationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/privilegeManagementElevations"
	return bb
}

// DeviceManagementPrivilegeManagementElevationsCollectionRequestBuilder is request builder for PrivilegeManagementElevation collection rcn
type DeviceManagementPrivilegeManagementElevationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrivilegeManagementElevation collection
func (b *DeviceManagementPrivilegeManagementElevationsCollectionRequestBuilder) Request() *DeviceManagementPrivilegeManagementElevationsCollectionRequest {
	return &DeviceManagementPrivilegeManagementElevationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrivilegeManagementElevation item
func (b *DeviceManagementPrivilegeManagementElevationsCollectionRequestBuilder) ID(id string) *PrivilegeManagementElevationRequestBuilder {
	bb := &PrivilegeManagementElevationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementPrivilegeManagementElevationsCollectionRequest is request for PrivilegeManagementElevation collection
type DeviceManagementPrivilegeManagementElevationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrivilegeManagementElevation collection
func (r *DeviceManagementPrivilegeManagementElevationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrivilegeManagementElevation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrivilegeManagementElevation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrivilegeManagementElevation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrivilegeManagementElevation collection, max N pages
func (r *DeviceManagementPrivilegeManagementElevationsCollectionRequest) GetN(ctx context.Context, n int) ([]PrivilegeManagementElevation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrivilegeManagementElevation collection
func (r *DeviceManagementPrivilegeManagementElevationsCollectionRequest) Get(ctx context.Context) ([]PrivilegeManagementElevation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrivilegeManagementElevation collection
func (r *DeviceManagementPrivilegeManagementElevationsCollectionRequest) Add(ctx context.Context, reqObj *PrivilegeManagementElevation) (resObj *PrivilegeManagementElevation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RemoteActionAudits returns request builder for RemoteActionAudit collection
func (b *DeviceManagementRequestBuilder) RemoteActionAudits() *DeviceManagementRemoteActionAuditsCollectionRequestBuilder {
	bb := &DeviceManagementRemoteActionAuditsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/remoteActionAudits"
	return bb
}

// DeviceManagementRemoteActionAuditsCollectionRequestBuilder is request builder for RemoteActionAudit collection rcn
type DeviceManagementRemoteActionAuditsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RemoteActionAudit collection
func (b *DeviceManagementRemoteActionAuditsCollectionRequestBuilder) Request() *DeviceManagementRemoteActionAuditsCollectionRequest {
	return &DeviceManagementRemoteActionAuditsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RemoteActionAudit item
func (b *DeviceManagementRemoteActionAuditsCollectionRequestBuilder) ID(id string) *RemoteActionAuditRequestBuilder {
	bb := &RemoteActionAuditRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementRemoteActionAuditsCollectionRequest is request for RemoteActionAudit collection
type DeviceManagementRemoteActionAuditsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for RemoteActionAudit collection
func (r *DeviceManagementRemoteActionAuditsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]RemoteActionAudit, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RemoteActionAudit
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []RemoteActionAudit
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for RemoteActionAudit collection, max N pages
func (r *DeviceManagementRemoteActionAuditsCollectionRequest) GetN(ctx context.Context, n int) ([]RemoteActionAudit, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for RemoteActionAudit collection
func (r *DeviceManagementRemoteActionAuditsCollectionRequest) Get(ctx context.Context) ([]RemoteActionAudit, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for RemoteActionAudit collection
func (r *DeviceManagementRemoteActionAuditsCollectionRequest) Add(ctx context.Context, reqObj *RemoteActionAudit) (resObj *RemoteActionAudit, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RemoteAssistancePartners returns request builder for RemoteAssistancePartner collection
func (b *DeviceManagementRequestBuilder) RemoteAssistancePartners() *DeviceManagementRemoteAssistancePartnersCollectionRequestBuilder {
	bb := &DeviceManagementRemoteAssistancePartnersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/remoteAssistancePartners"
	return bb
}

// DeviceManagementRemoteAssistancePartnersCollectionRequestBuilder is request builder for RemoteAssistancePartner collection rcn
type DeviceManagementRemoteAssistancePartnersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RemoteAssistancePartner collection
func (b *DeviceManagementRemoteAssistancePartnersCollectionRequestBuilder) Request() *DeviceManagementRemoteAssistancePartnersCollectionRequest {
	return &DeviceManagementRemoteAssistancePartnersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RemoteAssistancePartner item
func (b *DeviceManagementRemoteAssistancePartnersCollectionRequestBuilder) ID(id string) *RemoteAssistancePartnerRequestBuilder {
	bb := &RemoteAssistancePartnerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementRemoteAssistancePartnersCollectionRequest is request for RemoteAssistancePartner collection
type DeviceManagementRemoteAssistancePartnersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for RemoteAssistancePartner collection
func (r *DeviceManagementRemoteAssistancePartnersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]RemoteAssistancePartner, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RemoteAssistancePartner
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []RemoteAssistancePartner
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for RemoteAssistancePartner collection, max N pages
func (r *DeviceManagementRemoteAssistancePartnersCollectionRequest) GetN(ctx context.Context, n int) ([]RemoteAssistancePartner, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for RemoteAssistancePartner collection
func (r *DeviceManagementRemoteAssistancePartnersCollectionRequest) Get(ctx context.Context) ([]RemoteAssistancePartner, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for RemoteAssistancePartner collection
func (r *DeviceManagementRemoteAssistancePartnersCollectionRequest) Add(ctx context.Context, reqObj *RemoteAssistancePartner) (resObj *RemoteAssistancePartner, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RemoteAssistanceSettings is navigation property rn
func (b *DeviceManagementRequestBuilder) RemoteAssistanceSettings() *RemoteAssistanceSettingsRequestBuilder {
	bb := &RemoteAssistanceSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/remoteAssistanceSettings"
	return bb
}

// Reports is navigation property rn
func (b *DeviceManagementRequestBuilder) Reports() *DeviceManagementReportsRequestBuilder {
	bb := &DeviceManagementReportsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reports"
	return bb
}

// ResourceAccessProfiles returns request builder for DeviceManagementResourceAccessProfileBase collection
func (b *DeviceManagementRequestBuilder) ResourceAccessProfiles() *DeviceManagementResourceAccessProfilesCollectionRequestBuilder {
	bb := &DeviceManagementResourceAccessProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/resourceAccessProfiles"
	return bb
}

// DeviceManagementResourceAccessProfilesCollectionRequestBuilder is request builder for DeviceManagementResourceAccessProfileBase collection rcn
type DeviceManagementResourceAccessProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementResourceAccessProfileBase collection
func (b *DeviceManagementResourceAccessProfilesCollectionRequestBuilder) Request() *DeviceManagementResourceAccessProfilesCollectionRequest {
	return &DeviceManagementResourceAccessProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementResourceAccessProfileBase item
func (b *DeviceManagementResourceAccessProfilesCollectionRequestBuilder) ID(id string) *DeviceManagementResourceAccessProfileBaseRequestBuilder {
	bb := &DeviceManagementResourceAccessProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementResourceAccessProfilesCollectionRequest is request for DeviceManagementResourceAccessProfileBase collection
type DeviceManagementResourceAccessProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementResourceAccessProfileBase collection
func (r *DeviceManagementResourceAccessProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementResourceAccessProfileBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementResourceAccessProfileBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementResourceAccessProfileBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementResourceAccessProfileBase collection, max N pages
func (r *DeviceManagementResourceAccessProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementResourceAccessProfileBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementResourceAccessProfileBase collection
func (r *DeviceManagementResourceAccessProfilesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementResourceAccessProfileBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementResourceAccessProfileBase collection
func (r *DeviceManagementResourceAccessProfilesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementResourceAccessProfileBase) (resObj *DeviceManagementResourceAccessProfileBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ResourceOperations returns request builder for ResourceOperation collection
func (b *DeviceManagementRequestBuilder) ResourceOperations() *DeviceManagementResourceOperationsCollectionRequestBuilder {
	bb := &DeviceManagementResourceOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/resourceOperations"
	return bb
}

// DeviceManagementResourceOperationsCollectionRequestBuilder is request builder for ResourceOperation collection rcn
type DeviceManagementResourceOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ResourceOperation collection
func (b *DeviceManagementResourceOperationsCollectionRequestBuilder) Request() *DeviceManagementResourceOperationsCollectionRequest {
	return &DeviceManagementResourceOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ResourceOperation item
func (b *DeviceManagementResourceOperationsCollectionRequestBuilder) ID(id string) *ResourceOperationRequestBuilder {
	bb := &ResourceOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementResourceOperationsCollectionRequest is request for ResourceOperation collection
type DeviceManagementResourceOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ResourceOperation collection
func (r *DeviceManagementResourceOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ResourceOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ResourceOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ResourceOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ResourceOperation collection, max N pages
func (r *DeviceManagementResourceOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]ResourceOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ResourceOperation collection
func (r *DeviceManagementResourceOperationsCollectionRequest) Get(ctx context.Context) ([]ResourceOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ResourceOperation collection
func (r *DeviceManagementResourceOperationsCollectionRequest) Add(ctx context.Context, reqObj *ResourceOperation) (resObj *ResourceOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReusablePolicySettings returns request builder for DeviceManagementReusablePolicySetting collection
func (b *DeviceManagementRequestBuilder) ReusablePolicySettings() *DeviceManagementReusablePolicySettingsCollectionRequestBuilder {
	bb := &DeviceManagementReusablePolicySettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reusablePolicySettings"
	return bb
}

// DeviceManagementReusablePolicySettingsCollectionRequestBuilder is request builder for DeviceManagementReusablePolicySetting collection rcn
type DeviceManagementReusablePolicySettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementReusablePolicySetting collection
func (b *DeviceManagementReusablePolicySettingsCollectionRequestBuilder) Request() *DeviceManagementReusablePolicySettingsCollectionRequest {
	return &DeviceManagementReusablePolicySettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementReusablePolicySetting item
func (b *DeviceManagementReusablePolicySettingsCollectionRequestBuilder) ID(id string) *DeviceManagementReusablePolicySettingRequestBuilder {
	bb := &DeviceManagementReusablePolicySettingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementReusablePolicySettingsCollectionRequest is request for DeviceManagementReusablePolicySetting collection
type DeviceManagementReusablePolicySettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementReusablePolicySetting collection
func (r *DeviceManagementReusablePolicySettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementReusablePolicySetting, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementReusablePolicySetting
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementReusablePolicySetting
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementReusablePolicySetting collection, max N pages
func (r *DeviceManagementReusablePolicySettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementReusablePolicySetting, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementReusablePolicySetting collection
func (r *DeviceManagementReusablePolicySettingsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementReusablePolicySetting, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementReusablePolicySetting collection
func (r *DeviceManagementReusablePolicySettingsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementReusablePolicySetting) (resObj *DeviceManagementReusablePolicySetting, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReusableSettings returns request builder for DeviceManagementConfigurationSettingDefinition collection
func (b *DeviceManagementRequestBuilder) ReusableSettings() *DeviceManagementReusableSettingsCollectionRequestBuilder {
	bb := &DeviceManagementReusableSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reusableSettings"
	return bb
}

// DeviceManagementReusableSettingsCollectionRequestBuilder is request builder for DeviceManagementConfigurationSettingDefinition collection rcn
type DeviceManagementReusableSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSettingDefinition collection
func (b *DeviceManagementReusableSettingsCollectionRequestBuilder) Request() *DeviceManagementReusableSettingsCollectionRequest {
	return &DeviceManagementReusableSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSettingDefinition item
func (b *DeviceManagementReusableSettingsCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSettingDefinitionRequestBuilder {
	bb := &DeviceManagementConfigurationSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementReusableSettingsCollectionRequest is request for DeviceManagementConfigurationSettingDefinition collection
type DeviceManagementReusableSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementReusableSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSettingDefinition collection, max N pages
func (r *DeviceManagementReusableSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementReusableSettingsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementReusableSettingsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSettingDefinition) (resObj *DeviceManagementConfigurationSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleAssignments returns request builder for DeviceAndAppManagementRoleAssignment collection
func (b *DeviceManagementRequestBuilder) RoleAssignments() *DeviceManagementRoleAssignmentsCollectionRequestBuilder {
	bb := &DeviceManagementRoleAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleAssignments"
	return bb
}

// DeviceManagementRoleAssignmentsCollectionRequestBuilder is request builder for DeviceAndAppManagementRoleAssignment collection rcn
type DeviceManagementRoleAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceAndAppManagementRoleAssignment collection
func (b *DeviceManagementRoleAssignmentsCollectionRequestBuilder) Request() *DeviceManagementRoleAssignmentsCollectionRequest {
	return &DeviceManagementRoleAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceAndAppManagementRoleAssignment item
func (b *DeviceManagementRoleAssignmentsCollectionRequestBuilder) ID(id string) *DeviceAndAppManagementRoleAssignmentRequestBuilder {
	bb := &DeviceAndAppManagementRoleAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementRoleAssignmentsCollectionRequest is request for DeviceAndAppManagementRoleAssignment collection
type DeviceManagementRoleAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceAndAppManagementRoleAssignment collection
func (r *DeviceManagementRoleAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceAndAppManagementRoleAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceAndAppManagementRoleAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceAndAppManagementRoleAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceAndAppManagementRoleAssignment collection, max N pages
func (r *DeviceManagementRoleAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceAndAppManagementRoleAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceAndAppManagementRoleAssignment collection
func (r *DeviceManagementRoleAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceAndAppManagementRoleAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceAndAppManagementRoleAssignment collection
func (r *DeviceManagementRoleAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceAndAppManagementRoleAssignment) (resObj *DeviceAndAppManagementRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleDefinitions returns request builder for RoleDefinition collection
func (b *DeviceManagementRequestBuilder) RoleDefinitions() *DeviceManagementRoleDefinitionsCollectionRequestBuilder {
	bb := &DeviceManagementRoleDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinitions"
	return bb
}

// DeviceManagementRoleDefinitionsCollectionRequestBuilder is request builder for RoleDefinition collection rcn
type DeviceManagementRoleDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RoleDefinition collection
func (b *DeviceManagementRoleDefinitionsCollectionRequestBuilder) Request() *DeviceManagementRoleDefinitionsCollectionRequest {
	return &DeviceManagementRoleDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RoleDefinition item
func (b *DeviceManagementRoleDefinitionsCollectionRequestBuilder) ID(id string) *RoleDefinitionRequestBuilder {
	bb := &RoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementRoleDefinitionsCollectionRequest is request for RoleDefinition collection
type DeviceManagementRoleDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for RoleDefinition collection
func (r *DeviceManagementRoleDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]RoleDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RoleDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []RoleDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for RoleDefinition collection, max N pages
func (r *DeviceManagementRoleDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]RoleDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for RoleDefinition collection
func (r *DeviceManagementRoleDefinitionsCollectionRequest) Get(ctx context.Context) ([]RoleDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for RoleDefinition collection
func (r *DeviceManagementRoleDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *RoleDefinition) (resObj *RoleDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleScopeTags returns request builder for RoleScopeTag collection
func (b *DeviceManagementRequestBuilder) RoleScopeTags() *DeviceManagementRoleScopeTagsCollectionRequestBuilder {
	bb := &DeviceManagementRoleScopeTagsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleScopeTags"
	return bb
}

// DeviceManagementRoleScopeTagsCollectionRequestBuilder is request builder for RoleScopeTag collection rcn
type DeviceManagementRoleScopeTagsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RoleScopeTag collection
func (b *DeviceManagementRoleScopeTagsCollectionRequestBuilder) Request() *DeviceManagementRoleScopeTagsCollectionRequest {
	return &DeviceManagementRoleScopeTagsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RoleScopeTag item
func (b *DeviceManagementRoleScopeTagsCollectionRequestBuilder) ID(id string) *RoleScopeTagRequestBuilder {
	bb := &RoleScopeTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementRoleScopeTagsCollectionRequest is request for RoleScopeTag collection
type DeviceManagementRoleScopeTagsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for RoleScopeTag collection
func (r *DeviceManagementRoleScopeTagsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]RoleScopeTag, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RoleScopeTag
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []RoleScopeTag
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for RoleScopeTag collection, max N pages
func (r *DeviceManagementRoleScopeTagsCollectionRequest) GetN(ctx context.Context, n int) ([]RoleScopeTag, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for RoleScopeTag collection
func (r *DeviceManagementRoleScopeTagsCollectionRequest) Get(ctx context.Context) ([]RoleScopeTag, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for RoleScopeTag collection
func (r *DeviceManagementRoleScopeTagsCollectionRequest) Add(ctx context.Context, reqObj *RoleScopeTag) (resObj *RoleScopeTag, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ServiceNowConnections returns request builder for ServiceNowConnection collection
func (b *DeviceManagementRequestBuilder) ServiceNowConnections() *DeviceManagementServiceNowConnectionsCollectionRequestBuilder {
	bb := &DeviceManagementServiceNowConnectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/serviceNowConnections"
	return bb
}

// DeviceManagementServiceNowConnectionsCollectionRequestBuilder is request builder for ServiceNowConnection collection rcn
type DeviceManagementServiceNowConnectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ServiceNowConnection collection
func (b *DeviceManagementServiceNowConnectionsCollectionRequestBuilder) Request() *DeviceManagementServiceNowConnectionsCollectionRequest {
	return &DeviceManagementServiceNowConnectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ServiceNowConnection item
func (b *DeviceManagementServiceNowConnectionsCollectionRequestBuilder) ID(id string) *ServiceNowConnectionRequestBuilder {
	bb := &ServiceNowConnectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementServiceNowConnectionsCollectionRequest is request for ServiceNowConnection collection
type DeviceManagementServiceNowConnectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ServiceNowConnection collection
func (r *DeviceManagementServiceNowConnectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ServiceNowConnection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ServiceNowConnection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ServiceNowConnection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ServiceNowConnection collection, max N pages
func (r *DeviceManagementServiceNowConnectionsCollectionRequest) GetN(ctx context.Context, n int) ([]ServiceNowConnection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ServiceNowConnection collection
func (r *DeviceManagementServiceNowConnectionsCollectionRequest) Get(ctx context.Context) ([]ServiceNowConnection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ServiceNowConnection collection
func (r *DeviceManagementServiceNowConnectionsCollectionRequest) Add(ctx context.Context, reqObj *ServiceNowConnection) (resObj *ServiceNowConnection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SettingDefinitions returns request builder for DeviceManagementSettingDefinition collection
func (b *DeviceManagementRequestBuilder) SettingDefinitions() *DeviceManagementSettingDefinitionsCollectionRequestBuilder {
	bb := &DeviceManagementSettingDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settingDefinitions"
	return bb
}

// DeviceManagementSettingDefinitionsCollectionRequestBuilder is request builder for DeviceManagementSettingDefinition collection rcn
type DeviceManagementSettingDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementSettingDefinition collection
func (b *DeviceManagementSettingDefinitionsCollectionRequestBuilder) Request() *DeviceManagementSettingDefinitionsCollectionRequest {
	return &DeviceManagementSettingDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementSettingDefinition item
func (b *DeviceManagementSettingDefinitionsCollectionRequestBuilder) ID(id string) *DeviceManagementSettingDefinitionRequestBuilder {
	bb := &DeviceManagementSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementSettingDefinitionsCollectionRequest is request for DeviceManagementSettingDefinition collection
type DeviceManagementSettingDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementSettingDefinition collection, max N pages
func (r *DeviceManagementSettingDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementSettingDefinition) (resObj *DeviceManagementSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SoftwareUpdateStatusSummary is navigation property rn
func (b *DeviceManagementRequestBuilder) SoftwareUpdateStatusSummary() *SoftwareUpdateStatusSummaryRequestBuilder {
	bb := &SoftwareUpdateStatusSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/softwareUpdateStatusSummary"
	return bb
}

// TelecomExpenseManagementPartners returns request builder for TelecomExpenseManagementPartner collection
func (b *DeviceManagementRequestBuilder) TelecomExpenseManagementPartners() *DeviceManagementTelecomExpenseManagementPartnersCollectionRequestBuilder {
	bb := &DeviceManagementTelecomExpenseManagementPartnersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/telecomExpenseManagementPartners"
	return bb
}

// DeviceManagementTelecomExpenseManagementPartnersCollectionRequestBuilder is request builder for TelecomExpenseManagementPartner collection rcn
type DeviceManagementTelecomExpenseManagementPartnersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TelecomExpenseManagementPartner collection
func (b *DeviceManagementTelecomExpenseManagementPartnersCollectionRequestBuilder) Request() *DeviceManagementTelecomExpenseManagementPartnersCollectionRequest {
	return &DeviceManagementTelecomExpenseManagementPartnersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TelecomExpenseManagementPartner item
func (b *DeviceManagementTelecomExpenseManagementPartnersCollectionRequestBuilder) ID(id string) *TelecomExpenseManagementPartnerRequestBuilder {
	bb := &TelecomExpenseManagementPartnerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementTelecomExpenseManagementPartnersCollectionRequest is request for TelecomExpenseManagementPartner collection
type DeviceManagementTelecomExpenseManagementPartnersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TelecomExpenseManagementPartner collection
func (r *DeviceManagementTelecomExpenseManagementPartnersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TelecomExpenseManagementPartner, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TelecomExpenseManagementPartner
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TelecomExpenseManagementPartner
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TelecomExpenseManagementPartner collection, max N pages
func (r *DeviceManagementTelecomExpenseManagementPartnersCollectionRequest) GetN(ctx context.Context, n int) ([]TelecomExpenseManagementPartner, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TelecomExpenseManagementPartner collection
func (r *DeviceManagementTelecomExpenseManagementPartnersCollectionRequest) Get(ctx context.Context) ([]TelecomExpenseManagementPartner, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TelecomExpenseManagementPartner collection
func (r *DeviceManagementTelecomExpenseManagementPartnersCollectionRequest) Add(ctx context.Context, reqObj *TelecomExpenseManagementPartner) (resObj *TelecomExpenseManagementPartner, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TemplateSettings returns request builder for DeviceManagementConfigurationSettingTemplate collection
func (b *DeviceManagementRequestBuilder) TemplateSettings() *DeviceManagementTemplateSettingsCollectionRequestBuilder {
	bb := &DeviceManagementTemplateSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/templateSettings"
	return bb
}

// DeviceManagementTemplateSettingsCollectionRequestBuilder is request builder for DeviceManagementConfigurationSettingTemplate collection rcn
type DeviceManagementTemplateSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSettingTemplate collection
func (b *DeviceManagementTemplateSettingsCollectionRequestBuilder) Request() *DeviceManagementTemplateSettingsCollectionRequest {
	return &DeviceManagementTemplateSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSettingTemplate item
func (b *DeviceManagementTemplateSettingsCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSettingTemplateRequestBuilder {
	bb := &DeviceManagementConfigurationSettingTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementTemplateSettingsCollectionRequest is request for DeviceManagementConfigurationSettingTemplate collection
type DeviceManagementTemplateSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSettingTemplate collection
func (r *DeviceManagementTemplateSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSettingTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSettingTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSettingTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSettingTemplate collection, max N pages
func (r *DeviceManagementTemplateSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSettingTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSettingTemplate collection
func (r *DeviceManagementTemplateSettingsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSettingTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSettingTemplate collection
func (r *DeviceManagementTemplateSettingsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSettingTemplate) (resObj *DeviceManagementConfigurationSettingTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Templates returns request builder for DeviceManagementTemplate collection
func (b *DeviceManagementRequestBuilder) Templates() *DeviceManagementTemplatesCollectionRequestBuilder {
	bb := &DeviceManagementTemplatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/templates"
	return bb
}

// DeviceManagementTemplatesCollectionRequestBuilder is request builder for DeviceManagementTemplate collection rcn
type DeviceManagementTemplatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementTemplate collection
func (b *DeviceManagementTemplatesCollectionRequestBuilder) Request() *DeviceManagementTemplatesCollectionRequest {
	return &DeviceManagementTemplatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementTemplate item
func (b *DeviceManagementTemplatesCollectionRequestBuilder) ID(id string) *DeviceManagementTemplateRequestBuilder {
	bb := &DeviceManagementTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementTemplatesCollectionRequest is request for DeviceManagementTemplate collection
type DeviceManagementTemplatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementTemplate collection
func (r *DeviceManagementTemplatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementTemplate collection, max N pages
func (r *DeviceManagementTemplatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementTemplate collection
func (r *DeviceManagementTemplatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementTemplate collection
func (r *DeviceManagementTemplatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementTemplate) (resObj *DeviceManagementTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TenantAttachRBAC is navigation property rn
func (b *DeviceManagementRequestBuilder) TenantAttachRBAC() *TenantAttachRBACRequestBuilder {
	bb := &TenantAttachRBACRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tenantAttachRBAC"
	return bb
}

// TermsAndConditions returns request builder for TermsAndConditions collection
func (b *DeviceManagementRequestBuilder) TermsAndConditions() *DeviceManagementTermsAndConditionsCollectionRequestBuilder {
	bb := &DeviceManagementTermsAndConditionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/termsAndConditions"
	return bb
}

// DeviceManagementTermsAndConditionsCollectionRequestBuilder is request builder for TermsAndConditions collection rcn
type DeviceManagementTermsAndConditionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TermsAndConditions collection
func (b *DeviceManagementTermsAndConditionsCollectionRequestBuilder) Request() *DeviceManagementTermsAndConditionsCollectionRequest {
	return &DeviceManagementTermsAndConditionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TermsAndConditions item
func (b *DeviceManagementTermsAndConditionsCollectionRequestBuilder) ID(id string) *TermsAndConditionsRequestBuilder {
	bb := &TermsAndConditionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementTermsAndConditionsCollectionRequest is request for TermsAndConditions collection
type DeviceManagementTermsAndConditionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TermsAndConditions collection
func (r *DeviceManagementTermsAndConditionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TermsAndConditions, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TermsAndConditions
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TermsAndConditions
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TermsAndConditions collection, max N pages
func (r *DeviceManagementTermsAndConditionsCollectionRequest) GetN(ctx context.Context, n int) ([]TermsAndConditions, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TermsAndConditions collection
func (r *DeviceManagementTermsAndConditionsCollectionRequest) Get(ctx context.Context) ([]TermsAndConditions, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TermsAndConditions collection
func (r *DeviceManagementTermsAndConditionsCollectionRequest) Add(ctx context.Context, reqObj *TermsAndConditions) (resObj *TermsAndConditions, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TroubleshootingEvents returns request builder for DeviceManagementTroubleshootingEvent collection
func (b *DeviceManagementRequestBuilder) TroubleshootingEvents() *DeviceManagementTroubleshootingEventsCollectionRequestBuilder {
	bb := &DeviceManagementTroubleshootingEventsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/troubleshootingEvents"
	return bb
}

// DeviceManagementTroubleshootingEventsCollectionRequestBuilder is request builder for DeviceManagementTroubleshootingEvent collection rcn
type DeviceManagementTroubleshootingEventsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementTroubleshootingEvent collection
func (b *DeviceManagementTroubleshootingEventsCollectionRequestBuilder) Request() *DeviceManagementTroubleshootingEventsCollectionRequest {
	return &DeviceManagementTroubleshootingEventsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementTroubleshootingEvent item
func (b *DeviceManagementTroubleshootingEventsCollectionRequestBuilder) ID(id string) *DeviceManagementTroubleshootingEventRequestBuilder {
	bb := &DeviceManagementTroubleshootingEventRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementTroubleshootingEventsCollectionRequest is request for DeviceManagementTroubleshootingEvent collection
type DeviceManagementTroubleshootingEventsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementTroubleshootingEvent collection
func (r *DeviceManagementTroubleshootingEventsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementTroubleshootingEvent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementTroubleshootingEvent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementTroubleshootingEvent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementTroubleshootingEvent collection, max N pages
func (r *DeviceManagementTroubleshootingEventsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementTroubleshootingEvent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementTroubleshootingEvent collection
func (r *DeviceManagementTroubleshootingEventsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementTroubleshootingEvent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementTroubleshootingEvent collection
func (r *DeviceManagementTroubleshootingEventsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementTroubleshootingEvent) (resObj *DeviceManagementTroubleshootingEvent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAnomaly returns request builder for UserExperienceAnalyticsAnomaly collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAnomaly() *DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAnomaly"
	return bb
}

// DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequestBuilder is request builder for UserExperienceAnalyticsAnomaly collection rcn
type DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsAnomaly collection
func (b *DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsAnomaly item
func (b *DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsAnomalyRequestBuilder {
	bb := &UserExperienceAnalyticsAnomalyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequest is request for UserExperienceAnalyticsAnomaly collection
type DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsAnomaly collection
func (r *DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsAnomaly, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsAnomaly
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsAnomaly
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsAnomaly collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsAnomaly, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsAnomaly collection
func (r *DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsAnomaly, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsAnomaly collection
func (r *DeviceManagementUserExperienceAnalyticsAnomalyCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsAnomaly) (resObj *UserExperienceAnalyticsAnomaly, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAnomalyDevice returns request builder for UserExperienceAnalyticsAnomalyDevice collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAnomalyDevice() *DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAnomalyDevice"
	return bb
}

// DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequestBuilder is request builder for UserExperienceAnalyticsAnomalyDevice collection rcn
type DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsAnomalyDevice collection
func (b *DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsAnomalyDevice item
func (b *DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsAnomalyDeviceRequestBuilder {
	bb := &UserExperienceAnalyticsAnomalyDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequest is request for UserExperienceAnalyticsAnomalyDevice collection
type DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsAnomalyDevice collection
func (r *DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsAnomalyDevice, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsAnomalyDevice
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsAnomalyDevice
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsAnomalyDevice collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsAnomalyDevice, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsAnomalyDevice collection
func (r *DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsAnomalyDevice, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsAnomalyDevice collection
func (r *DeviceManagementUserExperienceAnalyticsAnomalyDeviceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsAnomalyDevice) (resObj *UserExperienceAnalyticsAnomalyDevice, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAppHealthApplicationPerformance returns request builder for UserExperienceAnalyticsAppHealthApplicationPerformance collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAppHealthApplicationPerformance() *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAppHealthApplicationPerformance"
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequestBuilder is request builder for UserExperienceAnalyticsAppHealthApplicationPerformance collection rcn
type DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsAppHealthApplicationPerformance collection
func (b *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsAppHealthApplicationPerformance item
func (b *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsAppHealthApplicationPerformanceRequestBuilder {
	bb := &UserExperienceAnalyticsAppHealthApplicationPerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequest is request for UserExperienceAnalyticsAppHealthApplicationPerformance collection
type DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsAppHealthApplicationPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsAppHealthApplicationPerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsAppHealthApplicationPerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsAppHealthApplicationPerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsAppHealthApplicationPerformance collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsAppHealthApplicationPerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsAppHealthApplicationPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsAppHealthApplicationPerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsAppHealthApplicationPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsAppHealthApplicationPerformance) (resObj *UserExperienceAnalyticsAppHealthApplicationPerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion returns request builder for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion() *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion"
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequestBuilder is request builder for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion collection rcn
type DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion collection
func (b *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion item
func (b *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionRequestBuilder {
	bb := &UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequest is request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion collection
type DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion) (resObj *UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails returns request builder for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails() *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails"
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequestBuilder is request builder for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails collection rcn
type DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails collection
func (b *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails item
func (b *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetailsRequestBuilder {
	bb := &UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequest is request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails collection
type DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetailsCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails) (resObj *UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceID returns request builder for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceID() *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId"
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequestBuilder is request builder for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID collection rcn
type DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID collection
func (b *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID item
func (b *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceIDRequestBuilder {
	bb := &UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceIDRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequest is request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID collection
type DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceIDCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID) (resObj *UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceID, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion returns request builder for UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion() *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion"
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequestBuilder is request builder for UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion collection rcn
type DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion collection
func (b *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion item
func (b *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsAppHealthAppPerformanceByOSVersionRequestBuilder {
	bb := &UserExperienceAnalyticsAppHealthAppPerformanceByOSVersionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequest is request for UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion collection
type DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersionCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion) (resObj *UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAppHealthDeviceModelPerformance returns request builder for UserExperienceAnalyticsAppHealthDeviceModelPerformance collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAppHealthDeviceModelPerformance() *DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAppHealthDeviceModelPerformance"
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequestBuilder is request builder for UserExperienceAnalyticsAppHealthDeviceModelPerformance collection rcn
type DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsAppHealthDeviceModelPerformance collection
func (b *DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsAppHealthDeviceModelPerformance item
func (b *DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsAppHealthDeviceModelPerformanceRequestBuilder {
	bb := &UserExperienceAnalyticsAppHealthDeviceModelPerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequest is request for UserExperienceAnalyticsAppHealthDeviceModelPerformance collection
type DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsAppHealthDeviceModelPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsAppHealthDeviceModelPerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsAppHealthDeviceModelPerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsAppHealthDeviceModelPerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsAppHealthDeviceModelPerformance collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsAppHealthDeviceModelPerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsAppHealthDeviceModelPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsAppHealthDeviceModelPerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsAppHealthDeviceModelPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDeviceModelPerformanceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsAppHealthDeviceModelPerformance) (resObj *UserExperienceAnalyticsAppHealthDeviceModelPerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAppHealthDevicePerformance returns request builder for UserExperienceAnalyticsAppHealthDevicePerformance collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAppHealthDevicePerformance() *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAppHealthDevicePerformance"
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequestBuilder is request builder for UserExperienceAnalyticsAppHealthDevicePerformance collection rcn
type DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsAppHealthDevicePerformance collection
func (b *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsAppHealthDevicePerformance item
func (b *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsAppHealthDevicePerformanceRequestBuilder {
	bb := &UserExperienceAnalyticsAppHealthDevicePerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequest is request for UserExperienceAnalyticsAppHealthDevicePerformance collection
type DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsAppHealthDevicePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsAppHealthDevicePerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsAppHealthDevicePerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsAppHealthDevicePerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsAppHealthDevicePerformance collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsAppHealthDevicePerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsAppHealthDevicePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsAppHealthDevicePerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsAppHealthDevicePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsAppHealthDevicePerformance) (resObj *UserExperienceAnalyticsAppHealthDevicePerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAppHealthDevicePerformanceDetails returns request builder for UserExperienceAnalyticsAppHealthDevicePerformanceDetails collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAppHealthDevicePerformanceDetails() *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAppHealthDevicePerformanceDetails"
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequestBuilder is request builder for UserExperienceAnalyticsAppHealthDevicePerformanceDetails collection rcn
type DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsAppHealthDevicePerformanceDetails collection
func (b *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsAppHealthDevicePerformanceDetails item
func (b *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsAppHealthDevicePerformanceDetailsRequestBuilder {
	bb := &UserExperienceAnalyticsAppHealthDevicePerformanceDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequest is request for UserExperienceAnalyticsAppHealthDevicePerformanceDetails collection
type DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsAppHealthDevicePerformanceDetails collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsAppHealthDevicePerformanceDetails, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsAppHealthDevicePerformanceDetails
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsAppHealthDevicePerformanceDetails
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsAppHealthDevicePerformanceDetails collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsAppHealthDevicePerformanceDetails, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsAppHealthDevicePerformanceDetails collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsAppHealthDevicePerformanceDetails, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsAppHealthDevicePerformanceDetails collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthDevicePerformanceDetailsCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsAppHealthDevicePerformanceDetails) (resObj *UserExperienceAnalyticsAppHealthDevicePerformanceDetails, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAppHealthOSVersionPerformance returns request builder for UserExperienceAnalyticsAppHealthOSVersionPerformance collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAppHealthOSVersionPerformance() *DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAppHealthOSVersionPerformance"
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequestBuilder is request builder for UserExperienceAnalyticsAppHealthOSVersionPerformance collection rcn
type DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsAppHealthOSVersionPerformance collection
func (b *DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsAppHealthOSVersionPerformance item
func (b *DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsAppHealthOSVersionPerformanceRequestBuilder {
	bb := &UserExperienceAnalyticsAppHealthOSVersionPerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequest is request for UserExperienceAnalyticsAppHealthOSVersionPerformance collection
type DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsAppHealthOSVersionPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsAppHealthOSVersionPerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsAppHealthOSVersionPerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsAppHealthOSVersionPerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsAppHealthOSVersionPerformance collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsAppHealthOSVersionPerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsAppHealthOSVersionPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsAppHealthOSVersionPerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsAppHealthOSVersionPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsAppHealthOSVersionPerformanceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsAppHealthOSVersionPerformance) (resObj *UserExperienceAnalyticsAppHealthOSVersionPerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsAppHealthOverview is navigation property rn
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsAppHealthOverview() *UserExperienceAnalyticsCategoryRequestBuilder {
	bb := &UserExperienceAnalyticsCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsAppHealthOverview"
	return bb
}

// UserExperienceAnalyticsBaselines returns request builder for UserExperienceAnalyticsBaseline collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsBaselines() *DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsBaselines"
	return bb
}

// DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequestBuilder is request builder for UserExperienceAnalyticsBaseline collection rcn
type DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsBaseline collection
func (b *DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsBaseline item
func (b *DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsBaselineRequestBuilder {
	bb := &UserExperienceAnalyticsBaselineRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequest is request for UserExperienceAnalyticsBaseline collection
type DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsBaseline collection
func (r *DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsBaseline, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsBaseline
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsBaseline
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsBaseline collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsBaseline, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsBaseline collection
func (r *DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsBaseline, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsBaseline collection
func (r *DeviceManagementUserExperienceAnalyticsBaselinesCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsBaseline) (resObj *UserExperienceAnalyticsBaseline, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsBatteryHealthAppImpact returns request builder for UserExperienceAnalyticsBatteryHealthAppImpact collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsBatteryHealthAppImpact() *DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsBatteryHealthAppImpact"
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequestBuilder is request builder for UserExperienceAnalyticsBatteryHealthAppImpact collection rcn
type DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsBatteryHealthAppImpact collection
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsBatteryHealthAppImpact item
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsBatteryHealthAppImpactRequestBuilder {
	bb := &UserExperienceAnalyticsBatteryHealthAppImpactRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequest is request for UserExperienceAnalyticsBatteryHealthAppImpact collection
type DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsBatteryHealthAppImpact collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsBatteryHealthAppImpact, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsBatteryHealthAppImpact
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsBatteryHealthAppImpact
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsBatteryHealthAppImpact collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsBatteryHealthAppImpact, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsBatteryHealthAppImpact collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsBatteryHealthAppImpact, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsBatteryHealthAppImpact collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthAppImpactCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsBatteryHealthAppImpact) (resObj *UserExperienceAnalyticsBatteryHealthAppImpact, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsBatteryHealthCapacityDetails is navigation property rn
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsBatteryHealthCapacityDetails() *UserExperienceAnalyticsBatteryHealthCapacityDetailsRequestBuilder {
	bb := &UserExperienceAnalyticsBatteryHealthCapacityDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsBatteryHealthCapacityDetails"
	return bb
}

// UserExperienceAnalyticsBatteryHealthDeviceAppImpact returns request builder for UserExperienceAnalyticsBatteryHealthDeviceAppImpact collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsBatteryHealthDeviceAppImpact() *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsBatteryHealthDeviceAppImpact"
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequestBuilder is request builder for UserExperienceAnalyticsBatteryHealthDeviceAppImpact collection rcn
type DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsBatteryHealthDeviceAppImpact collection
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsBatteryHealthDeviceAppImpact item
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsBatteryHealthDeviceAppImpactRequestBuilder {
	bb := &UserExperienceAnalyticsBatteryHealthDeviceAppImpactRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequest is request for UserExperienceAnalyticsBatteryHealthDeviceAppImpact collection
type DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsBatteryHealthDeviceAppImpact collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsBatteryHealthDeviceAppImpact, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsBatteryHealthDeviceAppImpact
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsBatteryHealthDeviceAppImpact
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsBatteryHealthDeviceAppImpact collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsBatteryHealthDeviceAppImpact, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsBatteryHealthDeviceAppImpact collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsBatteryHealthDeviceAppImpact, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsBatteryHealthDeviceAppImpact collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceAppImpactCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsBatteryHealthDeviceAppImpact) (resObj *UserExperienceAnalyticsBatteryHealthDeviceAppImpact, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsBatteryHealthDevicePerformance returns request builder for UserExperienceAnalyticsBatteryHealthDevicePerformance collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsBatteryHealthDevicePerformance() *DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsBatteryHealthDevicePerformance"
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequestBuilder is request builder for UserExperienceAnalyticsBatteryHealthDevicePerformance collection rcn
type DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsBatteryHealthDevicePerformance collection
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsBatteryHealthDevicePerformance item
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsBatteryHealthDevicePerformanceRequestBuilder {
	bb := &UserExperienceAnalyticsBatteryHealthDevicePerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequest is request for UserExperienceAnalyticsBatteryHealthDevicePerformance collection
type DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsBatteryHealthDevicePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsBatteryHealthDevicePerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsBatteryHealthDevicePerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsBatteryHealthDevicePerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsBatteryHealthDevicePerformance collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsBatteryHealthDevicePerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsBatteryHealthDevicePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsBatteryHealthDevicePerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsBatteryHealthDevicePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDevicePerformanceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsBatteryHealthDevicePerformance) (resObj *UserExperienceAnalyticsBatteryHealthDevicePerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory returns request builder for UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory() *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsBatteryHealthDeviceRuntimeHistory"
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequestBuilder is request builder for UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory collection rcn
type DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory collection
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory item
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryRequestBuilder {
	bb := &UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequest is request for UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory collection
type DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthDeviceRuntimeHistoryCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory) (resObj *UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsBatteryHealthModelPerformance returns request builder for UserExperienceAnalyticsBatteryHealthModelPerformance collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsBatteryHealthModelPerformance() *DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsBatteryHealthModelPerformance"
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequestBuilder is request builder for UserExperienceAnalyticsBatteryHealthModelPerformance collection rcn
type DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsBatteryHealthModelPerformance collection
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsBatteryHealthModelPerformance item
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsBatteryHealthModelPerformanceRequestBuilder {
	bb := &UserExperienceAnalyticsBatteryHealthModelPerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequest is request for UserExperienceAnalyticsBatteryHealthModelPerformance collection
type DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsBatteryHealthModelPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsBatteryHealthModelPerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsBatteryHealthModelPerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsBatteryHealthModelPerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsBatteryHealthModelPerformance collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsBatteryHealthModelPerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsBatteryHealthModelPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsBatteryHealthModelPerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsBatteryHealthModelPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthModelPerformanceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsBatteryHealthModelPerformance) (resObj *UserExperienceAnalyticsBatteryHealthModelPerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsBatteryHealthOsPerformance returns request builder for UserExperienceAnalyticsBatteryHealthOsPerformance collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsBatteryHealthOsPerformance() *DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsBatteryHealthOsPerformance"
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequestBuilder is request builder for UserExperienceAnalyticsBatteryHealthOsPerformance collection rcn
type DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsBatteryHealthOsPerformance collection
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsBatteryHealthOsPerformance item
func (b *DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsBatteryHealthOsPerformanceRequestBuilder {
	bb := &UserExperienceAnalyticsBatteryHealthOsPerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequest is request for UserExperienceAnalyticsBatteryHealthOsPerformance collection
type DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsBatteryHealthOsPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsBatteryHealthOsPerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsBatteryHealthOsPerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsBatteryHealthOsPerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsBatteryHealthOsPerformance collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsBatteryHealthOsPerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsBatteryHealthOsPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsBatteryHealthOsPerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsBatteryHealthOsPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsBatteryHealthOsPerformanceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsBatteryHealthOsPerformance) (resObj *UserExperienceAnalyticsBatteryHealthOsPerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsBatteryHealthRuntimeDetails is navigation property rn
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsBatteryHealthRuntimeDetails() *UserExperienceAnalyticsBatteryHealthRuntimeDetailsRequestBuilder {
	bb := &UserExperienceAnalyticsBatteryHealthRuntimeDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsBatteryHealthRuntimeDetails"
	return bb
}

// UserExperienceAnalyticsCategories returns request builder for UserExperienceAnalyticsCategory collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsCategories() *DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsCategories"
	return bb
}

// DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequestBuilder is request builder for UserExperienceAnalyticsCategory collection rcn
type DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsCategory collection
func (b *DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsCategory item
func (b *DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsCategoryRequestBuilder {
	bb := &UserExperienceAnalyticsCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequest is request for UserExperienceAnalyticsCategory collection
type DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsCategory collection
func (r *DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsCategory collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsCategory collection
func (r *DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsCategory collection
func (r *DeviceManagementUserExperienceAnalyticsCategoriesCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsCategory) (resObj *UserExperienceAnalyticsCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsDeviceMetricHistory returns request builder for UserExperienceAnalyticsMetricHistory collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsDeviceMetricHistory() *DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsDeviceMetricHistory"
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequestBuilder is request builder for UserExperienceAnalyticsMetricHistory collection rcn
type DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsMetricHistory collection
func (b *DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsMetricHistory item
func (b *DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsMetricHistoryRequestBuilder {
	bb := &UserExperienceAnalyticsMetricHistoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequest is request for UserExperienceAnalyticsMetricHistory collection
type DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsMetricHistory collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsMetricHistory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsMetricHistory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsMetricHistory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsMetricHistory collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsMetricHistory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsMetricHistory collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsMetricHistory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsMetricHistory collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceMetricHistoryCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsMetricHistory) (resObj *UserExperienceAnalyticsMetricHistory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsDevicePerformance returns request builder for UserExperienceAnalyticsDevicePerformance collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsDevicePerformance() *DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsDevicePerformance"
	return bb
}

// DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequestBuilder is request builder for UserExperienceAnalyticsDevicePerformance collection rcn
type DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsDevicePerformance collection
func (b *DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsDevicePerformance item
func (b *DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsDevicePerformanceRequestBuilder {
	bb := &UserExperienceAnalyticsDevicePerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequest is request for UserExperienceAnalyticsDevicePerformance collection
type DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsDevicePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsDevicePerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsDevicePerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsDevicePerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsDevicePerformance collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsDevicePerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsDevicePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsDevicePerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsDevicePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsDevicePerformanceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsDevicePerformance) (resObj *UserExperienceAnalyticsDevicePerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsDeviceScope is navigation property rn
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsDeviceScope() *UserExperienceAnalyticsDeviceScopeRequestBuilder {
	bb := &UserExperienceAnalyticsDeviceScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsDeviceScope"
	return bb
}

// UserExperienceAnalyticsDeviceScopes returns request builder for UserExperienceAnalyticsDeviceScope collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsDeviceScopes() *DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsDeviceScopes"
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequestBuilder is request builder for UserExperienceAnalyticsDeviceScope collection rcn
type DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsDeviceScope collection
func (b *DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsDeviceScope item
func (b *DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsDeviceScopeRequestBuilder {
	bb := &UserExperienceAnalyticsDeviceScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequest is request for UserExperienceAnalyticsDeviceScope collection
type DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsDeviceScope collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsDeviceScope, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsDeviceScope
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsDeviceScope
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsDeviceScope collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsDeviceScope, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsDeviceScope collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsDeviceScope, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsDeviceScope collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceScopesCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsDeviceScope) (resObj *UserExperienceAnalyticsDeviceScope, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsDeviceScores returns request builder for UserExperienceAnalyticsDeviceScores collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsDeviceScores() *DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsDeviceScores"
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequestBuilder is request builder for UserExperienceAnalyticsDeviceScores collection rcn
type DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsDeviceScores collection
func (b *DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsDeviceScores item
func (b *DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsDeviceScoresRequestBuilder {
	bb := &UserExperienceAnalyticsDeviceScoresRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequest is request for UserExperienceAnalyticsDeviceScores collection
type DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsDeviceScores collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsDeviceScores, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsDeviceScores
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsDeviceScores
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsDeviceScores collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsDeviceScores, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsDeviceScores collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsDeviceScores, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsDeviceScores collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceScoresCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsDeviceScores) (resObj *UserExperienceAnalyticsDeviceScores, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsDeviceStartupHistory returns request builder for UserExperienceAnalyticsDeviceStartupHistory collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsDeviceStartupHistory() *DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsDeviceStartupHistory"
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequestBuilder is request builder for UserExperienceAnalyticsDeviceStartupHistory collection rcn
type DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsDeviceStartupHistory collection
func (b *DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsDeviceStartupHistory item
func (b *DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsDeviceStartupHistoryRequestBuilder {
	bb := &UserExperienceAnalyticsDeviceStartupHistoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequest is request for UserExperienceAnalyticsDeviceStartupHistory collection
type DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsDeviceStartupHistory collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsDeviceStartupHistory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsDeviceStartupHistory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsDeviceStartupHistory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsDeviceStartupHistory collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsDeviceStartupHistory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsDeviceStartupHistory collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsDeviceStartupHistory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsDeviceStartupHistory collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupHistoryCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsDeviceStartupHistory) (resObj *UserExperienceAnalyticsDeviceStartupHistory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsDeviceStartupProcessPerformance returns request builder for UserExperienceAnalyticsDeviceStartupProcessPerformance collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsDeviceStartupProcessPerformance() *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsDeviceStartupProcessPerformance"
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequestBuilder is request builder for UserExperienceAnalyticsDeviceStartupProcessPerformance collection rcn
type DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsDeviceStartupProcessPerformance collection
func (b *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsDeviceStartupProcessPerformance item
func (b *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsDeviceStartupProcessPerformanceRequestBuilder {
	bb := &UserExperienceAnalyticsDeviceStartupProcessPerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequest is request for UserExperienceAnalyticsDeviceStartupProcessPerformance collection
type DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsDeviceStartupProcessPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsDeviceStartupProcessPerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsDeviceStartupProcessPerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsDeviceStartupProcessPerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsDeviceStartupProcessPerformance collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsDeviceStartupProcessPerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsDeviceStartupProcessPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsDeviceStartupProcessPerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsDeviceStartupProcessPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessPerformanceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsDeviceStartupProcessPerformance) (resObj *UserExperienceAnalyticsDeviceStartupProcessPerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsDeviceStartupProcesses returns request builder for UserExperienceAnalyticsDeviceStartupProcess collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsDeviceStartupProcesses() *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsDeviceStartupProcesses"
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequestBuilder is request builder for UserExperienceAnalyticsDeviceStartupProcess collection rcn
type DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsDeviceStartupProcess collection
func (b *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsDeviceStartupProcess item
func (b *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsDeviceStartupProcessRequestBuilder {
	bb := &UserExperienceAnalyticsDeviceStartupProcessRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequest is request for UserExperienceAnalyticsDeviceStartupProcess collection
type DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsDeviceStartupProcess collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsDeviceStartupProcess, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsDeviceStartupProcess
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsDeviceStartupProcess
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsDeviceStartupProcess collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsDeviceStartupProcess, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsDeviceStartupProcess collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsDeviceStartupProcess, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsDeviceStartupProcess collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceStartupProcessesCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsDeviceStartupProcess) (resObj *UserExperienceAnalyticsDeviceStartupProcess, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsDeviceTimelineEvent returns request builder for UserExperienceAnalyticsDeviceTimelineEvent collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsDeviceTimelineEvent() *DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsDeviceTimelineEvent"
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequestBuilder is request builder for UserExperienceAnalyticsDeviceTimelineEvent collection rcn
type DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsDeviceTimelineEvent collection
func (b *DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsDeviceTimelineEvent item
func (b *DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsDeviceTimelineEventRequestBuilder {
	bb := &UserExperienceAnalyticsDeviceTimelineEventRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequest is request for UserExperienceAnalyticsDeviceTimelineEvent collection
type DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsDeviceTimelineEvent collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsDeviceTimelineEvent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsDeviceTimelineEvent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsDeviceTimelineEvent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsDeviceTimelineEvent collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsDeviceTimelineEvent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsDeviceTimelineEvent collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsDeviceTimelineEvent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsDeviceTimelineEvent collection
func (r *DeviceManagementUserExperienceAnalyticsDeviceTimelineEventCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsDeviceTimelineEvent) (resObj *UserExperienceAnalyticsDeviceTimelineEvent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsDevicesWithoutCloudIdentity returns request builder for UserExperienceAnalyticsDeviceWithoutCloudIdentity collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsDevicesWithoutCloudIdentity() *DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsDevicesWithoutCloudIdentity"
	return bb
}

// DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequestBuilder is request builder for UserExperienceAnalyticsDeviceWithoutCloudIdentity collection rcn
type DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsDeviceWithoutCloudIdentity collection
func (b *DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsDeviceWithoutCloudIdentity item
func (b *DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsDeviceWithoutCloudIdentityRequestBuilder {
	bb := &UserExperienceAnalyticsDeviceWithoutCloudIdentityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequest is request for UserExperienceAnalyticsDeviceWithoutCloudIdentity collection
type DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsDeviceWithoutCloudIdentity collection
func (r *DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsDeviceWithoutCloudIdentity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsDeviceWithoutCloudIdentity
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsDeviceWithoutCloudIdentity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsDeviceWithoutCloudIdentity collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsDeviceWithoutCloudIdentity, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsDeviceWithoutCloudIdentity collection
func (r *DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsDeviceWithoutCloudIdentity, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsDeviceWithoutCloudIdentity collection
func (r *DeviceManagementUserExperienceAnalyticsDevicesWithoutCloudIdentityCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsDeviceWithoutCloudIdentity) (resObj *UserExperienceAnalyticsDeviceWithoutCloudIdentity, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsImpactingProcess returns request builder for UserExperienceAnalyticsImpactingProcess collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsImpactingProcess() *DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsImpactingProcess"
	return bb
}

// DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequestBuilder is request builder for UserExperienceAnalyticsImpactingProcess collection rcn
type DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsImpactingProcess collection
func (b *DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsImpactingProcess item
func (b *DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsImpactingProcessRequestBuilder {
	bb := &UserExperienceAnalyticsImpactingProcessRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequest is request for UserExperienceAnalyticsImpactingProcess collection
type DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsImpactingProcess collection
func (r *DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsImpactingProcess, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsImpactingProcess
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsImpactingProcess
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsImpactingProcess collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsImpactingProcess, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsImpactingProcess collection
func (r *DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsImpactingProcess, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsImpactingProcess collection
func (r *DeviceManagementUserExperienceAnalyticsImpactingProcessCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsImpactingProcess) (resObj *UserExperienceAnalyticsImpactingProcess, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsMetricHistory returns request builder for UserExperienceAnalyticsMetricHistory collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsMetricHistory() *DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsMetricHistory"
	return bb
}

// DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequestBuilder is request builder for UserExperienceAnalyticsMetricHistory collection rcn
type DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsMetricHistory collection
func (b *DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsMetricHistory item
func (b *DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsMetricHistoryRequestBuilder {
	bb := &UserExperienceAnalyticsMetricHistoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequest is request for UserExperienceAnalyticsMetricHistory collection
type DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsMetricHistory collection
func (r *DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsMetricHistory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsMetricHistory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsMetricHistory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsMetricHistory collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsMetricHistory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsMetricHistory collection
func (r *DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsMetricHistory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsMetricHistory collection
func (r *DeviceManagementUserExperienceAnalyticsMetricHistoryCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsMetricHistory) (resObj *UserExperienceAnalyticsMetricHistory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsModelScores returns request builder for UserExperienceAnalyticsModelScores collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsModelScores() *DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsModelScores"
	return bb
}

// DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequestBuilder is request builder for UserExperienceAnalyticsModelScores collection rcn
type DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsModelScores collection
func (b *DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsModelScores item
func (b *DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsModelScoresRequestBuilder {
	bb := &UserExperienceAnalyticsModelScoresRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequest is request for UserExperienceAnalyticsModelScores collection
type DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsModelScores collection
func (r *DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsModelScores, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsModelScores
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsModelScores
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsModelScores collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsModelScores, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsModelScores collection
func (r *DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsModelScores, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsModelScores collection
func (r *DeviceManagementUserExperienceAnalyticsModelScoresCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsModelScores) (resObj *UserExperienceAnalyticsModelScores, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsNotAutopilotReadyDevice returns request builder for UserExperienceAnalyticsNotAutopilotReadyDevice collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsNotAutopilotReadyDevice() *DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsNotAutopilotReadyDevice"
	return bb
}

// DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequestBuilder is request builder for UserExperienceAnalyticsNotAutopilotReadyDevice collection rcn
type DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsNotAutopilotReadyDevice collection
func (b *DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsNotAutopilotReadyDevice item
func (b *DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsNotAutopilotReadyDeviceRequestBuilder {
	bb := &UserExperienceAnalyticsNotAutopilotReadyDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequest is request for UserExperienceAnalyticsNotAutopilotReadyDevice collection
type DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsNotAutopilotReadyDevice collection
func (r *DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsNotAutopilotReadyDevice, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsNotAutopilotReadyDevice
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsNotAutopilotReadyDevice
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsNotAutopilotReadyDevice collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsNotAutopilotReadyDevice, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsNotAutopilotReadyDevice collection
func (r *DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsNotAutopilotReadyDevice, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsNotAutopilotReadyDevice collection
func (r *DeviceManagementUserExperienceAnalyticsNotAutopilotReadyDeviceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsNotAutopilotReadyDevice) (resObj *UserExperienceAnalyticsNotAutopilotReadyDevice, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsOverview is navigation property rn
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsOverview() *UserExperienceAnalyticsOverviewRequestBuilder {
	bb := &UserExperienceAnalyticsOverviewRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsOverview"
	return bb
}

// UserExperienceAnalyticsRemoteConnection returns request builder for UserExperienceAnalyticsRemoteConnection collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsRemoteConnection() *DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsRemoteConnection"
	return bb
}

// DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequestBuilder is request builder for UserExperienceAnalyticsRemoteConnection collection rcn
type DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsRemoteConnection collection
func (b *DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsRemoteConnection item
func (b *DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsRemoteConnectionRequestBuilder {
	bb := &UserExperienceAnalyticsRemoteConnectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequest is request for UserExperienceAnalyticsRemoteConnection collection
type DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsRemoteConnection collection
func (r *DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsRemoteConnection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsRemoteConnection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsRemoteConnection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsRemoteConnection collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsRemoteConnection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsRemoteConnection collection
func (r *DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsRemoteConnection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsRemoteConnection collection
func (r *DeviceManagementUserExperienceAnalyticsRemoteConnectionCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsRemoteConnection) (resObj *UserExperienceAnalyticsRemoteConnection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsResourcePerformance returns request builder for UserExperienceAnalyticsResourcePerformance collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsResourcePerformance() *DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsResourcePerformance"
	return bb
}

// DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequestBuilder is request builder for UserExperienceAnalyticsResourcePerformance collection rcn
type DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsResourcePerformance collection
func (b *DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsResourcePerformance item
func (b *DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsResourcePerformanceRequestBuilder {
	bb := &UserExperienceAnalyticsResourcePerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequest is request for UserExperienceAnalyticsResourcePerformance collection
type DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsResourcePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsResourcePerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsResourcePerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsResourcePerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsResourcePerformance collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsResourcePerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsResourcePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsResourcePerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsResourcePerformance collection
func (r *DeviceManagementUserExperienceAnalyticsResourcePerformanceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsResourcePerformance) (resObj *UserExperienceAnalyticsResourcePerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsScoreHistory returns request builder for UserExperienceAnalyticsScoreHistory collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsScoreHistory() *DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsScoreHistory"
	return bb
}

// DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequestBuilder is request builder for UserExperienceAnalyticsScoreHistory collection rcn
type DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsScoreHistory collection
func (b *DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsScoreHistory item
func (b *DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsScoreHistoryRequestBuilder {
	bb := &UserExperienceAnalyticsScoreHistoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequest is request for UserExperienceAnalyticsScoreHistory collection
type DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsScoreHistory collection
func (r *DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsScoreHistory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsScoreHistory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsScoreHistory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsScoreHistory collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsScoreHistory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsScoreHistory collection
func (r *DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsScoreHistory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsScoreHistory collection
func (r *DeviceManagementUserExperienceAnalyticsScoreHistoryCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsScoreHistory) (resObj *UserExperienceAnalyticsScoreHistory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric is navigation property rn
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric() *UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricRequestBuilder {
	bb := &UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetricRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric"
	return bb
}

// UserExperienceAnalyticsWorkFromAnywhereMetrics returns request builder for UserExperienceAnalyticsWorkFromAnywhereMetric collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsWorkFromAnywhereMetrics() *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsWorkFromAnywhereMetrics"
	return bb
}

// DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequestBuilder is request builder for UserExperienceAnalyticsWorkFromAnywhereMetric collection rcn
type DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsWorkFromAnywhereMetric collection
func (b *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsWorkFromAnywhereMetric item
func (b *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsWorkFromAnywhereMetricRequestBuilder {
	bb := &UserExperienceAnalyticsWorkFromAnywhereMetricRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequest is request for UserExperienceAnalyticsWorkFromAnywhereMetric collection
type DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsWorkFromAnywhereMetric collection
func (r *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsWorkFromAnywhereMetric, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsWorkFromAnywhereMetric
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsWorkFromAnywhereMetric
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsWorkFromAnywhereMetric collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsWorkFromAnywhereMetric, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsWorkFromAnywhereMetric collection
func (r *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsWorkFromAnywhereMetric, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsWorkFromAnywhereMetric collection
func (r *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereMetricsCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsWorkFromAnywhereMetric) (resObj *UserExperienceAnalyticsWorkFromAnywhereMetric, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserExperienceAnalyticsWorkFromAnywhereModelPerformance returns request builder for UserExperienceAnalyticsWorkFromAnywhereModelPerformance collection
func (b *DeviceManagementRequestBuilder) UserExperienceAnalyticsWorkFromAnywhereModelPerformance() *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequestBuilder {
	bb := &DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userExperienceAnalyticsWorkFromAnywhereModelPerformance"
	return bb
}

// DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequestBuilder is request builder for UserExperienceAnalyticsWorkFromAnywhereModelPerformance collection rcn
type DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserExperienceAnalyticsWorkFromAnywhereModelPerformance collection
func (b *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequestBuilder) Request() *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequest {
	return &DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserExperienceAnalyticsWorkFromAnywhereModelPerformance item
func (b *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequestBuilder) ID(id string) *UserExperienceAnalyticsWorkFromAnywhereModelPerformanceRequestBuilder {
	bb := &UserExperienceAnalyticsWorkFromAnywhereModelPerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequest is request for UserExperienceAnalyticsWorkFromAnywhereModelPerformance collection
type DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserExperienceAnalyticsWorkFromAnywhereModelPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserExperienceAnalyticsWorkFromAnywhereModelPerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserExperienceAnalyticsWorkFromAnywhereModelPerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserExperienceAnalyticsWorkFromAnywhereModelPerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserExperienceAnalyticsWorkFromAnywhereModelPerformance collection, max N pages
func (r *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequest) GetN(ctx context.Context, n int) ([]UserExperienceAnalyticsWorkFromAnywhereModelPerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserExperienceAnalyticsWorkFromAnywhereModelPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequest) Get(ctx context.Context) ([]UserExperienceAnalyticsWorkFromAnywhereModelPerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserExperienceAnalyticsWorkFromAnywhereModelPerformance collection
func (r *DeviceManagementUserExperienceAnalyticsWorkFromAnywhereModelPerformanceCollectionRequest) Add(ctx context.Context, reqObj *UserExperienceAnalyticsWorkFromAnywhereModelPerformance) (resObj *UserExperienceAnalyticsWorkFromAnywhereModelPerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserPfxCertificates returns request builder for UserPFXCertificate collection
func (b *DeviceManagementRequestBuilder) UserPfxCertificates() *DeviceManagementUserPfxCertificatesCollectionRequestBuilder {
	bb := &DeviceManagementUserPfxCertificatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userPfxCertificates"
	return bb
}

// DeviceManagementUserPfxCertificatesCollectionRequestBuilder is request builder for UserPFXCertificate collection rcn
type DeviceManagementUserPfxCertificatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserPFXCertificate collection
func (b *DeviceManagementUserPfxCertificatesCollectionRequestBuilder) Request() *DeviceManagementUserPfxCertificatesCollectionRequest {
	return &DeviceManagementUserPfxCertificatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserPFXCertificate item
func (b *DeviceManagementUserPfxCertificatesCollectionRequestBuilder) ID(id string) *UserPFXCertificateRequestBuilder {
	bb := &UserPFXCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementUserPfxCertificatesCollectionRequest is request for UserPFXCertificate collection
type DeviceManagementUserPfxCertificatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserPFXCertificate collection
func (r *DeviceManagementUserPfxCertificatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserPFXCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserPFXCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserPFXCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserPFXCertificate collection, max N pages
func (r *DeviceManagementUserPfxCertificatesCollectionRequest) GetN(ctx context.Context, n int) ([]UserPFXCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserPFXCertificate collection
func (r *DeviceManagementUserPfxCertificatesCollectionRequest) Get(ctx context.Context) ([]UserPFXCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserPFXCertificate collection
func (r *DeviceManagementUserPfxCertificatesCollectionRequest) Add(ctx context.Context, reqObj *UserPFXCertificate) (resObj *UserPFXCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// VirtualEndpoint is navigation property rn
func (b *DeviceManagementRequestBuilder) VirtualEndpoint() *VirtualEndpointRequestBuilder {
	bb := &VirtualEndpointRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/virtualEndpoint"
	return bb
}

// WindowsAutopilotDeploymentProfiles returns request builder for WindowsAutopilotDeploymentProfile collection
func (b *DeviceManagementRequestBuilder) WindowsAutopilotDeploymentProfiles() *DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequestBuilder {
	bb := &DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsAutopilotDeploymentProfiles"
	return bb
}

// DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequestBuilder is request builder for WindowsAutopilotDeploymentProfile collection rcn
type DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsAutopilotDeploymentProfile collection
func (b *DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequestBuilder) Request() *DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequest {
	return &DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsAutopilotDeploymentProfile item
func (b *DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequestBuilder) ID(id string) *WindowsAutopilotDeploymentProfileRequestBuilder {
	bb := &WindowsAutopilotDeploymentProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequest is request for WindowsAutopilotDeploymentProfile collection
type DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsAutopilotDeploymentProfile collection
func (r *DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsAutopilotDeploymentProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsAutopilotDeploymentProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsAutopilotDeploymentProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsAutopilotDeploymentProfile collection, max N pages
func (r *DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsAutopilotDeploymentProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsAutopilotDeploymentProfile collection
func (r *DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequest) Get(ctx context.Context) ([]WindowsAutopilotDeploymentProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsAutopilotDeploymentProfile collection
func (r *DeviceManagementWindowsAutopilotDeploymentProfilesCollectionRequest) Add(ctx context.Context, reqObj *WindowsAutopilotDeploymentProfile) (resObj *WindowsAutopilotDeploymentProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsAutopilotDeviceIdentities returns request builder for WindowsAutopilotDeviceIdentity collection
func (b *DeviceManagementRequestBuilder) WindowsAutopilotDeviceIdentities() *DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder {
	bb := &DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsAutopilotDeviceIdentities"
	return bb
}

// DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder is request builder for WindowsAutopilotDeviceIdentity collection rcn
type DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsAutopilotDeviceIdentity collection
func (b *DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder) Request() *DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequest {
	return &DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsAutopilotDeviceIdentity item
func (b *DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder) ID(id string) *WindowsAutopilotDeviceIdentityRequestBuilder {
	bb := &WindowsAutopilotDeviceIdentityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequest is request for WindowsAutopilotDeviceIdentity collection
type DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsAutopilotDeviceIdentity collection
func (r *DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsAutopilotDeviceIdentity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsAutopilotDeviceIdentity
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsAutopilotDeviceIdentity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsAutopilotDeviceIdentity collection, max N pages
func (r *DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsAutopilotDeviceIdentity, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsAutopilotDeviceIdentity collection
func (r *DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequest) Get(ctx context.Context) ([]WindowsAutopilotDeviceIdentity, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsAutopilotDeviceIdentity collection
func (r *DeviceManagementWindowsAutopilotDeviceIdentitiesCollectionRequest) Add(ctx context.Context, reqObj *WindowsAutopilotDeviceIdentity) (resObj *WindowsAutopilotDeviceIdentity, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsAutopilotSettings is navigation property rn
func (b *DeviceManagementRequestBuilder) WindowsAutopilotSettings() *WindowsAutopilotSettingsRequestBuilder {
	bb := &WindowsAutopilotSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsAutopilotSettings"
	return bb
}

// WindowsDriverUpdateProfiles returns request builder for WindowsDriverUpdateProfile collection
func (b *DeviceManagementRequestBuilder) WindowsDriverUpdateProfiles() *DeviceManagementWindowsDriverUpdateProfilesCollectionRequestBuilder {
	bb := &DeviceManagementWindowsDriverUpdateProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsDriverUpdateProfiles"
	return bb
}

// DeviceManagementWindowsDriverUpdateProfilesCollectionRequestBuilder is request builder for WindowsDriverUpdateProfile collection rcn
type DeviceManagementWindowsDriverUpdateProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsDriverUpdateProfile collection
func (b *DeviceManagementWindowsDriverUpdateProfilesCollectionRequestBuilder) Request() *DeviceManagementWindowsDriverUpdateProfilesCollectionRequest {
	return &DeviceManagementWindowsDriverUpdateProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsDriverUpdateProfile item
func (b *DeviceManagementWindowsDriverUpdateProfilesCollectionRequestBuilder) ID(id string) *WindowsDriverUpdateProfileRequestBuilder {
	bb := &WindowsDriverUpdateProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementWindowsDriverUpdateProfilesCollectionRequest is request for WindowsDriverUpdateProfile collection
type DeviceManagementWindowsDriverUpdateProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsDriverUpdateProfile collection
func (r *DeviceManagementWindowsDriverUpdateProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsDriverUpdateProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsDriverUpdateProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsDriverUpdateProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsDriverUpdateProfile collection, max N pages
func (r *DeviceManagementWindowsDriverUpdateProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsDriverUpdateProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsDriverUpdateProfile collection
func (r *DeviceManagementWindowsDriverUpdateProfilesCollectionRequest) Get(ctx context.Context) ([]WindowsDriverUpdateProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsDriverUpdateProfile collection
func (r *DeviceManagementWindowsDriverUpdateProfilesCollectionRequest) Add(ctx context.Context, reqObj *WindowsDriverUpdateProfile) (resObj *WindowsDriverUpdateProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsFeatureUpdateProfiles returns request builder for WindowsFeatureUpdateProfile collection
func (b *DeviceManagementRequestBuilder) WindowsFeatureUpdateProfiles() *DeviceManagementWindowsFeatureUpdateProfilesCollectionRequestBuilder {
	bb := &DeviceManagementWindowsFeatureUpdateProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsFeatureUpdateProfiles"
	return bb
}

// DeviceManagementWindowsFeatureUpdateProfilesCollectionRequestBuilder is request builder for WindowsFeatureUpdateProfile collection rcn
type DeviceManagementWindowsFeatureUpdateProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsFeatureUpdateProfile collection
func (b *DeviceManagementWindowsFeatureUpdateProfilesCollectionRequestBuilder) Request() *DeviceManagementWindowsFeatureUpdateProfilesCollectionRequest {
	return &DeviceManagementWindowsFeatureUpdateProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsFeatureUpdateProfile item
func (b *DeviceManagementWindowsFeatureUpdateProfilesCollectionRequestBuilder) ID(id string) *WindowsFeatureUpdateProfileRequestBuilder {
	bb := &WindowsFeatureUpdateProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementWindowsFeatureUpdateProfilesCollectionRequest is request for WindowsFeatureUpdateProfile collection
type DeviceManagementWindowsFeatureUpdateProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsFeatureUpdateProfile collection
func (r *DeviceManagementWindowsFeatureUpdateProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsFeatureUpdateProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsFeatureUpdateProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsFeatureUpdateProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsFeatureUpdateProfile collection, max N pages
func (r *DeviceManagementWindowsFeatureUpdateProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsFeatureUpdateProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsFeatureUpdateProfile collection
func (r *DeviceManagementWindowsFeatureUpdateProfilesCollectionRequest) Get(ctx context.Context) ([]WindowsFeatureUpdateProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsFeatureUpdateProfile collection
func (r *DeviceManagementWindowsFeatureUpdateProfilesCollectionRequest) Add(ctx context.Context, reqObj *WindowsFeatureUpdateProfile) (resObj *WindowsFeatureUpdateProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsInformationProtectionAppLearningSummaries returns request builder for WindowsInformationProtectionAppLearningSummary collection
func (b *DeviceManagementRequestBuilder) WindowsInformationProtectionAppLearningSummaries() *DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequestBuilder {
	bb := &DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsInformationProtectionAppLearningSummaries"
	return bb
}

// DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequestBuilder is request builder for WindowsInformationProtectionAppLearningSummary collection rcn
type DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtectionAppLearningSummary collection
func (b *DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequestBuilder) Request() *DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequest {
	return &DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtectionAppLearningSummary item
func (b *DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionAppLearningSummaryRequestBuilder {
	bb := &WindowsInformationProtectionAppLearningSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequest is request for WindowsInformationProtectionAppLearningSummary collection
type DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtectionAppLearningSummary collection
func (r *DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtectionAppLearningSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtectionAppLearningSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtectionAppLearningSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtectionAppLearningSummary collection, max N pages
func (r *DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtectionAppLearningSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtectionAppLearningSummary collection
func (r *DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtectionAppLearningSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtectionAppLearningSummary collection
func (r *DeviceManagementWindowsInformationProtectionAppLearningSummariesCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtectionAppLearningSummary) (resObj *WindowsInformationProtectionAppLearningSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsInformationProtectionNetworkLearningSummaries returns request builder for WindowsInformationProtectionNetworkLearningSummary collection
func (b *DeviceManagementRequestBuilder) WindowsInformationProtectionNetworkLearningSummaries() *DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequestBuilder {
	bb := &DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsInformationProtectionNetworkLearningSummaries"
	return bb
}

// DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequestBuilder is request builder for WindowsInformationProtectionNetworkLearningSummary collection rcn
type DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtectionNetworkLearningSummary collection
func (b *DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequestBuilder) Request() *DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequest {
	return &DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtectionNetworkLearningSummary item
func (b *DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionNetworkLearningSummaryRequestBuilder {
	bb := &WindowsInformationProtectionNetworkLearningSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequest is request for WindowsInformationProtectionNetworkLearningSummary collection
type DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtectionNetworkLearningSummary collection
func (r *DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtectionNetworkLearningSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtectionNetworkLearningSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtectionNetworkLearningSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtectionNetworkLearningSummary collection, max N pages
func (r *DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtectionNetworkLearningSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtectionNetworkLearningSummary collection
func (r *DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtectionNetworkLearningSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtectionNetworkLearningSummary collection
func (r *DeviceManagementWindowsInformationProtectionNetworkLearningSummariesCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtectionNetworkLearningSummary) (resObj *WindowsInformationProtectionNetworkLearningSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsMalwareInformation returns request builder for WindowsMalwareInformation collection
func (b *DeviceManagementRequestBuilder) WindowsMalwareInformation() *DeviceManagementWindowsMalwareInformationCollectionRequestBuilder {
	bb := &DeviceManagementWindowsMalwareInformationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsMalwareInformation"
	return bb
}

// DeviceManagementWindowsMalwareInformationCollectionRequestBuilder is request builder for WindowsMalwareInformation collection rcn
type DeviceManagementWindowsMalwareInformationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsMalwareInformation collection
func (b *DeviceManagementWindowsMalwareInformationCollectionRequestBuilder) Request() *DeviceManagementWindowsMalwareInformationCollectionRequest {
	return &DeviceManagementWindowsMalwareInformationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsMalwareInformation item
func (b *DeviceManagementWindowsMalwareInformationCollectionRequestBuilder) ID(id string) *WindowsMalwareInformationRequestBuilder {
	bb := &WindowsMalwareInformationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementWindowsMalwareInformationCollectionRequest is request for WindowsMalwareInformation collection
type DeviceManagementWindowsMalwareInformationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsMalwareInformation collection
func (r *DeviceManagementWindowsMalwareInformationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsMalwareInformation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsMalwareInformation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsMalwareInformation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsMalwareInformation collection, max N pages
func (r *DeviceManagementWindowsMalwareInformationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsMalwareInformation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsMalwareInformation collection
func (r *DeviceManagementWindowsMalwareInformationCollectionRequest) Get(ctx context.Context) ([]WindowsMalwareInformation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsMalwareInformation collection
func (r *DeviceManagementWindowsMalwareInformationCollectionRequest) Add(ctx context.Context, reqObj *WindowsMalwareInformation) (resObj *WindowsMalwareInformation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsQualityUpdateProfiles returns request builder for WindowsQualityUpdateProfile collection
func (b *DeviceManagementRequestBuilder) WindowsQualityUpdateProfiles() *DeviceManagementWindowsQualityUpdateProfilesCollectionRequestBuilder {
	bb := &DeviceManagementWindowsQualityUpdateProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsQualityUpdateProfiles"
	return bb
}

// DeviceManagementWindowsQualityUpdateProfilesCollectionRequestBuilder is request builder for WindowsQualityUpdateProfile collection rcn
type DeviceManagementWindowsQualityUpdateProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsQualityUpdateProfile collection
func (b *DeviceManagementWindowsQualityUpdateProfilesCollectionRequestBuilder) Request() *DeviceManagementWindowsQualityUpdateProfilesCollectionRequest {
	return &DeviceManagementWindowsQualityUpdateProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsQualityUpdateProfile item
func (b *DeviceManagementWindowsQualityUpdateProfilesCollectionRequestBuilder) ID(id string) *WindowsQualityUpdateProfileRequestBuilder {
	bb := &WindowsQualityUpdateProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementWindowsQualityUpdateProfilesCollectionRequest is request for WindowsQualityUpdateProfile collection
type DeviceManagementWindowsQualityUpdateProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsQualityUpdateProfile collection
func (r *DeviceManagementWindowsQualityUpdateProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsQualityUpdateProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsQualityUpdateProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsQualityUpdateProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsQualityUpdateProfile collection, max N pages
func (r *DeviceManagementWindowsQualityUpdateProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsQualityUpdateProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsQualityUpdateProfile collection
func (r *DeviceManagementWindowsQualityUpdateProfilesCollectionRequest) Get(ctx context.Context) ([]WindowsQualityUpdateProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsQualityUpdateProfile collection
func (r *DeviceManagementWindowsQualityUpdateProfilesCollectionRequest) Add(ctx context.Context, reqObj *WindowsQualityUpdateProfile) (resObj *WindowsQualityUpdateProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsUpdateCatalogItems returns request builder for WindowsUpdateCatalogItem collection
func (b *DeviceManagementRequestBuilder) WindowsUpdateCatalogItems() *DeviceManagementWindowsUpdateCatalogItemsCollectionRequestBuilder {
	bb := &DeviceManagementWindowsUpdateCatalogItemsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsUpdateCatalogItems"
	return bb
}

// DeviceManagementWindowsUpdateCatalogItemsCollectionRequestBuilder is request builder for WindowsUpdateCatalogItem collection rcn
type DeviceManagementWindowsUpdateCatalogItemsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdateCatalogItem collection
func (b *DeviceManagementWindowsUpdateCatalogItemsCollectionRequestBuilder) Request() *DeviceManagementWindowsUpdateCatalogItemsCollectionRequest {
	return &DeviceManagementWindowsUpdateCatalogItemsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdateCatalogItem item
func (b *DeviceManagementWindowsUpdateCatalogItemsCollectionRequestBuilder) ID(id string) *WindowsUpdateCatalogItemRequestBuilder {
	bb := &WindowsUpdateCatalogItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementWindowsUpdateCatalogItemsCollectionRequest is request for WindowsUpdateCatalogItem collection
type DeviceManagementWindowsUpdateCatalogItemsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdateCatalogItem collection
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdateCatalogItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdateCatalogItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdateCatalogItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdateCatalogItem collection, max N pages
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdateCatalogItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdateCatalogItem collection
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionRequest) Get(ctx context.Context) ([]WindowsUpdateCatalogItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdateCatalogItem collection
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdateCatalogItem) (resObj *WindowsUpdateCatalogItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ZebraFotaArtifacts returns request builder for ZebraFotaArtifact collection
func (b *DeviceManagementRequestBuilder) ZebraFotaArtifacts() *DeviceManagementZebraFotaArtifactsCollectionRequestBuilder {
	bb := &DeviceManagementZebraFotaArtifactsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/zebraFotaArtifacts"
	return bb
}

// DeviceManagementZebraFotaArtifactsCollectionRequestBuilder is request builder for ZebraFotaArtifact collection rcn
type DeviceManagementZebraFotaArtifactsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ZebraFotaArtifact collection
func (b *DeviceManagementZebraFotaArtifactsCollectionRequestBuilder) Request() *DeviceManagementZebraFotaArtifactsCollectionRequest {
	return &DeviceManagementZebraFotaArtifactsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ZebraFotaArtifact item
func (b *DeviceManagementZebraFotaArtifactsCollectionRequestBuilder) ID(id string) *ZebraFotaArtifactRequestBuilder {
	bb := &ZebraFotaArtifactRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementZebraFotaArtifactsCollectionRequest is request for ZebraFotaArtifact collection
type DeviceManagementZebraFotaArtifactsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ZebraFotaArtifact collection
func (r *DeviceManagementZebraFotaArtifactsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ZebraFotaArtifact, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ZebraFotaArtifact
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ZebraFotaArtifact
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ZebraFotaArtifact collection, max N pages
func (r *DeviceManagementZebraFotaArtifactsCollectionRequest) GetN(ctx context.Context, n int) ([]ZebraFotaArtifact, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ZebraFotaArtifact collection
func (r *DeviceManagementZebraFotaArtifactsCollectionRequest) Get(ctx context.Context) ([]ZebraFotaArtifact, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ZebraFotaArtifact collection
func (r *DeviceManagementZebraFotaArtifactsCollectionRequest) Add(ctx context.Context, reqObj *ZebraFotaArtifact) (resObj *ZebraFotaArtifact, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ZebraFotaConnector is navigation property rn
func (b *DeviceManagementRequestBuilder) ZebraFotaConnector() *ZebraFotaConnectorRequestBuilder {
	bb := &ZebraFotaConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/zebraFotaConnector"
	return bb
}

// ZebraFotaDeployments returns request builder for ZebraFotaDeployment collection
func (b *DeviceManagementRequestBuilder) ZebraFotaDeployments() *DeviceManagementZebraFotaDeploymentsCollectionRequestBuilder {
	bb := &DeviceManagementZebraFotaDeploymentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/zebraFotaDeployments"
	return bb
}

// DeviceManagementZebraFotaDeploymentsCollectionRequestBuilder is request builder for ZebraFotaDeployment collection rcn
type DeviceManagementZebraFotaDeploymentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ZebraFotaDeployment collection
func (b *DeviceManagementZebraFotaDeploymentsCollectionRequestBuilder) Request() *DeviceManagementZebraFotaDeploymentsCollectionRequest {
	return &DeviceManagementZebraFotaDeploymentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ZebraFotaDeployment item
func (b *DeviceManagementZebraFotaDeploymentsCollectionRequestBuilder) ID(id string) *ZebraFotaDeploymentRequestBuilder {
	bb := &ZebraFotaDeploymentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementZebraFotaDeploymentsCollectionRequest is request for ZebraFotaDeployment collection
type DeviceManagementZebraFotaDeploymentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ZebraFotaDeployment collection
func (r *DeviceManagementZebraFotaDeploymentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ZebraFotaDeployment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ZebraFotaDeployment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ZebraFotaDeployment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ZebraFotaDeployment collection, max N pages
func (r *DeviceManagementZebraFotaDeploymentsCollectionRequest) GetN(ctx context.Context, n int) ([]ZebraFotaDeployment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ZebraFotaDeployment collection
func (r *DeviceManagementZebraFotaDeploymentsCollectionRequest) Get(ctx context.Context) ([]ZebraFotaDeployment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ZebraFotaDeployment collection
func (r *DeviceManagementZebraFotaDeploymentsCollectionRequest) Add(ctx context.Context, reqObj *ZebraFotaDeployment) (resObj *ZebraFotaDeployment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Value returns request builder for DeviceManagementSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceRequestBuilder) Value() *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder {
	bb := &DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/value"
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder is request builder for DeviceManagementSettingInstance collection rcn
type DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder) Request() *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequest {
	return &DeviceManagementAbstractComplexSettingInstanceValueCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementSettingInstance item
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder) ID(id string) *DeviceManagementSettingInstanceRequestBuilder {
	bb := &DeviceManagementSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionRequest is request for DeviceManagementSettingInstance collection
type DeviceManagementAbstractComplexSettingInstanceValueCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementSettingInstance collection, max N pages
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequest) Get(ctx context.Context) ([]DeviceManagementSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementSettingInstance) (resObj *DeviceManagementSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// PolicyStatusDetails returns request builder for DeviceManagementAutopilotPolicyStatusDetail collection
func (b *DeviceManagementAutopilotEventRequestBuilder) PolicyStatusDetails() *DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequestBuilder {
	bb := &DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/policyStatusDetails"
	return bb
}

// DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequestBuilder is request builder for DeviceManagementAutopilotPolicyStatusDetail collection rcn
type DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementAutopilotPolicyStatusDetail collection
func (b *DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequestBuilder) Request() *DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequest {
	return &DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementAutopilotPolicyStatusDetail item
func (b *DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequestBuilder) ID(id string) *DeviceManagementAutopilotPolicyStatusDetailRequestBuilder {
	bb := &DeviceManagementAutopilotPolicyStatusDetailRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequest is request for DeviceManagementAutopilotPolicyStatusDetail collection
type DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementAutopilotPolicyStatusDetail collection
func (r *DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementAutopilotPolicyStatusDetail, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementAutopilotPolicyStatusDetail
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementAutopilotPolicyStatusDetail
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementAutopilotPolicyStatusDetail collection, max N pages
func (r *DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementAutopilotPolicyStatusDetail, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementAutopilotPolicyStatusDetail collection
func (r *DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementAutopilotPolicyStatusDetail, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementAutopilotPolicyStatusDetail collection
func (r *DeviceManagementAutopilotEventPolicyStatusDetailsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementAutopilotPolicyStatusDetail) (resObj *DeviceManagementAutopilotPolicyStatusDetail, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Value returns request builder for DeviceManagementSettingInstance collection
func (b *DeviceManagementCollectionSettingInstanceRequestBuilder) Value() *DeviceManagementCollectionSettingInstanceValueCollectionRequestBuilder {
	bb := &DeviceManagementCollectionSettingInstanceValueCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/value"
	return bb
}

// DeviceManagementCollectionSettingInstanceValueCollectionRequestBuilder is request builder for DeviceManagementSettingInstance collection rcn
type DeviceManagementCollectionSettingInstanceValueCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementSettingInstance collection
func (b *DeviceManagementCollectionSettingInstanceValueCollectionRequestBuilder) Request() *DeviceManagementCollectionSettingInstanceValueCollectionRequest {
	return &DeviceManagementCollectionSettingInstanceValueCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementSettingInstance item
func (b *DeviceManagementCollectionSettingInstanceValueCollectionRequestBuilder) ID(id string) *DeviceManagementSettingInstanceRequestBuilder {
	bb := &DeviceManagementSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementCollectionSettingInstanceValueCollectionRequest is request for DeviceManagementSettingInstance collection
type DeviceManagementCollectionSettingInstanceValueCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementSettingInstance collection
func (r *DeviceManagementCollectionSettingInstanceValueCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementSettingInstance collection, max N pages
func (r *DeviceManagementCollectionSettingInstanceValueCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementSettingInstance collection
func (r *DeviceManagementCollectionSettingInstanceValueCollectionRequest) Get(ctx context.Context) ([]DeviceManagementSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementSettingInstance collection
func (r *DeviceManagementCollectionSettingInstanceValueCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementSettingInstance) (resObj *DeviceManagementSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Value returns request builder for DeviceManagementSettingInstance collection
func (b *DeviceManagementComplexSettingInstanceRequestBuilder) Value() *DeviceManagementComplexSettingInstanceValueCollectionRequestBuilder {
	bb := &DeviceManagementComplexSettingInstanceValueCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/value"
	return bb
}

// DeviceManagementComplexSettingInstanceValueCollectionRequestBuilder is request builder for DeviceManagementSettingInstance collection rcn
type DeviceManagementComplexSettingInstanceValueCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementSettingInstance collection
func (b *DeviceManagementComplexSettingInstanceValueCollectionRequestBuilder) Request() *DeviceManagementComplexSettingInstanceValueCollectionRequest {
	return &DeviceManagementComplexSettingInstanceValueCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementSettingInstance item
func (b *DeviceManagementComplexSettingInstanceValueCollectionRequestBuilder) ID(id string) *DeviceManagementSettingInstanceRequestBuilder {
	bb := &DeviceManagementSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementComplexSettingInstanceValueCollectionRequest is request for DeviceManagementSettingInstance collection
type DeviceManagementComplexSettingInstanceValueCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementSettingInstance collection
func (r *DeviceManagementComplexSettingInstanceValueCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementSettingInstance collection, max N pages
func (r *DeviceManagementComplexSettingInstanceValueCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementSettingInstance collection
func (r *DeviceManagementComplexSettingInstanceValueCollectionRequest) Get(ctx context.Context) ([]DeviceManagementSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementSettingInstance collection
func (r *DeviceManagementComplexSettingInstanceValueCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementSettingInstance) (resObj *DeviceManagementSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for DeviceManagementConfigurationPolicyAssignment collection
func (b *DeviceManagementCompliancePolicyRequestBuilder) Assignments() *DeviceManagementCompliancePolicyAssignmentsCollectionRequestBuilder {
	bb := &DeviceManagementCompliancePolicyAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceManagementCompliancePolicyAssignmentsCollectionRequestBuilder is request builder for DeviceManagementConfigurationPolicyAssignment collection rcn
type DeviceManagementCompliancePolicyAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationPolicyAssignment collection
func (b *DeviceManagementCompliancePolicyAssignmentsCollectionRequestBuilder) Request() *DeviceManagementCompliancePolicyAssignmentsCollectionRequest {
	return &DeviceManagementCompliancePolicyAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationPolicyAssignment item
func (b *DeviceManagementCompliancePolicyAssignmentsCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationPolicyAssignmentRequestBuilder {
	bb := &DeviceManagementConfigurationPolicyAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementCompliancePolicyAssignmentsCollectionRequest is request for DeviceManagementConfigurationPolicyAssignment collection
type DeviceManagementCompliancePolicyAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationPolicyAssignment collection
func (r *DeviceManagementCompliancePolicyAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationPolicyAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationPolicyAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationPolicyAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationPolicyAssignment collection, max N pages
func (r *DeviceManagementCompliancePolicyAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationPolicyAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationPolicyAssignment collection
func (r *DeviceManagementCompliancePolicyAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationPolicyAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationPolicyAssignment collection
func (r *DeviceManagementCompliancePolicyAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationPolicyAssignment) (resObj *DeviceManagementConfigurationPolicyAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ScheduledActionsForRule returns request builder for DeviceManagementComplianceScheduledActionForRule collection
func (b *DeviceManagementCompliancePolicyRequestBuilder) ScheduledActionsForRule() *DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder {
	bb := &DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/scheduledActionsForRule"
	return bb
}

// DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder is request builder for DeviceManagementComplianceScheduledActionForRule collection rcn
type DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementComplianceScheduledActionForRule collection
func (b *DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder) Request() *DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequest {
	return &DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementComplianceScheduledActionForRule item
func (b *DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequestBuilder) ID(id string) *DeviceManagementComplianceScheduledActionForRuleRequestBuilder {
	bb := &DeviceManagementComplianceScheduledActionForRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequest is request for DeviceManagementComplianceScheduledActionForRule collection
type DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementComplianceScheduledActionForRule collection
func (r *DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementComplianceScheduledActionForRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementComplianceScheduledActionForRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementComplianceScheduledActionForRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementComplianceScheduledActionForRule collection, max N pages
func (r *DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementComplianceScheduledActionForRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementComplianceScheduledActionForRule collection
func (r *DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequest) Get(ctx context.Context) ([]DeviceManagementComplianceScheduledActionForRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementComplianceScheduledActionForRule collection
func (r *DeviceManagementCompliancePolicyScheduledActionsForRuleCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementComplianceScheduledActionForRule) (resObj *DeviceManagementComplianceScheduledActionForRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Settings returns request builder for DeviceManagementConfigurationSetting collection
func (b *DeviceManagementCompliancePolicyRequestBuilder) Settings() *DeviceManagementCompliancePolicySettingsCollectionRequestBuilder {
	bb := &DeviceManagementCompliancePolicySettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// DeviceManagementCompliancePolicySettingsCollectionRequestBuilder is request builder for DeviceManagementConfigurationSetting collection rcn
type DeviceManagementCompliancePolicySettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSetting collection
func (b *DeviceManagementCompliancePolicySettingsCollectionRequestBuilder) Request() *DeviceManagementCompliancePolicySettingsCollectionRequest {
	return &DeviceManagementCompliancePolicySettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSetting item
func (b *DeviceManagementCompliancePolicySettingsCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSettingRequestBuilder {
	bb := &DeviceManagementConfigurationSettingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementCompliancePolicySettingsCollectionRequest is request for DeviceManagementConfigurationSetting collection
type DeviceManagementCompliancePolicySettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSetting collection
func (r *DeviceManagementCompliancePolicySettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSetting, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSetting
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSetting
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSetting collection, max N pages
func (r *DeviceManagementCompliancePolicySettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSetting, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSetting collection
func (r *DeviceManagementCompliancePolicySettingsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSetting, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSetting collection
func (r *DeviceManagementCompliancePolicySettingsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSetting) (resObj *DeviceManagementConfigurationSetting, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ScheduledActionConfigurations returns request builder for DeviceManagementComplianceActionItem collection
func (b *DeviceManagementComplianceScheduledActionForRuleRequestBuilder) ScheduledActionConfigurations() *DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder {
	bb := &DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/scheduledActionConfigurations"
	return bb
}

// DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder is request builder for DeviceManagementComplianceActionItem collection rcn
type DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementComplianceActionItem collection
func (b *DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder) Request() *DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest {
	return &DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementComplianceActionItem item
func (b *DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequestBuilder) ID(id string) *DeviceManagementComplianceActionItemRequestBuilder {
	bb := &DeviceManagementComplianceActionItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest is request for DeviceManagementComplianceActionItem collection
type DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementComplianceActionItem collection
func (r *DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementComplianceActionItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementComplianceActionItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementComplianceActionItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementComplianceActionItem collection, max N pages
func (r *DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementComplianceActionItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementComplianceActionItem collection
func (r *DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementComplianceActionItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementComplianceActionItem collection
func (r *DeviceManagementComplianceScheduledActionForRuleScheduledActionConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementComplianceActionItem) (resObj *DeviceManagementComplianceActionItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for DeviceManagementConfigurationPolicyAssignment collection
func (b *DeviceManagementConfigurationPolicyRequestBuilder) Assignments() *DeviceManagementConfigurationPolicyAssignmentsCollectionRequestBuilder {
	bb := &DeviceManagementConfigurationPolicyAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceManagementConfigurationPolicyAssignmentsCollectionRequestBuilder is request builder for DeviceManagementConfigurationPolicyAssignment collection rcn
type DeviceManagementConfigurationPolicyAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationPolicyAssignment collection
func (b *DeviceManagementConfigurationPolicyAssignmentsCollectionRequestBuilder) Request() *DeviceManagementConfigurationPolicyAssignmentsCollectionRequest {
	return &DeviceManagementConfigurationPolicyAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationPolicyAssignment item
func (b *DeviceManagementConfigurationPolicyAssignmentsCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationPolicyAssignmentRequestBuilder {
	bb := &DeviceManagementConfigurationPolicyAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementConfigurationPolicyAssignmentsCollectionRequest is request for DeviceManagementConfigurationPolicyAssignment collection
type DeviceManagementConfigurationPolicyAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationPolicyAssignment collection
func (r *DeviceManagementConfigurationPolicyAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationPolicyAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationPolicyAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationPolicyAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationPolicyAssignment collection, max N pages
func (r *DeviceManagementConfigurationPolicyAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationPolicyAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationPolicyAssignment collection
func (r *DeviceManagementConfigurationPolicyAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationPolicyAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationPolicyAssignment collection
func (r *DeviceManagementConfigurationPolicyAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationPolicyAssignment) (resObj *DeviceManagementConfigurationPolicyAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Settings returns request builder for DeviceManagementConfigurationSetting collection
func (b *DeviceManagementConfigurationPolicyRequestBuilder) Settings() *DeviceManagementConfigurationPolicySettingsCollectionRequestBuilder {
	bb := &DeviceManagementConfigurationPolicySettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// DeviceManagementConfigurationPolicySettingsCollectionRequestBuilder is request builder for DeviceManagementConfigurationSetting collection rcn
type DeviceManagementConfigurationPolicySettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSetting collection
func (b *DeviceManagementConfigurationPolicySettingsCollectionRequestBuilder) Request() *DeviceManagementConfigurationPolicySettingsCollectionRequest {
	return &DeviceManagementConfigurationPolicySettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSetting item
func (b *DeviceManagementConfigurationPolicySettingsCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSettingRequestBuilder {
	bb := &DeviceManagementConfigurationSettingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementConfigurationPolicySettingsCollectionRequest is request for DeviceManagementConfigurationSetting collection
type DeviceManagementConfigurationPolicySettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSetting collection
func (r *DeviceManagementConfigurationPolicySettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSetting, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSetting
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSetting
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSetting collection, max N pages
func (r *DeviceManagementConfigurationPolicySettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSetting, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSetting collection
func (r *DeviceManagementConfigurationPolicySettingsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSetting, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSetting collection
func (r *DeviceManagementConfigurationPolicySettingsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSetting) (resObj *DeviceManagementConfigurationSetting, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SettingTemplates returns request builder for DeviceManagementConfigurationSettingTemplate collection
func (b *DeviceManagementConfigurationPolicyTemplateRequestBuilder) SettingTemplates() *DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequestBuilder {
	bb := &DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settingTemplates"
	return bb
}

// DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequestBuilder is request builder for DeviceManagementConfigurationSettingTemplate collection rcn
type DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSettingTemplate collection
func (b *DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequestBuilder) Request() *DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequest {
	return &DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSettingTemplate item
func (b *DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSettingTemplateRequestBuilder {
	bb := &DeviceManagementConfigurationSettingTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequest is request for DeviceManagementConfigurationSettingTemplate collection
type DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSettingTemplate collection
func (r *DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSettingTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSettingTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSettingTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSettingTemplate collection, max N pages
func (r *DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSettingTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSettingTemplate collection
func (r *DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSettingTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSettingTemplate collection
func (r *DeviceManagementConfigurationPolicyTemplateSettingTemplatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSettingTemplate) (resObj *DeviceManagementConfigurationSettingTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SettingDefinitions returns request builder for DeviceManagementConfigurationSettingDefinition collection
func (b *DeviceManagementConfigurationSettingRequestBuilder) SettingDefinitions() *DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequestBuilder {
	bb := &DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settingDefinitions"
	return bb
}

// DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequestBuilder is request builder for DeviceManagementConfigurationSettingDefinition collection rcn
type DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSettingDefinition collection
func (b *DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequestBuilder) Request() *DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequest {
	return &DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSettingDefinition item
func (b *DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSettingDefinitionRequestBuilder {
	bb := &DeviceManagementConfigurationSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequest is request for DeviceManagementConfigurationSettingDefinition collection
type DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSettingDefinition collection, max N pages
func (r *DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementConfigurationSettingSettingDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSettingDefinition) (resObj *DeviceManagementConfigurationSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SettingDefinitions returns request builder for DeviceManagementConfigurationSettingDefinition collection
func (b *DeviceManagementConfigurationSettingTemplateRequestBuilder) SettingDefinitions() *DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequestBuilder {
	bb := &DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settingDefinitions"
	return bb
}

// DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequestBuilder is request builder for DeviceManagementConfigurationSettingDefinition collection rcn
type DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSettingDefinition collection
func (b *DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequestBuilder) Request() *DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequest {
	return &DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSettingDefinition item
func (b *DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSettingDefinitionRequestBuilder {
	bb := &DeviceManagementConfigurationSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequest is request for DeviceManagementConfigurationSettingDefinition collection
type DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSettingDefinition collection, max N pages
func (r *DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSettingDefinition collection
func (r *DeviceManagementConfigurationSettingTemplateSettingDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSettingDefinition) (resObj *DeviceManagementConfigurationSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ConditionalAccessSettings is navigation property rn
func (b *DeviceManagementExchangeOnPremisesPolicyRequestBuilder) ConditionalAccessSettings() *OnPremisesConditionalAccessSettingsRequestBuilder {
	bb := &OnPremisesConditionalAccessSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/conditionalAccessSettings"
	return bb
}

// Assignments returns request builder for DeviceManagementIntentAssignment collection
func (b *DeviceManagementIntentRequestBuilder) Assignments() *DeviceManagementIntentAssignmentsCollectionRequestBuilder {
	bb := &DeviceManagementIntentAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceManagementIntentAssignmentsCollectionRequestBuilder is request builder for DeviceManagementIntentAssignment collection rcn
type DeviceManagementIntentAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementIntentAssignment collection
func (b *DeviceManagementIntentAssignmentsCollectionRequestBuilder) Request() *DeviceManagementIntentAssignmentsCollectionRequest {
	return &DeviceManagementIntentAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementIntentAssignment item
func (b *DeviceManagementIntentAssignmentsCollectionRequestBuilder) ID(id string) *DeviceManagementIntentAssignmentRequestBuilder {
	bb := &DeviceManagementIntentAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementIntentAssignmentsCollectionRequest is request for DeviceManagementIntentAssignment collection
type DeviceManagementIntentAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementIntentAssignment collection
func (r *DeviceManagementIntentAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementIntentAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementIntentAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementIntentAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementIntentAssignment collection, max N pages
func (r *DeviceManagementIntentAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementIntentAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementIntentAssignment collection
func (r *DeviceManagementIntentAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementIntentAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementIntentAssignment collection
func (r *DeviceManagementIntentAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementIntentAssignment) (resObj *DeviceManagementIntentAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Categories returns request builder for DeviceManagementIntentSettingCategory collection
func (b *DeviceManagementIntentRequestBuilder) Categories() *DeviceManagementIntentCategoriesCollectionRequestBuilder {
	bb := &DeviceManagementIntentCategoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/categories"
	return bb
}

// DeviceManagementIntentCategoriesCollectionRequestBuilder is request builder for DeviceManagementIntentSettingCategory collection rcn
type DeviceManagementIntentCategoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementIntentSettingCategory collection
func (b *DeviceManagementIntentCategoriesCollectionRequestBuilder) Request() *DeviceManagementIntentCategoriesCollectionRequest {
	return &DeviceManagementIntentCategoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementIntentSettingCategory item
func (b *DeviceManagementIntentCategoriesCollectionRequestBuilder) ID(id string) *DeviceManagementIntentSettingCategoryRequestBuilder {
	bb := &DeviceManagementIntentSettingCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementIntentCategoriesCollectionRequest is request for DeviceManagementIntentSettingCategory collection
type DeviceManagementIntentCategoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementIntentSettingCategory collection
func (r *DeviceManagementIntentCategoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementIntentSettingCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementIntentSettingCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementIntentSettingCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementIntentSettingCategory collection, max N pages
func (r *DeviceManagementIntentCategoriesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementIntentSettingCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementIntentSettingCategory collection
func (r *DeviceManagementIntentCategoriesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementIntentSettingCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementIntentSettingCategory collection
func (r *DeviceManagementIntentCategoriesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementIntentSettingCategory) (resObj *DeviceManagementIntentSettingCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceSettingStateSummaries returns request builder for DeviceManagementIntentDeviceSettingStateSummary collection
func (b *DeviceManagementIntentRequestBuilder) DeviceSettingStateSummaries() *DeviceManagementIntentDeviceSettingStateSummariesCollectionRequestBuilder {
	bb := &DeviceManagementIntentDeviceSettingStateSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceSettingStateSummaries"
	return bb
}

// DeviceManagementIntentDeviceSettingStateSummariesCollectionRequestBuilder is request builder for DeviceManagementIntentDeviceSettingStateSummary collection rcn
type DeviceManagementIntentDeviceSettingStateSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementIntentDeviceSettingStateSummary collection
func (b *DeviceManagementIntentDeviceSettingStateSummariesCollectionRequestBuilder) Request() *DeviceManagementIntentDeviceSettingStateSummariesCollectionRequest {
	return &DeviceManagementIntentDeviceSettingStateSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementIntentDeviceSettingStateSummary item
func (b *DeviceManagementIntentDeviceSettingStateSummariesCollectionRequestBuilder) ID(id string) *DeviceManagementIntentDeviceSettingStateSummaryRequestBuilder {
	bb := &DeviceManagementIntentDeviceSettingStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementIntentDeviceSettingStateSummariesCollectionRequest is request for DeviceManagementIntentDeviceSettingStateSummary collection
type DeviceManagementIntentDeviceSettingStateSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementIntentDeviceSettingStateSummary collection
func (r *DeviceManagementIntentDeviceSettingStateSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementIntentDeviceSettingStateSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementIntentDeviceSettingStateSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementIntentDeviceSettingStateSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementIntentDeviceSettingStateSummary collection, max N pages
func (r *DeviceManagementIntentDeviceSettingStateSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementIntentDeviceSettingStateSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementIntentDeviceSettingStateSummary collection
func (r *DeviceManagementIntentDeviceSettingStateSummariesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementIntentDeviceSettingStateSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementIntentDeviceSettingStateSummary collection
func (r *DeviceManagementIntentDeviceSettingStateSummariesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementIntentDeviceSettingStateSummary) (resObj *DeviceManagementIntentDeviceSettingStateSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceStateSummary is navigation property rn
func (b *DeviceManagementIntentRequestBuilder) DeviceStateSummary() *DeviceManagementIntentDeviceStateSummaryRequestBuilder {
	bb := &DeviceManagementIntentDeviceStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStateSummary"
	return bb
}

// DeviceStates returns request builder for DeviceManagementIntentDeviceState collection
func (b *DeviceManagementIntentRequestBuilder) DeviceStates() *DeviceManagementIntentDeviceStatesCollectionRequestBuilder {
	bb := &DeviceManagementIntentDeviceStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStates"
	return bb
}

// DeviceManagementIntentDeviceStatesCollectionRequestBuilder is request builder for DeviceManagementIntentDeviceState collection rcn
type DeviceManagementIntentDeviceStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementIntentDeviceState collection
func (b *DeviceManagementIntentDeviceStatesCollectionRequestBuilder) Request() *DeviceManagementIntentDeviceStatesCollectionRequest {
	return &DeviceManagementIntentDeviceStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementIntentDeviceState item
func (b *DeviceManagementIntentDeviceStatesCollectionRequestBuilder) ID(id string) *DeviceManagementIntentDeviceStateRequestBuilder {
	bb := &DeviceManagementIntentDeviceStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementIntentDeviceStatesCollectionRequest is request for DeviceManagementIntentDeviceState collection
type DeviceManagementIntentDeviceStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementIntentDeviceState collection
func (r *DeviceManagementIntentDeviceStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementIntentDeviceState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementIntentDeviceState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementIntentDeviceState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementIntentDeviceState collection, max N pages
func (r *DeviceManagementIntentDeviceStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementIntentDeviceState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementIntentDeviceState collection
func (r *DeviceManagementIntentDeviceStatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementIntentDeviceState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementIntentDeviceState collection
func (r *DeviceManagementIntentDeviceStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementIntentDeviceState) (resObj *DeviceManagementIntentDeviceState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Settings returns request builder for DeviceManagementSettingInstance collection
func (b *DeviceManagementIntentRequestBuilder) Settings() *DeviceManagementIntentSettingsCollectionRequestBuilder {
	bb := &DeviceManagementIntentSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// DeviceManagementIntentSettingsCollectionRequestBuilder is request builder for DeviceManagementSettingInstance collection rcn
type DeviceManagementIntentSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementSettingInstance collection
func (b *DeviceManagementIntentSettingsCollectionRequestBuilder) Request() *DeviceManagementIntentSettingsCollectionRequest {
	return &DeviceManagementIntentSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementSettingInstance item
func (b *DeviceManagementIntentSettingsCollectionRequestBuilder) ID(id string) *DeviceManagementSettingInstanceRequestBuilder {
	bb := &DeviceManagementSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementIntentSettingsCollectionRequest is request for DeviceManagementSettingInstance collection
type DeviceManagementIntentSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementSettingInstance collection
func (r *DeviceManagementIntentSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementSettingInstance collection, max N pages
func (r *DeviceManagementIntentSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementSettingInstance collection
func (r *DeviceManagementIntentSettingsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementSettingInstance collection
func (r *DeviceManagementIntentSettingsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementSettingInstance) (resObj *DeviceManagementSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserStateSummary is navigation property rn
func (b *DeviceManagementIntentRequestBuilder) UserStateSummary() *DeviceManagementIntentUserStateSummaryRequestBuilder {
	bb := &DeviceManagementIntentUserStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userStateSummary"
	return bb
}

// UserStates returns request builder for DeviceManagementIntentUserState collection
func (b *DeviceManagementIntentRequestBuilder) UserStates() *DeviceManagementIntentUserStatesCollectionRequestBuilder {
	bb := &DeviceManagementIntentUserStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userStates"
	return bb
}

// DeviceManagementIntentUserStatesCollectionRequestBuilder is request builder for DeviceManagementIntentUserState collection rcn
type DeviceManagementIntentUserStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementIntentUserState collection
func (b *DeviceManagementIntentUserStatesCollectionRequestBuilder) Request() *DeviceManagementIntentUserStatesCollectionRequest {
	return &DeviceManagementIntentUserStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementIntentUserState item
func (b *DeviceManagementIntentUserStatesCollectionRequestBuilder) ID(id string) *DeviceManagementIntentUserStateRequestBuilder {
	bb := &DeviceManagementIntentUserStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementIntentUserStatesCollectionRequest is request for DeviceManagementIntentUserState collection
type DeviceManagementIntentUserStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementIntentUserState collection
func (r *DeviceManagementIntentUserStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementIntentUserState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementIntentUserState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementIntentUserState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementIntentUserState collection, max N pages
func (r *DeviceManagementIntentUserStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementIntentUserState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementIntentUserState collection
func (r *DeviceManagementIntentUserStatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementIntentUserState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementIntentUserState collection
func (r *DeviceManagementIntentUserStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementIntentUserState) (resObj *DeviceManagementIntentUserState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Settings returns request builder for DeviceManagementSettingInstance collection
func (b *DeviceManagementIntentSettingCategoryRequestBuilder) Settings() *DeviceManagementIntentSettingCategorySettingsCollectionRequestBuilder {
	bb := &DeviceManagementIntentSettingCategorySettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// DeviceManagementIntentSettingCategorySettingsCollectionRequestBuilder is request builder for DeviceManagementSettingInstance collection rcn
type DeviceManagementIntentSettingCategorySettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementSettingInstance collection
func (b *DeviceManagementIntentSettingCategorySettingsCollectionRequestBuilder) Request() *DeviceManagementIntentSettingCategorySettingsCollectionRequest {
	return &DeviceManagementIntentSettingCategorySettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementSettingInstance item
func (b *DeviceManagementIntentSettingCategorySettingsCollectionRequestBuilder) ID(id string) *DeviceManagementSettingInstanceRequestBuilder {
	bb := &DeviceManagementSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementIntentSettingCategorySettingsCollectionRequest is request for DeviceManagementSettingInstance collection
type DeviceManagementIntentSettingCategorySettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementSettingInstance collection
func (r *DeviceManagementIntentSettingCategorySettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementSettingInstance collection, max N pages
func (r *DeviceManagementIntentSettingCategorySettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementSettingInstance collection
func (r *DeviceManagementIntentSettingCategorySettingsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementSettingInstance collection
func (r *DeviceManagementIntentSettingCategorySettingsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementSettingInstance) (resObj *DeviceManagementSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CachedReportConfigurations returns request builder for DeviceManagementCachedReportConfiguration collection
func (b *DeviceManagementReportsRequestBuilder) CachedReportConfigurations() *DeviceManagementReportsCachedReportConfigurationsCollectionRequestBuilder {
	bb := &DeviceManagementReportsCachedReportConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cachedReportConfigurations"
	return bb
}

// DeviceManagementReportsCachedReportConfigurationsCollectionRequestBuilder is request builder for DeviceManagementCachedReportConfiguration collection rcn
type DeviceManagementReportsCachedReportConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementCachedReportConfiguration collection
func (b *DeviceManagementReportsCachedReportConfigurationsCollectionRequestBuilder) Request() *DeviceManagementReportsCachedReportConfigurationsCollectionRequest {
	return &DeviceManagementReportsCachedReportConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementCachedReportConfiguration item
func (b *DeviceManagementReportsCachedReportConfigurationsCollectionRequestBuilder) ID(id string) *DeviceManagementCachedReportConfigurationRequestBuilder {
	bb := &DeviceManagementCachedReportConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementReportsCachedReportConfigurationsCollectionRequest is request for DeviceManagementCachedReportConfiguration collection
type DeviceManagementReportsCachedReportConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementCachedReportConfiguration collection
func (r *DeviceManagementReportsCachedReportConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementCachedReportConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementCachedReportConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementCachedReportConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementCachedReportConfiguration collection, max N pages
func (r *DeviceManagementReportsCachedReportConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementCachedReportConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementCachedReportConfiguration collection
func (r *DeviceManagementReportsCachedReportConfigurationsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementCachedReportConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementCachedReportConfiguration collection
func (r *DeviceManagementReportsCachedReportConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementCachedReportConfiguration) (resObj *DeviceManagementCachedReportConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ExportJobs returns request builder for DeviceManagementExportJob collection
func (b *DeviceManagementReportsRequestBuilder) ExportJobs() *DeviceManagementReportsExportJobsCollectionRequestBuilder {
	bb := &DeviceManagementReportsExportJobsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/exportJobs"
	return bb
}

// DeviceManagementReportsExportJobsCollectionRequestBuilder is request builder for DeviceManagementExportJob collection rcn
type DeviceManagementReportsExportJobsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementExportJob collection
func (b *DeviceManagementReportsExportJobsCollectionRequestBuilder) Request() *DeviceManagementReportsExportJobsCollectionRequest {
	return &DeviceManagementReportsExportJobsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementExportJob item
func (b *DeviceManagementReportsExportJobsCollectionRequestBuilder) ID(id string) *DeviceManagementExportJobRequestBuilder {
	bb := &DeviceManagementExportJobRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementReportsExportJobsCollectionRequest is request for DeviceManagementExportJob collection
type DeviceManagementReportsExportJobsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementExportJob collection
func (r *DeviceManagementReportsExportJobsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementExportJob, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementExportJob
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementExportJob
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementExportJob collection, max N pages
func (r *DeviceManagementReportsExportJobsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementExportJob, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementExportJob collection
func (r *DeviceManagementReportsExportJobsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementExportJob, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementExportJob collection
func (r *DeviceManagementReportsExportJobsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementExportJob) (resObj *DeviceManagementExportJob, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for DeviceManagementResourceAccessProfileAssignment collection
func (b *DeviceManagementResourceAccessProfileBaseRequestBuilder) Assignments() *DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequestBuilder {
	bb := &DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequestBuilder is request builder for DeviceManagementResourceAccessProfileAssignment collection rcn
type DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementResourceAccessProfileAssignment collection
func (b *DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequestBuilder) Request() *DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequest {
	return &DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementResourceAccessProfileAssignment item
func (b *DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequestBuilder) ID(id string) *DeviceManagementResourceAccessProfileAssignmentRequestBuilder {
	bb := &DeviceManagementResourceAccessProfileAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequest is request for DeviceManagementResourceAccessProfileAssignment collection
type DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementResourceAccessProfileAssignment collection
func (r *DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementResourceAccessProfileAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementResourceAccessProfileAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementResourceAccessProfileAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementResourceAccessProfileAssignment collection, max N pages
func (r *DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementResourceAccessProfileAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementResourceAccessProfileAssignment collection
func (r *DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementResourceAccessProfileAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementResourceAccessProfileAssignment collection
func (r *DeviceManagementResourceAccessProfileBaseAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementResourceAccessProfileAssignment) (resObj *DeviceManagementResourceAccessProfileAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReferencingConfigurationPolicies returns request builder for DeviceManagementConfigurationPolicy collection
func (b *DeviceManagementReusablePolicySettingRequestBuilder) ReferencingConfigurationPolicies() *DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequestBuilder {
	bb := &DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/referencingConfigurationPolicies"
	return bb
}

// DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequestBuilder is request builder for DeviceManagementConfigurationPolicy collection rcn
type DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationPolicy collection
func (b *DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequestBuilder) Request() *DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequest {
	return &DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationPolicy item
func (b *DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationPolicyRequestBuilder {
	bb := &DeviceManagementConfigurationPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequest is request for DeviceManagementConfigurationPolicy collection
type DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationPolicy collection
func (r *DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationPolicy collection, max N pages
func (r *DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationPolicy collection
func (r *DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationPolicy collection
func (r *DeviceManagementReusablePolicySettingReferencingConfigurationPoliciesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationPolicy) (resObj *DeviceManagementConfigurationPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for DeviceManagementScriptAssignment collection
func (b *DeviceManagementScriptRequestBuilder) Assignments() *DeviceManagementScriptAssignmentsCollectionRequestBuilder {
	bb := &DeviceManagementScriptAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceManagementScriptAssignmentsCollectionRequestBuilder is request builder for DeviceManagementScriptAssignment collection rcn
type DeviceManagementScriptAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptAssignment collection
func (b *DeviceManagementScriptAssignmentsCollectionRequestBuilder) Request() *DeviceManagementScriptAssignmentsCollectionRequest {
	return &DeviceManagementScriptAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptAssignment item
func (b *DeviceManagementScriptAssignmentsCollectionRequestBuilder) ID(id string) *DeviceManagementScriptAssignmentRequestBuilder {
	bb := &DeviceManagementScriptAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementScriptAssignmentsCollectionRequest is request for DeviceManagementScriptAssignment collection
type DeviceManagementScriptAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptAssignment collection
func (r *DeviceManagementScriptAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptAssignment collection, max N pages
func (r *DeviceManagementScriptAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptAssignment collection
func (r *DeviceManagementScriptAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptAssignment collection
func (r *DeviceManagementScriptAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptAssignment) (resObj *DeviceManagementScriptAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceRunStates returns request builder for DeviceManagementScriptDeviceState collection
func (b *DeviceManagementScriptRequestBuilder) DeviceRunStates() *DeviceManagementScriptDeviceRunStatesCollectionRequestBuilder {
	bb := &DeviceManagementScriptDeviceRunStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceRunStates"
	return bb
}

// DeviceManagementScriptDeviceRunStatesCollectionRequestBuilder is request builder for DeviceManagementScriptDeviceState collection rcn
type DeviceManagementScriptDeviceRunStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptDeviceState collection
func (b *DeviceManagementScriptDeviceRunStatesCollectionRequestBuilder) Request() *DeviceManagementScriptDeviceRunStatesCollectionRequest {
	return &DeviceManagementScriptDeviceRunStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptDeviceState item
func (b *DeviceManagementScriptDeviceRunStatesCollectionRequestBuilder) ID(id string) *DeviceManagementScriptDeviceStateRequestBuilder {
	bb := &DeviceManagementScriptDeviceStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementScriptDeviceRunStatesCollectionRequest is request for DeviceManagementScriptDeviceState collection
type DeviceManagementScriptDeviceRunStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptDeviceState collection
func (r *DeviceManagementScriptDeviceRunStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptDeviceState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptDeviceState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptDeviceState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptDeviceState collection, max N pages
func (r *DeviceManagementScriptDeviceRunStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptDeviceState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptDeviceState collection
func (r *DeviceManagementScriptDeviceRunStatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptDeviceState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptDeviceState collection
func (r *DeviceManagementScriptDeviceRunStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptDeviceState) (resObj *DeviceManagementScriptDeviceState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GroupAssignments returns request builder for DeviceManagementScriptGroupAssignment collection
func (b *DeviceManagementScriptRequestBuilder) GroupAssignments() *DeviceManagementScriptGroupAssignmentsCollectionRequestBuilder {
	bb := &DeviceManagementScriptGroupAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupAssignments"
	return bb
}

// DeviceManagementScriptGroupAssignmentsCollectionRequestBuilder is request builder for DeviceManagementScriptGroupAssignment collection rcn
type DeviceManagementScriptGroupAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptGroupAssignment collection
func (b *DeviceManagementScriptGroupAssignmentsCollectionRequestBuilder) Request() *DeviceManagementScriptGroupAssignmentsCollectionRequest {
	return &DeviceManagementScriptGroupAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptGroupAssignment item
func (b *DeviceManagementScriptGroupAssignmentsCollectionRequestBuilder) ID(id string) *DeviceManagementScriptGroupAssignmentRequestBuilder {
	bb := &DeviceManagementScriptGroupAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementScriptGroupAssignmentsCollectionRequest is request for DeviceManagementScriptGroupAssignment collection
type DeviceManagementScriptGroupAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptGroupAssignment collection
func (r *DeviceManagementScriptGroupAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptGroupAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptGroupAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptGroupAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptGroupAssignment collection, max N pages
func (r *DeviceManagementScriptGroupAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptGroupAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptGroupAssignment collection
func (r *DeviceManagementScriptGroupAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptGroupAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptGroupAssignment collection
func (r *DeviceManagementScriptGroupAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptGroupAssignment) (resObj *DeviceManagementScriptGroupAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RunSummary is navigation property rn
func (b *DeviceManagementScriptRequestBuilder) RunSummary() *DeviceManagementScriptRunSummaryRequestBuilder {
	bb := &DeviceManagementScriptRunSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/runSummary"
	return bb
}

// UserRunStates returns request builder for DeviceManagementScriptUserState collection
func (b *DeviceManagementScriptRequestBuilder) UserRunStates() *DeviceManagementScriptUserRunStatesCollectionRequestBuilder {
	bb := &DeviceManagementScriptUserRunStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userRunStates"
	return bb
}

// DeviceManagementScriptUserRunStatesCollectionRequestBuilder is request builder for DeviceManagementScriptUserState collection rcn
type DeviceManagementScriptUserRunStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptUserState collection
func (b *DeviceManagementScriptUserRunStatesCollectionRequestBuilder) Request() *DeviceManagementScriptUserRunStatesCollectionRequest {
	return &DeviceManagementScriptUserRunStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptUserState item
func (b *DeviceManagementScriptUserRunStatesCollectionRequestBuilder) ID(id string) *DeviceManagementScriptUserStateRequestBuilder {
	bb := &DeviceManagementScriptUserStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementScriptUserRunStatesCollectionRequest is request for DeviceManagementScriptUserState collection
type DeviceManagementScriptUserRunStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptUserState collection
func (r *DeviceManagementScriptUserRunStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptUserState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptUserState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptUserState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptUserState collection, max N pages
func (r *DeviceManagementScriptUserRunStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptUserState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptUserState collection
func (r *DeviceManagementScriptUserRunStatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptUserState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptUserState collection
func (r *DeviceManagementScriptUserRunStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptUserState) (resObj *DeviceManagementScriptUserState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDevice is navigation property rn
func (b *DeviceManagementScriptDeviceStateRequestBuilder) ManagedDevice() *ManagedDeviceRequestBuilder {
	bb := &ManagedDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDevice"
	return bb
}

// DeviceRunStates returns request builder for DeviceManagementScriptDeviceState collection
func (b *DeviceManagementScriptUserStateRequestBuilder) DeviceRunStates() *DeviceManagementScriptUserStateDeviceRunStatesCollectionRequestBuilder {
	bb := &DeviceManagementScriptUserStateDeviceRunStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceRunStates"
	return bb
}

// DeviceManagementScriptUserStateDeviceRunStatesCollectionRequestBuilder is request builder for DeviceManagementScriptDeviceState collection rcn
type DeviceManagementScriptUserStateDeviceRunStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptDeviceState collection
func (b *DeviceManagementScriptUserStateDeviceRunStatesCollectionRequestBuilder) Request() *DeviceManagementScriptUserStateDeviceRunStatesCollectionRequest {
	return &DeviceManagementScriptUserStateDeviceRunStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptDeviceState item
func (b *DeviceManagementScriptUserStateDeviceRunStatesCollectionRequestBuilder) ID(id string) *DeviceManagementScriptDeviceStateRequestBuilder {
	bb := &DeviceManagementScriptDeviceStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementScriptUserStateDeviceRunStatesCollectionRequest is request for DeviceManagementScriptDeviceState collection
type DeviceManagementScriptUserStateDeviceRunStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptDeviceState collection
func (r *DeviceManagementScriptUserStateDeviceRunStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptDeviceState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptDeviceState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptDeviceState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptDeviceState collection, max N pages
func (r *DeviceManagementScriptUserStateDeviceRunStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptDeviceState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptDeviceState collection
func (r *DeviceManagementScriptUserStateDeviceRunStatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptDeviceState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptDeviceState collection
func (r *DeviceManagementScriptUserStateDeviceRunStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptDeviceState) (resObj *DeviceManagementScriptDeviceState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SettingDefinitions returns request builder for DeviceManagementSettingDefinition collection
func (b *DeviceManagementSettingCategoryRequestBuilder) SettingDefinitions() *DeviceManagementSettingCategorySettingDefinitionsCollectionRequestBuilder {
	bb := &DeviceManagementSettingCategorySettingDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settingDefinitions"
	return bb
}

// DeviceManagementSettingCategorySettingDefinitionsCollectionRequestBuilder is request builder for DeviceManagementSettingDefinition collection rcn
type DeviceManagementSettingCategorySettingDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementSettingDefinition collection
func (b *DeviceManagementSettingCategorySettingDefinitionsCollectionRequestBuilder) Request() *DeviceManagementSettingCategorySettingDefinitionsCollectionRequest {
	return &DeviceManagementSettingCategorySettingDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementSettingDefinition item
func (b *DeviceManagementSettingCategorySettingDefinitionsCollectionRequestBuilder) ID(id string) *DeviceManagementSettingDefinitionRequestBuilder {
	bb := &DeviceManagementSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementSettingCategorySettingDefinitionsCollectionRequest is request for DeviceManagementSettingDefinition collection
type DeviceManagementSettingCategorySettingDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementSettingDefinition collection
func (r *DeviceManagementSettingCategorySettingDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementSettingDefinition collection, max N pages
func (r *DeviceManagementSettingCategorySettingDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementSettingDefinition collection
func (r *DeviceManagementSettingCategorySettingDefinitionsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementSettingDefinition collection
func (r *DeviceManagementSettingCategorySettingDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementSettingDefinition) (resObj *DeviceManagementSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Categories returns request builder for DeviceManagementTemplateSettingCategory collection
func (b *DeviceManagementTemplateRequestBuilder) Categories() *DeviceManagementTemplateCategoriesCollectionRequestBuilder {
	bb := &DeviceManagementTemplateCategoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/categories"
	return bb
}

// DeviceManagementTemplateCategoriesCollectionRequestBuilder is request builder for DeviceManagementTemplateSettingCategory collection rcn
type DeviceManagementTemplateCategoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementTemplateSettingCategory collection
func (b *DeviceManagementTemplateCategoriesCollectionRequestBuilder) Request() *DeviceManagementTemplateCategoriesCollectionRequest {
	return &DeviceManagementTemplateCategoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementTemplateSettingCategory item
func (b *DeviceManagementTemplateCategoriesCollectionRequestBuilder) ID(id string) *DeviceManagementTemplateSettingCategoryRequestBuilder {
	bb := &DeviceManagementTemplateSettingCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementTemplateCategoriesCollectionRequest is request for DeviceManagementTemplateSettingCategory collection
type DeviceManagementTemplateCategoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementTemplateSettingCategory collection
func (r *DeviceManagementTemplateCategoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementTemplateSettingCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementTemplateSettingCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementTemplateSettingCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementTemplateSettingCategory collection, max N pages
func (r *DeviceManagementTemplateCategoriesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementTemplateSettingCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementTemplateSettingCategory collection
func (r *DeviceManagementTemplateCategoriesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementTemplateSettingCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementTemplateSettingCategory collection
func (r *DeviceManagementTemplateCategoriesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementTemplateSettingCategory) (resObj *DeviceManagementTemplateSettingCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MigratableTo returns request builder for DeviceManagementTemplate collection
func (b *DeviceManagementTemplateRequestBuilder) MigratableTo() *DeviceManagementTemplateMigratableToCollectionRequestBuilder {
	bb := &DeviceManagementTemplateMigratableToCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/migratableTo"
	return bb
}

// DeviceManagementTemplateMigratableToCollectionRequestBuilder is request builder for DeviceManagementTemplate collection rcn
type DeviceManagementTemplateMigratableToCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementTemplate collection
func (b *DeviceManagementTemplateMigratableToCollectionRequestBuilder) Request() *DeviceManagementTemplateMigratableToCollectionRequest {
	return &DeviceManagementTemplateMigratableToCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementTemplate item
func (b *DeviceManagementTemplateMigratableToCollectionRequestBuilder) ID(id string) *DeviceManagementTemplateRequestBuilder {
	bb := &DeviceManagementTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementTemplateMigratableToCollectionRequest is request for DeviceManagementTemplate collection
type DeviceManagementTemplateMigratableToCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementTemplate collection
func (r *DeviceManagementTemplateMigratableToCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementTemplate collection, max N pages
func (r *DeviceManagementTemplateMigratableToCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementTemplate collection
func (r *DeviceManagementTemplateMigratableToCollectionRequest) Get(ctx context.Context) ([]DeviceManagementTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementTemplate collection
func (r *DeviceManagementTemplateMigratableToCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementTemplate) (resObj *DeviceManagementTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Settings1 returns request builder for DeviceManagementSettingInstance collection
func (b *DeviceManagementTemplateRequestBuilder) Settings1() *DeviceManagementTemplateSettings1CollectionRequestBuilder {
	bb := &DeviceManagementTemplateSettings1CollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// DeviceManagementTemplateSettings1CollectionRequestBuilder is request builder for DeviceManagementSettingInstance collection rcn
type DeviceManagementTemplateSettings1CollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementSettingInstance collection
func (b *DeviceManagementTemplateSettings1CollectionRequestBuilder) Request() *DeviceManagementTemplateSettings1CollectionRequest {
	return &DeviceManagementTemplateSettings1CollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementSettingInstance item
func (b *DeviceManagementTemplateSettings1CollectionRequestBuilder) ID(id string) *DeviceManagementSettingInstanceRequestBuilder {
	bb := &DeviceManagementSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementTemplateSettings1CollectionRequest is request for DeviceManagementSettingInstance collection
type DeviceManagementTemplateSettings1CollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementSettingInstance collection
func (r *DeviceManagementTemplateSettings1CollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementSettingInstance collection, max N pages
func (r *DeviceManagementTemplateSettings1CollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementSettingInstance collection
func (r *DeviceManagementTemplateSettings1CollectionRequest) Get(ctx context.Context) ([]DeviceManagementSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementSettingInstance collection
func (r *DeviceManagementTemplateSettings1CollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementSettingInstance) (resObj *DeviceManagementSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RecommendedSettings returns request builder for DeviceManagementSettingInstance collection
func (b *DeviceManagementTemplateSettingCategoryRequestBuilder) RecommendedSettings() *DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequestBuilder {
	bb := &DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/recommendedSettings"
	return bb
}

// DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequestBuilder is request builder for DeviceManagementSettingInstance collection rcn
type DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementSettingInstance collection
func (b *DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequestBuilder) Request() *DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequest {
	return &DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementSettingInstance item
func (b *DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequestBuilder) ID(id string) *DeviceManagementSettingInstanceRequestBuilder {
	bb := &DeviceManagementSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequest is request for DeviceManagementSettingInstance collection
type DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementSettingInstance collection
func (r *DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementSettingInstance collection, max N pages
func (r *DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementSettingInstance collection
func (r *DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementSettingInstance collection
func (r *DeviceManagementTemplateSettingCategoryRecommendedSettingsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementSettingInstance) (resObj *DeviceManagementSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for DeviceManagementScriptAssignment collection
func (b *DeviceShellScriptRequestBuilder) Assignments() *DeviceShellScriptAssignmentsCollectionRequestBuilder {
	bb := &DeviceShellScriptAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// DeviceShellScriptAssignmentsCollectionRequestBuilder is request builder for DeviceManagementScriptAssignment collection rcn
type DeviceShellScriptAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptAssignment collection
func (b *DeviceShellScriptAssignmentsCollectionRequestBuilder) Request() *DeviceShellScriptAssignmentsCollectionRequest {
	return &DeviceShellScriptAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptAssignment item
func (b *DeviceShellScriptAssignmentsCollectionRequestBuilder) ID(id string) *DeviceManagementScriptAssignmentRequestBuilder {
	bb := &DeviceManagementScriptAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceShellScriptAssignmentsCollectionRequest is request for DeviceManagementScriptAssignment collection
type DeviceShellScriptAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptAssignment collection
func (r *DeviceShellScriptAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptAssignment collection, max N pages
func (r *DeviceShellScriptAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptAssignment collection
func (r *DeviceShellScriptAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptAssignment collection
func (r *DeviceShellScriptAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptAssignment) (resObj *DeviceManagementScriptAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceRunStates returns request builder for DeviceManagementScriptDeviceState collection
func (b *DeviceShellScriptRequestBuilder) DeviceRunStates() *DeviceShellScriptDeviceRunStatesCollectionRequestBuilder {
	bb := &DeviceShellScriptDeviceRunStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceRunStates"
	return bb
}

// DeviceShellScriptDeviceRunStatesCollectionRequestBuilder is request builder for DeviceManagementScriptDeviceState collection rcn
type DeviceShellScriptDeviceRunStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptDeviceState collection
func (b *DeviceShellScriptDeviceRunStatesCollectionRequestBuilder) Request() *DeviceShellScriptDeviceRunStatesCollectionRequest {
	return &DeviceShellScriptDeviceRunStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptDeviceState item
func (b *DeviceShellScriptDeviceRunStatesCollectionRequestBuilder) ID(id string) *DeviceManagementScriptDeviceStateRequestBuilder {
	bb := &DeviceManagementScriptDeviceStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceShellScriptDeviceRunStatesCollectionRequest is request for DeviceManagementScriptDeviceState collection
type DeviceShellScriptDeviceRunStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptDeviceState collection
func (r *DeviceShellScriptDeviceRunStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptDeviceState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptDeviceState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptDeviceState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptDeviceState collection, max N pages
func (r *DeviceShellScriptDeviceRunStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptDeviceState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptDeviceState collection
func (r *DeviceShellScriptDeviceRunStatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptDeviceState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptDeviceState collection
func (r *DeviceShellScriptDeviceRunStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptDeviceState) (resObj *DeviceManagementScriptDeviceState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GroupAssignments returns request builder for DeviceManagementScriptGroupAssignment collection
func (b *DeviceShellScriptRequestBuilder) GroupAssignments() *DeviceShellScriptGroupAssignmentsCollectionRequestBuilder {
	bb := &DeviceShellScriptGroupAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupAssignments"
	return bb
}

// DeviceShellScriptGroupAssignmentsCollectionRequestBuilder is request builder for DeviceManagementScriptGroupAssignment collection rcn
type DeviceShellScriptGroupAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptGroupAssignment collection
func (b *DeviceShellScriptGroupAssignmentsCollectionRequestBuilder) Request() *DeviceShellScriptGroupAssignmentsCollectionRequest {
	return &DeviceShellScriptGroupAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptGroupAssignment item
func (b *DeviceShellScriptGroupAssignmentsCollectionRequestBuilder) ID(id string) *DeviceManagementScriptGroupAssignmentRequestBuilder {
	bb := &DeviceManagementScriptGroupAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceShellScriptGroupAssignmentsCollectionRequest is request for DeviceManagementScriptGroupAssignment collection
type DeviceShellScriptGroupAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptGroupAssignment collection
func (r *DeviceShellScriptGroupAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptGroupAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptGroupAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptGroupAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptGroupAssignment collection, max N pages
func (r *DeviceShellScriptGroupAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptGroupAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptGroupAssignment collection
func (r *DeviceShellScriptGroupAssignmentsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptGroupAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptGroupAssignment collection
func (r *DeviceShellScriptGroupAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptGroupAssignment) (resObj *DeviceManagementScriptGroupAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RunSummary is navigation property rn
func (b *DeviceShellScriptRequestBuilder) RunSummary() *DeviceManagementScriptRunSummaryRequestBuilder {
	bb := &DeviceManagementScriptRunSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/runSummary"
	return bb
}

// UserRunStates returns request builder for DeviceManagementScriptUserState collection
func (b *DeviceShellScriptRequestBuilder) UserRunStates() *DeviceShellScriptUserRunStatesCollectionRequestBuilder {
	bb := &DeviceShellScriptUserRunStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userRunStates"
	return bb
}

// DeviceShellScriptUserRunStatesCollectionRequestBuilder is request builder for DeviceManagementScriptUserState collection rcn
type DeviceShellScriptUserRunStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptUserState collection
func (b *DeviceShellScriptUserRunStatesCollectionRequestBuilder) Request() *DeviceShellScriptUserRunStatesCollectionRequest {
	return &DeviceShellScriptUserRunStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptUserState item
func (b *DeviceShellScriptUserRunStatesCollectionRequestBuilder) ID(id string) *DeviceManagementScriptUserStateRequestBuilder {
	bb := &DeviceManagementScriptUserStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceShellScriptUserRunStatesCollectionRequest is request for DeviceManagementScriptUserState collection
type DeviceShellScriptUserRunStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptUserState collection
func (r *DeviceShellScriptUserRunStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptUserState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptUserState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptUserState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptUserState collection, max N pages
func (r *DeviceShellScriptUserRunStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptUserState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptUserState collection
func (r *DeviceShellScriptUserRunStatesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptUserState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptUserState collection
func (r *DeviceShellScriptUserRunStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptUserState) (resObj *DeviceManagementScriptUserState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Device returns request builder for Device collection
func (b *AdministrativeUnitMembersCollectionRequestBuilder) Device() *AdministrativeUnitMembersCollectionDeviceCollectionRequestBuilder {
	bb := &AdministrativeUnitMembersCollectionDeviceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AdministrativeUnitMembersCollectionDeviceCollectionRequestBuilder is request builder for Device collection rcn
type AdministrativeUnitMembersCollectionDeviceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Device collection
func (b *AdministrativeUnitMembersCollectionDeviceCollectionRequestBuilder) Request() *AdministrativeUnitMembersCollectionDeviceCollectionRequest {
	return &AdministrativeUnitMembersCollectionDeviceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Device item
func (b *AdministrativeUnitMembersCollectionDeviceCollectionRequestBuilder) ID(id string) *DeviceRequestBuilder {
	bb := &DeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdministrativeUnitMembersCollectionDeviceCollectionRequest is request for Device collection
type AdministrativeUnitMembersCollectionDeviceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Device collection
func (r *AdministrativeUnitMembersCollectionDeviceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Device, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Device
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Device
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Device collection, max N pages
func (r *AdministrativeUnitMembersCollectionDeviceCollectionRequest) GetN(ctx context.Context, n int) ([]Device, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Device collection
func (r *AdministrativeUnitMembersCollectionDeviceCollectionRequest) Get(ctx context.Context) ([]Device, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Device collection
func (r *AdministrativeUnitMembersCollectionDeviceCollectionRequest) Add(ctx context.Context, reqObj *Device) (resObj *Device, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceAndAppManagementAssignmentFilterRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceAndAppManagementRoleAssignment returns request builder for DeviceAndAppManagementRoleAssignment collection
func (b *RoleDefinitionRoleAssignmentsCollectionRequestBuilder) DeviceAndAppManagementRoleAssignment() *RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequestBuilder {
	bb := &RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequestBuilder is request builder for DeviceAndAppManagementRoleAssignment collection rcn
type RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceAndAppManagementRoleAssignment collection
func (b *RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequestBuilder) Request() *RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequest {
	return &RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceAndAppManagementRoleAssignment item
func (b *RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequestBuilder) ID(id string) *DeviceAndAppManagementRoleAssignmentRequestBuilder {
	bb := &DeviceAndAppManagementRoleAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequest is request for DeviceAndAppManagementRoleAssignment collection
type RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceAndAppManagementRoleAssignment collection
func (r *RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceAndAppManagementRoleAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceAndAppManagementRoleAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceAndAppManagementRoleAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceAndAppManagementRoleAssignment collection, max N pages
func (r *RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceAndAppManagementRoleAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceAndAppManagementRoleAssignment collection
func (r *RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequest) Get(ctx context.Context) ([]DeviceAndAppManagementRoleAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceAndAppManagementRoleAssignment collection
func (r *RoleDefinitionRoleAssignmentsCollectionDeviceAndAppManagementRoleAssignmentCollectionRequest) Add(ctx context.Context, reqObj *DeviceAndAppManagementRoleAssignment) (resObj *DeviceAndAppManagementRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceAndAppManagementRoleDefinition returns request builder for DeviceAndAppManagementRoleDefinition collection
func (b *DeviceManagementRoleDefinitionsCollectionRequestBuilder) DeviceAndAppManagementRoleDefinition() *DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequestBuilder {
	bb := &DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequestBuilder is request builder for DeviceAndAppManagementRoleDefinition collection rcn
type DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceAndAppManagementRoleDefinition collection
func (b *DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequestBuilder) Request() *DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequest {
	return &DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceAndAppManagementRoleDefinition item
func (b *DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequestBuilder) ID(id string) *DeviceAndAppManagementRoleDefinitionRequestBuilder {
	bb := &DeviceAndAppManagementRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequest is request for DeviceAndAppManagementRoleDefinition collection
type DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceAndAppManagementRoleDefinition collection
func (r *DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceAndAppManagementRoleDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceAndAppManagementRoleDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceAndAppManagementRoleDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceAndAppManagementRoleDefinition collection, max N pages
func (r *DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceAndAppManagementRoleDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceAndAppManagementRoleDefinition collection
func (r *DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequest) Get(ctx context.Context) ([]DeviceAndAppManagementRoleDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceAndAppManagementRoleDefinition collection
func (r *DeviceManagementRoleDefinitionsCollectionDeviceAndAppManagementRoleDefinitionCollectionRequest) Add(ctx context.Context, reqObj *DeviceAndAppManagementRoleDefinition) (resObj *DeviceAndAppManagementRoleDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceAppManagementRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceAppManagementDeviceAppManagementTasksCollectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceCategoryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceComanagementAuthorityConfiguration returns request builder for DeviceComanagementAuthorityConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder) DeviceComanagementAuthorityConfiguration() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequestBuilder is request builder for DeviceComanagementAuthorityConfiguration collection rcn
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceComanagementAuthorityConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequest {
	return &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceComanagementAuthorityConfiguration item
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequestBuilder) ID(id string) *DeviceComanagementAuthorityConfigurationRequestBuilder {
	bb := &DeviceComanagementAuthorityConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequest is request for DeviceComanagementAuthorityConfiguration collection
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceComanagementAuthorityConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceComanagementAuthorityConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceComanagementAuthorityConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceComanagementAuthorityConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceComanagementAuthorityConfiguration collection, max N pages
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceComanagementAuthorityConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceComanagementAuthorityConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceComanagementAuthorityConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceComanagementAuthorityConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceComanagementAuthorityConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceComanagementAuthorityConfiguration) (resObj *DeviceComanagementAuthorityConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceComplianceActionItemRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceComplianceDeviceOverviewRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceComplianceDeviceStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceCompliancePolicyAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceCompliancePolicyDeviceStateSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceCompliancePolicyGroupAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceCompliancePolicyPolicySetItem returns request builder for DeviceCompliancePolicyPolicySetItem collection
func (b *PolicySetItemsCollectionRequestBuilder) DeviceCompliancePolicyPolicySetItem() *PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequestBuilder {
	bb := &PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequestBuilder is request builder for DeviceCompliancePolicyPolicySetItem collection rcn
type PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceCompliancePolicyPolicySetItem collection
func (b *PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequestBuilder) Request() *PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequest {
	return &PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceCompliancePolicyPolicySetItem item
func (b *PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequestBuilder) ID(id string) *DeviceCompliancePolicyPolicySetItemRequestBuilder {
	bb := &DeviceCompliancePolicyPolicySetItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequest is request for DeviceCompliancePolicyPolicySetItem collection
type PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceCompliancePolicyPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceCompliancePolicyPolicySetItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceCompliancePolicyPolicySetItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceCompliancePolicyPolicySetItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceCompliancePolicyPolicySetItem collection, max N pages
func (r *PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceCompliancePolicyPolicySetItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceCompliancePolicyPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequest) Get(ctx context.Context) ([]DeviceCompliancePolicyPolicySetItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceCompliancePolicyPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceCompliancePolicyPolicySetItemCollectionRequest) Add(ctx context.Context, reqObj *DeviceCompliancePolicyPolicySetItem) (resObj *DeviceCompliancePolicyPolicySetItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceCompliancePolicySettingStateSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceCompliancePolicyStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceComplianceScheduledActionForRuleRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceComplianceScriptRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceComplianceScriptDeviceStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceComplianceScriptRunSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceComplianceSettingStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceComplianceUserOverviewRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceComplianceUserStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceConfigurationAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceConfigurationConflictSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceConfigurationDeviceOverviewRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceConfigurationDeviceStateSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceConfigurationDeviceStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceConfigurationGroupAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceConfigurationPolicySetItem returns request builder for DeviceConfigurationPolicySetItem collection
func (b *PolicySetItemsCollectionRequestBuilder) DeviceConfigurationPolicySetItem() *PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequestBuilder {
	bb := &PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequestBuilder is request builder for DeviceConfigurationPolicySetItem collection rcn
type PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfigurationPolicySetItem collection
func (b *PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequestBuilder) Request() *PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequest {
	return &PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfigurationPolicySetItem item
func (b *PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequestBuilder) ID(id string) *DeviceConfigurationPolicySetItemRequestBuilder {
	bb := &DeviceConfigurationPolicySetItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequest is request for DeviceConfigurationPolicySetItem collection
type PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfigurationPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfigurationPolicySetItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfigurationPolicySetItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfigurationPolicySetItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfigurationPolicySetItem collection, max N pages
func (r *PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfigurationPolicySetItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfigurationPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequest) Get(ctx context.Context) ([]DeviceConfigurationPolicySetItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfigurationPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceConfigurationPolicySetItemCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfigurationPolicySetItem) (resObj *DeviceConfigurationPolicySetItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceConfigurationStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceConfigurationUserOverviewRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceConfigurationUserStateSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceConfigurationUserStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceCustomAttributeShellScriptRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceEnrollmentLimitConfiguration returns request builder for DeviceEnrollmentLimitConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder) DeviceEnrollmentLimitConfiguration() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequestBuilder is request builder for DeviceEnrollmentLimitConfiguration collection rcn
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceEnrollmentLimitConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequest {
	return &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceEnrollmentLimitConfiguration item
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequestBuilder) ID(id string) *DeviceEnrollmentLimitConfigurationRequestBuilder {
	bb := &DeviceEnrollmentLimitConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequest is request for DeviceEnrollmentLimitConfiguration collection
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceEnrollmentLimitConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceEnrollmentLimitConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceEnrollmentLimitConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceEnrollmentLimitConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceEnrollmentLimitConfiguration collection, max N pages
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceEnrollmentLimitConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceEnrollmentLimitConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceEnrollmentLimitConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceEnrollmentLimitConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentLimitConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceEnrollmentLimitConfiguration) (resObj *DeviceEnrollmentLimitConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceEnrollmentNotificationConfiguration returns request builder for DeviceEnrollmentNotificationConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder) DeviceEnrollmentNotificationConfiguration() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequestBuilder is request builder for DeviceEnrollmentNotificationConfiguration collection rcn
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceEnrollmentNotificationConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequest {
	return &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceEnrollmentNotificationConfiguration item
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequestBuilder) ID(id string) *DeviceEnrollmentNotificationConfigurationRequestBuilder {
	bb := &DeviceEnrollmentNotificationConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequest is request for DeviceEnrollmentNotificationConfiguration collection
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceEnrollmentNotificationConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceEnrollmentNotificationConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceEnrollmentNotificationConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceEnrollmentNotificationConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceEnrollmentNotificationConfiguration collection, max N pages
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceEnrollmentNotificationConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceEnrollmentNotificationConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceEnrollmentNotificationConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceEnrollmentNotificationConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentNotificationConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceEnrollmentNotificationConfiguration) (resObj *DeviceEnrollmentNotificationConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceEnrollmentPlatformRestrictionConfiguration returns request builder for DeviceEnrollmentPlatformRestrictionConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder) DeviceEnrollmentPlatformRestrictionConfiguration() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequestBuilder is request builder for DeviceEnrollmentPlatformRestrictionConfiguration collection rcn
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceEnrollmentPlatformRestrictionConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequest {
	return &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceEnrollmentPlatformRestrictionConfiguration item
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequestBuilder) ID(id string) *DeviceEnrollmentPlatformRestrictionConfigurationRequestBuilder {
	bb := &DeviceEnrollmentPlatformRestrictionConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequest is request for DeviceEnrollmentPlatformRestrictionConfiguration collection
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceEnrollmentPlatformRestrictionConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceEnrollmentPlatformRestrictionConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceEnrollmentPlatformRestrictionConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceEnrollmentPlatformRestrictionConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceEnrollmentPlatformRestrictionConfiguration collection, max N pages
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceEnrollmentPlatformRestrictionConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceEnrollmentPlatformRestrictionConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceEnrollmentPlatformRestrictionConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceEnrollmentPlatformRestrictionConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceEnrollmentPlatformRestrictionConfiguration) (resObj *DeviceEnrollmentPlatformRestrictionConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceEnrollmentPlatformRestrictionsConfiguration returns request builder for DeviceEnrollmentPlatformRestrictionsConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder) DeviceEnrollmentPlatformRestrictionsConfiguration() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequestBuilder is request builder for DeviceEnrollmentPlatformRestrictionsConfiguration collection rcn
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceEnrollmentPlatformRestrictionsConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequest {
	return &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceEnrollmentPlatformRestrictionsConfiguration item
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequestBuilder) ID(id string) *DeviceEnrollmentPlatformRestrictionsConfigurationRequestBuilder {
	bb := &DeviceEnrollmentPlatformRestrictionsConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequest is request for DeviceEnrollmentPlatformRestrictionsConfiguration collection
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceEnrollmentPlatformRestrictionsConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceEnrollmentPlatformRestrictionsConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceEnrollmentPlatformRestrictionsConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceEnrollmentPlatformRestrictionsConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceEnrollmentPlatformRestrictionsConfiguration collection, max N pages
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceEnrollmentPlatformRestrictionsConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceEnrollmentPlatformRestrictionsConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceEnrollmentPlatformRestrictionsConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceEnrollmentPlatformRestrictionsConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentPlatformRestrictionsConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceEnrollmentPlatformRestrictionsConfiguration) (resObj *DeviceEnrollmentPlatformRestrictionsConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceEnrollmentWindowsHelloForBusinessConfiguration returns request builder for DeviceEnrollmentWindowsHelloForBusinessConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionRequestBuilder) DeviceEnrollmentWindowsHelloForBusinessConfiguration() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequestBuilder is request builder for DeviceEnrollmentWindowsHelloForBusinessConfiguration collection rcn
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceEnrollmentWindowsHelloForBusinessConfiguration collection
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequest {
	return &DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceEnrollmentWindowsHelloForBusinessConfiguration item
func (b *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequestBuilder) ID(id string) *DeviceEnrollmentWindowsHelloForBusinessConfigurationRequestBuilder {
	bb := &DeviceEnrollmentWindowsHelloForBusinessConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequest is request for DeviceEnrollmentWindowsHelloForBusinessConfiguration collection
type DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceEnrollmentWindowsHelloForBusinessConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceEnrollmentWindowsHelloForBusinessConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceEnrollmentWindowsHelloForBusinessConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceEnrollmentWindowsHelloForBusinessConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceEnrollmentWindowsHelloForBusinessConfiguration collection, max N pages
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceEnrollmentWindowsHelloForBusinessConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceEnrollmentWindowsHelloForBusinessConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequest) Get(ctx context.Context) ([]DeviceEnrollmentWindowsHelloForBusinessConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceEnrollmentWindowsHelloForBusinessConfiguration collection
func (r *DeviceManagementDeviceEnrollmentConfigurationsCollectionDeviceEnrollmentWindowsHelloForBusinessConfigurationCollectionRequest) Add(ctx context.Context, reqObj *DeviceEnrollmentWindowsHelloForBusinessConfiguration) (resObj *DeviceEnrollmentWindowsHelloForBusinessConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceHealthScriptRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceHealthScriptAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceHealthScriptDeviceStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceHealthScriptRunSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceInstallStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceLogCollectionResponseRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementAbstractComplexSettingDefinition returns request builder for DeviceManagementAbstractComplexSettingDefinition collection
func (b *DeviceManagementSettingDefinitionsCollectionRequestBuilder) DeviceManagementAbstractComplexSettingDefinition() *DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequestBuilder {
	bb := &DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequestBuilder is request builder for DeviceManagementAbstractComplexSettingDefinition collection rcn
type DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementAbstractComplexSettingDefinition collection
func (b *DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequestBuilder) Request() *DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequest {
	return &DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementAbstractComplexSettingDefinition item
func (b *DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequestBuilder) ID(id string) *DeviceManagementAbstractComplexSettingDefinitionRequestBuilder {
	bb := &DeviceManagementAbstractComplexSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequest is request for DeviceManagementAbstractComplexSettingDefinition collection
type DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementAbstractComplexSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementAbstractComplexSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementAbstractComplexSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementAbstractComplexSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementAbstractComplexSettingDefinition collection, max N pages
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementAbstractComplexSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementAbstractComplexSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequest) Get(ctx context.Context) ([]DeviceManagementAbstractComplexSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementAbstractComplexSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementAbstractComplexSettingDefinitionCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementAbstractComplexSettingDefinition) (resObj *DeviceManagementAbstractComplexSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceManagementAbstractComplexSettingInstance returns request builder for DeviceManagementAbstractComplexSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder) DeviceManagementAbstractComplexSettingInstance() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequestBuilder {
	bb := &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequestBuilder is request builder for DeviceManagementAbstractComplexSettingInstance collection rcn
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementAbstractComplexSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequestBuilder) Request() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequest {
	return &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementAbstractComplexSettingInstance item
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequestBuilder) ID(id string) *DeviceManagementAbstractComplexSettingInstanceRequestBuilder {
	bb := &DeviceManagementAbstractComplexSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequest is request for DeviceManagementAbstractComplexSettingInstance collection
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementAbstractComplexSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementAbstractComplexSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementAbstractComplexSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementAbstractComplexSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementAbstractComplexSettingInstance collection, max N pages
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementAbstractComplexSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementAbstractComplexSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequest) Get(ctx context.Context) ([]DeviceManagementAbstractComplexSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementAbstractComplexSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementAbstractComplexSettingInstanceCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementAbstractComplexSettingInstance) (resObj *DeviceManagementAbstractComplexSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementAutopilotEventRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementAutopilotPolicyStatusDetailRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementBooleanSettingInstance returns request builder for DeviceManagementBooleanSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder) DeviceManagementBooleanSettingInstance() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequestBuilder {
	bb := &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequestBuilder is request builder for DeviceManagementBooleanSettingInstance collection rcn
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementBooleanSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequestBuilder) Request() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequest {
	return &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementBooleanSettingInstance item
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequestBuilder) ID(id string) *DeviceManagementBooleanSettingInstanceRequestBuilder {
	bb := &DeviceManagementBooleanSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequest is request for DeviceManagementBooleanSettingInstance collection
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementBooleanSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementBooleanSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementBooleanSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementBooleanSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementBooleanSettingInstance collection, max N pages
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementBooleanSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementBooleanSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequest) Get(ctx context.Context) ([]DeviceManagementBooleanSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementBooleanSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementBooleanSettingInstanceCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementBooleanSettingInstance) (resObj *DeviceManagementBooleanSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementCachedReportConfigurationRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementCollectionSettingDefinition returns request builder for DeviceManagementCollectionSettingDefinition collection
func (b *DeviceManagementSettingDefinitionsCollectionRequestBuilder) DeviceManagementCollectionSettingDefinition() *DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequestBuilder {
	bb := &DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequestBuilder is request builder for DeviceManagementCollectionSettingDefinition collection rcn
type DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementCollectionSettingDefinition collection
func (b *DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequestBuilder) Request() *DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequest {
	return &DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementCollectionSettingDefinition item
func (b *DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequestBuilder) ID(id string) *DeviceManagementCollectionSettingDefinitionRequestBuilder {
	bb := &DeviceManagementCollectionSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequest is request for DeviceManagementCollectionSettingDefinition collection
type DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementCollectionSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementCollectionSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementCollectionSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementCollectionSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementCollectionSettingDefinition collection, max N pages
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementCollectionSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementCollectionSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequest) Get(ctx context.Context) ([]DeviceManagementCollectionSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementCollectionSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementCollectionSettingDefinitionCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementCollectionSettingDefinition) (resObj *DeviceManagementCollectionSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceManagementCollectionSettingInstance returns request builder for DeviceManagementCollectionSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder) DeviceManagementCollectionSettingInstance() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequestBuilder {
	bb := &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequestBuilder is request builder for DeviceManagementCollectionSettingInstance collection rcn
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementCollectionSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequestBuilder) Request() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequest {
	return &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementCollectionSettingInstance item
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequestBuilder) ID(id string) *DeviceManagementCollectionSettingInstanceRequestBuilder {
	bb := &DeviceManagementCollectionSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequest is request for DeviceManagementCollectionSettingInstance collection
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementCollectionSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementCollectionSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementCollectionSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementCollectionSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementCollectionSettingInstance collection, max N pages
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementCollectionSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementCollectionSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequest) Get(ctx context.Context) ([]DeviceManagementCollectionSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementCollectionSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementCollectionSettingInstanceCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementCollectionSettingInstance) (resObj *DeviceManagementCollectionSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceManagementComplexSettingDefinition returns request builder for DeviceManagementComplexSettingDefinition collection
func (b *DeviceManagementSettingDefinitionsCollectionRequestBuilder) DeviceManagementComplexSettingDefinition() *DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequestBuilder {
	bb := &DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequestBuilder is request builder for DeviceManagementComplexSettingDefinition collection rcn
type DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementComplexSettingDefinition collection
func (b *DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequestBuilder) Request() *DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequest {
	return &DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementComplexSettingDefinition item
func (b *DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequestBuilder) ID(id string) *DeviceManagementComplexSettingDefinitionRequestBuilder {
	bb := &DeviceManagementComplexSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequest is request for DeviceManagementComplexSettingDefinition collection
type DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementComplexSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementComplexSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementComplexSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementComplexSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementComplexSettingDefinition collection, max N pages
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementComplexSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementComplexSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequest) Get(ctx context.Context) ([]DeviceManagementComplexSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementComplexSettingDefinition collection
func (r *DeviceManagementSettingDefinitionsCollectionDeviceManagementComplexSettingDefinitionCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementComplexSettingDefinition) (resObj *DeviceManagementComplexSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceManagementComplexSettingInstance returns request builder for DeviceManagementComplexSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder) DeviceManagementComplexSettingInstance() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequestBuilder {
	bb := &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequestBuilder is request builder for DeviceManagementComplexSettingInstance collection rcn
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementComplexSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequestBuilder) Request() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequest {
	return &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementComplexSettingInstance item
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequestBuilder) ID(id string) *DeviceManagementComplexSettingInstanceRequestBuilder {
	bb := &DeviceManagementComplexSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequest is request for DeviceManagementComplexSettingInstance collection
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementComplexSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementComplexSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementComplexSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementComplexSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementComplexSettingInstance collection, max N pages
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementComplexSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementComplexSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequest) Get(ctx context.Context) ([]DeviceManagementComplexSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementComplexSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementComplexSettingInstanceCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementComplexSettingInstance) (resObj *DeviceManagementComplexSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementComplianceActionItemRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementCompliancePolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementComplianceScheduledActionForRuleRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementConfigurationCategoryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementConfigurationChoiceSettingDefinition returns request builder for DeviceManagementConfigurationChoiceSettingDefinition collection
func (b *DeviceManagementComplianceSettingsCollectionRequestBuilder) DeviceManagementConfigurationChoiceSettingDefinition() *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequestBuilder {
	bb := &DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequestBuilder is request builder for DeviceManagementConfigurationChoiceSettingDefinition collection rcn
type DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationChoiceSettingDefinition collection
func (b *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequestBuilder) Request() *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequest {
	return &DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationChoiceSettingDefinition item
func (b *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationChoiceSettingDefinitionRequestBuilder {
	bb := &DeviceManagementConfigurationChoiceSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequest is request for DeviceManagementConfigurationChoiceSettingDefinition collection
type DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationChoiceSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationChoiceSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationChoiceSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationChoiceSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationChoiceSettingDefinition collection, max N pages
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationChoiceSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationChoiceSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationChoiceSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationChoiceSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationChoiceSettingDefinitionCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationChoiceSettingDefinition) (resObj *DeviceManagementConfigurationChoiceSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementConfigurationPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementConfigurationPolicyAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementConfigurationPolicyPolicySetItem returns request builder for DeviceManagementConfigurationPolicyPolicySetItem collection
func (b *PolicySetItemsCollectionRequestBuilder) DeviceManagementConfigurationPolicyPolicySetItem() *PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequestBuilder {
	bb := &PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequestBuilder is request builder for DeviceManagementConfigurationPolicyPolicySetItem collection rcn
type PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationPolicyPolicySetItem collection
func (b *PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequestBuilder) Request() *PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequest {
	return &PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationPolicyPolicySetItem item
func (b *PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationPolicyPolicySetItemRequestBuilder {
	bb := &DeviceManagementConfigurationPolicyPolicySetItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequest is request for DeviceManagementConfigurationPolicyPolicySetItem collection
type PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationPolicyPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationPolicyPolicySetItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationPolicyPolicySetItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationPolicyPolicySetItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationPolicyPolicySetItem collection, max N pages
func (r *PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationPolicyPolicySetItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationPolicyPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationPolicyPolicySetItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationPolicyPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceManagementConfigurationPolicyPolicySetItemCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationPolicyPolicySetItem) (resObj *DeviceManagementConfigurationPolicyPolicySetItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementConfigurationPolicyTemplateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementConfigurationRedirectSettingDefinition returns request builder for DeviceManagementConfigurationRedirectSettingDefinition collection
func (b *DeviceManagementComplianceSettingsCollectionRequestBuilder) DeviceManagementConfigurationRedirectSettingDefinition() *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequestBuilder {
	bb := &DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequestBuilder is request builder for DeviceManagementConfigurationRedirectSettingDefinition collection rcn
type DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationRedirectSettingDefinition collection
func (b *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequestBuilder) Request() *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequest {
	return &DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationRedirectSettingDefinition item
func (b *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationRedirectSettingDefinitionRequestBuilder {
	bb := &DeviceManagementConfigurationRedirectSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequest is request for DeviceManagementConfigurationRedirectSettingDefinition collection
type DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationRedirectSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationRedirectSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationRedirectSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationRedirectSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationRedirectSettingDefinition collection, max N pages
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationRedirectSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationRedirectSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationRedirectSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationRedirectSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationRedirectSettingDefinitionCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationRedirectSettingDefinition) (resObj *DeviceManagementConfigurationRedirectSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementConfigurationSettingRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementConfigurationSettingGroupDefinition returns request builder for DeviceManagementConfigurationSettingGroupDefinition collection
func (b *DeviceManagementComplianceSettingsCollectionRequestBuilder) DeviceManagementConfigurationSettingGroupDefinition() *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequestBuilder {
	bb := &DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequestBuilder is request builder for DeviceManagementConfigurationSettingGroupDefinition collection rcn
type DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSettingGroupDefinition collection
func (b *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequestBuilder) Request() *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequest {
	return &DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSettingGroupDefinition item
func (b *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSettingGroupDefinitionRequestBuilder {
	bb := &DeviceManagementConfigurationSettingGroupDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequest is request for DeviceManagementConfigurationSettingGroupDefinition collection
type DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSettingGroupDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSettingGroupDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSettingGroupDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSettingGroupDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSettingGroupDefinition collection, max N pages
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSettingGroupDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSettingGroupDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSettingGroupDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSettingGroupDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSettingGroupDefinitionCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSettingGroupDefinition) (resObj *DeviceManagementConfigurationSettingGroupDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementConfigurationSettingTemplateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementConfigurationSimpleSettingDefinition returns request builder for DeviceManagementConfigurationSimpleSettingDefinition collection
func (b *DeviceManagementComplianceSettingsCollectionRequestBuilder) DeviceManagementConfigurationSimpleSettingDefinition() *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequestBuilder {
	bb := &DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequestBuilder is request builder for DeviceManagementConfigurationSimpleSettingDefinition collection rcn
type DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSimpleSettingDefinition collection
func (b *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequestBuilder) Request() *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequest {
	return &DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSimpleSettingDefinition item
func (b *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSimpleSettingDefinitionRequestBuilder {
	bb := &DeviceManagementConfigurationSimpleSettingDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequest is request for DeviceManagementConfigurationSimpleSettingDefinition collection
type DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSimpleSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSimpleSettingDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSimpleSettingDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSimpleSettingDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSimpleSettingDefinition collection, max N pages
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSimpleSettingDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSimpleSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSimpleSettingDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSimpleSettingDefinition collection
func (r *DeviceManagementComplianceSettingsCollectionDeviceManagementConfigurationSimpleSettingDefinitionCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSimpleSettingDefinition) (resObj *DeviceManagementConfigurationSimpleSettingDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementDerivedCredentialSettingsRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementDomainJoinConnectorRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementExchangeConnectorRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementExchangeOnPremisesPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementExportJobRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementIntegerSettingInstance returns request builder for DeviceManagementIntegerSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder) DeviceManagementIntegerSettingInstance() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequestBuilder {
	bb := &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequestBuilder is request builder for DeviceManagementIntegerSettingInstance collection rcn
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementIntegerSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequestBuilder) Request() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequest {
	return &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementIntegerSettingInstance item
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequestBuilder) ID(id string) *DeviceManagementIntegerSettingInstanceRequestBuilder {
	bb := &DeviceManagementIntegerSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequest is request for DeviceManagementIntegerSettingInstance collection
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementIntegerSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementIntegerSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementIntegerSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementIntegerSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementIntegerSettingInstance collection, max N pages
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementIntegerSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementIntegerSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequest) Get(ctx context.Context) ([]DeviceManagementIntegerSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementIntegerSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementIntegerSettingInstanceCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementIntegerSettingInstance) (resObj *DeviceManagementIntegerSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementIntentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementIntentAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementIntentDeviceSettingStateSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementIntentDeviceStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementIntentDeviceStateSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementIntentSettingCategory returns request builder for DeviceManagementIntentSettingCategory collection
func (b *DeviceManagementCategoriesCollectionRequestBuilder) DeviceManagementIntentSettingCategory() *DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequestBuilder {
	bb := &DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequestBuilder is request builder for DeviceManagementIntentSettingCategory collection rcn
type DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementIntentSettingCategory collection
func (b *DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequestBuilder) Request() *DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequest {
	return &DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementIntentSettingCategory item
func (b *DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequestBuilder) ID(id string) *DeviceManagementIntentSettingCategoryRequestBuilder {
	bb := &DeviceManagementIntentSettingCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequest is request for DeviceManagementIntentSettingCategory collection
type DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementIntentSettingCategory collection
func (r *DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementIntentSettingCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementIntentSettingCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementIntentSettingCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementIntentSettingCategory collection, max N pages
func (r *DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementIntentSettingCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementIntentSettingCategory collection
func (r *DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequest) Get(ctx context.Context) ([]DeviceManagementIntentSettingCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementIntentSettingCategory collection
func (r *DeviceManagementCategoriesCollectionDeviceManagementIntentSettingCategoryCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementIntentSettingCategory) (resObj *DeviceManagementIntentSettingCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementIntentUserStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementIntentUserStateSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementPartnerRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementReportsRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementResourceAccessProfileAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementResourceAccessProfileBaseRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementReusablePolicySettingRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementScriptRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementScriptAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementScriptDeviceStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementScriptGroupAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementScriptPolicySetItem returns request builder for DeviceManagementScriptPolicySetItem collection
func (b *PolicySetItemsCollectionRequestBuilder) DeviceManagementScriptPolicySetItem() *PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequestBuilder {
	bb := &PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequestBuilder is request builder for DeviceManagementScriptPolicySetItem collection rcn
type PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementScriptPolicySetItem collection
func (b *PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequestBuilder) Request() *PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequest {
	return &PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementScriptPolicySetItem item
func (b *PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequestBuilder) ID(id string) *DeviceManagementScriptPolicySetItemRequestBuilder {
	bb := &DeviceManagementScriptPolicySetItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequest is request for DeviceManagementScriptPolicySetItem collection
type PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementScriptPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementScriptPolicySetItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementScriptPolicySetItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementScriptPolicySetItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementScriptPolicySetItem collection, max N pages
func (r *PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementScriptPolicySetItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementScriptPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequest) Get(ctx context.Context) ([]DeviceManagementScriptPolicySetItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementScriptPolicySetItem collection
func (r *PolicySetItemsCollectionDeviceManagementScriptPolicySetItemCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementScriptPolicySetItem) (resObj *DeviceManagementScriptPolicySetItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementScriptRunSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementScriptUserStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementCategoriesCollectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementStringSettingInstance returns request builder for DeviceManagementStringSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionRequestBuilder) DeviceManagementStringSettingInstance() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequestBuilder {
	bb := &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequestBuilder is request builder for DeviceManagementStringSettingInstance collection rcn
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementStringSettingInstance collection
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequestBuilder) Request() *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequest {
	return &DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementStringSettingInstance item
func (b *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequestBuilder) ID(id string) *DeviceManagementStringSettingInstanceRequestBuilder {
	bb := &DeviceManagementStringSettingInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequest is request for DeviceManagementStringSettingInstance collection
type DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementStringSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementStringSettingInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementStringSettingInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementStringSettingInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementStringSettingInstance collection, max N pages
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementStringSettingInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementStringSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequest) Get(ctx context.Context) ([]DeviceManagementStringSettingInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementStringSettingInstance collection
func (r *DeviceManagementAbstractComplexSettingInstanceValueCollectionDeviceManagementStringSettingInstanceCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementStringSettingInstance) (resObj *DeviceManagementStringSettingInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementTemplateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementTemplateSettingCategory returns request builder for DeviceManagementTemplateSettingCategory collection
func (b *DeviceManagementCategoriesCollectionRequestBuilder) DeviceManagementTemplateSettingCategory() *DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequestBuilder {
	bb := &DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequestBuilder is request builder for DeviceManagementTemplateSettingCategory collection rcn
type DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementTemplateSettingCategory collection
func (b *DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequestBuilder) Request() *DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequest {
	return &DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementTemplateSettingCategory item
func (b *DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequestBuilder) ID(id string) *DeviceManagementTemplateSettingCategoryRequestBuilder {
	bb := &DeviceManagementTemplateSettingCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequest is request for DeviceManagementTemplateSettingCategory collection
type DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementTemplateSettingCategory collection
func (r *DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementTemplateSettingCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementTemplateSettingCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementTemplateSettingCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementTemplateSettingCategory collection, max N pages
func (r *DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementTemplateSettingCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementTemplateSettingCategory collection
func (r *DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequest) Get(ctx context.Context) ([]DeviceManagementTemplateSettingCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementTemplateSettingCategory collection
func (r *DeviceManagementCategoriesCollectionDeviceManagementTemplateSettingCategoryCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementTemplateSettingCategory) (resObj *DeviceManagementTemplateSettingCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DeviceManagementTroubleshootingEventsCollectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceRegistrationPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceSetupConfigurationRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceShellScriptRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceAppManagementManagedEBooksCollectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DeviceManagementRoleDefinitionsCollectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DeviceManagementAlertRecordDeviceManagementSetPortalNotificationAsSentRequestParameter undocumented
type DeviceManagementAlertRecordDeviceManagementSetPortalNotificationAsSentRequestParameter struct {
}

// AlertRecords returns request builder for DeviceManagementAlertRecord collection
func (b *DeviceManagementMonitoringRequestBuilder) AlertRecords() *DeviceManagementMonitoringAlertRecordsCollectionRequestBuilder {
	bb := &DeviceManagementMonitoringAlertRecordsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alertRecords"
	return bb
}

// DeviceManagementMonitoringAlertRecordsCollectionRequestBuilder is request builder for DeviceManagementAlertRecord collection rcn
type DeviceManagementMonitoringAlertRecordsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementAlertRecord collection
func (b *DeviceManagementMonitoringAlertRecordsCollectionRequestBuilder) Request() *DeviceManagementMonitoringAlertRecordsCollectionRequest {
	return &DeviceManagementMonitoringAlertRecordsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementAlertRecord item
func (b *DeviceManagementMonitoringAlertRecordsCollectionRequestBuilder) ID(id string) *DeviceManagementAlertRecordRequestBuilder {
	bb := &DeviceManagementAlertRecordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementMonitoringAlertRecordsCollectionRequest is request for DeviceManagementAlertRecord collection
type DeviceManagementMonitoringAlertRecordsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementAlertRecord collection
func (r *DeviceManagementMonitoringAlertRecordsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementAlertRecord, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementAlertRecord
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementAlertRecord
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementAlertRecord collection, max N pages
func (r *DeviceManagementMonitoringAlertRecordsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementAlertRecord, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementAlertRecord collection
func (r *DeviceManagementMonitoringAlertRecordsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementAlertRecord, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementAlertRecord collection
func (r *DeviceManagementMonitoringAlertRecordsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementAlertRecord) (resObj *DeviceManagementAlertRecord, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AlertRules returns request builder for DeviceManagementAlertRule collection
func (b *DeviceManagementMonitoringRequestBuilder) AlertRules() *DeviceManagementMonitoringAlertRulesCollectionRequestBuilder {
	bb := &DeviceManagementMonitoringAlertRulesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alertRules"
	return bb
}

// DeviceManagementMonitoringAlertRulesCollectionRequestBuilder is request builder for DeviceManagementAlertRule collection rcn
type DeviceManagementMonitoringAlertRulesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementAlertRule collection
func (b *DeviceManagementMonitoringAlertRulesCollectionRequestBuilder) Request() *DeviceManagementMonitoringAlertRulesCollectionRequest {
	return &DeviceManagementMonitoringAlertRulesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementAlertRule item
func (b *DeviceManagementMonitoringAlertRulesCollectionRequestBuilder) ID(id string) *DeviceManagementAlertRuleRequestBuilder {
	bb := &DeviceManagementAlertRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementMonitoringAlertRulesCollectionRequest is request for DeviceManagementAlertRule collection
type DeviceManagementMonitoringAlertRulesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementAlertRule collection
func (r *DeviceManagementMonitoringAlertRulesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementAlertRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementAlertRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementAlertRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementAlertRule collection, max N pages
func (r *DeviceManagementMonitoringAlertRulesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementAlertRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementAlertRule collection
func (r *DeviceManagementMonitoringAlertRulesCollectionRequest) Get(ctx context.Context) ([]DeviceManagementAlertRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementAlertRule collection
func (r *DeviceManagementMonitoringAlertRulesCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementAlertRule) (resObj *DeviceManagementAlertRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
