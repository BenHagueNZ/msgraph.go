// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// AndroidManagedAppProtectionCollectionHasPayloadLinksRequestParameter undocumented
type AndroidManagedAppProtectionCollectionHasPayloadLinksRequestParameter struct {
	// PayloadIDs undocumented
	PayloadIDs []string `json:"payloadIds,omitempty"`
}

// AndroidDeviceOwnerEnrollmentProfileCreateTokenRequestParameter undocumented
type AndroidDeviceOwnerEnrollmentProfileCreateTokenRequestParameter struct {
	// TokenValidityInSeconds undocumented
	TokenValidityInSeconds *int `json:"tokenValidityInSeconds,omitempty"`
}

// AndroidDeviceOwnerEnrollmentProfileRevokeTokenRequestParameter undocumented
type AndroidDeviceOwnerEnrollmentProfileRevokeTokenRequestParameter struct {
}

// AndroidForWorkEnrollmentProfileCreateTokenRequestParameter undocumented
type AndroidForWorkEnrollmentProfileCreateTokenRequestParameter struct {
	// TokenValidityInSeconds undocumented
	TokenValidityInSeconds *int `json:"tokenValidityInSeconds,omitempty"`
}

// AndroidForWorkEnrollmentProfileRevokeTokenRequestParameter undocumented
type AndroidForWorkEnrollmentProfileRevokeTokenRequestParameter struct {
}

// AndroidForWorkSettingsCompleteSignupRequestParameter undocumented
type AndroidForWorkSettingsCompleteSignupRequestParameter struct {
	// EnterpriseToken undocumented
	EnterpriseToken *string `json:"enterpriseToken,omitempty"`
}

// AndroidForWorkSettingsRequestSignupURLRequestParameter undocumented
type AndroidForWorkSettingsRequestSignupURLRequestParameter struct {
	// HostName undocumented
	HostName *string `json:"hostName,omitempty"`
}

// AndroidForWorkSettingsSyncAppsRequestParameter undocumented
type AndroidForWorkSettingsSyncAppsRequestParameter struct {
}

// AndroidForWorkSettingsUnbindRequestParameter undocumented
type AndroidForWorkSettingsUnbindRequestParameter struct {
}

// AndroidManagedStoreAccountEnterpriseSettingsAddAppsRequestParameter undocumented
type AndroidManagedStoreAccountEnterpriseSettingsAddAppsRequestParameter struct {
	// ProductIDs undocumented
	ProductIDs []string `json:"productIds,omitempty"`
}

// AndroidManagedStoreAccountEnterpriseSettingsApproveAppsRequestParameter undocumented
type AndroidManagedStoreAccountEnterpriseSettingsApproveAppsRequestParameter struct {
	// PackageIDs undocumented
	PackageIDs []string `json:"packageIds,omitempty"`
	// ApproveAllPermissions undocumented
	ApproveAllPermissions *bool `json:"approveAllPermissions,omitempty"`
}

// AndroidManagedStoreAccountEnterpriseSettingsCompleteSignupRequestParameter undocumented
type AndroidManagedStoreAccountEnterpriseSettingsCompleteSignupRequestParameter struct {
	// EnterpriseToken undocumented
	EnterpriseToken *string `json:"enterpriseToken,omitempty"`
}

// AndroidManagedStoreAccountEnterpriseSettingsCreateGooglePlayWebTokenRequestParameter undocumented
type AndroidManagedStoreAccountEnterpriseSettingsCreateGooglePlayWebTokenRequestParameter struct {
	// ParentURI undocumented
	ParentURI *string `json:"parentUri,omitempty"`
}

// AndroidManagedStoreAccountEnterpriseSettingsRequestSignupURLRequestParameter undocumented
type AndroidManagedStoreAccountEnterpriseSettingsRequestSignupURLRequestParameter struct {
	// HostName undocumented
	HostName *string `json:"hostName,omitempty"`
}

// AndroidManagedStoreAccountEnterpriseSettingsSetAndroidDeviceOwnerFullyManagedEnrollmentStateRequestParameter undocumented
type AndroidManagedStoreAccountEnterpriseSettingsSetAndroidDeviceOwnerFullyManagedEnrollmentStateRequestParameter struct {
	// Enabled undocumented
	Enabled *bool `json:"enabled,omitempty"`
}

// AndroidManagedStoreAccountEnterpriseSettingsSyncAppsRequestParameter undocumented
type AndroidManagedStoreAccountEnterpriseSettingsSyncAppsRequestParameter struct {
}

// AndroidManagedStoreAccountEnterpriseSettingsUnbindRequestParameter undocumented
type AndroidManagedStoreAccountEnterpriseSettingsUnbindRequestParameter struct {
}

// RootCertificate is navigation property rn
func (b *AndroidCertificateProfileBaseRequestBuilder) RootCertificate() *AndroidTrustedRootCertificateRequestBuilder {
	bb := &AndroidTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificate"
	return bb
}

// RootCertificate is navigation property rn
func (b *AndroidDeviceOwnerCertificateProfileBaseRequestBuilder) RootCertificate() *AndroidDeviceOwnerTrustedRootCertificateRequestBuilder {
	bb := &AndroidDeviceOwnerTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificate"
	return bb
}

// DerivedCredentialSettings is navigation property rn
func (b *AndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationRequestBuilder) DerivedCredentialSettings() *DeviceManagementDerivedCredentialSettingsRequestBuilder {
	bb := &DeviceManagementDerivedCredentialSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/derivedCredentialSettings"
	return bb
}

// DerivedCredentialSettings is navigation property rn
func (b *AndroidDeviceOwnerEnterpriseWiFiConfigurationRequestBuilder) DerivedCredentialSettings() *DeviceManagementDerivedCredentialSettingsRequestBuilder {
	bb := &DeviceManagementDerivedCredentialSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/derivedCredentialSettings"
	return bb
}

// IdentityCertificateForClientAuthentication is navigation property rn
func (b *AndroidDeviceOwnerEnterpriseWiFiConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *AndroidDeviceOwnerCertificateProfileBaseRequestBuilder {
	bb := &AndroidDeviceOwnerCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// RootCertificateForServerValidation is navigation property rn
func (b *AndroidDeviceOwnerEnterpriseWiFiConfigurationRequestBuilder) RootCertificateForServerValidation() *AndroidDeviceOwnerTrustedRootCertificateRequestBuilder {
	bb := &AndroidDeviceOwnerTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificateForServerValidation"
	return bb
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AndroidDeviceOwnerImportedPFXCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AndroidDeviceOwnerImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AndroidDeviceOwnerPkcsCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AndroidDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AndroidDeviceOwnerScepCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AndroidDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DerivedCredentialSettings is navigation property rn
func (b *AndroidDeviceOwnerVPNConfigurationRequestBuilder) DerivedCredentialSettings() *DeviceManagementDerivedCredentialSettingsRequestBuilder {
	bb := &DeviceManagementDerivedCredentialSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/derivedCredentialSettings"
	return bb
}

// IdentityCertificate is navigation property rn
func (b *AndroidDeviceOwnerVPNConfigurationRequestBuilder) IdentityCertificate() *AndroidDeviceOwnerCertificateProfileBaseRequestBuilder {
	bb := &AndroidDeviceOwnerCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}

// IdentityCertificate is navigation property rn
func (b *AndroidEasEmailProfileConfigurationRequestBuilder) IdentityCertificate() *AndroidCertificateProfileBaseRequestBuilder {
	bb := &AndroidCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}

// SmimeSigningCertificate is navigation property rn
func (b *AndroidEasEmailProfileConfigurationRequestBuilder) SmimeSigningCertificate() *AndroidCertificateProfileBaseRequestBuilder {
	bb := &AndroidCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/smimeSigningCertificate"
	return bb
}

// IdentityCertificateForClientAuthentication is navigation property rn
func (b *AndroidEnterpriseWiFiConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *AndroidCertificateProfileBaseRequestBuilder {
	bb := &AndroidCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// RootCertificateForServerValidation is navigation property rn
func (b *AndroidEnterpriseWiFiConfigurationRequestBuilder) RootCertificateForServerValidation() *AndroidTrustedRootCertificateRequestBuilder {
	bb := &AndroidTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificateForServerValidation"
	return bb
}

// RootCertificate is navigation property rn
func (b *AndroidForWorkCertificateProfileBaseRequestBuilder) RootCertificate() *AndroidForWorkTrustedRootCertificateRequestBuilder {
	bb := &AndroidForWorkTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificate"
	return bb
}

// IdentityCertificate is navigation property rn
func (b *AndroidForWorkEasEmailProfileBaseRequestBuilder) IdentityCertificate() *AndroidForWorkCertificateProfileBaseRequestBuilder {
	bb := &AndroidForWorkCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}

// IdentityCertificateForClientAuthentication is navigation property rn
func (b *AndroidForWorkEnterpriseWiFiConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *AndroidForWorkCertificateProfileBaseRequestBuilder {
	bb := &AndroidForWorkCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// RootCertificateForServerValidation is navigation property rn
func (b *AndroidForWorkEnterpriseWiFiConfigurationRequestBuilder) RootCertificateForServerValidation() *AndroidForWorkTrustedRootCertificateRequestBuilder {
	bb := &AndroidForWorkTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificateForServerValidation"
	return bb
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AndroidForWorkImportedPFXCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AndroidForWorkImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AndroidForWorkPkcsCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AndroidForWorkPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AndroidForWorkScepCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AndroidForWorkScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IdentityCertificate is navigation property rn
func (b *AndroidForWorkVPNConfigurationRequestBuilder) IdentityCertificate() *AndroidForWorkCertificateProfileBaseRequestBuilder {
	bb := &AndroidForWorkCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AndroidImportedPFXCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AndroidImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Apps returns request builder for ManagedMobileApp collection
func (b *AndroidManagedAppProtectionRequestBuilder) Apps() *AndroidManagedAppProtectionAppsCollectionRequestBuilder {
	bb := &AndroidManagedAppProtectionAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/apps"
	return bb
}

// AndroidManagedAppProtectionAppsCollectionRequestBuilder is request builder for ManagedMobileApp collection rcn
type AndroidManagedAppProtectionAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedMobileApp collection
func (b *AndroidManagedAppProtectionAppsCollectionRequestBuilder) Request() *AndroidManagedAppProtectionAppsCollectionRequest {
	return &AndroidManagedAppProtectionAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedMobileApp item
func (b *AndroidManagedAppProtectionAppsCollectionRequestBuilder) ID(id string) *ManagedMobileAppRequestBuilder {
	bb := &ManagedMobileAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidManagedAppProtectionAppsCollectionRequest is request for ManagedMobileApp collection
type AndroidManagedAppProtectionAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedMobileApp collection
func (r *AndroidManagedAppProtectionAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedMobileApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedMobileApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedMobileApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedMobileApp collection, max N pages
func (r *AndroidManagedAppProtectionAppsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedMobileApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedMobileApp collection
func (r *AndroidManagedAppProtectionAppsCollectionRequest) Get(ctx context.Context) ([]ManagedMobileApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedMobileApp collection
func (r *AndroidManagedAppProtectionAppsCollectionRequest) Add(ctx context.Context, reqObj *ManagedMobileApp) (resObj *ManagedMobileApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeploymentSummary is navigation property rn
func (b *AndroidManagedAppProtectionRequestBuilder) DeploymentSummary() *ManagedAppPolicyDeploymentSummaryRequestBuilder {
	bb := &ManagedAppPolicyDeploymentSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deploymentSummary"
	return bb
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AndroidPkcsCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AndroidPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AndroidScepCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AndroidScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IdentityCertificate is navigation property rn
func (b *AndroidVPNConfigurationRequestBuilder) IdentityCertificate() *AndroidCertificateProfileBaseRequestBuilder {
	bb := &AndroidCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}

// RootCertificate is navigation property rn
func (b *AndroidWorkProfileCertificateProfileBaseRequestBuilder) RootCertificate() *AndroidWorkProfileTrustedRootCertificateRequestBuilder {
	bb := &AndroidWorkProfileTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificate"
	return bb
}

// IdentityCertificate is navigation property rn
func (b *AndroidWorkProfileEasEmailProfileBaseRequestBuilder) IdentityCertificate() *AndroidWorkProfileCertificateProfileBaseRequestBuilder {
	bb := &AndroidWorkProfileCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}

// IdentityCertificateForClientAuthentication is navigation property rn
func (b *AndroidWorkProfileEnterpriseWiFiConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *AndroidWorkProfileCertificateProfileBaseRequestBuilder {
	bb := &AndroidWorkProfileCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// RootCertificateForServerValidation is navigation property rn
func (b *AndroidWorkProfileEnterpriseWiFiConfigurationRequestBuilder) RootCertificateForServerValidation() *AndroidWorkProfileTrustedRootCertificateRequestBuilder {
	bb := &AndroidWorkProfileTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificateForServerValidation"
	return bb
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AndroidWorkProfilePkcsCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AndroidWorkProfilePkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AndroidWorkProfileScepCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AndroidWorkProfileScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IdentityCertificate is navigation property rn
func (b *AndroidWorkProfileVPNConfigurationRequestBuilder) IdentityCertificate() *AndroidWorkProfileCertificateProfileBaseRequestBuilder {
	bb := &AndroidWorkProfileCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}

// AndroidCertificateProfileBase returns request builder for AndroidCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidCertificateProfileBase() *DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequestBuilder is request builder for AndroidCertificateProfileBase collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidCertificateProfileBase item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequestBuilder) ID(id string) *AndroidCertificateProfileBaseRequestBuilder {
	bb := &AndroidCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequest is request for AndroidCertificateProfileBase collection
type DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidCertificateProfileBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidCertificateProfileBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidCertificateProfileBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidCertificateProfileBase collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidCertificateProfileBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequest) Get(ctx context.Context) ([]AndroidCertificateProfileBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCertificateProfileBaseCollectionRequest) Add(ctx context.Context, reqObj *AndroidCertificateProfileBase) (resObj *AndroidCertificateProfileBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidCompliancePolicy returns request builder for AndroidCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) AndroidCompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder is request builder for AndroidCompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidCompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequestBuilder) ID(id string) *AndroidCompliancePolicyRequestBuilder {
	bb := &AndroidCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest is request for AndroidCompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidCompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]AndroidCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *AndroidCompliancePolicy) (resObj *AndroidCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidCustomConfiguration returns request builder for AndroidCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidCustomConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder is request builder for AndroidCustomConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidCustomConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequestBuilder) ID(id string) *AndroidCustomConfigurationRequestBuilder {
	bb := &AndroidCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest is request for AndroidCustomConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidCustomConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidCustomConfiguration) (resObj *AndroidCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AndroidDeviceComplianceLocalActionBaseRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// AndroidDeviceOwnerCertificateProfileBase returns request builder for AndroidDeviceOwnerCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidDeviceOwnerCertificateProfileBase() *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequestBuilder is request builder for AndroidDeviceOwnerCertificateProfileBase collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidDeviceOwnerCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidDeviceOwnerCertificateProfileBase item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequestBuilder) ID(id string) *AndroidDeviceOwnerCertificateProfileBaseRequestBuilder {
	bb := &AndroidDeviceOwnerCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequest is request for AndroidDeviceOwnerCertificateProfileBase collection
type DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidDeviceOwnerCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidDeviceOwnerCertificateProfileBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidDeviceOwnerCertificateProfileBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidDeviceOwnerCertificateProfileBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidDeviceOwnerCertificateProfileBase collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidDeviceOwnerCertificateProfileBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidDeviceOwnerCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequest) Get(ctx context.Context) ([]AndroidDeviceOwnerCertificateProfileBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidDeviceOwnerCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerCertificateProfileBaseCollectionRequest) Add(ctx context.Context, reqObj *AndroidDeviceOwnerCertificateProfileBase) (resObj *AndroidDeviceOwnerCertificateProfileBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidDeviceOwnerCompliancePolicy returns request builder for AndroidDeviceOwnerCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) AndroidDeviceOwnerCompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequestBuilder is request builder for AndroidDeviceOwnerCompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidDeviceOwnerCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidDeviceOwnerCompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequestBuilder) ID(id string) *AndroidDeviceOwnerCompliancePolicyRequestBuilder {
	bb := &AndroidDeviceOwnerCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequest is request for AndroidDeviceOwnerCompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidDeviceOwnerCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidDeviceOwnerCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidDeviceOwnerCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidDeviceOwnerCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidDeviceOwnerCompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidDeviceOwnerCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidDeviceOwnerCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]AndroidDeviceOwnerCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidDeviceOwnerCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidDeviceOwnerCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *AndroidDeviceOwnerCompliancePolicy) (resObj *AndroidDeviceOwnerCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration returns request builder for AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder is request builder for AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder) ID(id string) *AndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationRequestBuilder {
	bb := &AndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequest is request for AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerDerivedCredentialAuthenticationConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration) (resObj *AndroidDeviceOwnerDerivedCredentialAuthenticationConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AndroidDeviceOwnerEnrollmentProfileRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// AndroidDeviceOwnerGeneralDeviceConfiguration returns request builder for AndroidDeviceOwnerGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidDeviceOwnerGeneralDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequestBuilder is request builder for AndroidDeviceOwnerGeneralDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidDeviceOwnerGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidDeviceOwnerGeneralDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *AndroidDeviceOwnerGeneralDeviceConfigurationRequestBuilder {
	bb := &AndroidDeviceOwnerGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequest is request for AndroidDeviceOwnerGeneralDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidDeviceOwnerGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidDeviceOwnerGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidDeviceOwnerGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidDeviceOwnerGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidDeviceOwnerGeneralDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidDeviceOwnerGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidDeviceOwnerGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidDeviceOwnerGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidDeviceOwnerGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidDeviceOwnerGeneralDeviceConfiguration) (resObj *AndroidDeviceOwnerGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidDeviceOwnerCertificateProfileBase is navigation property rn
func (b *AndroidDeviceOwnerImportedPFXCertificateProfileRequestBuilder) AndroidDeviceOwnerCertificateProfileBase() *AndroidDeviceOwnerCertificateProfileBaseRequestBuilder {
	bb := &AndroidDeviceOwnerCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AndroidDeviceOwnerCertificateProfileBase is navigation property rn
func (b *AndroidDeviceOwnerPkcsCertificateProfileRequestBuilder) AndroidDeviceOwnerCertificateProfileBase() *AndroidDeviceOwnerCertificateProfileBaseRequestBuilder {
	bb := &AndroidDeviceOwnerCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AndroidDeviceOwnerCertificateProfileBase is navigation property rn
func (b *AndroidDeviceOwnerScepCertificateProfileRequestBuilder) AndroidDeviceOwnerCertificateProfileBase() *AndroidDeviceOwnerCertificateProfileBaseRequestBuilder {
	bb := &AndroidDeviceOwnerCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AndroidDeviceOwnerTrustedRootCertificate returns request builder for AndroidDeviceOwnerTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidDeviceOwnerTrustedRootCertificate() *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequestBuilder is request builder for AndroidDeviceOwnerTrustedRootCertificate collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidDeviceOwnerTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidDeviceOwnerTrustedRootCertificate item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequestBuilder) ID(id string) *AndroidDeviceOwnerTrustedRootCertificateRequestBuilder {
	bb := &AndroidDeviceOwnerTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequest is request for AndroidDeviceOwnerTrustedRootCertificate collection
type DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidDeviceOwnerTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidDeviceOwnerTrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidDeviceOwnerTrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidDeviceOwnerTrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidDeviceOwnerTrustedRootCertificate collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidDeviceOwnerTrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidDeviceOwnerTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequest) Get(ctx context.Context) ([]AndroidDeviceOwnerTrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidDeviceOwnerTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerTrustedRootCertificateCollectionRequest) Add(ctx context.Context, reqObj *AndroidDeviceOwnerTrustedRootCertificate) (resObj *AndroidDeviceOwnerTrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidDeviceOwnerWiFiConfiguration returns request builder for AndroidDeviceOwnerWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidDeviceOwnerWiFiConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequestBuilder is request builder for AndroidDeviceOwnerWiFiConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidDeviceOwnerWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidDeviceOwnerWiFiConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequestBuilder) ID(id string) *AndroidDeviceOwnerWiFiConfigurationRequestBuilder {
	bb := &AndroidDeviceOwnerWiFiConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequest is request for AndroidDeviceOwnerWiFiConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidDeviceOwnerWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidDeviceOwnerWiFiConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidDeviceOwnerWiFiConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidDeviceOwnerWiFiConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidDeviceOwnerWiFiConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidDeviceOwnerWiFiConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidDeviceOwnerWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidDeviceOwnerWiFiConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidDeviceOwnerWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidDeviceOwnerWiFiConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidDeviceOwnerWiFiConfiguration) (resObj *AndroidDeviceOwnerWiFiConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidEasEmailProfileConfiguration returns request builder for AndroidEasEmailProfileConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidEasEmailProfileConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequestBuilder is request builder for AndroidEasEmailProfileConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidEasEmailProfileConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidEasEmailProfileConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequestBuilder) ID(id string) *AndroidEasEmailProfileConfigurationRequestBuilder {
	bb := &AndroidEasEmailProfileConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequest is request for AndroidEasEmailProfileConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidEasEmailProfileConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidEasEmailProfileConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidEasEmailProfileConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidEasEmailProfileConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidEasEmailProfileConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidEasEmailProfileConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidEasEmailProfileConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidEasEmailProfileConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidEasEmailProfileConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidEasEmailProfileConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidEasEmailProfileConfiguration) (resObj *AndroidEasEmailProfileConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidForWorkApp returns request builder for AndroidForWorkApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) AndroidForWorkApp() *DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequestBuilder is request builder for AndroidForWorkApp collection rcn
type DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkApp collection
func (b *DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkApp item
func (b *DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequestBuilder) ID(id string) *AndroidForWorkAppRequestBuilder {
	bb := &AndroidForWorkAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequest is request for AndroidForWorkApp collection
type DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidForWorkAppCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkApp) (resObj *AndroidForWorkApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AndroidForWorkAppConfigurationSchemaRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// AndroidForWorkCertificateProfileBase returns request builder for AndroidForWorkCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidForWorkCertificateProfileBase() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequestBuilder is request builder for AndroidForWorkCertificateProfileBase collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkCertificateProfileBase item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequestBuilder) ID(id string) *AndroidForWorkCertificateProfileBaseRequestBuilder {
	bb := &AndroidForWorkCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequest is request for AndroidForWorkCertificateProfileBase collection
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkCertificateProfileBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkCertificateProfileBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkCertificateProfileBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkCertificateProfileBase collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkCertificateProfileBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkCertificateProfileBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCertificateProfileBaseCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkCertificateProfileBase) (resObj *AndroidForWorkCertificateProfileBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidForWorkCompliancePolicy returns request builder for AndroidForWorkCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) AndroidForWorkCompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequestBuilder is request builder for AndroidForWorkCompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkCompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequestBuilder) ID(id string) *AndroidForWorkCompliancePolicyRequestBuilder {
	bb := &AndroidForWorkCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequest is request for AndroidForWorkCompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkCompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidForWorkCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkCompliancePolicy) (resObj *AndroidForWorkCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidForWorkCustomConfiguration returns request builder for AndroidForWorkCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidForWorkCustomConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequestBuilder is request builder for AndroidForWorkCustomConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkCustomConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequestBuilder) ID(id string) *AndroidForWorkCustomConfigurationRequestBuilder {
	bb := &AndroidForWorkCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequest is request for AndroidForWorkCustomConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkCustomConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkCustomConfiguration) (resObj *AndroidForWorkCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidForWorkEasEmailProfileBase returns request builder for AndroidForWorkEasEmailProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidForWorkEasEmailProfileBase() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequestBuilder is request builder for AndroidForWorkEasEmailProfileBase collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkEasEmailProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkEasEmailProfileBase item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequestBuilder) ID(id string) *AndroidForWorkEasEmailProfileBaseRequestBuilder {
	bb := &AndroidForWorkEasEmailProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequest is request for AndroidForWorkEasEmailProfileBase collection
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkEasEmailProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkEasEmailProfileBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkEasEmailProfileBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkEasEmailProfileBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkEasEmailProfileBase collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkEasEmailProfileBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkEasEmailProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkEasEmailProfileBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkEasEmailProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkEasEmailProfileBaseCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkEasEmailProfileBase) (resObj *AndroidForWorkEasEmailProfileBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AndroidForWorkEnrollmentProfileRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// AndroidForWorkGeneralDeviceConfiguration returns request builder for AndroidForWorkGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidForWorkGeneralDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequestBuilder is request builder for AndroidForWorkGeneralDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkGeneralDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *AndroidForWorkGeneralDeviceConfigurationRequestBuilder {
	bb := &AndroidForWorkGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequest is request for AndroidForWorkGeneralDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkGeneralDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkGeneralDeviceConfiguration) (resObj *AndroidForWorkGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidCertificateProfileBase is navigation property rn
func (b *AndroidForWorkImportedPFXCertificateProfileRequestBuilder) AndroidCertificateProfileBase() *AndroidCertificateProfileBaseRequestBuilder {
	bb := &AndroidCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AndroidForWorkMobileAppConfiguration returns request builder for AndroidForWorkMobileAppConfiguration collection
func (b *DeviceAppManagementMobileAppConfigurationsCollectionRequestBuilder) AndroidForWorkMobileAppConfiguration() *DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequestBuilder is request builder for AndroidForWorkMobileAppConfiguration collection rcn
type DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkMobileAppConfiguration collection
func (b *DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequest {
	return &DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkMobileAppConfiguration item
func (b *DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequestBuilder) ID(id string) *AndroidForWorkMobileAppConfigurationRequestBuilder {
	bb := &AndroidForWorkMobileAppConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequest is request for AndroidForWorkMobileAppConfiguration collection
type DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkMobileAppConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkMobileAppConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkMobileAppConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkMobileAppConfiguration collection, max N pages
func (r *DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkMobileAppConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkMobileAppConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionAndroidForWorkMobileAppConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkMobileAppConfiguration) (resObj *AndroidForWorkMobileAppConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidForWorkCertificateProfileBase is navigation property rn
func (b *AndroidForWorkPkcsCertificateProfileRequestBuilder) AndroidForWorkCertificateProfileBase() *AndroidForWorkCertificateProfileBaseRequestBuilder {
	bb := &AndroidForWorkCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AndroidForWorkCertificateProfileBase is navigation property rn
func (b *AndroidForWorkScepCertificateProfileRequestBuilder) AndroidForWorkCertificateProfileBase() *AndroidForWorkCertificateProfileBaseRequestBuilder {
	bb := &AndroidForWorkCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// Entity is navigation property rn
func (b *AndroidForWorkSettingsRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// AndroidForWorkTrustedRootCertificate returns request builder for AndroidForWorkTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidForWorkTrustedRootCertificate() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequestBuilder is request builder for AndroidForWorkTrustedRootCertificate collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkTrustedRootCertificate item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequestBuilder) ID(id string) *AndroidForWorkTrustedRootCertificateRequestBuilder {
	bb := &AndroidForWorkTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequest is request for AndroidForWorkTrustedRootCertificate collection
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkTrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkTrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkTrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkTrustedRootCertificate collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkTrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkTrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkTrustedRootCertificateCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkTrustedRootCertificate) (resObj *AndroidForWorkTrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidForWorkVPNConfiguration returns request builder for AndroidForWorkVPNConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidForWorkVPNConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequestBuilder is request builder for AndroidForWorkVPNConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkVPNConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkVPNConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequestBuilder) ID(id string) *AndroidForWorkVPNConfigurationRequestBuilder {
	bb := &AndroidForWorkVPNConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequest is request for AndroidForWorkVPNConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkVPNConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkVPNConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkVPNConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkVPNConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkVPNConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkVPNConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkVPNConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkVPNConfiguration) (resObj *AndroidForWorkVPNConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidForWorkWiFiConfiguration returns request builder for AndroidForWorkWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidForWorkWiFiConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequestBuilder is request builder for AndroidForWorkWiFiConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidForWorkWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidForWorkWiFiConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequestBuilder) ID(id string) *AndroidForWorkWiFiConfigurationRequestBuilder {
	bb := &AndroidForWorkWiFiConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequest is request for AndroidForWorkWiFiConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidForWorkWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidForWorkWiFiConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidForWorkWiFiConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidForWorkWiFiConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidForWorkWiFiConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidForWorkWiFiConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidForWorkWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidForWorkWiFiConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidForWorkWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidForWorkWiFiConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidForWorkWiFiConfiguration) (resObj *AndroidForWorkWiFiConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidGeneralDeviceConfiguration returns request builder for AndroidGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidGeneralDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder is request builder for AndroidGeneralDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidGeneralDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *AndroidGeneralDeviceConfigurationRequestBuilder {
	bb := &AndroidGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest is request for AndroidGeneralDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidGeneralDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidGeneralDeviceConfiguration) (resObj *AndroidGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidCertificateProfileBase is navigation property rn
func (b *AndroidImportedPFXCertificateProfileRequestBuilder) AndroidCertificateProfileBase() *AndroidCertificateProfileBaseRequestBuilder {
	bb := &AndroidCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AndroidManagedAppRegistration returns request builder for AndroidManagedAppRegistration collection
func (b *DeviceAppManagementManagedAppRegistrationsCollectionRequestBuilder) AndroidManagedAppRegistration() *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder is request builder for AndroidManagedAppRegistration collection rcn
type DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidManagedAppRegistration collection
func (b *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest {
	return &DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidManagedAppRegistration item
func (b *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequestBuilder) ID(id string) *AndroidManagedAppRegistrationRequestBuilder {
	bb := &AndroidManagedAppRegistrationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest is request for AndroidManagedAppRegistration collection
type DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidManagedAppRegistration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidManagedAppRegistration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidManagedAppRegistration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidManagedAppRegistration collection, max N pages
func (r *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidManagedAppRegistration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest) Get(ctx context.Context) ([]AndroidManagedAppRegistration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionAndroidManagedAppRegistrationCollectionRequest) Add(ctx context.Context, reqObj *AndroidManagedAppRegistration) (resObj *AndroidManagedAppRegistration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AndroidManagedStoreAccountEnterpriseSettingsRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// AndroidManagedStoreApp returns request builder for AndroidManagedStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) AndroidManagedStoreApp() *DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequestBuilder is request builder for AndroidManagedStoreApp collection rcn
type DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidManagedStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidManagedStoreApp item
func (b *DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequestBuilder) ID(id string) *AndroidManagedStoreAppRequestBuilder {
	bb := &AndroidManagedStoreAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequest is request for AndroidManagedStoreApp collection
type DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidManagedStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidManagedStoreApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidManagedStoreApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidManagedStoreApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidManagedStoreApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidManagedStoreApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidManagedStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequest) Get(ctx context.Context) ([]AndroidManagedStoreApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidManagedStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidManagedStoreAppCollectionRequest) Add(ctx context.Context, reqObj *AndroidManagedStoreApp) (resObj *AndroidManagedStoreApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidManagedStoreAppConfiguration returns request builder for AndroidManagedStoreAppConfiguration collection
func (b *DeviceAppManagementMobileAppConfigurationsCollectionRequestBuilder) AndroidManagedStoreAppConfiguration() *DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequestBuilder is request builder for AndroidManagedStoreAppConfiguration collection rcn
type DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidManagedStoreAppConfiguration collection
func (b *DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequest {
	return &DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidManagedStoreAppConfiguration item
func (b *DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequestBuilder) ID(id string) *AndroidManagedStoreAppConfigurationRequestBuilder {
	bb := &AndroidManagedStoreAppConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequest is request for AndroidManagedStoreAppConfiguration collection
type DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidManagedStoreAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidManagedStoreAppConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidManagedStoreAppConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidManagedStoreAppConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidManagedStoreAppConfiguration collection, max N pages
func (r *DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidManagedStoreAppConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidManagedStoreAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidManagedStoreAppConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidManagedStoreAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionAndroidManagedStoreAppConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidManagedStoreAppConfiguration) (resObj *AndroidManagedStoreAppConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AndroidManagedStoreAppConfigurationSchemaRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// AndroidOMACpConfiguration returns request builder for AndroidOMACpConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidOMACpConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequestBuilder is request builder for AndroidOMACpConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidOMACpConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidOMACpConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequestBuilder) ID(id string) *AndroidOMACpConfigurationRequestBuilder {
	bb := &AndroidOMACpConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequest is request for AndroidOMACpConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidOMACpConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidOMACpConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidOMACpConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidOMACpConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidOMACpConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidOMACpConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidOMACpConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidOMACpConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidOMACpConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidOMACpConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidOMACpConfiguration) (resObj *AndroidOMACpConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidCertificateProfileBase is navigation property rn
func (b *AndroidPkcsCertificateProfileRequestBuilder) AndroidCertificateProfileBase() *AndroidCertificateProfileBaseRequestBuilder {
	bb := &AndroidCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AndroidCertificateProfileBase is navigation property rn
func (b *AndroidScepCertificateProfileRequestBuilder) AndroidCertificateProfileBase() *AndroidCertificateProfileBaseRequestBuilder {
	bb := &AndroidCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AndroidStoreApp returns request builder for AndroidStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) AndroidStoreApp() *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder is request builder for AndroidStoreApp collection rcn
type DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidStoreApp item
func (b *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequestBuilder) ID(id string) *AndroidStoreAppRequestBuilder {
	bb := &AndroidStoreAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest is request for AndroidStoreApp collection
type DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidStoreApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidStoreApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidStoreApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidStoreApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidStoreApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest) Get(ctx context.Context) ([]AndroidStoreApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionAndroidStoreAppCollectionRequest) Add(ctx context.Context, reqObj *AndroidStoreApp) (resObj *AndroidStoreApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidTrustedRootCertificate returns request builder for AndroidTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidTrustedRootCertificate() *DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequestBuilder is request builder for AndroidTrustedRootCertificate collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidTrustedRootCertificate item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequestBuilder) ID(id string) *AndroidTrustedRootCertificateRequestBuilder {
	bb := &AndroidTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequest is request for AndroidTrustedRootCertificate collection
type DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidTrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidTrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidTrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidTrustedRootCertificate collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidTrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequest) Get(ctx context.Context) ([]AndroidTrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidTrustedRootCertificateCollectionRequest) Add(ctx context.Context, reqObj *AndroidTrustedRootCertificate) (resObj *AndroidTrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidVPNConfiguration returns request builder for AndroidVPNConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidVPNConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequestBuilder is request builder for AndroidVPNConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidVPNConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidVPNConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequestBuilder) ID(id string) *AndroidVPNConfigurationRequestBuilder {
	bb := &AndroidVPNConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequest is request for AndroidVPNConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidVPNConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidVPNConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidVPNConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidVPNConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidVPNConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidVPNConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidVPNConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidVPNConfiguration) (resObj *AndroidVPNConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWiFiConfiguration returns request builder for AndroidWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidWiFiConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequestBuilder is request builder for AndroidWiFiConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWiFiConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequestBuilder) ID(id string) *AndroidWiFiConfigurationRequestBuilder {
	bb := &AndroidWiFiConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequest is request for AndroidWiFiConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWiFiConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWiFiConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWiFiConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWiFiConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWiFiConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidWiFiConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWiFiConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidWiFiConfiguration) (resObj *AndroidWiFiConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileCertificateProfileBase returns request builder for AndroidWorkProfileCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidWorkProfileCertificateProfileBase() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequestBuilder is request builder for AndroidWorkProfileCertificateProfileBase collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileCertificateProfileBase item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequestBuilder) ID(id string) *AndroidWorkProfileCertificateProfileBaseRequestBuilder {
	bb := &AndroidWorkProfileCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequest is request for AndroidWorkProfileCertificateProfileBase collection
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileCertificateProfileBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileCertificateProfileBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileCertificateProfileBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileCertificateProfileBase collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileCertificateProfileBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileCertificateProfileBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCertificateProfileBaseCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileCertificateProfileBase) (resObj *AndroidWorkProfileCertificateProfileBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileCompliancePolicy returns request builder for AndroidWorkProfileCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) AndroidWorkProfileCompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder is request builder for AndroidWorkProfileCompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileCompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequestBuilder) ID(id string) *AndroidWorkProfileCompliancePolicyRequestBuilder {
	bb := &AndroidWorkProfileCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest is request for AndroidWorkProfileCompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileCompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAndroidWorkProfileCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileCompliancePolicy) (resObj *AndroidWorkProfileCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileCustomConfiguration returns request builder for AndroidWorkProfileCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidWorkProfileCustomConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder is request builder for AndroidWorkProfileCustomConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileCustomConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequestBuilder) ID(id string) *AndroidWorkProfileCustomConfigurationRequestBuilder {
	bb := &AndroidWorkProfileCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest is request for AndroidWorkProfileCustomConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileCustomConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileCustomConfiguration) (resObj *AndroidWorkProfileCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileEasEmailProfileBase returns request builder for AndroidWorkProfileEasEmailProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidWorkProfileEasEmailProfileBase() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequestBuilder is request builder for AndroidWorkProfileEasEmailProfileBase collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileEasEmailProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileEasEmailProfileBase item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequestBuilder) ID(id string) *AndroidWorkProfileEasEmailProfileBaseRequestBuilder {
	bb := &AndroidWorkProfileEasEmailProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequest is request for AndroidWorkProfileEasEmailProfileBase collection
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileEasEmailProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileEasEmailProfileBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileEasEmailProfileBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileEasEmailProfileBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileEasEmailProfileBase collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileEasEmailProfileBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileEasEmailProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileEasEmailProfileBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileEasEmailProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileEasEmailProfileBaseCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileEasEmailProfileBase) (resObj *AndroidWorkProfileEasEmailProfileBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileGeneralDeviceConfiguration returns request builder for AndroidWorkProfileGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidWorkProfileGeneralDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder is request builder for AndroidWorkProfileGeneralDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileGeneralDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *AndroidWorkProfileGeneralDeviceConfigurationRequestBuilder {
	bb := &AndroidWorkProfileGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest is request for AndroidWorkProfileGeneralDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileGeneralDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileGeneralDeviceConfiguration) (resObj *AndroidWorkProfileGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileCertificateProfileBase is navigation property rn
func (b *AndroidWorkProfilePkcsCertificateProfileRequestBuilder) AndroidWorkProfileCertificateProfileBase() *AndroidWorkProfileCertificateProfileBaseRequestBuilder {
	bb := &AndroidWorkProfileCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AndroidWorkProfileCertificateProfileBase is navigation property rn
func (b *AndroidWorkProfileScepCertificateProfileRequestBuilder) AndroidWorkProfileCertificateProfileBase() *AndroidWorkProfileCertificateProfileBaseRequestBuilder {
	bb := &AndroidWorkProfileCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AndroidWorkProfileTrustedRootCertificate returns request builder for AndroidWorkProfileTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidWorkProfileTrustedRootCertificate() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequestBuilder is request builder for AndroidWorkProfileTrustedRootCertificate collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileTrustedRootCertificate item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequestBuilder) ID(id string) *AndroidWorkProfileTrustedRootCertificateRequestBuilder {
	bb := &AndroidWorkProfileTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequest is request for AndroidWorkProfileTrustedRootCertificate collection
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileTrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileTrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileTrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileTrustedRootCertificate collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileTrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileTrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileTrustedRootCertificateCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileTrustedRootCertificate) (resObj *AndroidWorkProfileTrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileVPNConfiguration returns request builder for AndroidWorkProfileVPNConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidWorkProfileVPNConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequestBuilder is request builder for AndroidWorkProfileVPNConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileVPNConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileVPNConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequestBuilder) ID(id string) *AndroidWorkProfileVPNConfigurationRequestBuilder {
	bb := &AndroidWorkProfileVPNConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequest is request for AndroidWorkProfileVPNConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileVPNConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileVPNConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileVPNConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileVPNConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileVPNConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileVPNConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileVPNConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileVPNConfiguration) (resObj *AndroidWorkProfileVPNConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AndroidWorkProfileWiFiConfiguration returns request builder for AndroidWorkProfileWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AndroidWorkProfileWiFiConfiguration() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequestBuilder is request builder for AndroidWorkProfileWiFiConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AndroidWorkProfileWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AndroidWorkProfileWiFiConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequestBuilder) ID(id string) *AndroidWorkProfileWiFiConfigurationRequestBuilder {
	bb := &AndroidWorkProfileWiFiConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequest is request for AndroidWorkProfileWiFiConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AndroidWorkProfileWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AndroidWorkProfileWiFiConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AndroidWorkProfileWiFiConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AndroidWorkProfileWiFiConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AndroidWorkProfileWiFiConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AndroidWorkProfileWiFiConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AndroidWorkProfileWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequest) Get(ctx context.Context) ([]AndroidWorkProfileWiFiConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AndroidWorkProfileWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAndroidWorkProfileWiFiConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AndroidWorkProfileWiFiConfiguration) (resObj *AndroidWorkProfileWiFiConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
