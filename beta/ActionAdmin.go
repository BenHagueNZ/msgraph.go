// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// Edge is navigation property rn
func (b *AdminRequestBuilder) Edge() *EdgeRequestBuilder {
	bb := &EdgeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/edge"
	return bb
}

// ReportSettings is navigation property rn
func (b *AdminRequestBuilder) ReportSettings() *AdminReportSettingsRequestBuilder {
	bb := &AdminReportSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reportSettings"
	return bb
}

// ServiceAnnouncement is navigation property rn
func (b *AdminRequestBuilder) ServiceAnnouncement() *ServiceAnnouncementRequestBuilder {
	bb := &ServiceAnnouncementRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/serviceAnnouncement"
	return bb
}

// Sharepoint is navigation property rn
func (b *AdminRequestBuilder) Sharepoint() *SharepointRequestBuilder {
	bb := &SharepointRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sharepoint"
	return bb
}

// Windows is navigation property rn
func (b *AdminRequestBuilder) Windows() *AdminWindowsRequestBuilder {
	bb := &AdminWindowsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windows"
	return bb
}

// Updates is navigation property rn
func (b *AdminWindowsRequestBuilder) Updates() *AdminWindowsUpdatesRequestBuilder {
	bb := &AdminWindowsUpdatesRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/updates"
	return bb
}

// Catalog is navigation property rn
func (b *AdminWindowsUpdatesRequestBuilder) Catalog() *WindowsUpdatesCatalogRequestBuilder {
	bb := &WindowsUpdatesCatalogRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/catalog"
	return bb
}

// DeploymentAudiences returns request builder for WindowsUpdatesDeploymentAudience collection
func (b *AdminWindowsUpdatesRequestBuilder) DeploymentAudiences() *AdminWindowsUpdatesDeploymentAudiencesCollectionRequestBuilder {
	bb := &AdminWindowsUpdatesDeploymentAudiencesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deploymentAudiences"
	return bb
}

// AdminWindowsUpdatesDeploymentAudiencesCollectionRequestBuilder is request builder for WindowsUpdatesDeploymentAudience collection rcn
type AdminWindowsUpdatesDeploymentAudiencesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesDeploymentAudience collection
func (b *AdminWindowsUpdatesDeploymentAudiencesCollectionRequestBuilder) Request() *AdminWindowsUpdatesDeploymentAudiencesCollectionRequest {
	return &AdminWindowsUpdatesDeploymentAudiencesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesDeploymentAudience item
func (b *AdminWindowsUpdatesDeploymentAudiencesCollectionRequestBuilder) ID(id string) *WindowsUpdatesDeploymentAudienceRequestBuilder {
	bb := &WindowsUpdatesDeploymentAudienceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdminWindowsUpdatesDeploymentAudiencesCollectionRequest is request for WindowsUpdatesDeploymentAudience collection
type AdminWindowsUpdatesDeploymentAudiencesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesDeploymentAudience collection
func (r *AdminWindowsUpdatesDeploymentAudiencesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesDeploymentAudience, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesDeploymentAudience
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesDeploymentAudience
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesDeploymentAudience collection, max N pages
func (r *AdminWindowsUpdatesDeploymentAudiencesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesDeploymentAudience, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesDeploymentAudience collection
func (r *AdminWindowsUpdatesDeploymentAudiencesCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesDeploymentAudience, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesDeploymentAudience collection
func (r *AdminWindowsUpdatesDeploymentAudiencesCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesDeploymentAudience) (resObj *WindowsUpdatesDeploymentAudience, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Deployments returns request builder for WindowsUpdatesDeployment collection
func (b *AdminWindowsUpdatesRequestBuilder) Deployments() *AdminWindowsUpdatesDeploymentsCollectionRequestBuilder {
	bb := &AdminWindowsUpdatesDeploymentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deployments"
	return bb
}

// AdminWindowsUpdatesDeploymentsCollectionRequestBuilder is request builder for WindowsUpdatesDeployment collection rcn
type AdminWindowsUpdatesDeploymentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesDeployment collection
func (b *AdminWindowsUpdatesDeploymentsCollectionRequestBuilder) Request() *AdminWindowsUpdatesDeploymentsCollectionRequest {
	return &AdminWindowsUpdatesDeploymentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesDeployment item
func (b *AdminWindowsUpdatesDeploymentsCollectionRequestBuilder) ID(id string) *WindowsUpdatesDeploymentRequestBuilder {
	bb := &WindowsUpdatesDeploymentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdminWindowsUpdatesDeploymentsCollectionRequest is request for WindowsUpdatesDeployment collection
type AdminWindowsUpdatesDeploymentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesDeployment collection
func (r *AdminWindowsUpdatesDeploymentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesDeployment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesDeployment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesDeployment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesDeployment collection, max N pages
func (r *AdminWindowsUpdatesDeploymentsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesDeployment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesDeployment collection
func (r *AdminWindowsUpdatesDeploymentsCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesDeployment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesDeployment collection
func (r *AdminWindowsUpdatesDeploymentsCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesDeployment) (resObj *WindowsUpdatesDeployment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ResourceConnections returns request builder for WindowsUpdatesResourceConnection collection
func (b *AdminWindowsUpdatesRequestBuilder) ResourceConnections() *AdminWindowsUpdatesResourceConnectionsCollectionRequestBuilder {
	bb := &AdminWindowsUpdatesResourceConnectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/resourceConnections"
	return bb
}

// AdminWindowsUpdatesResourceConnectionsCollectionRequestBuilder is request builder for WindowsUpdatesResourceConnection collection rcn
type AdminWindowsUpdatesResourceConnectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesResourceConnection collection
func (b *AdminWindowsUpdatesResourceConnectionsCollectionRequestBuilder) Request() *AdminWindowsUpdatesResourceConnectionsCollectionRequest {
	return &AdminWindowsUpdatesResourceConnectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesResourceConnection item
func (b *AdminWindowsUpdatesResourceConnectionsCollectionRequestBuilder) ID(id string) *WindowsUpdatesResourceConnectionRequestBuilder {
	bb := &WindowsUpdatesResourceConnectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdminWindowsUpdatesResourceConnectionsCollectionRequest is request for WindowsUpdatesResourceConnection collection
type AdminWindowsUpdatesResourceConnectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesResourceConnection collection
func (r *AdminWindowsUpdatesResourceConnectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesResourceConnection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesResourceConnection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesResourceConnection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesResourceConnection collection, max N pages
func (r *AdminWindowsUpdatesResourceConnectionsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesResourceConnection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesResourceConnection collection
func (r *AdminWindowsUpdatesResourceConnectionsCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesResourceConnection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesResourceConnection collection
func (r *AdminWindowsUpdatesResourceConnectionsCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesResourceConnection) (resObj *WindowsUpdatesResourceConnection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UpdatableAssets returns request builder for WindowsUpdatesUpdatableAsset collection
func (b *AdminWindowsUpdatesRequestBuilder) UpdatableAssets() *AdminWindowsUpdatesUpdatableAssetsCollectionRequestBuilder {
	bb := &AdminWindowsUpdatesUpdatableAssetsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/updatableAssets"
	return bb
}

// AdminWindowsUpdatesUpdatableAssetsCollectionRequestBuilder is request builder for WindowsUpdatesUpdatableAsset collection rcn
type AdminWindowsUpdatesUpdatableAssetsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesUpdatableAsset collection
func (b *AdminWindowsUpdatesUpdatableAssetsCollectionRequestBuilder) Request() *AdminWindowsUpdatesUpdatableAssetsCollectionRequest {
	return &AdminWindowsUpdatesUpdatableAssetsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesUpdatableAsset item
func (b *AdminWindowsUpdatesUpdatableAssetsCollectionRequestBuilder) ID(id string) *WindowsUpdatesUpdatableAssetRequestBuilder {
	bb := &WindowsUpdatesUpdatableAssetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdminWindowsUpdatesUpdatableAssetsCollectionRequest is request for WindowsUpdatesUpdatableAsset collection
type AdminWindowsUpdatesUpdatableAssetsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesUpdatableAsset collection
func (r *AdminWindowsUpdatesUpdatableAssetsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesUpdatableAsset, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesUpdatableAsset
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesUpdatableAsset
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesUpdatableAsset collection, max N pages
func (r *AdminWindowsUpdatesUpdatableAssetsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesUpdatableAsset, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesUpdatableAsset collection
func (r *AdminWindowsUpdatesUpdatableAssetsCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesUpdatableAsset, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesUpdatableAsset collection
func (r *AdminWindowsUpdatesUpdatableAssetsCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesUpdatableAsset) (resObj *WindowsUpdatesUpdatableAsset, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UpdatePolicies returns request builder for WindowsUpdatesUpdatePolicy collection
func (b *AdminWindowsUpdatesRequestBuilder) UpdatePolicies() *AdminWindowsUpdatesUpdatePoliciesCollectionRequestBuilder {
	bb := &AdminWindowsUpdatesUpdatePoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/updatePolicies"
	return bb
}

// AdminWindowsUpdatesUpdatePoliciesCollectionRequestBuilder is request builder for WindowsUpdatesUpdatePolicy collection rcn
type AdminWindowsUpdatesUpdatePoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesUpdatePolicy collection
func (b *AdminWindowsUpdatesUpdatePoliciesCollectionRequestBuilder) Request() *AdminWindowsUpdatesUpdatePoliciesCollectionRequest {
	return &AdminWindowsUpdatesUpdatePoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesUpdatePolicy item
func (b *AdminWindowsUpdatesUpdatePoliciesCollectionRequestBuilder) ID(id string) *WindowsUpdatesUpdatePolicyRequestBuilder {
	bb := &WindowsUpdatesUpdatePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdminWindowsUpdatesUpdatePoliciesCollectionRequest is request for WindowsUpdatesUpdatePolicy collection
type AdminWindowsUpdatesUpdatePoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesUpdatePolicy collection
func (r *AdminWindowsUpdatesUpdatePoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesUpdatePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesUpdatePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesUpdatePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesUpdatePolicy collection, max N pages
func (r *AdminWindowsUpdatesUpdatePoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesUpdatePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesUpdatePolicy collection
func (r *AdminWindowsUpdatesUpdatePoliciesCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesUpdatePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesUpdatePolicy collection
func (r *AdminWindowsUpdatesUpdatePoliciesCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesUpdatePolicy) (resObj *WindowsUpdatesUpdatePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AdminConsentRequestPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AdminReportSettingsRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AdminWindowsRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AdminWindowsUpdatesRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
