// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// RecurrencePatternRequestBuilder is request builder for RecurrencePattern
type RecurrencePatternRequestBuilder struct{ BaseRequestBuilder }

// Request returns RecurrencePatternRequest
func (b *RecurrencePatternRequestBuilder) Request() *RecurrencePatternRequest {
	return &RecurrencePatternRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// RecurrencePatternRequest is request for RecurrencePattern
type RecurrencePatternRequest struct{ BaseRequest }

// Get performs GET request for RecurrencePattern
func (r *RecurrencePatternRequest) Get(ctx context.Context) (resObj *RecurrencePattern, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for RecurrencePattern
func (r *RecurrencePatternRequest) Update(ctx context.Context, reqObj *RecurrencePattern) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for RecurrencePattern
func (r *RecurrencePatternRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// RecurrenceRangeRequestBuilder is request builder for RecurrenceRange
type RecurrenceRangeRequestBuilder struct{ BaseRequestBuilder }

// Request returns RecurrenceRangeRequest
func (b *RecurrenceRangeRequestBuilder) Request() *RecurrenceRangeRequest {
	return &RecurrenceRangeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// RecurrenceRangeRequest is request for RecurrenceRange
type RecurrenceRangeRequest struct{ BaseRequest }

// Get performs GET request for RecurrenceRange
func (r *RecurrenceRangeRequest) Get(ctx context.Context) (resObj *RecurrenceRange, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for RecurrenceRange
func (r *RecurrenceRangeRequest) Update(ctx context.Context, reqObj *RecurrenceRange) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for RecurrenceRange
func (r *RecurrenceRangeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
