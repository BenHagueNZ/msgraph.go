// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// VerifiedCredentialClaimsRequestBuilder is request builder for VerifiedCredentialClaims
type VerifiedCredentialClaimsRequestBuilder struct{ BaseRequestBuilder }

// Request returns VerifiedCredentialClaimsRequest
func (b *VerifiedCredentialClaimsRequestBuilder) Request() *VerifiedCredentialClaimsRequest {
	return &VerifiedCredentialClaimsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VerifiedCredentialClaimsRequest is request for VerifiedCredentialClaims
type VerifiedCredentialClaimsRequest struct{ BaseRequest }

// Get performs GET request for VerifiedCredentialClaims
func (r *VerifiedCredentialClaimsRequest) Get(ctx context.Context) (resObj *VerifiedCredentialClaims, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VerifiedCredentialClaims
func (r *VerifiedCredentialClaimsRequest) Update(ctx context.Context, reqObj *VerifiedCredentialClaims) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VerifiedCredentialClaims
func (r *VerifiedCredentialClaimsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// VerifiedCredentialDataRequestBuilder is request builder for VerifiedCredentialData
type VerifiedCredentialDataRequestBuilder struct{ BaseRequestBuilder }

// Request returns VerifiedCredentialDataRequest
func (b *VerifiedCredentialDataRequestBuilder) Request() *VerifiedCredentialDataRequest {
	return &VerifiedCredentialDataRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VerifiedCredentialDataRequest is request for VerifiedCredentialData
type VerifiedCredentialDataRequest struct{ BaseRequest }

// Get performs GET request for VerifiedCredentialData
func (r *VerifiedCredentialDataRequest) Get(ctx context.Context) (resObj *VerifiedCredentialData, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VerifiedCredentialData
func (r *VerifiedCredentialDataRequest) Update(ctx context.Context, reqObj *VerifiedCredentialData) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VerifiedCredentialData
func (r *VerifiedCredentialDataRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// VerifiedCustomDomainCertificatesMetadataRequestBuilder is request builder for VerifiedCustomDomainCertificatesMetadata
type VerifiedCustomDomainCertificatesMetadataRequestBuilder struct{ BaseRequestBuilder }

// Request returns VerifiedCustomDomainCertificatesMetadataRequest
func (b *VerifiedCustomDomainCertificatesMetadataRequestBuilder) Request() *VerifiedCustomDomainCertificatesMetadataRequest {
	return &VerifiedCustomDomainCertificatesMetadataRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VerifiedCustomDomainCertificatesMetadataRequest is request for VerifiedCustomDomainCertificatesMetadata
type VerifiedCustomDomainCertificatesMetadataRequest struct{ BaseRequest }

// Get performs GET request for VerifiedCustomDomainCertificatesMetadata
func (r *VerifiedCustomDomainCertificatesMetadataRequest) Get(ctx context.Context) (resObj *VerifiedCustomDomainCertificatesMetadata, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VerifiedCustomDomainCertificatesMetadata
func (r *VerifiedCustomDomainCertificatesMetadataRequest) Update(ctx context.Context, reqObj *VerifiedCustomDomainCertificatesMetadata) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VerifiedCustomDomainCertificatesMetadata
func (r *VerifiedCustomDomainCertificatesMetadataRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// VerifiedDomainRequestBuilder is request builder for VerifiedDomain
type VerifiedDomainRequestBuilder struct{ BaseRequestBuilder }

// Request returns VerifiedDomainRequest
func (b *VerifiedDomainRequestBuilder) Request() *VerifiedDomainRequest {
	return &VerifiedDomainRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VerifiedDomainRequest is request for VerifiedDomain
type VerifiedDomainRequest struct{ BaseRequest }

// Get performs GET request for VerifiedDomain
func (r *VerifiedDomainRequest) Get(ctx context.Context) (resObj *VerifiedDomain, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VerifiedDomain
func (r *VerifiedDomainRequest) Update(ctx context.Context, reqObj *VerifiedDomain) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VerifiedDomain
func (r *VerifiedDomainRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// VerifiedPublisherRequestBuilder is request builder for VerifiedPublisher
type VerifiedPublisherRequestBuilder struct{ BaseRequestBuilder }

// Request returns VerifiedPublisherRequest
func (b *VerifiedPublisherRequestBuilder) Request() *VerifiedPublisherRequest {
	return &VerifiedPublisherRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VerifiedPublisherRequest is request for VerifiedPublisher
type VerifiedPublisherRequest struct{ BaseRequest }

// Get performs GET request for VerifiedPublisher
func (r *VerifiedPublisherRequest) Get(ctx context.Context) (resObj *VerifiedPublisher, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VerifiedPublisher
func (r *VerifiedPublisherRequest) Update(ctx context.Context, reqObj *VerifiedPublisher) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VerifiedPublisher
func (r *VerifiedPublisherRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
