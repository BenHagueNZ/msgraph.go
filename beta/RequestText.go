// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// TextClassificationRequestObjectRequestBuilder is request builder for TextClassificationRequestObject
type TextClassificationRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns TextClassificationRequestObjectRequest
func (b *TextClassificationRequestObjectRequestBuilder) Request() *TextClassificationRequestObjectRequest {
	return &TextClassificationRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TextClassificationRequestObjectRequest is request for TextClassificationRequestObject
type TextClassificationRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for TextClassificationRequestObject
func (r *TextClassificationRequestObjectRequest) Get(ctx context.Context) (resObj *TextClassificationRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TextClassificationRequestObject
func (r *TextClassificationRequestObjectRequest) Update(ctx context.Context, reqObj *TextClassificationRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TextClassificationRequestObject
func (r *TextClassificationRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TextColumnRequestBuilder is request builder for TextColumn
type TextColumnRequestBuilder struct{ BaseRequestBuilder }

// Request returns TextColumnRequest
func (b *TextColumnRequestBuilder) Request() *TextColumnRequest {
	return &TextColumnRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TextColumnRequest is request for TextColumn
type TextColumnRequest struct{ BaseRequest }

// Get performs GET request for TextColumn
func (r *TextColumnRequest) Get(ctx context.Context) (resObj *TextColumn, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TextColumn
func (r *TextColumnRequest) Update(ctx context.Context, reqObj *TextColumn) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TextColumn
func (r *TextColumnRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TextWebPartRequestBuilder is request builder for TextWebPart
type TextWebPartRequestBuilder struct{ BaseRequestBuilder }

// Request returns TextWebPartRequest
func (b *TextWebPartRequestBuilder) Request() *TextWebPartRequest {
	return &TextWebPartRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TextWebPartRequest is request for TextWebPart
type TextWebPartRequest struct{ BaseRequest }

// Get performs GET request for TextWebPart
func (r *TextWebPartRequest) Get(ctx context.Context) (resObj *TextWebPart, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TextWebPart
func (r *TextWebPartRequest) Update(ctx context.Context, reqObj *TextWebPart) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TextWebPart
func (r *TextWebPartRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
