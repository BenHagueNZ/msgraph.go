// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// PrivilegedSignupStatusCollectionCompleteSetupRequestParameter undocumented
type PrivilegedSignupStatusCollectionCompleteSetupRequestParameter struct {
	// TenantSetupInfo undocumented
	TenantSetupInfo *TenantSetupInfo `json:"tenantSetupInfo,omitempty"`
}

// PrivilegedSignupStatusCollectionSignUpRequestParameter undocumented
type PrivilegedSignupStatusCollectionSignUpRequestParameter struct {
}

// PrivilegedAccessGroupAssignmentScheduleRequestObjectCancelRequestParameter undocumented
type PrivilegedAccessGroupAssignmentScheduleRequestObjectCancelRequestParameter struct {
}

// PrivilegedAccessGroupEligibilityScheduleRequestObjectCancelRequestParameter undocumented
type PrivilegedAccessGroupEligibilityScheduleRequestObjectCancelRequestParameter struct {
}

// PrivilegedRoleSelfActivateRequestParameter undocumented
type PrivilegedRoleSelfActivateRequestParameter struct {
	// Reason undocumented
	Reason *string `json:"reason,omitempty"`
	// Duration undocumented
	Duration *string `json:"duration,omitempty"`
	// TicketNumber undocumented
	TicketNumber *string `json:"ticketNumber,omitempty"`
	// TicketSystem undocumented
	TicketSystem *string `json:"ticketSystem,omitempty"`
}

// PrivilegedRoleSelfDeactivateRequestParameter undocumented
type PrivilegedRoleSelfDeactivateRequestParameter struct {
}

// PrivilegedRoleAssignmentMakeEligibleRequestParameter undocumented
type PrivilegedRoleAssignmentMakeEligibleRequestParameter struct {
}

// PrivilegedRoleAssignmentMakePermanentRequestParameter undocumented
type PrivilegedRoleAssignmentMakePermanentRequestParameter struct {
	// Reason undocumented
	Reason *string `json:"reason,omitempty"`
	// TicketNumber undocumented
	TicketNumber *string `json:"ticketNumber,omitempty"`
	// TicketSystem undocumented
	TicketSystem *string `json:"ticketSystem,omitempty"`
}

// PrivilegedRoleAssignmentRequestObjectCancelRequestParameter undocumented
type PrivilegedRoleAssignmentRequestObjectCancelRequestParameter struct {
}

// Resources returns request builder for GovernanceResource collection
func (b *PrivilegedAccessRequestBuilder) Resources() *PrivilegedAccessResourcesCollectionRequestBuilder {
	bb := &PrivilegedAccessResourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/resources"
	return bb
}

// PrivilegedAccessResourcesCollectionRequestBuilder is request builder for GovernanceResource collection rcn
type PrivilegedAccessResourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GovernanceResource collection
func (b *PrivilegedAccessResourcesCollectionRequestBuilder) Request() *PrivilegedAccessResourcesCollectionRequest {
	return &PrivilegedAccessResourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GovernanceResource item
func (b *PrivilegedAccessResourcesCollectionRequestBuilder) ID(id string) *GovernanceResourceRequestBuilder {
	bb := &GovernanceResourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessResourcesCollectionRequest is request for GovernanceResource collection
type PrivilegedAccessResourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GovernanceResource collection
func (r *PrivilegedAccessResourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GovernanceResource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GovernanceResource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GovernanceResource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GovernanceResource collection, max N pages
func (r *PrivilegedAccessResourcesCollectionRequest) GetN(ctx context.Context, n int) ([]GovernanceResource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GovernanceResource collection
func (r *PrivilegedAccessResourcesCollectionRequest) Get(ctx context.Context) ([]GovernanceResource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GovernanceResource collection
func (r *PrivilegedAccessResourcesCollectionRequest) Add(ctx context.Context, reqObj *GovernanceResource) (resObj *GovernanceResource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleAssignmentRequests returns request builder for GovernanceRoleAssignmentRequestObject collection
func (b *PrivilegedAccessRequestBuilder) RoleAssignmentRequests() *PrivilegedAccessRoleAssignmentRequestsCollectionRequestBuilder {
	bb := &PrivilegedAccessRoleAssignmentRequestsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleAssignmentRequests"
	return bb
}

// PrivilegedAccessRoleAssignmentRequestsCollectionRequestBuilder is request builder for GovernanceRoleAssignmentRequestObject collection rcn
type PrivilegedAccessRoleAssignmentRequestsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GovernanceRoleAssignmentRequestObject collection
func (b *PrivilegedAccessRoleAssignmentRequestsCollectionRequestBuilder) Request() *PrivilegedAccessRoleAssignmentRequestsCollectionRequest {
	return &PrivilegedAccessRoleAssignmentRequestsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GovernanceRoleAssignmentRequestObject item
func (b *PrivilegedAccessRoleAssignmentRequestsCollectionRequestBuilder) ID(id string) *GovernanceRoleAssignmentRequestObjectRequestBuilder {
	bb := &GovernanceRoleAssignmentRequestObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessRoleAssignmentRequestsCollectionRequest is request for GovernanceRoleAssignmentRequestObject collection
type PrivilegedAccessRoleAssignmentRequestsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GovernanceRoleAssignmentRequestObject collection
func (r *PrivilegedAccessRoleAssignmentRequestsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GovernanceRoleAssignmentRequestObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GovernanceRoleAssignmentRequestObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GovernanceRoleAssignmentRequestObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GovernanceRoleAssignmentRequestObject collection, max N pages
func (r *PrivilegedAccessRoleAssignmentRequestsCollectionRequest) GetN(ctx context.Context, n int) ([]GovernanceRoleAssignmentRequestObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GovernanceRoleAssignmentRequestObject collection
func (r *PrivilegedAccessRoleAssignmentRequestsCollectionRequest) Get(ctx context.Context) ([]GovernanceRoleAssignmentRequestObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GovernanceRoleAssignmentRequestObject collection
func (r *PrivilegedAccessRoleAssignmentRequestsCollectionRequest) Add(ctx context.Context, reqObj *GovernanceRoleAssignmentRequestObject) (resObj *GovernanceRoleAssignmentRequestObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleAssignments returns request builder for GovernanceRoleAssignment collection
func (b *PrivilegedAccessRequestBuilder) RoleAssignments() *PrivilegedAccessRoleAssignmentsCollectionRequestBuilder {
	bb := &PrivilegedAccessRoleAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleAssignments"
	return bb
}

// PrivilegedAccessRoleAssignmentsCollectionRequestBuilder is request builder for GovernanceRoleAssignment collection rcn
type PrivilegedAccessRoleAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GovernanceRoleAssignment collection
func (b *PrivilegedAccessRoleAssignmentsCollectionRequestBuilder) Request() *PrivilegedAccessRoleAssignmentsCollectionRequest {
	return &PrivilegedAccessRoleAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GovernanceRoleAssignment item
func (b *PrivilegedAccessRoleAssignmentsCollectionRequestBuilder) ID(id string) *GovernanceRoleAssignmentRequestBuilder {
	bb := &GovernanceRoleAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessRoleAssignmentsCollectionRequest is request for GovernanceRoleAssignment collection
type PrivilegedAccessRoleAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GovernanceRoleAssignment collection
func (r *PrivilegedAccessRoleAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GovernanceRoleAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GovernanceRoleAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GovernanceRoleAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GovernanceRoleAssignment collection, max N pages
func (r *PrivilegedAccessRoleAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]GovernanceRoleAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GovernanceRoleAssignment collection
func (r *PrivilegedAccessRoleAssignmentsCollectionRequest) Get(ctx context.Context) ([]GovernanceRoleAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GovernanceRoleAssignment collection
func (r *PrivilegedAccessRoleAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *GovernanceRoleAssignment) (resObj *GovernanceRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleDefinitions returns request builder for GovernanceRoleDefinition collection
func (b *PrivilegedAccessRequestBuilder) RoleDefinitions() *PrivilegedAccessRoleDefinitionsCollectionRequestBuilder {
	bb := &PrivilegedAccessRoleDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinitions"
	return bb
}

// PrivilegedAccessRoleDefinitionsCollectionRequestBuilder is request builder for GovernanceRoleDefinition collection rcn
type PrivilegedAccessRoleDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GovernanceRoleDefinition collection
func (b *PrivilegedAccessRoleDefinitionsCollectionRequestBuilder) Request() *PrivilegedAccessRoleDefinitionsCollectionRequest {
	return &PrivilegedAccessRoleDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GovernanceRoleDefinition item
func (b *PrivilegedAccessRoleDefinitionsCollectionRequestBuilder) ID(id string) *GovernanceRoleDefinitionRequestBuilder {
	bb := &GovernanceRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessRoleDefinitionsCollectionRequest is request for GovernanceRoleDefinition collection
type PrivilegedAccessRoleDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GovernanceRoleDefinition collection
func (r *PrivilegedAccessRoleDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GovernanceRoleDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GovernanceRoleDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GovernanceRoleDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GovernanceRoleDefinition collection, max N pages
func (r *PrivilegedAccessRoleDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]GovernanceRoleDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GovernanceRoleDefinition collection
func (r *PrivilegedAccessRoleDefinitionsCollectionRequest) Get(ctx context.Context) ([]GovernanceRoleDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GovernanceRoleDefinition collection
func (r *PrivilegedAccessRoleDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *GovernanceRoleDefinition) (resObj *GovernanceRoleDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleSettings returns request builder for GovernanceRoleSetting collection
func (b *PrivilegedAccessRequestBuilder) RoleSettings() *PrivilegedAccessRoleSettingsCollectionRequestBuilder {
	bb := &PrivilegedAccessRoleSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleSettings"
	return bb
}

// PrivilegedAccessRoleSettingsCollectionRequestBuilder is request builder for GovernanceRoleSetting collection rcn
type PrivilegedAccessRoleSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GovernanceRoleSetting collection
func (b *PrivilegedAccessRoleSettingsCollectionRequestBuilder) Request() *PrivilegedAccessRoleSettingsCollectionRequest {
	return &PrivilegedAccessRoleSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GovernanceRoleSetting item
func (b *PrivilegedAccessRoleSettingsCollectionRequestBuilder) ID(id string) *GovernanceRoleSettingRequestBuilder {
	bb := &GovernanceRoleSettingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessRoleSettingsCollectionRequest is request for GovernanceRoleSetting collection
type PrivilegedAccessRoleSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for GovernanceRoleSetting collection
func (r *PrivilegedAccessRoleSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]GovernanceRoleSetting, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GovernanceRoleSetting
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []GovernanceRoleSetting
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for GovernanceRoleSetting collection, max N pages
func (r *PrivilegedAccessRoleSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]GovernanceRoleSetting, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for GovernanceRoleSetting collection
func (r *PrivilegedAccessRoleSettingsCollectionRequest) Get(ctx context.Context) ([]GovernanceRoleSetting, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for GovernanceRoleSetting collection
func (r *PrivilegedAccessRoleSettingsCollectionRequest) Add(ctx context.Context, reqObj *GovernanceRoleSetting) (resObj *GovernanceRoleSetting, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AssignmentApprovals returns request builder for Approval collection
func (b *PrivilegedAccessGroupRequestBuilder) AssignmentApprovals() *PrivilegedAccessGroupAssignmentApprovalsCollectionRequestBuilder {
	bb := &PrivilegedAccessGroupAssignmentApprovalsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignmentApprovals"
	return bb
}

// PrivilegedAccessGroupAssignmentApprovalsCollectionRequestBuilder is request builder for Approval collection rcn
type PrivilegedAccessGroupAssignmentApprovalsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Approval collection
func (b *PrivilegedAccessGroupAssignmentApprovalsCollectionRequestBuilder) Request() *PrivilegedAccessGroupAssignmentApprovalsCollectionRequest {
	return &PrivilegedAccessGroupAssignmentApprovalsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Approval item
func (b *PrivilegedAccessGroupAssignmentApprovalsCollectionRequestBuilder) ID(id string) *ApprovalRequestBuilder {
	bb := &ApprovalRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessGroupAssignmentApprovalsCollectionRequest is request for Approval collection
type PrivilegedAccessGroupAssignmentApprovalsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Approval collection
func (r *PrivilegedAccessGroupAssignmentApprovalsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Approval, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Approval
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Approval
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Approval collection, max N pages
func (r *PrivilegedAccessGroupAssignmentApprovalsCollectionRequest) GetN(ctx context.Context, n int) ([]Approval, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Approval collection
func (r *PrivilegedAccessGroupAssignmentApprovalsCollectionRequest) Get(ctx context.Context) ([]Approval, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Approval collection
func (r *PrivilegedAccessGroupAssignmentApprovalsCollectionRequest) Add(ctx context.Context, reqObj *Approval) (resObj *Approval, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AssignmentScheduleInstances returns request builder for PrivilegedAccessGroupAssignmentScheduleInstance collection
func (b *PrivilegedAccessGroupRequestBuilder) AssignmentScheduleInstances() *PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequestBuilder {
	bb := &PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignmentScheduleInstances"
	return bb
}

// PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequestBuilder is request builder for PrivilegedAccessGroupAssignmentScheduleInstance collection rcn
type PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrivilegedAccessGroupAssignmentScheduleInstance collection
func (b *PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequestBuilder) Request() *PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequest {
	return &PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrivilegedAccessGroupAssignmentScheduleInstance item
func (b *PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequestBuilder) ID(id string) *PrivilegedAccessGroupAssignmentScheduleInstanceRequestBuilder {
	bb := &PrivilegedAccessGroupAssignmentScheduleInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequest is request for PrivilegedAccessGroupAssignmentScheduleInstance collection
type PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrivilegedAccessGroupAssignmentScheduleInstance collection
func (r *PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrivilegedAccessGroupAssignmentScheduleInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrivilegedAccessGroupAssignmentScheduleInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrivilegedAccessGroupAssignmentScheduleInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrivilegedAccessGroupAssignmentScheduleInstance collection, max N pages
func (r *PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequest) GetN(ctx context.Context, n int) ([]PrivilegedAccessGroupAssignmentScheduleInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrivilegedAccessGroupAssignmentScheduleInstance collection
func (r *PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequest) Get(ctx context.Context) ([]PrivilegedAccessGroupAssignmentScheduleInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrivilegedAccessGroupAssignmentScheduleInstance collection
func (r *PrivilegedAccessGroupAssignmentScheduleInstancesCollectionRequest) Add(ctx context.Context, reqObj *PrivilegedAccessGroupAssignmentScheduleInstance) (resObj *PrivilegedAccessGroupAssignmentScheduleInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AssignmentScheduleRequests returns request builder for PrivilegedAccessGroupAssignmentScheduleRequestObject collection
func (b *PrivilegedAccessGroupRequestBuilder) AssignmentScheduleRequests() *PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequestBuilder {
	bb := &PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignmentScheduleRequests"
	return bb
}

// PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequestBuilder is request builder for PrivilegedAccessGroupAssignmentScheduleRequestObject collection rcn
type PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrivilegedAccessGroupAssignmentScheduleRequestObject collection
func (b *PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequestBuilder) Request() *PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequest {
	return &PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrivilegedAccessGroupAssignmentScheduleRequestObject item
func (b *PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequestBuilder) ID(id string) *PrivilegedAccessGroupAssignmentScheduleRequestObjectRequestBuilder {
	bb := &PrivilegedAccessGroupAssignmentScheduleRequestObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequest is request for PrivilegedAccessGroupAssignmentScheduleRequestObject collection
type PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrivilegedAccessGroupAssignmentScheduleRequestObject collection
func (r *PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrivilegedAccessGroupAssignmentScheduleRequestObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrivilegedAccessGroupAssignmentScheduleRequestObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrivilegedAccessGroupAssignmentScheduleRequestObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrivilegedAccessGroupAssignmentScheduleRequestObject collection, max N pages
func (r *PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequest) GetN(ctx context.Context, n int) ([]PrivilegedAccessGroupAssignmentScheduleRequestObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrivilegedAccessGroupAssignmentScheduleRequestObject collection
func (r *PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequest) Get(ctx context.Context) ([]PrivilegedAccessGroupAssignmentScheduleRequestObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrivilegedAccessGroupAssignmentScheduleRequestObject collection
func (r *PrivilegedAccessGroupAssignmentScheduleRequestsCollectionRequest) Add(ctx context.Context, reqObj *PrivilegedAccessGroupAssignmentScheduleRequestObject) (resObj *PrivilegedAccessGroupAssignmentScheduleRequestObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AssignmentSchedules returns request builder for PrivilegedAccessGroupAssignmentSchedule collection
func (b *PrivilegedAccessGroupRequestBuilder) AssignmentSchedules() *PrivilegedAccessGroupAssignmentSchedulesCollectionRequestBuilder {
	bb := &PrivilegedAccessGroupAssignmentSchedulesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignmentSchedules"
	return bb
}

// PrivilegedAccessGroupAssignmentSchedulesCollectionRequestBuilder is request builder for PrivilegedAccessGroupAssignmentSchedule collection rcn
type PrivilegedAccessGroupAssignmentSchedulesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrivilegedAccessGroupAssignmentSchedule collection
func (b *PrivilegedAccessGroupAssignmentSchedulesCollectionRequestBuilder) Request() *PrivilegedAccessGroupAssignmentSchedulesCollectionRequest {
	return &PrivilegedAccessGroupAssignmentSchedulesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrivilegedAccessGroupAssignmentSchedule item
func (b *PrivilegedAccessGroupAssignmentSchedulesCollectionRequestBuilder) ID(id string) *PrivilegedAccessGroupAssignmentScheduleRequestBuilder {
	bb := &PrivilegedAccessGroupAssignmentScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessGroupAssignmentSchedulesCollectionRequest is request for PrivilegedAccessGroupAssignmentSchedule collection
type PrivilegedAccessGroupAssignmentSchedulesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrivilegedAccessGroupAssignmentSchedule collection
func (r *PrivilegedAccessGroupAssignmentSchedulesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrivilegedAccessGroupAssignmentSchedule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrivilegedAccessGroupAssignmentSchedule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrivilegedAccessGroupAssignmentSchedule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrivilegedAccessGroupAssignmentSchedule collection, max N pages
func (r *PrivilegedAccessGroupAssignmentSchedulesCollectionRequest) GetN(ctx context.Context, n int) ([]PrivilegedAccessGroupAssignmentSchedule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrivilegedAccessGroupAssignmentSchedule collection
func (r *PrivilegedAccessGroupAssignmentSchedulesCollectionRequest) Get(ctx context.Context) ([]PrivilegedAccessGroupAssignmentSchedule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrivilegedAccessGroupAssignmentSchedule collection
func (r *PrivilegedAccessGroupAssignmentSchedulesCollectionRequest) Add(ctx context.Context, reqObj *PrivilegedAccessGroupAssignmentSchedule) (resObj *PrivilegedAccessGroupAssignmentSchedule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EligibilityScheduleInstances returns request builder for PrivilegedAccessGroupEligibilityScheduleInstance collection
func (b *PrivilegedAccessGroupRequestBuilder) EligibilityScheduleInstances() *PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/eligibilityScheduleInstances"
	return bb
}

// PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequestBuilder is request builder for PrivilegedAccessGroupEligibilityScheduleInstance collection rcn
type PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrivilegedAccessGroupEligibilityScheduleInstance collection
func (b *PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequestBuilder) Request() *PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequest {
	return &PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrivilegedAccessGroupEligibilityScheduleInstance item
func (b *PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequestBuilder) ID(id string) *PrivilegedAccessGroupEligibilityScheduleInstanceRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilityScheduleInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequest is request for PrivilegedAccessGroupEligibilityScheduleInstance collection
type PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrivilegedAccessGroupEligibilityScheduleInstance collection
func (r *PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrivilegedAccessGroupEligibilityScheduleInstance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrivilegedAccessGroupEligibilityScheduleInstance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrivilegedAccessGroupEligibilityScheduleInstance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrivilegedAccessGroupEligibilityScheduleInstance collection, max N pages
func (r *PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequest) GetN(ctx context.Context, n int) ([]PrivilegedAccessGroupEligibilityScheduleInstance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrivilegedAccessGroupEligibilityScheduleInstance collection
func (r *PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequest) Get(ctx context.Context) ([]PrivilegedAccessGroupEligibilityScheduleInstance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrivilegedAccessGroupEligibilityScheduleInstance collection
func (r *PrivilegedAccessGroupEligibilityScheduleInstancesCollectionRequest) Add(ctx context.Context, reqObj *PrivilegedAccessGroupEligibilityScheduleInstance) (resObj *PrivilegedAccessGroupEligibilityScheduleInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EligibilityScheduleRequests returns request builder for PrivilegedAccessGroupEligibilityScheduleRequestObject collection
func (b *PrivilegedAccessGroupRequestBuilder) EligibilityScheduleRequests() *PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/eligibilityScheduleRequests"
	return bb
}

// PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequestBuilder is request builder for PrivilegedAccessGroupEligibilityScheduleRequestObject collection rcn
type PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrivilegedAccessGroupEligibilityScheduleRequestObject collection
func (b *PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequestBuilder) Request() *PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequest {
	return &PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrivilegedAccessGroupEligibilityScheduleRequestObject item
func (b *PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequestBuilder) ID(id string) *PrivilegedAccessGroupEligibilityScheduleRequestObjectRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilityScheduleRequestObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequest is request for PrivilegedAccessGroupEligibilityScheduleRequestObject collection
type PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrivilegedAccessGroupEligibilityScheduleRequestObject collection
func (r *PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrivilegedAccessGroupEligibilityScheduleRequestObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrivilegedAccessGroupEligibilityScheduleRequestObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrivilegedAccessGroupEligibilityScheduleRequestObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrivilegedAccessGroupEligibilityScheduleRequestObject collection, max N pages
func (r *PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequest) GetN(ctx context.Context, n int) ([]PrivilegedAccessGroupEligibilityScheduleRequestObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrivilegedAccessGroupEligibilityScheduleRequestObject collection
func (r *PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequest) Get(ctx context.Context) ([]PrivilegedAccessGroupEligibilityScheduleRequestObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrivilegedAccessGroupEligibilityScheduleRequestObject collection
func (r *PrivilegedAccessGroupEligibilityScheduleRequestsCollectionRequest) Add(ctx context.Context, reqObj *PrivilegedAccessGroupEligibilityScheduleRequestObject) (resObj *PrivilegedAccessGroupEligibilityScheduleRequestObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EligibilitySchedules returns request builder for PrivilegedAccessGroupEligibilitySchedule collection
func (b *PrivilegedAccessGroupRequestBuilder) EligibilitySchedules() *PrivilegedAccessGroupEligibilitySchedulesCollectionRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilitySchedulesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/eligibilitySchedules"
	return bb
}

// PrivilegedAccessGroupEligibilitySchedulesCollectionRequestBuilder is request builder for PrivilegedAccessGroupEligibilitySchedule collection rcn
type PrivilegedAccessGroupEligibilitySchedulesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrivilegedAccessGroupEligibilitySchedule collection
func (b *PrivilegedAccessGroupEligibilitySchedulesCollectionRequestBuilder) Request() *PrivilegedAccessGroupEligibilitySchedulesCollectionRequest {
	return &PrivilegedAccessGroupEligibilitySchedulesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrivilegedAccessGroupEligibilitySchedule item
func (b *PrivilegedAccessGroupEligibilitySchedulesCollectionRequestBuilder) ID(id string) *PrivilegedAccessGroupEligibilityScheduleRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedAccessGroupEligibilitySchedulesCollectionRequest is request for PrivilegedAccessGroupEligibilitySchedule collection
type PrivilegedAccessGroupEligibilitySchedulesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrivilegedAccessGroupEligibilitySchedule collection
func (r *PrivilegedAccessGroupEligibilitySchedulesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrivilegedAccessGroupEligibilitySchedule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrivilegedAccessGroupEligibilitySchedule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrivilegedAccessGroupEligibilitySchedule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrivilegedAccessGroupEligibilitySchedule collection, max N pages
func (r *PrivilegedAccessGroupEligibilitySchedulesCollectionRequest) GetN(ctx context.Context, n int) ([]PrivilegedAccessGroupEligibilitySchedule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrivilegedAccessGroupEligibilitySchedule collection
func (r *PrivilegedAccessGroupEligibilitySchedulesCollectionRequest) Get(ctx context.Context) ([]PrivilegedAccessGroupEligibilitySchedule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrivilegedAccessGroupEligibilitySchedule collection
func (r *PrivilegedAccessGroupEligibilitySchedulesCollectionRequest) Add(ctx context.Context, reqObj *PrivilegedAccessGroupEligibilitySchedule) (resObj *PrivilegedAccessGroupEligibilitySchedule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ActivatedUsing is navigation property rn
func (b *PrivilegedAccessGroupAssignmentScheduleRequestBuilder) ActivatedUsing() *PrivilegedAccessGroupEligibilityScheduleRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activatedUsing"
	return bb
}

// Group is navigation property rn
func (b *PrivilegedAccessGroupAssignmentScheduleRequestBuilder) Group() *GroupRequestBuilder {
	bb := &GroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/group"
	return bb
}

// Principal is navigation property rn
func (b *PrivilegedAccessGroupAssignmentScheduleRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// ActivatedUsing is navigation property rn
func (b *PrivilegedAccessGroupAssignmentScheduleInstanceRequestBuilder) ActivatedUsing() *PrivilegedAccessGroupEligibilityScheduleInstanceRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilityScheduleInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activatedUsing"
	return bb
}

// Group is navigation property rn
func (b *PrivilegedAccessGroupAssignmentScheduleInstanceRequestBuilder) Group() *GroupRequestBuilder {
	bb := &GroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/group"
	return bb
}

// Principal is navigation property rn
func (b *PrivilegedAccessGroupAssignmentScheduleInstanceRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// ActivatedUsing is navigation property rn
func (b *PrivilegedAccessGroupAssignmentScheduleRequestObjectRequestBuilder) ActivatedUsing() *PrivilegedAccessGroupEligibilityScheduleRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activatedUsing"
	return bb
}

// Group is navigation property rn
func (b *PrivilegedAccessGroupAssignmentScheduleRequestObjectRequestBuilder) Group() *GroupRequestBuilder {
	bb := &GroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/group"
	return bb
}

// Principal is navigation property rn
func (b *PrivilegedAccessGroupAssignmentScheduleRequestObjectRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// TargetSchedule is navigation property rn
func (b *PrivilegedAccessGroupAssignmentScheduleRequestObjectRequestBuilder) TargetSchedule() *PrivilegedAccessGroupEligibilityScheduleRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/targetSchedule"
	return bb
}

// Group is navigation property rn
func (b *PrivilegedAccessGroupEligibilityScheduleRequestBuilder) Group() *GroupRequestBuilder {
	bb := &GroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/group"
	return bb
}

// Principal is navigation property rn
func (b *PrivilegedAccessGroupEligibilityScheduleRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// Group is navigation property rn
func (b *PrivilegedAccessGroupEligibilityScheduleInstanceRequestBuilder) Group() *GroupRequestBuilder {
	bb := &GroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/group"
	return bb
}

// Principal is navigation property rn
func (b *PrivilegedAccessGroupEligibilityScheduleInstanceRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// Group is navigation property rn
func (b *PrivilegedAccessGroupEligibilityScheduleRequestObjectRequestBuilder) Group() *GroupRequestBuilder {
	bb := &GroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/group"
	return bb
}

// Principal is navigation property rn
func (b *PrivilegedAccessGroupEligibilityScheduleRequestObjectRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// TargetSchedule is navigation property rn
func (b *PrivilegedAccessGroupEligibilityScheduleRequestObjectRequestBuilder) TargetSchedule() *PrivilegedAccessGroupEligibilityScheduleRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/targetSchedule"
	return bb
}

// Group is navigation property rn
func (b *PrivilegedAccessRootRequestBuilder) Group() *PrivilegedAccessGroupRequestBuilder {
	bb := &PrivilegedAccessGroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/group"
	return bb
}

// RequestNavigation is navigation property rn
func (b *PrivilegedApprovalRequestBuilder) RequestNavigation() *PrivilegedRoleAssignmentRequestRequestBuilder {
	bb := &PrivilegedRoleAssignmentRequestRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/request"
	return bb
}

// RoleInfo is navigation property rn
func (b *PrivilegedApprovalRequestBuilder) RoleInfo() *PrivilegedRoleRequestBuilder {
	bb := &PrivilegedRoleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleInfo"
	return bb
}

// Assignments returns request builder for PrivilegedRoleAssignment collection
func (b *PrivilegedRoleRequestBuilder) Assignments() *PrivilegedRoleAssignmentsCollectionRequestBuilder {
	bb := &PrivilegedRoleAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// PrivilegedRoleAssignmentsCollectionRequestBuilder is request builder for PrivilegedRoleAssignment collection rcn
type PrivilegedRoleAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrivilegedRoleAssignment collection
func (b *PrivilegedRoleAssignmentsCollectionRequestBuilder) Request() *PrivilegedRoleAssignmentsCollectionRequest {
	return &PrivilegedRoleAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrivilegedRoleAssignment item
func (b *PrivilegedRoleAssignmentsCollectionRequestBuilder) ID(id string) *PrivilegedRoleAssignmentRequestBuilder {
	bb := &PrivilegedRoleAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PrivilegedRoleAssignmentsCollectionRequest is request for PrivilegedRoleAssignment collection
type PrivilegedRoleAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrivilegedRoleAssignment collection
func (r *PrivilegedRoleAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrivilegedRoleAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrivilegedRoleAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrivilegedRoleAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrivilegedRoleAssignment collection, max N pages
func (r *PrivilegedRoleAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]PrivilegedRoleAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrivilegedRoleAssignment collection
func (r *PrivilegedRoleAssignmentsCollectionRequest) Get(ctx context.Context) ([]PrivilegedRoleAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrivilegedRoleAssignment collection
func (r *PrivilegedRoleAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *PrivilegedRoleAssignment) (resObj *PrivilegedRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Settings is navigation property rn
func (b *PrivilegedRoleRequestBuilder) Settings() *PrivilegedRoleSettingsRequestBuilder {
	bb := &PrivilegedRoleSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// Summary is navigation property rn
func (b *PrivilegedRoleRequestBuilder) Summary() *PrivilegedRoleSummaryRequestBuilder {
	bb := &PrivilegedRoleSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/summary"
	return bb
}

// RoleInfo is navigation property rn
func (b *PrivilegedRoleAssignmentRequestBuilder) RoleInfo() *PrivilegedRoleRequestBuilder {
	bb := &PrivilegedRoleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleInfo"
	return bb
}

// RoleInfo is navigation property rn
func (b *PrivilegedRoleAssignmentRequestObjectRequestBuilder) RoleInfo() *PrivilegedRoleRequestBuilder {
	bb := &PrivilegedRoleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleInfo"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedAccessRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedAccessGroupRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedAccessRootRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedAccessScheduleRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedAccessScheduleInstanceRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedApprovalRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedOperationEventRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedRoleRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedRoleAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedRoleAssignmentRequestObjectRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedRoleSettingsRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedRoleSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PrivilegedSignupStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
