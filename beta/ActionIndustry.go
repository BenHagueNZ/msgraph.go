// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// IndustryDataIndustryDataConnectorIndustryDataValidateRequestParameter undocumented
type IndustryDataIndustryDataConnectorIndustryDataValidateRequestParameter struct {
}

// DataConnector is navigation property rn
func (b *IndustryDataInboundFlowRequestBuilder) DataConnector() *IndustryDataIndustryDataConnectorRequestBuilder {
	bb := &IndustryDataIndustryDataConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dataConnector"
	return bb
}

// Year is navigation property rn
func (b *IndustryDataInboundFlowRequestBuilder) Year() *IndustryDataYearTimePeriodDefinitionRequestBuilder {
	bb := &IndustryDataYearTimePeriodDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/year"
	return bb
}

// SourceSystem is navigation property rn
func (b *IndustryDataIndustryDataConnectorRequestBuilder) SourceSystem() *IndustryDataSourceSystemDefinitionRequestBuilder {
	bb := &IndustryDataSourceSystemDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sourceSystem"
	return bb
}

// DataConnectors returns request builder for IndustryDataIndustryDataConnector collection
func (b *IndustryDataIndustryDataRootRequestBuilder) DataConnectors() *IndustryDataIndustryDataRootDataConnectorsCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRootDataConnectorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dataConnectors"
	return bb
}

// IndustryDataIndustryDataRootDataConnectorsCollectionRequestBuilder is request builder for IndustryDataIndustryDataConnector collection rcn
type IndustryDataIndustryDataRootDataConnectorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataIndustryDataConnector collection
func (b *IndustryDataIndustryDataRootDataConnectorsCollectionRequestBuilder) Request() *IndustryDataIndustryDataRootDataConnectorsCollectionRequest {
	return &IndustryDataIndustryDataRootDataConnectorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataIndustryDataConnector item
func (b *IndustryDataIndustryDataRootDataConnectorsCollectionRequestBuilder) ID(id string) *IndustryDataIndustryDataConnectorRequestBuilder {
	bb := &IndustryDataIndustryDataConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRootDataConnectorsCollectionRequest is request for IndustryDataIndustryDataConnector collection
type IndustryDataIndustryDataRootDataConnectorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataIndustryDataConnector collection
func (r *IndustryDataIndustryDataRootDataConnectorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataIndustryDataConnector, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataIndustryDataConnector
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataIndustryDataConnector
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataIndustryDataConnector collection, max N pages
func (r *IndustryDataIndustryDataRootDataConnectorsCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataIndustryDataConnector, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataIndustryDataConnector collection
func (r *IndustryDataIndustryDataRootDataConnectorsCollectionRequest) Get(ctx context.Context) ([]IndustryDataIndustryDataConnector, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataIndustryDataConnector collection
func (r *IndustryDataIndustryDataRootDataConnectorsCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataIndustryDataConnector) (resObj *IndustryDataIndustryDataConnector, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// InboundFlows returns request builder for IndustryDataInboundFlow collection
func (b *IndustryDataIndustryDataRootRequestBuilder) InboundFlows() *IndustryDataIndustryDataRootInboundFlowsCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRootInboundFlowsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/inboundFlows"
	return bb
}

// IndustryDataIndustryDataRootInboundFlowsCollectionRequestBuilder is request builder for IndustryDataInboundFlow collection rcn
type IndustryDataIndustryDataRootInboundFlowsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataInboundFlow collection
func (b *IndustryDataIndustryDataRootInboundFlowsCollectionRequestBuilder) Request() *IndustryDataIndustryDataRootInboundFlowsCollectionRequest {
	return &IndustryDataIndustryDataRootInboundFlowsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataInboundFlow item
func (b *IndustryDataIndustryDataRootInboundFlowsCollectionRequestBuilder) ID(id string) *IndustryDataInboundFlowRequestBuilder {
	bb := &IndustryDataInboundFlowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRootInboundFlowsCollectionRequest is request for IndustryDataInboundFlow collection
type IndustryDataIndustryDataRootInboundFlowsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataInboundFlow collection
func (r *IndustryDataIndustryDataRootInboundFlowsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataInboundFlow, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataInboundFlow
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataInboundFlow
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataInboundFlow collection, max N pages
func (r *IndustryDataIndustryDataRootInboundFlowsCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataInboundFlow, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataInboundFlow collection
func (r *IndustryDataIndustryDataRootInboundFlowsCollectionRequest) Get(ctx context.Context) ([]IndustryDataInboundFlow, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataInboundFlow collection
func (r *IndustryDataIndustryDataRootInboundFlowsCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataInboundFlow) (resObj *IndustryDataInboundFlow, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Operations returns request builder for LongRunningOperation collection
func (b *IndustryDataIndustryDataRootRequestBuilder) Operations() *IndustryDataIndustryDataRootOperationsCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRootOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// IndustryDataIndustryDataRootOperationsCollectionRequestBuilder is request builder for LongRunningOperation collection rcn
type IndustryDataIndustryDataRootOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for LongRunningOperation collection
func (b *IndustryDataIndustryDataRootOperationsCollectionRequestBuilder) Request() *IndustryDataIndustryDataRootOperationsCollectionRequest {
	return &IndustryDataIndustryDataRootOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for LongRunningOperation item
func (b *IndustryDataIndustryDataRootOperationsCollectionRequestBuilder) ID(id string) *LongRunningOperationRequestBuilder {
	bb := &LongRunningOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRootOperationsCollectionRequest is request for LongRunningOperation collection
type IndustryDataIndustryDataRootOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for LongRunningOperation collection
func (r *IndustryDataIndustryDataRootOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]LongRunningOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []LongRunningOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []LongRunningOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for LongRunningOperation collection, max N pages
func (r *IndustryDataIndustryDataRootOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]LongRunningOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for LongRunningOperation collection
func (r *IndustryDataIndustryDataRootOperationsCollectionRequest) Get(ctx context.Context) ([]LongRunningOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for LongRunningOperation collection
func (r *IndustryDataIndustryDataRootOperationsCollectionRequest) Add(ctx context.Context, reqObj *LongRunningOperation) (resObj *LongRunningOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReferenceDefinitions returns request builder for IndustryDataReferenceDefinition collection
func (b *IndustryDataIndustryDataRootRequestBuilder) ReferenceDefinitions() *IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/referenceDefinitions"
	return bb
}

// IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequestBuilder is request builder for IndustryDataReferenceDefinition collection rcn
type IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataReferenceDefinition collection
func (b *IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequestBuilder) Request() *IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequest {
	return &IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataReferenceDefinition item
func (b *IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequestBuilder) ID(id string) *IndustryDataReferenceDefinitionRequestBuilder {
	bb := &IndustryDataReferenceDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequest is request for IndustryDataReferenceDefinition collection
type IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataReferenceDefinition collection
func (r *IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataReferenceDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataReferenceDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataReferenceDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataReferenceDefinition collection, max N pages
func (r *IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataReferenceDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataReferenceDefinition collection
func (r *IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequest) Get(ctx context.Context) ([]IndustryDataReferenceDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataReferenceDefinition collection
func (r *IndustryDataIndustryDataRootReferenceDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataReferenceDefinition) (resObj *IndustryDataReferenceDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleGroups returns request builder for IndustryDataRoleGroup collection
func (b *IndustryDataIndustryDataRootRequestBuilder) RoleGroups() *IndustryDataIndustryDataRootRoleGroupsCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRootRoleGroupsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleGroups"
	return bb
}

// IndustryDataIndustryDataRootRoleGroupsCollectionRequestBuilder is request builder for IndustryDataRoleGroup collection rcn
type IndustryDataIndustryDataRootRoleGroupsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataRoleGroup collection
func (b *IndustryDataIndustryDataRootRoleGroupsCollectionRequestBuilder) Request() *IndustryDataIndustryDataRootRoleGroupsCollectionRequest {
	return &IndustryDataIndustryDataRootRoleGroupsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataRoleGroup item
func (b *IndustryDataIndustryDataRootRoleGroupsCollectionRequestBuilder) ID(id string) *IndustryDataRoleGroupRequestBuilder {
	bb := &IndustryDataRoleGroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRootRoleGroupsCollectionRequest is request for IndustryDataRoleGroup collection
type IndustryDataIndustryDataRootRoleGroupsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataRoleGroup collection
func (r *IndustryDataIndustryDataRootRoleGroupsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataRoleGroup, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataRoleGroup
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataRoleGroup
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataRoleGroup collection, max N pages
func (r *IndustryDataIndustryDataRootRoleGroupsCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataRoleGroup, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataRoleGroup collection
func (r *IndustryDataIndustryDataRootRoleGroupsCollectionRequest) Get(ctx context.Context) ([]IndustryDataRoleGroup, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataRoleGroup collection
func (r *IndustryDataIndustryDataRootRoleGroupsCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataRoleGroup) (resObj *IndustryDataRoleGroup, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Runs returns request builder for IndustryDataIndustryDataRun collection
func (b *IndustryDataIndustryDataRootRequestBuilder) Runs() *IndustryDataIndustryDataRootRunsCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRootRunsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/runs"
	return bb
}

// IndustryDataIndustryDataRootRunsCollectionRequestBuilder is request builder for IndustryDataIndustryDataRun collection rcn
type IndustryDataIndustryDataRootRunsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataIndustryDataRun collection
func (b *IndustryDataIndustryDataRootRunsCollectionRequestBuilder) Request() *IndustryDataIndustryDataRootRunsCollectionRequest {
	return &IndustryDataIndustryDataRootRunsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataIndustryDataRun item
func (b *IndustryDataIndustryDataRootRunsCollectionRequestBuilder) ID(id string) *IndustryDataIndustryDataRunRequestBuilder {
	bb := &IndustryDataIndustryDataRunRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRootRunsCollectionRequest is request for IndustryDataIndustryDataRun collection
type IndustryDataIndustryDataRootRunsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataIndustryDataRun collection
func (r *IndustryDataIndustryDataRootRunsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataIndustryDataRun, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataIndustryDataRun
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataIndustryDataRun
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataIndustryDataRun collection, max N pages
func (r *IndustryDataIndustryDataRootRunsCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataIndustryDataRun, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataIndustryDataRun collection
func (r *IndustryDataIndustryDataRootRunsCollectionRequest) Get(ctx context.Context) ([]IndustryDataIndustryDataRun, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataIndustryDataRun collection
func (r *IndustryDataIndustryDataRootRunsCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataIndustryDataRun) (resObj *IndustryDataIndustryDataRun, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SourceSystems returns request builder for IndustryDataSourceSystemDefinition collection
func (b *IndustryDataIndustryDataRootRequestBuilder) SourceSystems() *IndustryDataIndustryDataRootSourceSystemsCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRootSourceSystemsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sourceSystems"
	return bb
}

// IndustryDataIndustryDataRootSourceSystemsCollectionRequestBuilder is request builder for IndustryDataSourceSystemDefinition collection rcn
type IndustryDataIndustryDataRootSourceSystemsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataSourceSystemDefinition collection
func (b *IndustryDataIndustryDataRootSourceSystemsCollectionRequestBuilder) Request() *IndustryDataIndustryDataRootSourceSystemsCollectionRequest {
	return &IndustryDataIndustryDataRootSourceSystemsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataSourceSystemDefinition item
func (b *IndustryDataIndustryDataRootSourceSystemsCollectionRequestBuilder) ID(id string) *IndustryDataSourceSystemDefinitionRequestBuilder {
	bb := &IndustryDataSourceSystemDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRootSourceSystemsCollectionRequest is request for IndustryDataSourceSystemDefinition collection
type IndustryDataIndustryDataRootSourceSystemsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataSourceSystemDefinition collection
func (r *IndustryDataIndustryDataRootSourceSystemsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataSourceSystemDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataSourceSystemDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataSourceSystemDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataSourceSystemDefinition collection, max N pages
func (r *IndustryDataIndustryDataRootSourceSystemsCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataSourceSystemDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataSourceSystemDefinition collection
func (r *IndustryDataIndustryDataRootSourceSystemsCollectionRequest) Get(ctx context.Context) ([]IndustryDataSourceSystemDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataSourceSystemDefinition collection
func (r *IndustryDataIndustryDataRootSourceSystemsCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataSourceSystemDefinition) (resObj *IndustryDataSourceSystemDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Years returns request builder for IndustryDataYearTimePeriodDefinition collection
func (b *IndustryDataIndustryDataRootRequestBuilder) Years() *IndustryDataIndustryDataRootYearsCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRootYearsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/years"
	return bb
}

// IndustryDataIndustryDataRootYearsCollectionRequestBuilder is request builder for IndustryDataYearTimePeriodDefinition collection rcn
type IndustryDataIndustryDataRootYearsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataYearTimePeriodDefinition collection
func (b *IndustryDataIndustryDataRootYearsCollectionRequestBuilder) Request() *IndustryDataIndustryDataRootYearsCollectionRequest {
	return &IndustryDataIndustryDataRootYearsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataYearTimePeriodDefinition item
func (b *IndustryDataIndustryDataRootYearsCollectionRequestBuilder) ID(id string) *IndustryDataYearTimePeriodDefinitionRequestBuilder {
	bb := &IndustryDataYearTimePeriodDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRootYearsCollectionRequest is request for IndustryDataYearTimePeriodDefinition collection
type IndustryDataIndustryDataRootYearsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataYearTimePeriodDefinition collection
func (r *IndustryDataIndustryDataRootYearsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataYearTimePeriodDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataYearTimePeriodDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataYearTimePeriodDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataYearTimePeriodDefinition collection, max N pages
func (r *IndustryDataIndustryDataRootYearsCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataYearTimePeriodDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataYearTimePeriodDefinition collection
func (r *IndustryDataIndustryDataRootYearsCollectionRequest) Get(ctx context.Context) ([]IndustryDataYearTimePeriodDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataYearTimePeriodDefinition collection
func (r *IndustryDataIndustryDataRootYearsCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataYearTimePeriodDefinition) (resObj *IndustryDataYearTimePeriodDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Activities returns request builder for IndustryDataIndustryDataRunActivity collection
func (b *IndustryDataIndustryDataRunRequestBuilder) Activities() *IndustryDataIndustryDataRunActivitiesCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRunActivitiesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activities"
	return bb
}

// IndustryDataIndustryDataRunActivitiesCollectionRequestBuilder is request builder for IndustryDataIndustryDataRunActivity collection rcn
type IndustryDataIndustryDataRunActivitiesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataIndustryDataRunActivity collection
func (b *IndustryDataIndustryDataRunActivitiesCollectionRequestBuilder) Request() *IndustryDataIndustryDataRunActivitiesCollectionRequest {
	return &IndustryDataIndustryDataRunActivitiesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataIndustryDataRunActivity item
func (b *IndustryDataIndustryDataRunActivitiesCollectionRequestBuilder) ID(id string) *IndustryDataIndustryDataRunActivityRequestBuilder {
	bb := &IndustryDataIndustryDataRunActivityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRunActivitiesCollectionRequest is request for IndustryDataIndustryDataRunActivity collection
type IndustryDataIndustryDataRunActivitiesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataIndustryDataRunActivity collection
func (r *IndustryDataIndustryDataRunActivitiesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataIndustryDataRunActivity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataIndustryDataRunActivity
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataIndustryDataRunActivity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataIndustryDataRunActivity collection, max N pages
func (r *IndustryDataIndustryDataRunActivitiesCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataIndustryDataRunActivity, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataIndustryDataRunActivity collection
func (r *IndustryDataIndustryDataRunActivitiesCollectionRequest) Get(ctx context.Context) ([]IndustryDataIndustryDataRunActivity, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataIndustryDataRunActivity collection
func (r *IndustryDataIndustryDataRunActivitiesCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataIndustryDataRunActivity) (resObj *IndustryDataIndustryDataRunActivity, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Activity is navigation property rn
func (b *IndustryDataIndustryDataRunActivityRequestBuilder) Activity() *IndustryDataIndustryDataActivityRequestBuilder {
	bb := &IndustryDataIndustryDataActivityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activity"
	return bb
}

// Value is navigation property rn
func (b *IndustryDataReferenceValueRequestBuilder) Value() *IndustryDataReferenceDefinitionRequestBuilder {
	bb := &IndustryDataReferenceDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/value"
	return bb
}

// RoleGroup is navigation property rn
func (b *IndustryDataUserMatchingSettingRequestBuilder) RoleGroup() *IndustryDataRoleGroupRequestBuilder {
	bb := &IndustryDataRoleGroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleGroup"
	return bb
}

// IndustryDataFileDataConnector returns request builder for IndustryDataFileDataConnector collection
func (b *IndustryDataIndustryDataConnectorRequestBuilder) IndustryDataFileDataConnector() *IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequestBuilder is request builder for IndustryDataFileDataConnector collection rcn
type IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataFileDataConnector collection
func (b *IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequestBuilder) Request() *IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequest {
	return &IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataFileDataConnector item
func (b *IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequestBuilder) ID(id string) *IndustryDataFileDataConnectorRequestBuilder {
	bb := &IndustryDataFileDataConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequest is request for IndustryDataFileDataConnector collection
type IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataFileDataConnector collection
func (r *IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataFileDataConnector, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataFileDataConnector
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataFileDataConnector
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataFileDataConnector collection, max N pages
func (r *IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataFileDataConnector, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataFileDataConnector collection
func (r *IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequest) Get(ctx context.Context) ([]IndustryDataFileDataConnector, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataFileDataConnector collection
func (r *IndustryDataIndustryDataConnectorIndustryDataFileDataConnectorCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataFileDataConnector) (resObj *IndustryDataFileDataConnector, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IndustryDataInboundFileFlow returns request builder for IndustryDataInboundFileFlow collection
func (b *IndustryDataInboundFlowRequestBuilder) IndustryDataInboundFileFlow() *IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequestBuilder {
	bb := &IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequestBuilder is request builder for IndustryDataInboundFileFlow collection rcn
type IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataInboundFileFlow collection
func (b *IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequestBuilder) Request() *IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequest {
	return &IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataInboundFileFlow item
func (b *IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequestBuilder) ID(id string) *IndustryDataInboundFileFlowRequestBuilder {
	bb := &IndustryDataInboundFileFlowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequest is request for IndustryDataInboundFileFlow collection
type IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataInboundFileFlow collection
func (r *IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataInboundFileFlow, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataInboundFileFlow
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataInboundFileFlow
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataInboundFileFlow collection, max N pages
func (r *IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataInboundFileFlow, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataInboundFileFlow collection
func (r *IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequest) Get(ctx context.Context) ([]IndustryDataInboundFileFlow, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataInboundFileFlow collection
func (r *IndustryDataInboundFlowIndustryDataInboundFileFlowCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataInboundFileFlow) (resObj *IndustryDataInboundFileFlow, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IndustryDataInboundFlowActivity returns request builder for IndustryDataInboundFlowActivity collection
func (b *IndustryDataIndustryDataRunActivityRequestBuilder) IndustryDataInboundFlowActivity() *IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequestBuilder is request builder for IndustryDataInboundFlowActivity collection rcn
type IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataInboundFlowActivity collection
func (b *IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequestBuilder) Request() *IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequest {
	return &IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataInboundFlowActivity item
func (b *IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequestBuilder) ID(id string) *IndustryDataInboundFlowActivityRequestBuilder {
	bb := &IndustryDataInboundFlowActivityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequest is request for IndustryDataInboundFlowActivity collection
type IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataInboundFlowActivity collection
func (r *IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataInboundFlowActivity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataInboundFlowActivity
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataInboundFlowActivity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataInboundFlowActivity collection, max N pages
func (r *IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataInboundFlowActivity, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataInboundFlowActivity collection
func (r *IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequest) Get(ctx context.Context) ([]IndustryDataInboundFlowActivity, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataInboundFlowActivity collection
func (r *IndustryDataIndustryDataRunActivityIndustryDataInboundFlowActivityCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataInboundFlowActivity) (resObj *IndustryDataInboundFlowActivity, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IndustryDataOutboundFlowActivity returns request builder for IndustryDataOutboundFlowActivity collection
func (b *IndustryDataIndustryDataRunActivityRequestBuilder) IndustryDataOutboundFlowActivity() *IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequestBuilder is request builder for IndustryDataOutboundFlowActivity collection rcn
type IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataOutboundFlowActivity collection
func (b *IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequestBuilder) Request() *IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequest {
	return &IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataOutboundFlowActivity item
func (b *IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequestBuilder) ID(id string) *IndustryDataOutboundFlowActivityRequestBuilder {
	bb := &IndustryDataOutboundFlowActivityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequest is request for IndustryDataOutboundFlowActivity collection
type IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataOutboundFlowActivity collection
func (r *IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataOutboundFlowActivity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataOutboundFlowActivity
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataOutboundFlowActivity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataOutboundFlowActivity collection, max N pages
func (r *IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataOutboundFlowActivity, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataOutboundFlowActivity collection
func (r *IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequest) Get(ctx context.Context) ([]IndustryDataOutboundFlowActivity, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataOutboundFlowActivity collection
func (r *IndustryDataIndustryDataRunActivityIndustryDataOutboundFlowActivityCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataOutboundFlowActivity) (resObj *IndustryDataOutboundFlowActivity, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IndustryDataValidateOperation returns request builder for IndustryDataValidateOperation collection
func (b *IndustryDataIndustryDataRootOperationsCollectionRequestBuilder) IndustryDataValidateOperation() *IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequestBuilder {
	bb := &IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequestBuilder is request builder for IndustryDataValidateOperation collection rcn
type IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IndustryDataValidateOperation collection
func (b *IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequestBuilder) Request() *IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequest {
	return &IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IndustryDataValidateOperation item
func (b *IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequestBuilder) ID(id string) *IndustryDataValidateOperationRequestBuilder {
	bb := &IndustryDataValidateOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequest is request for IndustryDataValidateOperation collection
type IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IndustryDataValidateOperation collection
func (r *IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IndustryDataValidateOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IndustryDataValidateOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IndustryDataValidateOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IndustryDataValidateOperation collection, max N pages
func (r *IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequest) GetN(ctx context.Context, n int) ([]IndustryDataValidateOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IndustryDataValidateOperation collection
func (r *IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequest) Get(ctx context.Context) ([]IndustryDataValidateOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IndustryDataValidateOperation collection
func (r *IndustryDataIndustryDataRootOperationsCollectionIndustryDataValidateOperationCollectionRequest) Add(ctx context.Context, reqObj *IndustryDataValidateOperation) (resObj *IndustryDataValidateOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
