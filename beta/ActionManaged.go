// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// ManagedDeviceCollectionBulkReprovisionCloudPcRequestParameter undocumented
type ManagedDeviceCollectionBulkReprovisionCloudPcRequestParameter struct {
	// ManagedDeviceIDs undocumented
	ManagedDeviceIDs []string `json:"managedDeviceIds,omitempty"`
}

// ManagedDeviceCollectionBulkRestoreCloudPcRequestParameter undocumented
type ManagedDeviceCollectionBulkRestoreCloudPcRequestParameter struct {
	// ManagedDeviceIDs undocumented
	ManagedDeviceIDs []string `json:"managedDeviceIds,omitempty"`
	// RestorePointDateTime undocumented
	RestorePointDateTime *time.Time `json:"restorePointDateTime,omitempty"`
	// TimeRange undocumented
	TimeRange *RestoreTimeRange `json:"timeRange,omitempty"`
}

// ManagedDeviceCollectionBulkSetCloudPcReviewStatusRequestParameter undocumented
type ManagedDeviceCollectionBulkSetCloudPcReviewStatusRequestParameter struct {
	// ManagedDeviceIDs undocumented
	ManagedDeviceIDs []string `json:"managedDeviceIds,omitempty"`
	// ReviewStatus undocumented
	ReviewStatus *CloudPcReviewStatus `json:"reviewStatus,omitempty"`
}

// ManagedDeviceCollectionDownloadAppDiagnosticsRequestParameter undocumented
type ManagedDeviceCollectionDownloadAppDiagnosticsRequestParameter struct {
	// Request undocumented
	Request *PowerliftDownloadRequestObject `json:"request,omitempty"`
}

// ManagedDeviceCollectionExecuteActionRequestParameter undocumented
type ManagedDeviceCollectionExecuteActionRequestParameter struct {
	// ActionName undocumented
	ActionName *ManagedDeviceRemoteAction `json:"actionName,omitempty"`
	// KeepEnrollmentData undocumented
	KeepEnrollmentData *bool `json:"keepEnrollmentData,omitempty"`
	// KeepUserData undocumented
	KeepUserData *bool `json:"keepUserData,omitempty"`
	// PersistEsimDataPlan undocumented
	PersistEsimDataPlan *bool `json:"persistEsimDataPlan,omitempty"`
	// DeviceIDs undocumented
	DeviceIDs []string `json:"deviceIds,omitempty"`
	// NotificationTitle undocumented
	NotificationTitle *string `json:"notificationTitle,omitempty"`
	// NotificationBody undocumented
	NotificationBody *string `json:"notificationBody,omitempty"`
	// DeviceName undocumented
	DeviceName *string `json:"deviceName,omitempty"`
	// CarrierURL undocumented
	CarrierURL *string `json:"carrierUrl,omitempty"`
	// DeprovisionReason undocumented
	DeprovisionReason *string `json:"deprovisionReason,omitempty"`
	// OrganizationalUnitPath undocumented
	OrganizationalUnitPath *string `json:"organizationalUnitPath,omitempty"`
}

// ManagedDeviceCollectionMoveDevicesToOURequestParameter undocumented
type ManagedDeviceCollectionMoveDevicesToOURequestParameter struct {
	// DeviceIDs undocumented
	DeviceIDs []UUID `json:"deviceIds,omitempty"`
	// OrganizationalUnitPath undocumented
	OrganizationalUnitPath *string `json:"organizationalUnitPath,omitempty"`
}

// ManagedAppPolicyTargetAppsRequestParameter undocumented
type ManagedAppPolicyTargetAppsRequestParameter struct {
	// Apps undocumented
	Apps []ManagedMobileApp `json:"apps,omitempty"`
}

// ManagedAppProtectionTargetAppsRequestParameter undocumented
type ManagedAppProtectionTargetAppsRequestParameter struct {
	// Apps undocumented
	Apps []ManagedMobileApp `json:"apps,omitempty"`
}

// ManagedDeviceReprovisionCloudPcRequestParameter undocumented
type ManagedDeviceReprovisionCloudPcRequestParameter struct {
}

// ManagedDeviceResizeCloudPcRequestParameter undocumented
type ManagedDeviceResizeCloudPcRequestParameter struct {
	// TargetServicePlanID undocumented
	TargetServicePlanID *string `json:"targetServicePlanId,omitempty"`
}

// ManagedDeviceRestoreCloudPcRequestParameter undocumented
type ManagedDeviceRestoreCloudPcRequestParameter struct {
	// CloudPcSnapshotID undocumented
	CloudPcSnapshotID *string `json:"cloudPcSnapshotId,omitempty"`
}

// ManagedDeviceSetCloudPcReviewStatusRequestParameter undocumented
type ManagedDeviceSetCloudPcReviewStatusRequestParameter struct {
	// ReviewStatus undocumented
	ReviewStatus *CloudPcReviewStatus `json:"reviewStatus,omitempty"`
}

// ManagedDeviceOverrideComplianceStateRequestParameter undocumented
type ManagedDeviceOverrideComplianceStateRequestParameter struct {
	// ComplianceState undocumented
	ComplianceState *AdministratorConfiguredDeviceComplianceState `json:"complianceState,omitempty"`
	// RemediationURL undocumented
	RemediationURL *string `json:"remediationUrl,omitempty"`
}

// ManagedDeviceActivateDeviceEsimRequestParameter undocumented
type ManagedDeviceActivateDeviceEsimRequestParameter struct {
	// CarrierURL undocumented
	CarrierURL *string `json:"carrierUrl,omitempty"`
}

// ManagedDeviceBypassActivationLockRequestParameter undocumented
type ManagedDeviceBypassActivationLockRequestParameter struct {
}

// ManagedDeviceCleanWindowsDeviceRequestParameter undocumented
type ManagedDeviceCleanWindowsDeviceRequestParameter struct {
	// KeepUserData undocumented
	KeepUserData *bool `json:"keepUserData,omitempty"`
}

// ManagedDeviceCreateDeviceLogCollectionRequestActionRequestParameter undocumented
type ManagedDeviceCreateDeviceLogCollectionRequestActionRequestParameter struct {
	// TemplateType undocumented
	TemplateType *DeviceLogCollectionRequestObject `json:"templateType,omitempty"`
}

// ManagedDeviceDeleteUserFromSharedAppleDeviceRequestParameter undocumented
type ManagedDeviceDeleteUserFromSharedAppleDeviceRequestParameter struct {
	// UserPrincipalName undocumented
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
}

// ManagedDeviceDeprovisionRequestParameter undocumented
type ManagedDeviceDeprovisionRequestParameter struct {
	// DeprovisionReason undocumented
	DeprovisionReason *string `json:"deprovisionReason,omitempty"`
}

// ManagedDeviceDisableRequestParameter undocumented
type ManagedDeviceDisableRequestParameter struct {
}

// ManagedDeviceDisableLostModeRequestParameter undocumented
type ManagedDeviceDisableLostModeRequestParameter struct {
}

// ManagedDeviceEnableLostModeRequestParameter undocumented
type ManagedDeviceEnableLostModeRequestParameter struct {
	// Message undocumented
	Message *string `json:"message,omitempty"`
	// PhoneNumber undocumented
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// Footer undocumented
	Footer *string `json:"footer,omitempty"`
}

// ManagedDeviceEnrollNowActionRequestParameter undocumented
type ManagedDeviceEnrollNowActionRequestParameter struct {
}

// ManagedDeviceInitiateMobileDeviceManagementKeyRecoveryRequestParameter undocumented
type ManagedDeviceInitiateMobileDeviceManagementKeyRecoveryRequestParameter struct {
}

// ManagedDeviceInitiateOnDemandProactiveRemediationRequestParameter undocumented
type ManagedDeviceInitiateOnDemandProactiveRemediationRequestParameter struct {
	// ScriptPolicyID undocumented
	ScriptPolicyID *string `json:"scriptPolicyId,omitempty"`
}

// ManagedDeviceLocateDeviceRequestParameter undocumented
type ManagedDeviceLocateDeviceRequestParameter struct {
}

// ManagedDeviceLogoutSharedAppleDeviceActiveUserRequestParameter undocumented
type ManagedDeviceLogoutSharedAppleDeviceActiveUserRequestParameter struct {
}

// ManagedDevicePlayLostModeSoundRequestParameter undocumented
type ManagedDevicePlayLostModeSoundRequestParameter struct {
	// DurationInMinutes undocumented
	DurationInMinutes *string `json:"durationInMinutes,omitempty"`
}

// ManagedDeviceRebootNowRequestParameter undocumented
type ManagedDeviceRebootNowRequestParameter struct {
}

// ManagedDeviceRecoverPasscodeRequestParameter undocumented
type ManagedDeviceRecoverPasscodeRequestParameter struct {
}

// ManagedDeviceReenableRequestParameter undocumented
type ManagedDeviceReenableRequestParameter struct {
}

// ManagedDeviceRemoteLockRequestParameter undocumented
type ManagedDeviceRemoteLockRequestParameter struct {
}

// ManagedDeviceRemoveDeviceFirmwareConfigurationInterfaceManagementRequestParameter undocumented
type ManagedDeviceRemoveDeviceFirmwareConfigurationInterfaceManagementRequestParameter struct {
}

// ManagedDeviceRequestRemoteAssistanceRequestParameter undocumented
type ManagedDeviceRequestRemoteAssistanceRequestParameter struct {
}

// ManagedDeviceResetPasscodeRequestParameter undocumented
type ManagedDeviceResetPasscodeRequestParameter struct {
}

// ManagedDeviceRetireRequestParameter undocumented
type ManagedDeviceRetireRequestParameter struct {
}

// ManagedDeviceRevokeAppleVPPLicensesRequestParameter undocumented
type ManagedDeviceRevokeAppleVPPLicensesRequestParameter struct {
}

// ManagedDeviceRotateBitLockerKeysRequestParameter undocumented
type ManagedDeviceRotateBitLockerKeysRequestParameter struct {
}

// ManagedDeviceRotateFileVaultKeyRequestParameter undocumented
type ManagedDeviceRotateFileVaultKeyRequestParameter struct {
}

// ManagedDeviceRotateLocalAdminPasswordRequestParameter undocumented
type ManagedDeviceRotateLocalAdminPasswordRequestParameter struct {
}

// ManagedDeviceSendCustomNotificationToCompanyPortalRequestParameter undocumented
type ManagedDeviceSendCustomNotificationToCompanyPortalRequestParameter struct {
	// NotificationTitle undocumented
	NotificationTitle *string `json:"notificationTitle,omitempty"`
	// NotificationBody undocumented
	NotificationBody *string `json:"notificationBody,omitempty"`
}

// ManagedDeviceSetDeviceNameRequestParameter undocumented
type ManagedDeviceSetDeviceNameRequestParameter struct {
	// DeviceName undocumented
	DeviceName *string `json:"deviceName,omitempty"`
}

// ManagedDeviceShutDownRequestParameter undocumented
type ManagedDeviceShutDownRequestParameter struct {
}

// ManagedDeviceSyncDeviceRequestParameter undocumented
type ManagedDeviceSyncDeviceRequestParameter struct {
}

// ManagedDeviceTriggerConfigurationManagerActionRequestParameter undocumented
type ManagedDeviceTriggerConfigurationManagerActionRequestParameter struct {
	// ConfigurationManagerAction undocumented
	ConfigurationManagerAction *ConfigurationManagerAction `json:"configurationManagerAction,omitempty"`
}

// ManagedDeviceUpdateWindowsDeviceAccountRequestParameter undocumented
type ManagedDeviceUpdateWindowsDeviceAccountRequestParameter struct {
	// UpdateWindowsDeviceAccountActionParameter undocumented
	UpdateWindowsDeviceAccountActionParameter *UpdateWindowsDeviceAccountActionParameter `json:"updateWindowsDeviceAccountActionParameter,omitempty"`
}

// ManagedDeviceWindowsDefenderScanRequestParameter undocumented
type ManagedDeviceWindowsDefenderScanRequestParameter struct {
	// QuickScan undocumented
	QuickScan *bool `json:"quickScan,omitempty"`
}

// ManagedDeviceWindowsDefenderUpdateSignaturesRequestParameter undocumented
type ManagedDeviceWindowsDefenderUpdateSignaturesRequestParameter struct {
}

// ManagedDeviceWipeRequestParameter undocumented
type ManagedDeviceWipeRequestParameter struct {
	// KeepEnrollmentData undocumented
	KeepEnrollmentData *bool `json:"keepEnrollmentData,omitempty"`
	// KeepUserData undocumented
	KeepUserData *bool `json:"keepUserData,omitempty"`
	// MacOsUnlockCode undocumented
	MacOsUnlockCode *string `json:"macOsUnlockCode,omitempty"`
	// PersistEsimDataPlan undocumented
	PersistEsimDataPlan *bool `json:"persistEsimDataPlan,omitempty"`
	// UseProtectedWipe undocumented
	UseProtectedWipe *bool `json:"useProtectedWipe,omitempty"`
}

// ManagedDeviceCreateRemoteHelpSessionRequestParameter undocumented
type ManagedDeviceCreateRemoteHelpSessionRequestParameter struct {
	// SessionType undocumented
	SessionType *string `json:"sessionType,omitempty"`
}

// ManagedDeviceEndRemoteHelpSessionRequestParameter undocumented
type ManagedDeviceEndRemoteHelpSessionRequestParameter struct {
	// SessionKey undocumented
	SessionKey *string `json:"sessionKey,omitempty"`
}

// ManagedDeviceRequestRemoteHelpSessionAccessRequestParameter undocumented
type ManagedDeviceRequestRemoteHelpSessionAccessRequestParameter struct {
	// SessionKey undocumented
	SessionKey *string `json:"sessionKey,omitempty"`
	// PubSubConnectionID undocumented
	PubSubConnectionID *string `json:"pubSubConnectionId,omitempty"`
}

// ManagedDeviceMobileAppConfigurationAssignRequestParameter undocumented
type ManagedDeviceMobileAppConfigurationAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []ManagedDeviceMobileAppConfigurationAssignment `json:"assignments,omitempty"`
}

// ManagedEBookAssignRequestParameter undocumented
type ManagedEBookAssignRequestParameter struct {
	// ManagedEBookAssignments undocumented
	ManagedEBookAssignments []ManagedEBookAssignment `json:"managedEBookAssignments,omitempty"`
}

// Settings returns request builder for DeviceManagementConfigurationSetting collection
func (b *ManagedAppConfigurationRequestBuilder) Settings() *ManagedAppConfigurationSettingsCollectionRequestBuilder {
	bb := &ManagedAppConfigurationSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// ManagedAppConfigurationSettingsCollectionRequestBuilder is request builder for DeviceManagementConfigurationSetting collection rcn
type ManagedAppConfigurationSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceManagementConfigurationSetting collection
func (b *ManagedAppConfigurationSettingsCollectionRequestBuilder) Request() *ManagedAppConfigurationSettingsCollectionRequest {
	return &ManagedAppConfigurationSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceManagementConfigurationSetting item
func (b *ManagedAppConfigurationSettingsCollectionRequestBuilder) ID(id string) *DeviceManagementConfigurationSettingRequestBuilder {
	bb := &DeviceManagementConfigurationSettingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedAppConfigurationSettingsCollectionRequest is request for DeviceManagementConfigurationSetting collection
type ManagedAppConfigurationSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceManagementConfigurationSetting collection
func (r *ManagedAppConfigurationSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceManagementConfigurationSetting, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceManagementConfigurationSetting
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceManagementConfigurationSetting
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceManagementConfigurationSetting collection, max N pages
func (r *ManagedAppConfigurationSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceManagementConfigurationSetting, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceManagementConfigurationSetting collection
func (r *ManagedAppConfigurationSettingsCollectionRequest) Get(ctx context.Context) ([]DeviceManagementConfigurationSetting, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceManagementConfigurationSetting collection
func (r *ManagedAppConfigurationSettingsCollectionRequest) Add(ctx context.Context, reqObj *DeviceManagementConfigurationSetting) (resObj *DeviceManagementConfigurationSetting, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppliedPolicies returns request builder for ManagedAppPolicy collection
func (b *ManagedAppRegistrationRequestBuilder) AppliedPolicies() *ManagedAppRegistrationAppliedPoliciesCollectionRequestBuilder {
	bb := &ManagedAppRegistrationAppliedPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appliedPolicies"
	return bb
}

// ManagedAppRegistrationAppliedPoliciesCollectionRequestBuilder is request builder for ManagedAppPolicy collection rcn
type ManagedAppRegistrationAppliedPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAppPolicy collection
func (b *ManagedAppRegistrationAppliedPoliciesCollectionRequestBuilder) Request() *ManagedAppRegistrationAppliedPoliciesCollectionRequest {
	return &ManagedAppRegistrationAppliedPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAppPolicy item
func (b *ManagedAppRegistrationAppliedPoliciesCollectionRequestBuilder) ID(id string) *ManagedAppPolicyRequestBuilder {
	bb := &ManagedAppPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedAppRegistrationAppliedPoliciesCollectionRequest is request for ManagedAppPolicy collection
type ManagedAppRegistrationAppliedPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAppPolicy collection
func (r *ManagedAppRegistrationAppliedPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAppPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAppPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAppPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAppPolicy collection, max N pages
func (r *ManagedAppRegistrationAppliedPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAppPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAppPolicy collection
func (r *ManagedAppRegistrationAppliedPoliciesCollectionRequest) Get(ctx context.Context) ([]ManagedAppPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAppPolicy collection
func (r *ManagedAppRegistrationAppliedPoliciesCollectionRequest) Add(ctx context.Context, reqObj *ManagedAppPolicy) (resObj *ManagedAppPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IntendedPolicies returns request builder for ManagedAppPolicy collection
func (b *ManagedAppRegistrationRequestBuilder) IntendedPolicies() *ManagedAppRegistrationIntendedPoliciesCollectionRequestBuilder {
	bb := &ManagedAppRegistrationIntendedPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/intendedPolicies"
	return bb
}

// ManagedAppRegistrationIntendedPoliciesCollectionRequestBuilder is request builder for ManagedAppPolicy collection rcn
type ManagedAppRegistrationIntendedPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAppPolicy collection
func (b *ManagedAppRegistrationIntendedPoliciesCollectionRequestBuilder) Request() *ManagedAppRegistrationIntendedPoliciesCollectionRequest {
	return &ManagedAppRegistrationIntendedPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAppPolicy item
func (b *ManagedAppRegistrationIntendedPoliciesCollectionRequestBuilder) ID(id string) *ManagedAppPolicyRequestBuilder {
	bb := &ManagedAppPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedAppRegistrationIntendedPoliciesCollectionRequest is request for ManagedAppPolicy collection
type ManagedAppRegistrationIntendedPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAppPolicy collection
func (r *ManagedAppRegistrationIntendedPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAppPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAppPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAppPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAppPolicy collection, max N pages
func (r *ManagedAppRegistrationIntendedPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAppPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAppPolicy collection
func (r *ManagedAppRegistrationIntendedPoliciesCollectionRequest) Get(ctx context.Context) ([]ManagedAppPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAppPolicy collection
func (r *ManagedAppRegistrationIntendedPoliciesCollectionRequest) Add(ctx context.Context, reqObj *ManagedAppPolicy) (resObj *ManagedAppPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Operations returns request builder for ManagedAppOperation collection
func (b *ManagedAppRegistrationRequestBuilder) Operations() *ManagedAppRegistrationOperationsCollectionRequestBuilder {
	bb := &ManagedAppRegistrationOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// ManagedAppRegistrationOperationsCollectionRequestBuilder is request builder for ManagedAppOperation collection rcn
type ManagedAppRegistrationOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAppOperation collection
func (b *ManagedAppRegistrationOperationsCollectionRequestBuilder) Request() *ManagedAppRegistrationOperationsCollectionRequest {
	return &ManagedAppRegistrationOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAppOperation item
func (b *ManagedAppRegistrationOperationsCollectionRequestBuilder) ID(id string) *ManagedAppOperationRequestBuilder {
	bb := &ManagedAppOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedAppRegistrationOperationsCollectionRequest is request for ManagedAppOperation collection
type ManagedAppRegistrationOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAppOperation collection
func (r *ManagedAppRegistrationOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAppOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAppOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAppOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAppOperation collection, max N pages
func (r *ManagedAppRegistrationOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAppOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAppOperation collection
func (r *ManagedAppRegistrationOperationsCollectionRequest) Get(ctx context.Context) ([]ManagedAppOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAppOperation collection
func (r *ManagedAppRegistrationOperationsCollectionRequest) Add(ctx context.Context, reqObj *ManagedAppOperation) (resObj *ManagedAppOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AssignmentFilterEvaluationStatusDetails returns request builder for AssignmentFilterEvaluationStatusDetails collection
func (b *ManagedDeviceRequestBuilder) AssignmentFilterEvaluationStatusDetails() *ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequestBuilder {
	bb := &ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignmentFilterEvaluationStatusDetails"
	return bb
}

// ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequestBuilder is request builder for AssignmentFilterEvaluationStatusDetails collection rcn
type ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AssignmentFilterEvaluationStatusDetails collection
func (b *ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequestBuilder) Request() *ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequest {
	return &ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AssignmentFilterEvaluationStatusDetails item
func (b *ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequestBuilder) ID(id string) *AssignmentFilterEvaluationStatusDetailsRequestBuilder {
	bb := &AssignmentFilterEvaluationStatusDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequest is request for AssignmentFilterEvaluationStatusDetails collection
type ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AssignmentFilterEvaluationStatusDetails collection
func (r *ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AssignmentFilterEvaluationStatusDetails, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AssignmentFilterEvaluationStatusDetails
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AssignmentFilterEvaluationStatusDetails
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AssignmentFilterEvaluationStatusDetails collection, max N pages
func (r *ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequest) GetN(ctx context.Context, n int) ([]AssignmentFilterEvaluationStatusDetails, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AssignmentFilterEvaluationStatusDetails collection
func (r *ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequest) Get(ctx context.Context) ([]AssignmentFilterEvaluationStatusDetails, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AssignmentFilterEvaluationStatusDetails collection
func (r *ManagedDeviceAssignmentFilterEvaluationStatusDetailsCollectionRequest) Add(ctx context.Context, reqObj *AssignmentFilterEvaluationStatusDetails) (resObj *AssignmentFilterEvaluationStatusDetails, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DetectedApps returns request builder for DetectedApp collection
func (b *ManagedDeviceRequestBuilder) DetectedApps() *ManagedDeviceDetectedAppsCollectionRequestBuilder {
	bb := &ManagedDeviceDetectedAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/detectedApps"
	return bb
}

// ManagedDeviceDetectedAppsCollectionRequestBuilder is request builder for DetectedApp collection rcn
type ManagedDeviceDetectedAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DetectedApp collection
func (b *ManagedDeviceDetectedAppsCollectionRequestBuilder) Request() *ManagedDeviceDetectedAppsCollectionRequest {
	return &ManagedDeviceDetectedAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DetectedApp item
func (b *ManagedDeviceDetectedAppsCollectionRequestBuilder) ID(id string) *DetectedAppRequestBuilder {
	bb := &DetectedAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceDetectedAppsCollectionRequest is request for DetectedApp collection
type ManagedDeviceDetectedAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DetectedApp collection
func (r *ManagedDeviceDetectedAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DetectedApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DetectedApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DetectedApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DetectedApp collection, max N pages
func (r *ManagedDeviceDetectedAppsCollectionRequest) GetN(ctx context.Context, n int) ([]DetectedApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DetectedApp collection
func (r *ManagedDeviceDetectedAppsCollectionRequest) Get(ctx context.Context) ([]DetectedApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DetectedApp collection
func (r *ManagedDeviceDetectedAppsCollectionRequest) Add(ctx context.Context, reqObj *DetectedApp) (resObj *DetectedApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceCategory is navigation property rn
func (b *ManagedDeviceRequestBuilder) DeviceCategory() *DeviceCategoryRequestBuilder {
	bb := &DeviceCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceCategory"
	return bb
}

// DeviceCompliancePolicyStates returns request builder for DeviceCompliancePolicyState collection
func (b *ManagedDeviceRequestBuilder) DeviceCompliancePolicyStates() *ManagedDeviceDeviceCompliancePolicyStatesCollectionRequestBuilder {
	bb := &ManagedDeviceDeviceCompliancePolicyStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceCompliancePolicyStates"
	return bb
}

// ManagedDeviceDeviceCompliancePolicyStatesCollectionRequestBuilder is request builder for DeviceCompliancePolicyState collection rcn
type ManagedDeviceDeviceCompliancePolicyStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceCompliancePolicyState collection
func (b *ManagedDeviceDeviceCompliancePolicyStatesCollectionRequestBuilder) Request() *ManagedDeviceDeviceCompliancePolicyStatesCollectionRequest {
	return &ManagedDeviceDeviceCompliancePolicyStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceCompliancePolicyState item
func (b *ManagedDeviceDeviceCompliancePolicyStatesCollectionRequestBuilder) ID(id string) *DeviceCompliancePolicyStateRequestBuilder {
	bb := &DeviceCompliancePolicyStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceDeviceCompliancePolicyStatesCollectionRequest is request for DeviceCompliancePolicyState collection
type ManagedDeviceDeviceCompliancePolicyStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceCompliancePolicyState collection
func (r *ManagedDeviceDeviceCompliancePolicyStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceCompliancePolicyState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceCompliancePolicyState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceCompliancePolicyState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceCompliancePolicyState collection, max N pages
func (r *ManagedDeviceDeviceCompliancePolicyStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceCompliancePolicyState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceCompliancePolicyState collection
func (r *ManagedDeviceDeviceCompliancePolicyStatesCollectionRequest) Get(ctx context.Context) ([]DeviceCompliancePolicyState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceCompliancePolicyState collection
func (r *ManagedDeviceDeviceCompliancePolicyStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceCompliancePolicyState) (resObj *DeviceCompliancePolicyState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceConfigurationStates returns request builder for DeviceConfigurationState collection
func (b *ManagedDeviceRequestBuilder) DeviceConfigurationStates() *ManagedDeviceDeviceConfigurationStatesCollectionRequestBuilder {
	bb := &ManagedDeviceDeviceConfigurationStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceConfigurationStates"
	return bb
}

// ManagedDeviceDeviceConfigurationStatesCollectionRequestBuilder is request builder for DeviceConfigurationState collection rcn
type ManagedDeviceDeviceConfigurationStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfigurationState collection
func (b *ManagedDeviceDeviceConfigurationStatesCollectionRequestBuilder) Request() *ManagedDeviceDeviceConfigurationStatesCollectionRequest {
	return &ManagedDeviceDeviceConfigurationStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfigurationState item
func (b *ManagedDeviceDeviceConfigurationStatesCollectionRequestBuilder) ID(id string) *DeviceConfigurationStateRequestBuilder {
	bb := &DeviceConfigurationStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceDeviceConfigurationStatesCollectionRequest is request for DeviceConfigurationState collection
type ManagedDeviceDeviceConfigurationStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfigurationState collection
func (r *ManagedDeviceDeviceConfigurationStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfigurationState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfigurationState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfigurationState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfigurationState collection, max N pages
func (r *ManagedDeviceDeviceConfigurationStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfigurationState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfigurationState collection
func (r *ManagedDeviceDeviceConfigurationStatesCollectionRequest) Get(ctx context.Context) ([]DeviceConfigurationState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfigurationState collection
func (r *ManagedDeviceDeviceConfigurationStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfigurationState) (resObj *DeviceConfigurationState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceHealthScriptStates returns request builder for DeviceHealthScriptPolicyState collection
func (b *ManagedDeviceRequestBuilder) DeviceHealthScriptStates() *ManagedDeviceDeviceHealthScriptStatesCollectionRequestBuilder {
	bb := &ManagedDeviceDeviceHealthScriptStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceHealthScriptStates"
	return bb
}

// ManagedDeviceDeviceHealthScriptStatesCollectionRequestBuilder is request builder for DeviceHealthScriptPolicyState collection rcn
type ManagedDeviceDeviceHealthScriptStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceHealthScriptPolicyState collection
func (b *ManagedDeviceDeviceHealthScriptStatesCollectionRequestBuilder) Request() *ManagedDeviceDeviceHealthScriptStatesCollectionRequest {
	return &ManagedDeviceDeviceHealthScriptStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceHealthScriptPolicyState item
func (b *ManagedDeviceDeviceHealthScriptStatesCollectionRequestBuilder) ID(id string) *DeviceHealthScriptPolicyStateRequestBuilder {
	bb := &DeviceHealthScriptPolicyStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceDeviceHealthScriptStatesCollectionRequest is request for DeviceHealthScriptPolicyState collection
type ManagedDeviceDeviceHealthScriptStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceHealthScriptPolicyState collection
func (r *ManagedDeviceDeviceHealthScriptStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceHealthScriptPolicyState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceHealthScriptPolicyState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceHealthScriptPolicyState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceHealthScriptPolicyState collection, max N pages
func (r *ManagedDeviceDeviceHealthScriptStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceHealthScriptPolicyState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceHealthScriptPolicyState collection
func (r *ManagedDeviceDeviceHealthScriptStatesCollectionRequest) Get(ctx context.Context) ([]DeviceHealthScriptPolicyState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceHealthScriptPolicyState collection
func (r *ManagedDeviceDeviceHealthScriptStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceHealthScriptPolicyState) (resObj *DeviceHealthScriptPolicyState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// LogCollectionRequests returns request builder for DeviceLogCollectionResponse collection
func (b *ManagedDeviceRequestBuilder) LogCollectionRequests() *ManagedDeviceLogCollectionRequestsCollectionRequestBuilder {
	bb := &ManagedDeviceLogCollectionRequestsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/logCollectionRequests"
	return bb
}

// ManagedDeviceLogCollectionRequestsCollectionRequestBuilder is request builder for DeviceLogCollectionResponse collection rcn
type ManagedDeviceLogCollectionRequestsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceLogCollectionResponse collection
func (b *ManagedDeviceLogCollectionRequestsCollectionRequestBuilder) Request() *ManagedDeviceLogCollectionRequestsCollectionRequest {
	return &ManagedDeviceLogCollectionRequestsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceLogCollectionResponse item
func (b *ManagedDeviceLogCollectionRequestsCollectionRequestBuilder) ID(id string) *DeviceLogCollectionResponseRequestBuilder {
	bb := &DeviceLogCollectionResponseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceLogCollectionRequestsCollectionRequest is request for DeviceLogCollectionResponse collection
type ManagedDeviceLogCollectionRequestsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceLogCollectionResponse collection
func (r *ManagedDeviceLogCollectionRequestsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceLogCollectionResponse, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceLogCollectionResponse
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceLogCollectionResponse
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceLogCollectionResponse collection, max N pages
func (r *ManagedDeviceLogCollectionRequestsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceLogCollectionResponse, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceLogCollectionResponse collection
func (r *ManagedDeviceLogCollectionRequestsCollectionRequest) Get(ctx context.Context) ([]DeviceLogCollectionResponse, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceLogCollectionResponse collection
func (r *ManagedDeviceLogCollectionRequestsCollectionRequest) Add(ctx context.Context, reqObj *DeviceLogCollectionResponse) (resObj *DeviceLogCollectionResponse, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceMobileAppConfigurationStates returns request builder for ManagedDeviceMobileAppConfigurationState collection
func (b *ManagedDeviceRequestBuilder) ManagedDeviceMobileAppConfigurationStates() *ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequestBuilder {
	bb := &ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceMobileAppConfigurationStates"
	return bb
}

// ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequestBuilder is request builder for ManagedDeviceMobileAppConfigurationState collection rcn
type ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceMobileAppConfigurationState collection
func (b *ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequestBuilder) Request() *ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequest {
	return &ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceMobileAppConfigurationState item
func (b *ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceMobileAppConfigurationStateRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequest is request for ManagedDeviceMobileAppConfigurationState collection
type ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceMobileAppConfigurationState collection
func (r *ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceMobileAppConfigurationState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceMobileAppConfigurationState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceMobileAppConfigurationState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceMobileAppConfigurationState collection, max N pages
func (r *ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceMobileAppConfigurationState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceMobileAppConfigurationState collection
func (r *ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceMobileAppConfigurationState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceMobileAppConfigurationState collection
func (r *ManagedDeviceManagedDeviceMobileAppConfigurationStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceMobileAppConfigurationState) (resObj *ManagedDeviceMobileAppConfigurationState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityBaselineStates returns request builder for SecurityBaselineState collection
func (b *ManagedDeviceRequestBuilder) SecurityBaselineStates() *ManagedDeviceSecurityBaselineStatesCollectionRequestBuilder {
	bb := &ManagedDeviceSecurityBaselineStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/securityBaselineStates"
	return bb
}

// ManagedDeviceSecurityBaselineStatesCollectionRequestBuilder is request builder for SecurityBaselineState collection rcn
type ManagedDeviceSecurityBaselineStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityBaselineState collection
func (b *ManagedDeviceSecurityBaselineStatesCollectionRequestBuilder) Request() *ManagedDeviceSecurityBaselineStatesCollectionRequest {
	return &ManagedDeviceSecurityBaselineStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityBaselineState item
func (b *ManagedDeviceSecurityBaselineStatesCollectionRequestBuilder) ID(id string) *SecurityBaselineStateRequestBuilder {
	bb := &SecurityBaselineStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceSecurityBaselineStatesCollectionRequest is request for SecurityBaselineState collection
type ManagedDeviceSecurityBaselineStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityBaselineState collection
func (r *ManagedDeviceSecurityBaselineStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityBaselineState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityBaselineState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityBaselineState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityBaselineState collection, max N pages
func (r *ManagedDeviceSecurityBaselineStatesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityBaselineState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityBaselineState collection
func (r *ManagedDeviceSecurityBaselineStatesCollectionRequest) Get(ctx context.Context) ([]SecurityBaselineState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityBaselineState collection
func (r *ManagedDeviceSecurityBaselineStatesCollectionRequest) Add(ctx context.Context, reqObj *SecurityBaselineState) (resObj *SecurityBaselineState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Users returns request builder for User collection
func (b *ManagedDeviceRequestBuilder) Users() *ManagedDeviceUsersCollectionRequestBuilder {
	bb := &ManagedDeviceUsersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/users"
	return bb
}

// ManagedDeviceUsersCollectionRequestBuilder is request builder for User collection rcn
type ManagedDeviceUsersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for User collection
func (b *ManagedDeviceUsersCollectionRequestBuilder) Request() *ManagedDeviceUsersCollectionRequest {
	return &ManagedDeviceUsersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for User item
func (b *ManagedDeviceUsersCollectionRequestBuilder) ID(id string) *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceUsersCollectionRequest is request for User collection
type ManagedDeviceUsersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for User collection
func (r *ManagedDeviceUsersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]User, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []User
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []User
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for User collection, max N pages
func (r *ManagedDeviceUsersCollectionRequest) GetN(ctx context.Context, n int) ([]User, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for User collection
func (r *ManagedDeviceUsersCollectionRequest) Get(ctx context.Context) ([]User, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for User collection
func (r *ManagedDeviceUsersCollectionRequest) Add(ctx context.Context, reqObj *User) (resObj *User, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsProtectionState is navigation property rn
func (b *ManagedDeviceRequestBuilder) WindowsProtectionState() *WindowsProtectionStateRequestBuilder {
	bb := &WindowsProtectionStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsProtectionState"
	return bb
}

// Assignments returns request builder for ManagedDeviceMobileAppConfigurationAssignment collection
func (b *ManagedDeviceMobileAppConfigurationRequestBuilder) Assignments() *ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequestBuilder is request builder for ManagedDeviceMobileAppConfigurationAssignment collection rcn
type ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceMobileAppConfigurationAssignment collection
func (b *ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequestBuilder) Request() *ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequest {
	return &ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceMobileAppConfigurationAssignment item
func (b *ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequestBuilder) ID(id string) *ManagedDeviceMobileAppConfigurationAssignmentRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequest is request for ManagedDeviceMobileAppConfigurationAssignment collection
type ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceMobileAppConfigurationAssignment collection
func (r *ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceMobileAppConfigurationAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceMobileAppConfigurationAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceMobileAppConfigurationAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceMobileAppConfigurationAssignment collection, max N pages
func (r *ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceMobileAppConfigurationAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceMobileAppConfigurationAssignment collection
func (r *ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceMobileAppConfigurationAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceMobileAppConfigurationAssignment collection
func (r *ManagedDeviceMobileAppConfigurationAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceMobileAppConfigurationAssignment) (resObj *ManagedDeviceMobileAppConfigurationAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceStatusSummary is navigation property rn
func (b *ManagedDeviceMobileAppConfigurationRequestBuilder) DeviceStatusSummary() *ManagedDeviceMobileAppConfigurationDeviceSummaryRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationDeviceSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStatusSummary"
	return bb
}

// DeviceStatuses returns request builder for ManagedDeviceMobileAppConfigurationDeviceStatus collection
func (b *ManagedDeviceMobileAppConfigurationRequestBuilder) DeviceStatuses() *ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStatuses"
	return bb
}

// ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequestBuilder is request builder for ManagedDeviceMobileAppConfigurationDeviceStatus collection rcn
type ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceMobileAppConfigurationDeviceStatus collection
func (b *ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequestBuilder) Request() *ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequest {
	return &ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceMobileAppConfigurationDeviceStatus item
func (b *ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequestBuilder) ID(id string) *ManagedDeviceMobileAppConfigurationDeviceStatusRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationDeviceStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequest is request for ManagedDeviceMobileAppConfigurationDeviceStatus collection
type ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceMobileAppConfigurationDeviceStatus collection
func (r *ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceMobileAppConfigurationDeviceStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceMobileAppConfigurationDeviceStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceMobileAppConfigurationDeviceStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceMobileAppConfigurationDeviceStatus collection, max N pages
func (r *ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceMobileAppConfigurationDeviceStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceMobileAppConfigurationDeviceStatus collection
func (r *ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceMobileAppConfigurationDeviceStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceMobileAppConfigurationDeviceStatus collection
func (r *ManagedDeviceMobileAppConfigurationDeviceStatusesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceMobileAppConfigurationDeviceStatus) (resObj *ManagedDeviceMobileAppConfigurationDeviceStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserStatusSummary is navigation property rn
func (b *ManagedDeviceMobileAppConfigurationRequestBuilder) UserStatusSummary() *ManagedDeviceMobileAppConfigurationUserSummaryRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationUserSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userStatusSummary"
	return bb
}

// UserStatuses returns request builder for ManagedDeviceMobileAppConfigurationUserStatus collection
func (b *ManagedDeviceMobileAppConfigurationRequestBuilder) UserStatuses() *ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userStatuses"
	return bb
}

// ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequestBuilder is request builder for ManagedDeviceMobileAppConfigurationUserStatus collection rcn
type ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceMobileAppConfigurationUserStatus collection
func (b *ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequestBuilder) Request() *ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequest {
	return &ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceMobileAppConfigurationUserStatus item
func (b *ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequestBuilder) ID(id string) *ManagedDeviceMobileAppConfigurationUserStatusRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationUserStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequest is request for ManagedDeviceMobileAppConfigurationUserStatus collection
type ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceMobileAppConfigurationUserStatus collection
func (r *ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceMobileAppConfigurationUserStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceMobileAppConfigurationUserStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceMobileAppConfigurationUserStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceMobileAppConfigurationUserStatus collection, max N pages
func (r *ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceMobileAppConfigurationUserStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceMobileAppConfigurationUserStatus collection
func (r *ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceMobileAppConfigurationUserStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceMobileAppConfigurationUserStatus collection
func (r *ManagedDeviceMobileAppConfigurationUserStatusesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceMobileAppConfigurationUserStatus) (resObj *ManagedDeviceMobileAppConfigurationUserStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for ManagedEBookAssignment collection
func (b *ManagedEBookRequestBuilder) Assignments() *ManagedEBookAssignmentsCollectionRequestBuilder {
	bb := &ManagedEBookAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// ManagedEBookAssignmentsCollectionRequestBuilder is request builder for ManagedEBookAssignment collection rcn
type ManagedEBookAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedEBookAssignment collection
func (b *ManagedEBookAssignmentsCollectionRequestBuilder) Request() *ManagedEBookAssignmentsCollectionRequest {
	return &ManagedEBookAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedEBookAssignment item
func (b *ManagedEBookAssignmentsCollectionRequestBuilder) ID(id string) *ManagedEBookAssignmentRequestBuilder {
	bb := &ManagedEBookAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedEBookAssignmentsCollectionRequest is request for ManagedEBookAssignment collection
type ManagedEBookAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedEBookAssignment collection
func (r *ManagedEBookAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedEBookAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedEBookAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedEBookAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedEBookAssignment collection, max N pages
func (r *ManagedEBookAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedEBookAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedEBookAssignment collection
func (r *ManagedEBookAssignmentsCollectionRequest) Get(ctx context.Context) ([]ManagedEBookAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedEBookAssignment collection
func (r *ManagedEBookAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *ManagedEBookAssignment) (resObj *ManagedEBookAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Categories returns request builder for ManagedEBookCategory collection
func (b *ManagedEBookRequestBuilder) Categories() *ManagedEBookCategoriesCollectionRequestBuilder {
	bb := &ManagedEBookCategoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/categories"
	return bb
}

// ManagedEBookCategoriesCollectionRequestBuilder is request builder for ManagedEBookCategory collection rcn
type ManagedEBookCategoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedEBookCategory collection
func (b *ManagedEBookCategoriesCollectionRequestBuilder) Request() *ManagedEBookCategoriesCollectionRequest {
	return &ManagedEBookCategoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedEBookCategory item
func (b *ManagedEBookCategoriesCollectionRequestBuilder) ID(id string) *ManagedEBookCategoryRequestBuilder {
	bb := &ManagedEBookCategoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedEBookCategoriesCollectionRequest is request for ManagedEBookCategory collection
type ManagedEBookCategoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedEBookCategory collection
func (r *ManagedEBookCategoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedEBookCategory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedEBookCategory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedEBookCategory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedEBookCategory collection, max N pages
func (r *ManagedEBookCategoriesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedEBookCategory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedEBookCategory collection
func (r *ManagedEBookCategoriesCollectionRequest) Get(ctx context.Context) ([]ManagedEBookCategory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedEBookCategory collection
func (r *ManagedEBookCategoriesCollectionRequest) Add(ctx context.Context, reqObj *ManagedEBookCategory) (resObj *ManagedEBookCategory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceStates returns request builder for DeviceInstallState collection
func (b *ManagedEBookRequestBuilder) DeviceStates() *ManagedEBookDeviceStatesCollectionRequestBuilder {
	bb := &ManagedEBookDeviceStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStates"
	return bb
}

// ManagedEBookDeviceStatesCollectionRequestBuilder is request builder for DeviceInstallState collection rcn
type ManagedEBookDeviceStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceInstallState collection
func (b *ManagedEBookDeviceStatesCollectionRequestBuilder) Request() *ManagedEBookDeviceStatesCollectionRequest {
	return &ManagedEBookDeviceStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceInstallState item
func (b *ManagedEBookDeviceStatesCollectionRequestBuilder) ID(id string) *DeviceInstallStateRequestBuilder {
	bb := &DeviceInstallStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedEBookDeviceStatesCollectionRequest is request for DeviceInstallState collection
type ManagedEBookDeviceStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceInstallState collection
func (r *ManagedEBookDeviceStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceInstallState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceInstallState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceInstallState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceInstallState collection, max N pages
func (r *ManagedEBookDeviceStatesCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceInstallState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceInstallState collection
func (r *ManagedEBookDeviceStatesCollectionRequest) Get(ctx context.Context) ([]DeviceInstallState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceInstallState collection
func (r *ManagedEBookDeviceStatesCollectionRequest) Add(ctx context.Context, reqObj *DeviceInstallState) (resObj *DeviceInstallState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// InstallSummary is navigation property rn
func (b *ManagedEBookRequestBuilder) InstallSummary() *EBookInstallSummaryRequestBuilder {
	bb := &EBookInstallSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/installSummary"
	return bb
}

// UserStateSummary returns request builder for UserInstallStateSummary collection
func (b *ManagedEBookRequestBuilder) UserStateSummary() *ManagedEBookUserStateSummaryCollectionRequestBuilder {
	bb := &ManagedEBookUserStateSummaryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userStateSummary"
	return bb
}

// ManagedEBookUserStateSummaryCollectionRequestBuilder is request builder for UserInstallStateSummary collection rcn
type ManagedEBookUserStateSummaryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserInstallStateSummary collection
func (b *ManagedEBookUserStateSummaryCollectionRequestBuilder) Request() *ManagedEBookUserStateSummaryCollectionRequest {
	return &ManagedEBookUserStateSummaryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserInstallStateSummary item
func (b *ManagedEBookUserStateSummaryCollectionRequestBuilder) ID(id string) *UserInstallStateSummaryRequestBuilder {
	bb := &UserInstallStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedEBookUserStateSummaryCollectionRequest is request for UserInstallStateSummary collection
type ManagedEBookUserStateSummaryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserInstallStateSummary collection
func (r *ManagedEBookUserStateSummaryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserInstallStateSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserInstallStateSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserInstallStateSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserInstallStateSummary collection, max N pages
func (r *ManagedEBookUserStateSummaryCollectionRequest) GetN(ctx context.Context, n int) ([]UserInstallStateSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserInstallStateSummary collection
func (r *ManagedEBookUserStateSummaryCollectionRequest) Get(ctx context.Context) ([]UserInstallStateSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserInstallStateSummary collection
func (r *ManagedEBookUserStateSummaryCollectionRequest) Add(ctx context.Context, reqObj *UserInstallStateSummary) (resObj *UserInstallStateSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ContentVersions returns request builder for MobileAppContent collection
func (b *ManagedMobileLobAppRequestBuilder) ContentVersions() *ManagedMobileLobAppContentVersionsCollectionRequestBuilder {
	bb := &ManagedMobileLobAppContentVersionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/contentVersions"
	return bb
}

// ManagedMobileLobAppContentVersionsCollectionRequestBuilder is request builder for MobileAppContent collection rcn
type ManagedMobileLobAppContentVersionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MobileAppContent collection
func (b *ManagedMobileLobAppContentVersionsCollectionRequestBuilder) Request() *ManagedMobileLobAppContentVersionsCollectionRequest {
	return &ManagedMobileLobAppContentVersionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MobileAppContent item
func (b *ManagedMobileLobAppContentVersionsCollectionRequestBuilder) ID(id string) *MobileAppContentRequestBuilder {
	bb := &MobileAppContentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedMobileLobAppContentVersionsCollectionRequest is request for MobileAppContent collection
type ManagedMobileLobAppContentVersionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MobileAppContent collection
func (r *ManagedMobileLobAppContentVersionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MobileAppContent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MobileAppContent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MobileAppContent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MobileAppContent collection, max N pages
func (r *ManagedMobileLobAppContentVersionsCollectionRequest) GetN(ctx context.Context, n int) ([]MobileAppContent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MobileAppContent collection
func (r *ManagedMobileLobAppContentVersionsCollectionRequest) Get(ctx context.Context) ([]MobileAppContent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MobileAppContent collection
func (r *ManagedMobileLobAppContentVersionsCollectionRequest) Add(ctx context.Context, reqObj *MobileAppContent) (resObj *MobileAppContent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ManagedAllDeviceCertificateStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// ManagedAndroidStoreApp returns request builder for ManagedAndroidStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) ManagedAndroidStoreApp() *DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequestBuilder is request builder for ManagedAndroidStoreApp collection rcn
type DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAndroidStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAndroidStoreApp item
func (b *DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequestBuilder) ID(id string) *ManagedAndroidStoreAppRequestBuilder {
	bb := &ManagedAndroidStoreAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequest is request for ManagedAndroidStoreApp collection
type DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAndroidStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAndroidStoreApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAndroidStoreApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAndroidStoreApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAndroidStoreApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAndroidStoreApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAndroidStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequest) Get(ctx context.Context) ([]ManagedAndroidStoreApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAndroidStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedAndroidStoreAppCollectionRequest) Add(ctx context.Context, reqObj *ManagedAndroidStoreApp) (resObj *ManagedAndroidStoreApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedApp returns request builder for ManagedApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) ManagedApp() *DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequestBuilder is request builder for ManagedApp collection rcn
type DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedApp collection
func (b *DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedApp item
func (b *DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequestBuilder) ID(id string) *ManagedAppRequestBuilder {
	bb := &ManagedAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequest is request for ManagedApp collection
type DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequest) Get(ctx context.Context) ([]ManagedApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedAppCollectionRequest) Add(ctx context.Context, reqObj *ManagedApp) (resObj *ManagedApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedAppConfiguration returns request builder for ManagedAppConfiguration collection
func (b *DeviceAppManagementManagedAppPoliciesCollectionRequestBuilder) ManagedAppConfiguration() *DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequestBuilder is request builder for ManagedAppConfiguration collection rcn
type DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAppConfiguration collection
func (b *DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequest {
	return &DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAppConfiguration item
func (b *DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequestBuilder) ID(id string) *ManagedAppConfigurationRequestBuilder {
	bb := &ManagedAppConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequest is request for ManagedAppConfiguration collection
type DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAppConfiguration collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAppConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAppConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAppConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAppConfiguration collection, max N pages
func (r *DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAppConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAppConfiguration collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequest) Get(ctx context.Context) ([]ManagedAppConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAppConfiguration collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionManagedAppConfigurationCollectionRequest) Add(ctx context.Context, reqObj *ManagedAppConfiguration) (resObj *ManagedAppConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ManagedAppOperationRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ManagedAppPolicyDeploymentSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// ManagedAppProtection returns request builder for ManagedAppProtection collection
func (b *DeviceAppManagementManagedAppPoliciesCollectionRequestBuilder) ManagedAppProtection() *DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequestBuilder is request builder for ManagedAppProtection collection rcn
type DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAppProtection collection
func (b *DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequest {
	return &DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAppProtection item
func (b *DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequestBuilder) ID(id string) *ManagedAppProtectionRequestBuilder {
	bb := &ManagedAppProtectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequest is request for ManagedAppProtection collection
type DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAppProtection collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAppProtection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAppProtection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAppProtection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAppProtection collection, max N pages
func (r *DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAppProtection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAppProtection collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequest) Get(ctx context.Context) ([]ManagedAppProtection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAppProtection collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionManagedAppProtectionCollectionRequest) Add(ctx context.Context, reqObj *ManagedAppProtection) (resObj *ManagedAppProtection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedAppProtectionPolicySetItem returns request builder for ManagedAppProtectionPolicySetItem collection
func (b *PolicySetItemsCollectionRequestBuilder) ManagedAppProtectionPolicySetItem() *PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequestBuilder {
	bb := &PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequestBuilder is request builder for ManagedAppProtectionPolicySetItem collection rcn
type PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAppProtectionPolicySetItem collection
func (b *PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequestBuilder) Request() *PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequest {
	return &PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAppProtectionPolicySetItem item
func (b *PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequestBuilder) ID(id string) *ManagedAppProtectionPolicySetItemRequestBuilder {
	bb := &ManagedAppProtectionPolicySetItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequest is request for ManagedAppProtectionPolicySetItem collection
type PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAppProtectionPolicySetItem collection
func (r *PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAppProtectionPolicySetItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAppProtectionPolicySetItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAppProtectionPolicySetItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAppProtectionPolicySetItem collection, max N pages
func (r *PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAppProtectionPolicySetItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAppProtectionPolicySetItem collection
func (r *PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequest) Get(ctx context.Context) ([]ManagedAppProtectionPolicySetItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAppProtectionPolicySetItem collection
func (r *PolicySetItemsCollectionManagedAppProtectionPolicySetItemCollectionRequest) Add(ctx context.Context, reqObj *ManagedAppProtectionPolicySetItem) (resObj *ManagedAppProtectionPolicySetItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ManagedAppStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// ManagedAppStatusRaw returns request builder for ManagedAppStatusRaw collection
func (b *DeviceAppManagementManagedAppStatusesCollectionRequestBuilder) ManagedAppStatusRaw() *DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequestBuilder is request builder for ManagedAppStatusRaw collection rcn
type DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedAppStatusRaw collection
func (b *DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequest {
	return &DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedAppStatusRaw item
func (b *DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequestBuilder) ID(id string) *ManagedAppStatusRawRequestBuilder {
	bb := &ManagedAppStatusRawRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequest is request for ManagedAppStatusRaw collection
type DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedAppStatusRaw collection
func (r *DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedAppStatusRaw, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedAppStatusRaw
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedAppStatusRaw
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedAppStatusRaw collection, max N pages
func (r *DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedAppStatusRaw, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedAppStatusRaw collection
func (r *DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequest) Get(ctx context.Context) ([]ManagedAppStatusRaw, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedAppStatusRaw collection
func (r *DeviceAppManagementManagedAppStatusesCollectionManagedAppStatusRawCollectionRequest) Add(ctx context.Context, reqObj *ManagedAppStatusRaw) (resObj *ManagedAppStatusRaw, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ManagedDeviceRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ManagedDeviceCertificateStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ManagedDeviceEncryptionStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ManagedDeviceMobileAppConfigurationAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ManagedDeviceMobileAppConfigurationDeviceStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ManagedDeviceMobileAppConfigurationDeviceSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// ManagedDeviceMobileAppConfigurationPolicySetItem returns request builder for ManagedDeviceMobileAppConfigurationPolicySetItem collection
func (b *PolicySetItemsCollectionRequestBuilder) ManagedDeviceMobileAppConfigurationPolicySetItem() *PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequestBuilder {
	bb := &PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequestBuilder is request builder for ManagedDeviceMobileAppConfigurationPolicySetItem collection rcn
type PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceMobileAppConfigurationPolicySetItem collection
func (b *PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequestBuilder) Request() *PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequest {
	return &PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceMobileAppConfigurationPolicySetItem item
func (b *PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequestBuilder) ID(id string) *ManagedDeviceMobileAppConfigurationPolicySetItemRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationPolicySetItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequest is request for ManagedDeviceMobileAppConfigurationPolicySetItem collection
type PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceMobileAppConfigurationPolicySetItem collection
func (r *PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceMobileAppConfigurationPolicySetItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceMobileAppConfigurationPolicySetItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceMobileAppConfigurationPolicySetItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceMobileAppConfigurationPolicySetItem collection, max N pages
func (r *PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceMobileAppConfigurationPolicySetItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceMobileAppConfigurationPolicySetItem collection
func (r *PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceMobileAppConfigurationPolicySetItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceMobileAppConfigurationPolicySetItem collection
func (r *PolicySetItemsCollectionManagedDeviceMobileAppConfigurationPolicySetItemCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceMobileAppConfigurationPolicySetItem) (resObj *ManagedDeviceMobileAppConfigurationPolicySetItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ManagedDeviceMobileAppConfigurationStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ManagedDeviceMobileAppConfigurationUserStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ManagedDeviceMobileAppConfigurationUserSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ManagedDeviceOverviewRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ManagedEBookAssignmentsCollectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ManagedEBookCategoryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// ManagedIOSStoreApp returns request builder for ManagedIOSStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) ManagedIOSStoreApp() *DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequestBuilder is request builder for ManagedIOSStoreApp collection rcn
type DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedIOSStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedIOSStoreApp item
func (b *DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequestBuilder) ID(id string) *ManagedIOSStoreAppRequestBuilder {
	bb := &ManagedIOSStoreAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequest is request for ManagedIOSStoreApp collection
type DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedIOSStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedIOSStoreApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedIOSStoreApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedIOSStoreApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedIOSStoreApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedIOSStoreApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedIOSStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequest) Get(ctx context.Context) ([]ManagedIOSStoreApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedIOSStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedIOSStoreAppCollectionRequest) Add(ctx context.Context, reqObj *ManagedIOSStoreApp) (resObj *ManagedIOSStoreApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ManagedMobileAppRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// ManagedMobileLobApp returns request builder for ManagedMobileLobApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) ManagedMobileLobApp() *DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequestBuilder is request builder for ManagedMobileLobApp collection rcn
type DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedMobileLobApp collection
func (b *DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedMobileLobApp item
func (b *DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequestBuilder) ID(id string) *ManagedMobileLobAppRequestBuilder {
	bb := &ManagedMobileLobAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequest is request for ManagedMobileLobApp collection
type DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedMobileLobApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedMobileLobApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedMobileLobApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedMobileLobApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedMobileLobApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedMobileLobApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedMobileLobApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequest) Get(ctx context.Context) ([]ManagedMobileLobApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedMobileLobApp collection
func (r *DeviceAppManagementMobileAppsCollectionManagedMobileLobAppCollectionRequest) Add(ctx context.Context, reqObj *ManagedMobileLobApp) (resObj *ManagedMobileLobApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedTenantsManagementActionTenantDeploymentStatusCollectionManagedTenantsChangeDeploymentStatusRequestParameter undocumented
type ManagedTenantsManagementActionTenantDeploymentStatusCollectionManagedTenantsChangeDeploymentStatusRequestParameter struct {
	// TenantGroupID undocumented
	TenantGroupID *string `json:"tenantGroupId,omitempty"`
	// TenantID undocumented
	TenantID *string `json:"tenantId,omitempty"`
	// ManagementActionID undocumented
	ManagementActionID *string `json:"managementActionId,omitempty"`
	// ManagementTemplateID undocumented
	ManagementTemplateID *string `json:"managementTemplateId,omitempty"`
	// ManagementTemplateVersion undocumented
	ManagementTemplateVersion *int `json:"managementTemplateVersion,omitempty"`
	// Status undocumented
	Status *string `json:"status,omitempty"`
}

// ManagedTenantsTenantGroupCollectionManagedTenantsTenantSearchRequestParameter undocumented
type ManagedTenantsTenantGroupCollectionManagedTenantsTenantSearchRequestParameter struct {
	// TenantID undocumented
	TenantID *string `json:"tenantId,omitempty"`
}

// ManagedTenantsManagedTenantAlertManagedTenantsAddUserInputLogRequestParameter undocumented
type ManagedTenantsManagedTenantAlertManagedTenantsAddUserInputLogRequestParameter struct {
	// LogInformation undocumented
	LogInformation *string `json:"logInformation,omitempty"`
}

// ManagedTenantsManagementActionManagedTenantsApplyRequestParameter undocumented
type ManagedTenantsManagementActionManagedTenantsApplyRequestParameter struct {
	// TenantID undocumented
	TenantID *string `json:"tenantId,omitempty"`
	// TenantGroupID undocumented
	TenantGroupID *string `json:"tenantGroupId,omitempty"`
	// ManagementTemplateID undocumented
	ManagementTemplateID *string `json:"managementTemplateId,omitempty"`
	// IncludeAllUsers undocumented
	IncludeAllUsers *bool `json:"includeAllUsers,omitempty"`
	// IncludeGroups undocumented
	IncludeGroups []string `json:"includeGroups,omitempty"`
	// ExcludeGroups undocumented
	ExcludeGroups []string `json:"excludeGroups,omitempty"`
}

// ManagedTenantsManagementTemplateStepDeploymentManagedTenantsChangeDeploymentStatusRequestParameter undocumented
type ManagedTenantsManagementTemplateStepDeploymentManagedTenantsChangeDeploymentStatusRequestParameter struct {
	// TenantID undocumented
	TenantID *string `json:"tenantId,omitempty"`
	// ManagementTemplateStepID undocumented
	ManagementTemplateStepID *string `json:"managementTemplateStepId,omitempty"`
	// Status undocumented
	Status *string `json:"status,omitempty"`
}

// ManagedTenantsTenantManagedTenantsOffboardTenantRequestParameter undocumented
type ManagedTenantsTenantManagedTenantsOffboardTenantRequestParameter struct {
}

// ManagedTenantsTenantManagedTenantsResetTenantOnboardingStatusRequestParameter undocumented
type ManagedTenantsTenantManagedTenantsResetTenantOnboardingStatusRequestParameter struct {
}

// ManagedTenantsTenantTagManagedTenantsAssignTagRequestParameter undocumented
type ManagedTenantsTenantTagManagedTenantsAssignTagRequestParameter struct {
	// TenantIDs undocumented
	TenantIDs []string `json:"tenantIds,omitempty"`
}

// ManagedTenantsTenantTagManagedTenantsUnassignTagRequestParameter undocumented
type ManagedTenantsTenantTagManagedTenantsUnassignTagRequestParameter struct {
	// TenantIDs undocumented
	TenantIDs []string `json:"tenantIds,omitempty"`
}

// AggregatedPolicyCompliances returns request builder for ManagedTenantsAggregatedPolicyCompliance collection
func (b *ManagedTenantsManagedTenantRequestBuilder) AggregatedPolicyCompliances() *ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/aggregatedPolicyCompliances"
	return bb
}

// ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequestBuilder is request builder for ManagedTenantsAggregatedPolicyCompliance collection rcn
type ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsAggregatedPolicyCompliance collection
func (b *ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequest {
	return &ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsAggregatedPolicyCompliance item
func (b *ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequestBuilder) ID(id string) *ManagedTenantsAggregatedPolicyComplianceRequestBuilder {
	bb := &ManagedTenantsAggregatedPolicyComplianceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequest is request for ManagedTenantsAggregatedPolicyCompliance collection
type ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsAggregatedPolicyCompliance collection
func (r *ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsAggregatedPolicyCompliance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsAggregatedPolicyCompliance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsAggregatedPolicyCompliance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsAggregatedPolicyCompliance collection, max N pages
func (r *ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsAggregatedPolicyCompliance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsAggregatedPolicyCompliance collection
func (r *ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsAggregatedPolicyCompliance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsAggregatedPolicyCompliance collection
func (r *ManagedTenantsManagedTenantAggregatedPolicyCompliancesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsAggregatedPolicyCompliance) (resObj *ManagedTenantsAggregatedPolicyCompliance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppPerformances returns request builder for ManagedTenantsAppPerformance collection
func (b *ManagedTenantsManagedTenantRequestBuilder) AppPerformances() *ManagedTenantsManagedTenantAppPerformancesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantAppPerformancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appPerformances"
	return bb
}

// ManagedTenantsManagedTenantAppPerformancesCollectionRequestBuilder is request builder for ManagedTenantsAppPerformance collection rcn
type ManagedTenantsManagedTenantAppPerformancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsAppPerformance collection
func (b *ManagedTenantsManagedTenantAppPerformancesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantAppPerformancesCollectionRequest {
	return &ManagedTenantsManagedTenantAppPerformancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsAppPerformance item
func (b *ManagedTenantsManagedTenantAppPerformancesCollectionRequestBuilder) ID(id string) *ManagedTenantsAppPerformanceRequestBuilder {
	bb := &ManagedTenantsAppPerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantAppPerformancesCollectionRequest is request for ManagedTenantsAppPerformance collection
type ManagedTenantsManagedTenantAppPerformancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsAppPerformance collection
func (r *ManagedTenantsManagedTenantAppPerformancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsAppPerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsAppPerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsAppPerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsAppPerformance collection, max N pages
func (r *ManagedTenantsManagedTenantAppPerformancesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsAppPerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsAppPerformance collection
func (r *ManagedTenantsManagedTenantAppPerformancesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsAppPerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsAppPerformance collection
func (r *ManagedTenantsManagedTenantAppPerformancesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsAppPerformance) (resObj *ManagedTenantsAppPerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AuditEvents returns request builder for ManagedTenantsAuditEvent collection
func (b *ManagedTenantsManagedTenantRequestBuilder) AuditEvents() *ManagedTenantsManagedTenantAuditEventsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantAuditEventsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/auditEvents"
	return bb
}

// ManagedTenantsManagedTenantAuditEventsCollectionRequestBuilder is request builder for ManagedTenantsAuditEvent collection rcn
type ManagedTenantsManagedTenantAuditEventsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsAuditEvent collection
func (b *ManagedTenantsManagedTenantAuditEventsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantAuditEventsCollectionRequest {
	return &ManagedTenantsManagedTenantAuditEventsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsAuditEvent item
func (b *ManagedTenantsManagedTenantAuditEventsCollectionRequestBuilder) ID(id string) *ManagedTenantsAuditEventRequestBuilder {
	bb := &ManagedTenantsAuditEventRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantAuditEventsCollectionRequest is request for ManagedTenantsAuditEvent collection
type ManagedTenantsManagedTenantAuditEventsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsAuditEvent collection
func (r *ManagedTenantsManagedTenantAuditEventsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsAuditEvent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsAuditEvent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsAuditEvent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsAuditEvent collection, max N pages
func (r *ManagedTenantsManagedTenantAuditEventsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsAuditEvent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsAuditEvent collection
func (r *ManagedTenantsManagedTenantAuditEventsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsAuditEvent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsAuditEvent collection
func (r *ManagedTenantsManagedTenantAuditEventsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsAuditEvent) (resObj *ManagedTenantsAuditEvent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CloudPcConnections returns request builder for ManagedTenantsCloudPcConnection collection
func (b *ManagedTenantsManagedTenantRequestBuilder) CloudPcConnections() *ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cloudPcConnections"
	return bb
}

// ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequestBuilder is request builder for ManagedTenantsCloudPcConnection collection rcn
type ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsCloudPcConnection collection
func (b *ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequest {
	return &ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsCloudPcConnection item
func (b *ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequestBuilder) ID(id string) *ManagedTenantsCloudPcConnectionRequestBuilder {
	bb := &ManagedTenantsCloudPcConnectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequest is request for ManagedTenantsCloudPcConnection collection
type ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsCloudPcConnection collection
func (r *ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsCloudPcConnection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsCloudPcConnection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsCloudPcConnection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsCloudPcConnection collection, max N pages
func (r *ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsCloudPcConnection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsCloudPcConnection collection
func (r *ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsCloudPcConnection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsCloudPcConnection collection
func (r *ManagedTenantsManagedTenantCloudPcConnectionsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsCloudPcConnection) (resObj *ManagedTenantsCloudPcConnection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CloudPcDevices returns request builder for ManagedTenantsCloudPcDevice collection
func (b *ManagedTenantsManagedTenantRequestBuilder) CloudPcDevices() *ManagedTenantsManagedTenantCloudPcDevicesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantCloudPcDevicesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cloudPcDevices"
	return bb
}

// ManagedTenantsManagedTenantCloudPcDevicesCollectionRequestBuilder is request builder for ManagedTenantsCloudPcDevice collection rcn
type ManagedTenantsManagedTenantCloudPcDevicesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsCloudPcDevice collection
func (b *ManagedTenantsManagedTenantCloudPcDevicesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantCloudPcDevicesCollectionRequest {
	return &ManagedTenantsManagedTenantCloudPcDevicesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsCloudPcDevice item
func (b *ManagedTenantsManagedTenantCloudPcDevicesCollectionRequestBuilder) ID(id string) *ManagedTenantsCloudPcDeviceRequestBuilder {
	bb := &ManagedTenantsCloudPcDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantCloudPcDevicesCollectionRequest is request for ManagedTenantsCloudPcDevice collection
type ManagedTenantsManagedTenantCloudPcDevicesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsCloudPcDevice collection
func (r *ManagedTenantsManagedTenantCloudPcDevicesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsCloudPcDevice, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsCloudPcDevice
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsCloudPcDevice
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsCloudPcDevice collection, max N pages
func (r *ManagedTenantsManagedTenantCloudPcDevicesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsCloudPcDevice, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsCloudPcDevice collection
func (r *ManagedTenantsManagedTenantCloudPcDevicesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsCloudPcDevice, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsCloudPcDevice collection
func (r *ManagedTenantsManagedTenantCloudPcDevicesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsCloudPcDevice) (resObj *ManagedTenantsCloudPcDevice, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CloudPcsOverview returns request builder for ManagedTenantsCloudPcOverview collection
func (b *ManagedTenantsManagedTenantRequestBuilder) CloudPcsOverview() *ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cloudPcsOverview"
	return bb
}

// ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequestBuilder is request builder for ManagedTenantsCloudPcOverview collection rcn
type ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsCloudPcOverview collection
func (b *ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequest {
	return &ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsCloudPcOverview item
func (b *ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequestBuilder) ID(id string) *ManagedTenantsCloudPcOverviewRequestBuilder {
	bb := &ManagedTenantsCloudPcOverviewRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequest is request for ManagedTenantsCloudPcOverview collection
type ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsCloudPcOverview collection
func (r *ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsCloudPcOverview, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsCloudPcOverview
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsCloudPcOverview
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsCloudPcOverview collection, max N pages
func (r *ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsCloudPcOverview, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsCloudPcOverview collection
func (r *ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsCloudPcOverview, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsCloudPcOverview collection
func (r *ManagedTenantsManagedTenantCloudPcsOverviewCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsCloudPcOverview) (resObj *ManagedTenantsCloudPcOverview, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ConditionalAccessPolicyCoverages returns request builder for ManagedTenantsConditionalAccessPolicyCoverage collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ConditionalAccessPolicyCoverages() *ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/conditionalAccessPolicyCoverages"
	return bb
}

// ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequestBuilder is request builder for ManagedTenantsConditionalAccessPolicyCoverage collection rcn
type ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsConditionalAccessPolicyCoverage collection
func (b *ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequest {
	return &ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsConditionalAccessPolicyCoverage item
func (b *ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequestBuilder) ID(id string) *ManagedTenantsConditionalAccessPolicyCoverageRequestBuilder {
	bb := &ManagedTenantsConditionalAccessPolicyCoverageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequest is request for ManagedTenantsConditionalAccessPolicyCoverage collection
type ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsConditionalAccessPolicyCoverage collection
func (r *ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsConditionalAccessPolicyCoverage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsConditionalAccessPolicyCoverage
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsConditionalAccessPolicyCoverage
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsConditionalAccessPolicyCoverage collection, max N pages
func (r *ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsConditionalAccessPolicyCoverage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsConditionalAccessPolicyCoverage collection
func (r *ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsConditionalAccessPolicyCoverage, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsConditionalAccessPolicyCoverage collection
func (r *ManagedTenantsManagedTenantConditionalAccessPolicyCoveragesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsConditionalAccessPolicyCoverage) (resObj *ManagedTenantsConditionalAccessPolicyCoverage, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CredentialUserRegistrationsSummaries returns request builder for ManagedTenantsCredentialUserRegistrationsSummary collection
func (b *ManagedTenantsManagedTenantRequestBuilder) CredentialUserRegistrationsSummaries() *ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/credentialUserRegistrationsSummaries"
	return bb
}

// ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequestBuilder is request builder for ManagedTenantsCredentialUserRegistrationsSummary collection rcn
type ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsCredentialUserRegistrationsSummary collection
func (b *ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequest {
	return &ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsCredentialUserRegistrationsSummary item
func (b *ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequestBuilder) ID(id string) *ManagedTenantsCredentialUserRegistrationsSummaryRequestBuilder {
	bb := &ManagedTenantsCredentialUserRegistrationsSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequest is request for ManagedTenantsCredentialUserRegistrationsSummary collection
type ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsCredentialUserRegistrationsSummary collection
func (r *ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsCredentialUserRegistrationsSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsCredentialUserRegistrationsSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsCredentialUserRegistrationsSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsCredentialUserRegistrationsSummary collection, max N pages
func (r *ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsCredentialUserRegistrationsSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsCredentialUserRegistrationsSummary collection
func (r *ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsCredentialUserRegistrationsSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsCredentialUserRegistrationsSummary collection
func (r *ManagedTenantsManagedTenantCredentialUserRegistrationsSummariesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsCredentialUserRegistrationsSummary) (resObj *ManagedTenantsCredentialUserRegistrationsSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceAppPerformances returns request builder for ManagedTenantsDeviceAppPerformance collection
func (b *ManagedTenantsManagedTenantRequestBuilder) DeviceAppPerformances() *ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceAppPerformances"
	return bb
}

// ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequestBuilder is request builder for ManagedTenantsDeviceAppPerformance collection rcn
type ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsDeviceAppPerformance collection
func (b *ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequest {
	return &ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsDeviceAppPerformance item
func (b *ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequestBuilder) ID(id string) *ManagedTenantsDeviceAppPerformanceRequestBuilder {
	bb := &ManagedTenantsDeviceAppPerformanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequest is request for ManagedTenantsDeviceAppPerformance collection
type ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsDeviceAppPerformance collection
func (r *ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsDeviceAppPerformance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsDeviceAppPerformance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsDeviceAppPerformance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsDeviceAppPerformance collection, max N pages
func (r *ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsDeviceAppPerformance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsDeviceAppPerformance collection
func (r *ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsDeviceAppPerformance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsDeviceAppPerformance collection
func (r *ManagedTenantsManagedTenantDeviceAppPerformancesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsDeviceAppPerformance) (resObj *ManagedTenantsDeviceAppPerformance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceCompliancePolicySettingStateSummaries returns request builder for ManagedTenantsDeviceCompliancePolicySettingStateSummary collection
func (b *ManagedTenantsManagedTenantRequestBuilder) DeviceCompliancePolicySettingStateSummaries() *ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceCompliancePolicySettingStateSummaries"
	return bb
}

// ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder is request builder for ManagedTenantsDeviceCompliancePolicySettingStateSummary collection rcn
type ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsDeviceCompliancePolicySettingStateSummary collection
func (b *ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequest {
	return &ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsDeviceCompliancePolicySettingStateSummary item
func (b *ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequestBuilder) ID(id string) *ManagedTenantsDeviceCompliancePolicySettingStateSummaryRequestBuilder {
	bb := &ManagedTenantsDeviceCompliancePolicySettingStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequest is request for ManagedTenantsDeviceCompliancePolicySettingStateSummary collection
type ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsDeviceCompliancePolicySettingStateSummary collection
func (r *ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsDeviceCompliancePolicySettingStateSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsDeviceCompliancePolicySettingStateSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsDeviceCompliancePolicySettingStateSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsDeviceCompliancePolicySettingStateSummary collection, max N pages
func (r *ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsDeviceCompliancePolicySettingStateSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsDeviceCompliancePolicySettingStateSummary collection
func (r *ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsDeviceCompliancePolicySettingStateSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsDeviceCompliancePolicySettingStateSummary collection
func (r *ManagedTenantsManagedTenantDeviceCompliancePolicySettingStateSummariesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsDeviceCompliancePolicySettingStateSummary) (resObj *ManagedTenantsDeviceCompliancePolicySettingStateSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceHealthStatuses returns request builder for ManagedTenantsDeviceHealthStatus collection
func (b *ManagedTenantsManagedTenantRequestBuilder) DeviceHealthStatuses() *ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceHealthStatuses"
	return bb
}

// ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequestBuilder is request builder for ManagedTenantsDeviceHealthStatus collection rcn
type ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsDeviceHealthStatus collection
func (b *ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequest {
	return &ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsDeviceHealthStatus item
func (b *ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequestBuilder) ID(id string) *ManagedTenantsDeviceHealthStatusRequestBuilder {
	bb := &ManagedTenantsDeviceHealthStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequest is request for ManagedTenantsDeviceHealthStatus collection
type ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsDeviceHealthStatus collection
func (r *ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsDeviceHealthStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsDeviceHealthStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsDeviceHealthStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsDeviceHealthStatus collection, max N pages
func (r *ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsDeviceHealthStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsDeviceHealthStatus collection
func (r *ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsDeviceHealthStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsDeviceHealthStatus collection
func (r *ManagedTenantsManagedTenantDeviceHealthStatusesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsDeviceHealthStatus) (resObj *ManagedTenantsDeviceHealthStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceComplianceTrends returns request builder for ManagedTenantsManagedDeviceComplianceTrend collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagedDeviceComplianceTrends() *ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceComplianceTrends"
	return bb
}

// ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequestBuilder is request builder for ManagedTenantsManagedDeviceComplianceTrend collection rcn
type ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedDeviceComplianceTrend collection
func (b *ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequest {
	return &ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedDeviceComplianceTrend item
func (b *ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedDeviceComplianceTrendRequestBuilder {
	bb := &ManagedTenantsManagedDeviceComplianceTrendRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequest is request for ManagedTenantsManagedDeviceComplianceTrend collection
type ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedDeviceComplianceTrend collection
func (r *ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedDeviceComplianceTrend, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedDeviceComplianceTrend
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedDeviceComplianceTrend
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedDeviceComplianceTrend collection, max N pages
func (r *ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedDeviceComplianceTrend, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedDeviceComplianceTrend collection
func (r *ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedDeviceComplianceTrend, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedDeviceComplianceTrend collection
func (r *ManagedTenantsManagedTenantManagedDeviceComplianceTrendsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedDeviceComplianceTrend) (resObj *ManagedTenantsManagedDeviceComplianceTrend, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCompliances returns request builder for ManagedTenantsManagedDeviceCompliance collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagedDeviceCompliances() *ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCompliances"
	return bb
}

// ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequestBuilder is request builder for ManagedTenantsManagedDeviceCompliance collection rcn
type ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedDeviceCompliance collection
func (b *ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequest {
	return &ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedDeviceCompliance item
func (b *ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedDeviceComplianceRequestBuilder {
	bb := &ManagedTenantsManagedDeviceComplianceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequest is request for ManagedTenantsManagedDeviceCompliance collection
type ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedDeviceCompliance collection
func (r *ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedDeviceCompliance, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedDeviceCompliance
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedDeviceCompliance
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedDeviceCompliance collection, max N pages
func (r *ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedDeviceCompliance, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedDeviceCompliance collection
func (r *ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedDeviceCompliance, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedDeviceCompliance collection
func (r *ManagedTenantsManagedTenantManagedDeviceCompliancesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedDeviceCompliance) (resObj *ManagedTenantsManagedDeviceCompliance, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedTenantAlertLogs returns request builder for ManagedTenantsManagedTenantAlertLog collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagedTenantAlertLogs() *ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedTenantAlertLogs"
	return bb
}

// ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantAlertLog collection rcn
type ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantAlertLog collection
func (b *ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequest {
	return &ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantAlertLog item
func (b *ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantAlertLogRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertLogRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequest is request for ManagedTenantsManagedTenantAlertLog collection
type ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantAlertLog collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantAlertLog, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantAlertLog
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantAlertLog
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantAlertLog collection, max N pages
func (r *ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantAlertLog, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantAlertLog collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantAlertLog, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantAlertLog collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertLogsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantAlertLog) (resObj *ManagedTenantsManagedTenantAlertLog, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedTenantAlertRuleDefinitions returns request builder for ManagedTenantsManagedTenantAlertRuleDefinition collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagedTenantAlertRuleDefinitions() *ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedTenantAlertRuleDefinitions"
	return bb
}

// ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantAlertRuleDefinition collection rcn
type ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantAlertRuleDefinition collection
func (b *ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequest {
	return &ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantAlertRuleDefinition item
func (b *ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantAlertRuleDefinitionRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRuleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequest is request for ManagedTenantsManagedTenantAlertRuleDefinition collection
type ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantAlertRuleDefinition collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantAlertRuleDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantAlertRuleDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantAlertRuleDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantAlertRuleDefinition collection, max N pages
func (r *ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantAlertRuleDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantAlertRuleDefinition collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantAlertRuleDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantAlertRuleDefinition collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertRuleDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantAlertRuleDefinition) (resObj *ManagedTenantsManagedTenantAlertRuleDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedTenantAlertRules returns request builder for ManagedTenantsManagedTenantAlertRule collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagedTenantAlertRules() *ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedTenantAlertRules"
	return bb
}

// ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantAlertRule collection rcn
type ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantAlertRule collection
func (b *ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequest {
	return &ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantAlertRule item
func (b *ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantAlertRuleRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequest is request for ManagedTenantsManagedTenantAlertRule collection
type ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantAlertRule collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantAlertRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantAlertRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantAlertRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantAlertRule collection, max N pages
func (r *ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantAlertRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantAlertRule collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantAlertRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantAlertRule collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertRulesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantAlertRule) (resObj *ManagedTenantsManagedTenantAlertRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedTenantAlerts returns request builder for ManagedTenantsManagedTenantAlert collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagedTenantAlerts() *ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedTenantAlerts"
	return bb
}

// ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantAlert collection rcn
type ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantAlert collection
func (b *ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequest {
	return &ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantAlert item
func (b *ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantAlertRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequest is request for ManagedTenantsManagedTenantAlert collection
type ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantAlert collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantAlert, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantAlert
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantAlert
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantAlert collection, max N pages
func (r *ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantAlert, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantAlert collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantAlert, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantAlert collection
func (r *ManagedTenantsManagedTenantManagedTenantAlertsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantAlert) (resObj *ManagedTenantsManagedTenantAlert, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedTenantAPINotifications returns request builder for ManagedTenantsManagedTenantAPINotification collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagedTenantAPINotifications() *ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedTenantApiNotifications"
	return bb
}

// ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantAPINotification collection rcn
type ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantAPINotification collection
func (b *ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequest {
	return &ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantAPINotification item
func (b *ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantAPINotificationRequestBuilder {
	bb := &ManagedTenantsManagedTenantAPINotificationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequest is request for ManagedTenantsManagedTenantAPINotification collection
type ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantAPINotification collection
func (r *ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantAPINotification, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantAPINotification
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantAPINotification
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantAPINotification collection, max N pages
func (r *ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantAPINotification, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantAPINotification collection
func (r *ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantAPINotification, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantAPINotification collection
func (r *ManagedTenantsManagedTenantManagedTenantAPINotificationsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantAPINotification) (resObj *ManagedTenantsManagedTenantAPINotification, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedTenantEmailNotifications returns request builder for ManagedTenantsManagedTenantEmailNotification collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagedTenantEmailNotifications() *ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedTenantEmailNotifications"
	return bb
}

// ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantEmailNotification collection rcn
type ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantEmailNotification collection
func (b *ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequest {
	return &ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantEmailNotification item
func (b *ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantEmailNotificationRequestBuilder {
	bb := &ManagedTenantsManagedTenantEmailNotificationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequest is request for ManagedTenantsManagedTenantEmailNotification collection
type ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantEmailNotification collection
func (r *ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantEmailNotification, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantEmailNotification
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantEmailNotification
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantEmailNotification collection, max N pages
func (r *ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantEmailNotification, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantEmailNotification collection
func (r *ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantEmailNotification, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantEmailNotification collection
func (r *ManagedTenantsManagedTenantManagedTenantEmailNotificationsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantEmailNotification) (resObj *ManagedTenantsManagedTenantEmailNotification, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedTenantTicketingEndpoints returns request builder for ManagedTenantsManagedTenantTicketingEndpoint collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagedTenantTicketingEndpoints() *ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedTenantTicketingEndpoints"
	return bb
}

// ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantTicketingEndpoint collection rcn
type ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantTicketingEndpoint collection
func (b *ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequest {
	return &ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantTicketingEndpoint item
func (b *ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantTicketingEndpointRequestBuilder {
	bb := &ManagedTenantsManagedTenantTicketingEndpointRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequest is request for ManagedTenantsManagedTenantTicketingEndpoint collection
type ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantTicketingEndpoint collection
func (r *ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantTicketingEndpoint, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantTicketingEndpoint
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantTicketingEndpoint
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantTicketingEndpoint collection, max N pages
func (r *ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantTicketingEndpoint, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantTicketingEndpoint collection
func (r *ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantTicketingEndpoint, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantTicketingEndpoint collection
func (r *ManagedTenantsManagedTenantManagedTenantTicketingEndpointsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantTicketingEndpoint) (resObj *ManagedTenantsManagedTenantTicketingEndpoint, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagementActionTenantDeploymentStatuses returns request builder for ManagedTenantsManagementActionTenantDeploymentStatus collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagementActionTenantDeploymentStatuses() *ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementActionTenantDeploymentStatuses"
	return bb
}

// ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequestBuilder is request builder for ManagedTenantsManagementActionTenantDeploymentStatus collection rcn
type ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementActionTenantDeploymentStatus collection
func (b *ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequest {
	return &ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementActionTenantDeploymentStatus item
func (b *ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementActionTenantDeploymentStatusRequestBuilder {
	bb := &ManagedTenantsManagementActionTenantDeploymentStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequest is request for ManagedTenantsManagementActionTenantDeploymentStatus collection
type ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementActionTenantDeploymentStatus collection
func (r *ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementActionTenantDeploymentStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementActionTenantDeploymentStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementActionTenantDeploymentStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementActionTenantDeploymentStatus collection, max N pages
func (r *ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementActionTenantDeploymentStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementActionTenantDeploymentStatus collection
func (r *ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementActionTenantDeploymentStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementActionTenantDeploymentStatus collection
func (r *ManagedTenantsManagedTenantManagementActionTenantDeploymentStatusesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementActionTenantDeploymentStatus) (resObj *ManagedTenantsManagementActionTenantDeploymentStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagementActions returns request builder for ManagedTenantsManagementAction collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagementActions() *ManagedTenantsManagedTenantManagementActionsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagementActionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementActions"
	return bb
}

// ManagedTenantsManagedTenantManagementActionsCollectionRequestBuilder is request builder for ManagedTenantsManagementAction collection rcn
type ManagedTenantsManagedTenantManagementActionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementAction collection
func (b *ManagedTenantsManagedTenantManagementActionsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagementActionsCollectionRequest {
	return &ManagedTenantsManagedTenantManagementActionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementAction item
func (b *ManagedTenantsManagedTenantManagementActionsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementActionRequestBuilder {
	bb := &ManagedTenantsManagementActionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagementActionsCollectionRequest is request for ManagedTenantsManagementAction collection
type ManagedTenantsManagedTenantManagementActionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementAction collection
func (r *ManagedTenantsManagedTenantManagementActionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementAction, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementAction
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementAction
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementAction collection, max N pages
func (r *ManagedTenantsManagedTenantManagementActionsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementAction, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementAction collection
func (r *ManagedTenantsManagedTenantManagementActionsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementAction, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementAction collection
func (r *ManagedTenantsManagedTenantManagementActionsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementAction) (resObj *ManagedTenantsManagementAction, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagementIntents returns request builder for ManagedTenantsManagementIntent collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagementIntents() *ManagedTenantsManagedTenantManagementIntentsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagementIntentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementIntents"
	return bb
}

// ManagedTenantsManagedTenantManagementIntentsCollectionRequestBuilder is request builder for ManagedTenantsManagementIntent collection rcn
type ManagedTenantsManagedTenantManagementIntentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementIntent collection
func (b *ManagedTenantsManagedTenantManagementIntentsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagementIntentsCollectionRequest {
	return &ManagedTenantsManagedTenantManagementIntentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementIntent item
func (b *ManagedTenantsManagedTenantManagementIntentsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementIntentRequestBuilder {
	bb := &ManagedTenantsManagementIntentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagementIntentsCollectionRequest is request for ManagedTenantsManagementIntent collection
type ManagedTenantsManagedTenantManagementIntentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementIntent collection
func (r *ManagedTenantsManagedTenantManagementIntentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementIntent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementIntent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementIntent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementIntent collection, max N pages
func (r *ManagedTenantsManagedTenantManagementIntentsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementIntent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementIntent collection
func (r *ManagedTenantsManagedTenantManagementIntentsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementIntent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementIntent collection
func (r *ManagedTenantsManagedTenantManagementIntentsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementIntent) (resObj *ManagedTenantsManagementIntent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagementTemplateCollectionTenantSummaries returns request builder for ManagedTenantsManagementTemplateCollectionTenantSummary collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagementTemplateCollectionTenantSummaries() *ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementTemplateCollectionTenantSummaries"
	return bb
}

// ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequestBuilder is request builder for ManagedTenantsManagementTemplateCollectionTenantSummary collection rcn
type ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementTemplateCollectionTenantSummary collection
func (b *ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequest {
	return &ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementTemplateCollectionTenantSummary item
func (b *ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementTemplateCollectionTenantSummaryRequestBuilder {
	bb := &ManagedTenantsManagementTemplateCollectionTenantSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequest is request for ManagedTenantsManagementTemplateCollectionTenantSummary collection
type ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementTemplateCollectionTenantSummary collection
func (r *ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementTemplateCollectionTenantSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementTemplateCollectionTenantSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementTemplateCollectionTenantSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementTemplateCollectionTenantSummary collection, max N pages
func (r *ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementTemplateCollectionTenantSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementTemplateCollectionTenantSummary collection
func (r *ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementTemplateCollectionTenantSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementTemplateCollectionTenantSummary collection
func (r *ManagedTenantsManagedTenantManagementTemplateCollectionTenantSummariesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementTemplateCollectionTenantSummary) (resObj *ManagedTenantsManagementTemplateCollectionTenantSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagementTemplateCollections returns request builder for ManagedTenantsManagementTemplateCollection collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagementTemplateCollections() *ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementTemplateCollections"
	return bb
}

// ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequestBuilder is request builder for ManagedTenantsManagementTemplateCollection collection rcn
type ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementTemplateCollection collection
func (b *ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequest {
	return &ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementTemplateCollection item
func (b *ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementTemplateCollectionRequestBuilder {
	bb := &ManagedTenantsManagementTemplateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequest is request for ManagedTenantsManagementTemplateCollection collection
type ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementTemplateCollection collection
func (r *ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementTemplateCollection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementTemplateCollection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementTemplateCollection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementTemplateCollection collection, max N pages
func (r *ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementTemplateCollection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementTemplateCollection collection
func (r *ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementTemplateCollection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementTemplateCollection collection
func (r *ManagedTenantsManagedTenantManagementTemplateCollectionsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementTemplateCollection) (resObj *ManagedTenantsManagementTemplateCollection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagementTemplateStepTenantSummaries returns request builder for ManagedTenantsManagementTemplateStepTenantSummary collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagementTemplateStepTenantSummaries() *ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementTemplateStepTenantSummaries"
	return bb
}

// ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequestBuilder is request builder for ManagedTenantsManagementTemplateStepTenantSummary collection rcn
type ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementTemplateStepTenantSummary collection
func (b *ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequest {
	return &ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementTemplateStepTenantSummary item
func (b *ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementTemplateStepTenantSummaryRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepTenantSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequest is request for ManagedTenantsManagementTemplateStepTenantSummary collection
type ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementTemplateStepTenantSummary collection
func (r *ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementTemplateStepTenantSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementTemplateStepTenantSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementTemplateStepTenantSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementTemplateStepTenantSummary collection, max N pages
func (r *ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementTemplateStepTenantSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementTemplateStepTenantSummary collection
func (r *ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementTemplateStepTenantSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementTemplateStepTenantSummary collection
func (r *ManagedTenantsManagedTenantManagementTemplateStepTenantSummariesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementTemplateStepTenantSummary) (resObj *ManagedTenantsManagementTemplateStepTenantSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagementTemplateStepVersions returns request builder for ManagedTenantsManagementTemplateStepVersion collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagementTemplateStepVersions() *ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementTemplateStepVersions"
	return bb
}

// ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequestBuilder is request builder for ManagedTenantsManagementTemplateStepVersion collection rcn
type ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementTemplateStepVersion collection
func (b *ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequest {
	return &ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementTemplateStepVersion item
func (b *ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementTemplateStepVersionRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepVersionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequest is request for ManagedTenantsManagementTemplateStepVersion collection
type ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementTemplateStepVersion collection
func (r *ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementTemplateStepVersion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementTemplateStepVersion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementTemplateStepVersion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementTemplateStepVersion collection, max N pages
func (r *ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementTemplateStepVersion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementTemplateStepVersion collection
func (r *ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementTemplateStepVersion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementTemplateStepVersion collection
func (r *ManagedTenantsManagedTenantManagementTemplateStepVersionsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementTemplateStepVersion) (resObj *ManagedTenantsManagementTemplateStepVersion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagementTemplateSteps returns request builder for ManagedTenantsManagementTemplateStep collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagementTemplateSteps() *ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementTemplateSteps"
	return bb
}

// ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequestBuilder is request builder for ManagedTenantsManagementTemplateStep collection rcn
type ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementTemplateStep collection
func (b *ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequest {
	return &ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementTemplateStep item
func (b *ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementTemplateStepRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequest is request for ManagedTenantsManagementTemplateStep collection
type ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementTemplateStep collection
func (r *ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementTemplateStep, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementTemplateStep
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementTemplateStep
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementTemplateStep collection, max N pages
func (r *ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementTemplateStep, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementTemplateStep collection
func (r *ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementTemplateStep, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementTemplateStep collection
func (r *ManagedTenantsManagedTenantManagementTemplateStepsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementTemplateStep) (resObj *ManagedTenantsManagementTemplateStep, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagementTemplates returns request builder for ManagedTenantsManagementTemplate collection
func (b *ManagedTenantsManagedTenantRequestBuilder) ManagementTemplates() *ManagedTenantsManagedTenantManagementTemplatesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantManagementTemplatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementTemplates"
	return bb
}

// ManagedTenantsManagedTenantManagementTemplatesCollectionRequestBuilder is request builder for ManagedTenantsManagementTemplate collection rcn
type ManagedTenantsManagedTenantManagementTemplatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementTemplate collection
func (b *ManagedTenantsManagedTenantManagementTemplatesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantManagementTemplatesCollectionRequest {
	return &ManagedTenantsManagedTenantManagementTemplatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementTemplate item
func (b *ManagedTenantsManagedTenantManagementTemplatesCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementTemplateRequestBuilder {
	bb := &ManagedTenantsManagementTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantManagementTemplatesCollectionRequest is request for ManagedTenantsManagementTemplate collection
type ManagedTenantsManagedTenantManagementTemplatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementTemplate collection
func (r *ManagedTenantsManagedTenantManagementTemplatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementTemplate collection, max N pages
func (r *ManagedTenantsManagedTenantManagementTemplatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementTemplate collection
func (r *ManagedTenantsManagedTenantManagementTemplatesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementTemplate collection
func (r *ManagedTenantsManagedTenantManagementTemplatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementTemplate) (resObj *ManagedTenantsManagementTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MyRoles returns request builder for ManagedTenantsMyRole collection
func (b *ManagedTenantsManagedTenantRequestBuilder) MyRoles() *ManagedTenantsManagedTenantMyRolesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantMyRolesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/myRoles"
	return bb
}

// ManagedTenantsManagedTenantMyRolesCollectionRequestBuilder is request builder for ManagedTenantsMyRole collection rcn
type ManagedTenantsManagedTenantMyRolesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsMyRole collection
func (b *ManagedTenantsManagedTenantMyRolesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantMyRolesCollectionRequest {
	return &ManagedTenantsManagedTenantMyRolesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsMyRole item
func (b *ManagedTenantsManagedTenantMyRolesCollectionRequestBuilder) ID(id string) *ManagedTenantsMyRoleRequestBuilder {
	bb := &ManagedTenantsMyRoleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantMyRolesCollectionRequest is request for ManagedTenantsMyRole collection
type ManagedTenantsManagedTenantMyRolesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsMyRole collection
func (r *ManagedTenantsManagedTenantMyRolesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsMyRole, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsMyRole
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsMyRole
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsMyRole collection, max N pages
func (r *ManagedTenantsManagedTenantMyRolesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsMyRole, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsMyRole collection
func (r *ManagedTenantsManagedTenantMyRolesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsMyRole, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsMyRole collection
func (r *ManagedTenantsManagedTenantMyRolesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsMyRole) (resObj *ManagedTenantsMyRole, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TenantGroups returns request builder for ManagedTenantsTenantGroup collection
func (b *ManagedTenantsManagedTenantRequestBuilder) TenantGroups() *ManagedTenantsManagedTenantTenantGroupsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantTenantGroupsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tenantGroups"
	return bb
}

// ManagedTenantsManagedTenantTenantGroupsCollectionRequestBuilder is request builder for ManagedTenantsTenantGroup collection rcn
type ManagedTenantsManagedTenantTenantGroupsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsTenantGroup collection
func (b *ManagedTenantsManagedTenantTenantGroupsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantTenantGroupsCollectionRequest {
	return &ManagedTenantsManagedTenantTenantGroupsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsTenantGroup item
func (b *ManagedTenantsManagedTenantTenantGroupsCollectionRequestBuilder) ID(id string) *ManagedTenantsTenantGroupRequestBuilder {
	bb := &ManagedTenantsTenantGroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantTenantGroupsCollectionRequest is request for ManagedTenantsTenantGroup collection
type ManagedTenantsManagedTenantTenantGroupsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsTenantGroup collection
func (r *ManagedTenantsManagedTenantTenantGroupsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsTenantGroup, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsTenantGroup
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsTenantGroup
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsTenantGroup collection, max N pages
func (r *ManagedTenantsManagedTenantTenantGroupsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsTenantGroup, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsTenantGroup collection
func (r *ManagedTenantsManagedTenantTenantGroupsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsTenantGroup, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsTenantGroup collection
func (r *ManagedTenantsManagedTenantTenantGroupsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsTenantGroup) (resObj *ManagedTenantsTenantGroup, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TenantTags returns request builder for ManagedTenantsTenantTag collection
func (b *ManagedTenantsManagedTenantRequestBuilder) TenantTags() *ManagedTenantsManagedTenantTenantTagsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantTenantTagsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tenantTags"
	return bb
}

// ManagedTenantsManagedTenantTenantTagsCollectionRequestBuilder is request builder for ManagedTenantsTenantTag collection rcn
type ManagedTenantsManagedTenantTenantTagsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsTenantTag collection
func (b *ManagedTenantsManagedTenantTenantTagsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantTenantTagsCollectionRequest {
	return &ManagedTenantsManagedTenantTenantTagsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsTenantTag item
func (b *ManagedTenantsManagedTenantTenantTagsCollectionRequestBuilder) ID(id string) *ManagedTenantsTenantTagRequestBuilder {
	bb := &ManagedTenantsTenantTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantTenantTagsCollectionRequest is request for ManagedTenantsTenantTag collection
type ManagedTenantsManagedTenantTenantTagsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsTenantTag collection
func (r *ManagedTenantsManagedTenantTenantTagsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsTenantTag, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsTenantTag
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsTenantTag
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsTenantTag collection, max N pages
func (r *ManagedTenantsManagedTenantTenantTagsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsTenantTag, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsTenantTag collection
func (r *ManagedTenantsManagedTenantTenantTagsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsTenantTag, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsTenantTag collection
func (r *ManagedTenantsManagedTenantTenantTagsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsTenantTag) (resObj *ManagedTenantsTenantTag, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Tenants returns request builder for ManagedTenantsTenant collection
func (b *ManagedTenantsManagedTenantRequestBuilder) Tenants() *ManagedTenantsManagedTenantTenantsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantTenantsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tenants"
	return bb
}

// ManagedTenantsManagedTenantTenantsCollectionRequestBuilder is request builder for ManagedTenantsTenant collection rcn
type ManagedTenantsManagedTenantTenantsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsTenant collection
func (b *ManagedTenantsManagedTenantTenantsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantTenantsCollectionRequest {
	return &ManagedTenantsManagedTenantTenantsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsTenant item
func (b *ManagedTenantsManagedTenantTenantsCollectionRequestBuilder) ID(id string) *ManagedTenantsTenantRequestBuilder {
	bb := &ManagedTenantsTenantRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantTenantsCollectionRequest is request for ManagedTenantsTenant collection
type ManagedTenantsManagedTenantTenantsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsTenant collection
func (r *ManagedTenantsManagedTenantTenantsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsTenant, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsTenant
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsTenant
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsTenant collection, max N pages
func (r *ManagedTenantsManagedTenantTenantsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsTenant, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsTenant collection
func (r *ManagedTenantsManagedTenantTenantsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsTenant, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsTenant collection
func (r *ManagedTenantsManagedTenantTenantsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsTenant) (resObj *ManagedTenantsTenant, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TenantsCustomizedInformation returns request builder for ManagedTenantsTenantCustomizedInformation collection
func (b *ManagedTenantsManagedTenantRequestBuilder) TenantsCustomizedInformation() *ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tenantsCustomizedInformation"
	return bb
}

// ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequestBuilder is request builder for ManagedTenantsTenantCustomizedInformation collection rcn
type ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsTenantCustomizedInformation collection
func (b *ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequest {
	return &ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsTenantCustomizedInformation item
func (b *ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequestBuilder) ID(id string) *ManagedTenantsTenantCustomizedInformationRequestBuilder {
	bb := &ManagedTenantsTenantCustomizedInformationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequest is request for ManagedTenantsTenantCustomizedInformation collection
type ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsTenantCustomizedInformation collection
func (r *ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsTenantCustomizedInformation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsTenantCustomizedInformation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsTenantCustomizedInformation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsTenantCustomizedInformation collection, max N pages
func (r *ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsTenantCustomizedInformation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsTenantCustomizedInformation collection
func (r *ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsTenantCustomizedInformation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsTenantCustomizedInformation collection
func (r *ManagedTenantsManagedTenantTenantsCustomizedInformationCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsTenantCustomizedInformation) (resObj *ManagedTenantsTenantCustomizedInformation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TenantsDetailedInformation returns request builder for ManagedTenantsTenantDetailedInformation collection
func (b *ManagedTenantsManagedTenantRequestBuilder) TenantsDetailedInformation() *ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tenantsDetailedInformation"
	return bb
}

// ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequestBuilder is request builder for ManagedTenantsTenantDetailedInformation collection rcn
type ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsTenantDetailedInformation collection
func (b *ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequest {
	return &ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsTenantDetailedInformation item
func (b *ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequestBuilder) ID(id string) *ManagedTenantsTenantDetailedInformationRequestBuilder {
	bb := &ManagedTenantsTenantDetailedInformationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequest is request for ManagedTenantsTenantDetailedInformation collection
type ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsTenantDetailedInformation collection
func (r *ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsTenantDetailedInformation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsTenantDetailedInformation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsTenantDetailedInformation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsTenantDetailedInformation collection, max N pages
func (r *ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsTenantDetailedInformation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsTenantDetailedInformation collection
func (r *ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsTenantDetailedInformation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsTenantDetailedInformation collection
func (r *ManagedTenantsManagedTenantTenantsDetailedInformationCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsTenantDetailedInformation) (resObj *ManagedTenantsTenantDetailedInformation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsDeviceMalwareStates returns request builder for ManagedTenantsWindowsDeviceMalwareState collection
func (b *ManagedTenantsManagedTenantRequestBuilder) WindowsDeviceMalwareStates() *ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsDeviceMalwareStates"
	return bb
}

// ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequestBuilder is request builder for ManagedTenantsWindowsDeviceMalwareState collection rcn
type ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsWindowsDeviceMalwareState collection
func (b *ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequest {
	return &ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsWindowsDeviceMalwareState item
func (b *ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequestBuilder) ID(id string) *ManagedTenantsWindowsDeviceMalwareStateRequestBuilder {
	bb := &ManagedTenantsWindowsDeviceMalwareStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequest is request for ManagedTenantsWindowsDeviceMalwareState collection
type ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsWindowsDeviceMalwareState collection
func (r *ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsWindowsDeviceMalwareState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsWindowsDeviceMalwareState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsWindowsDeviceMalwareState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsWindowsDeviceMalwareState collection, max N pages
func (r *ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsWindowsDeviceMalwareState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsWindowsDeviceMalwareState collection
func (r *ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsWindowsDeviceMalwareState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsWindowsDeviceMalwareState collection
func (r *ManagedTenantsManagedTenantWindowsDeviceMalwareStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsWindowsDeviceMalwareState) (resObj *ManagedTenantsWindowsDeviceMalwareState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsProtectionStates returns request builder for ManagedTenantsWindowsProtectionState collection
func (b *ManagedTenantsManagedTenantRequestBuilder) WindowsProtectionStates() *ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/windowsProtectionStates"
	return bb
}

// ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequestBuilder is request builder for ManagedTenantsWindowsProtectionState collection rcn
type ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsWindowsProtectionState collection
func (b *ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequest {
	return &ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsWindowsProtectionState item
func (b *ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequestBuilder) ID(id string) *ManagedTenantsWindowsProtectionStateRequestBuilder {
	bb := &ManagedTenantsWindowsProtectionStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequest is request for ManagedTenantsWindowsProtectionState collection
type ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsWindowsProtectionState collection
func (r *ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsWindowsProtectionState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsWindowsProtectionState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsWindowsProtectionState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsWindowsProtectionState collection, max N pages
func (r *ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsWindowsProtectionState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsWindowsProtectionState collection
func (r *ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsWindowsProtectionState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsWindowsProtectionState collection
func (r *ManagedTenantsManagedTenantWindowsProtectionStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsWindowsProtectionState) (resObj *ManagedTenantsWindowsProtectionState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Alert is navigation property rn
func (b *ManagedTenantsManagedTenantAPINotificationRequestBuilder) Alert() *ManagedTenantsManagedTenantAlertRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alert"
	return bb
}

// AlertLogs returns request builder for ManagedTenantsManagedTenantAlertLog collection
func (b *ManagedTenantsManagedTenantAlertRequestBuilder) AlertLogs() *ManagedTenantsManagedTenantAlertAlertLogsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertAlertLogsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alertLogs"
	return bb
}

// ManagedTenantsManagedTenantAlertAlertLogsCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantAlertLog collection rcn
type ManagedTenantsManagedTenantAlertAlertLogsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantAlertLog collection
func (b *ManagedTenantsManagedTenantAlertAlertLogsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantAlertAlertLogsCollectionRequest {
	return &ManagedTenantsManagedTenantAlertAlertLogsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantAlertLog item
func (b *ManagedTenantsManagedTenantAlertAlertLogsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantAlertLogRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertLogRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantAlertAlertLogsCollectionRequest is request for ManagedTenantsManagedTenantAlertLog collection
type ManagedTenantsManagedTenantAlertAlertLogsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantAlertLog collection
func (r *ManagedTenantsManagedTenantAlertAlertLogsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantAlertLog, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantAlertLog
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantAlertLog
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantAlertLog collection, max N pages
func (r *ManagedTenantsManagedTenantAlertAlertLogsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantAlertLog, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantAlertLog collection
func (r *ManagedTenantsManagedTenantAlertAlertLogsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantAlertLog, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantAlertLog collection
func (r *ManagedTenantsManagedTenantAlertAlertLogsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantAlertLog) (resObj *ManagedTenantsManagedTenantAlertLog, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AlertRule is navigation property rn
func (b *ManagedTenantsManagedTenantAlertRequestBuilder) AlertRule() *ManagedTenantsManagedTenantAlertRuleRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alertRule"
	return bb
}

// APINotifications returns request builder for ManagedTenantsManagedTenantAPINotification collection
func (b *ManagedTenantsManagedTenantAlertRequestBuilder) APINotifications() *ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/apiNotifications"
	return bb
}

// ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantAPINotification collection rcn
type ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantAPINotification collection
func (b *ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequest {
	return &ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantAPINotification item
func (b *ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantAPINotificationRequestBuilder {
	bb := &ManagedTenantsManagedTenantAPINotificationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequest is request for ManagedTenantsManagedTenantAPINotification collection
type ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantAPINotification collection
func (r *ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantAPINotification, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantAPINotification
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantAPINotification
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantAPINotification collection, max N pages
func (r *ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantAPINotification, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantAPINotification collection
func (r *ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantAPINotification, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantAPINotification collection
func (r *ManagedTenantsManagedTenantAlertAPINotificationsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantAPINotification) (resObj *ManagedTenantsManagedTenantAPINotification, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EmailNotifications returns request builder for ManagedTenantsManagedTenantEmailNotification collection
func (b *ManagedTenantsManagedTenantAlertRequestBuilder) EmailNotifications() *ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/emailNotifications"
	return bb
}

// ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantEmailNotification collection rcn
type ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantEmailNotification collection
func (b *ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequest {
	return &ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantEmailNotification item
func (b *ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantEmailNotificationRequestBuilder {
	bb := &ManagedTenantsManagedTenantEmailNotificationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequest is request for ManagedTenantsManagedTenantEmailNotification collection
type ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantEmailNotification collection
func (r *ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantEmailNotification, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantEmailNotification
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantEmailNotification
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantEmailNotification collection, max N pages
func (r *ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantEmailNotification, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantEmailNotification collection
func (r *ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantEmailNotification, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantEmailNotification collection
func (r *ManagedTenantsManagedTenantAlertEmailNotificationsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantEmailNotification) (resObj *ManagedTenantsManagedTenantEmailNotification, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Alert is navigation property rn
func (b *ManagedTenantsManagedTenantAlertLogRequestBuilder) Alert() *ManagedTenantsManagedTenantAlertRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alert"
	return bb
}

// Alerts returns request builder for ManagedTenantsManagedTenantAlert collection
func (b *ManagedTenantsManagedTenantAlertRuleRequestBuilder) Alerts() *ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alerts"
	return bb
}

// ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantAlert collection rcn
type ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantAlert collection
func (b *ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequest {
	return &ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantAlert item
func (b *ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantAlertRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequest is request for ManagedTenantsManagedTenantAlert collection
type ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantAlert collection
func (r *ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantAlert, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantAlert
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantAlert
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantAlert collection, max N pages
func (r *ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantAlert, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantAlert collection
func (r *ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantAlert, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantAlert collection
func (r *ManagedTenantsManagedTenantAlertRuleAlertsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantAlert) (resObj *ManagedTenantsManagedTenantAlert, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RuleDefinition is navigation property rn
func (b *ManagedTenantsManagedTenantAlertRuleRequestBuilder) RuleDefinition() *ManagedTenantsManagedTenantAlertRuleDefinitionRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRuleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/ruleDefinition"
	return bb
}

// AlertRules returns request builder for ManagedTenantsManagedTenantAlertRule collection
func (b *ManagedTenantsManagedTenantAlertRuleDefinitionRequestBuilder) AlertRules() *ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alertRules"
	return bb
}

// ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequestBuilder is request builder for ManagedTenantsManagedTenantAlertRule collection rcn
type ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagedTenantAlertRule collection
func (b *ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequestBuilder) Request() *ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequest {
	return &ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagedTenantAlertRule item
func (b *ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequestBuilder) ID(id string) *ManagedTenantsManagedTenantAlertRuleRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequest is request for ManagedTenantsManagedTenantAlertRule collection
type ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagedTenantAlertRule collection
func (r *ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagedTenantAlertRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagedTenantAlertRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagedTenantAlertRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagedTenantAlertRule collection, max N pages
func (r *ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagedTenantAlertRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagedTenantAlertRule collection
func (r *ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagedTenantAlertRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagedTenantAlertRule collection
func (r *ManagedTenantsManagedTenantAlertRuleDefinitionAlertRulesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagedTenantAlertRule) (resObj *ManagedTenantsManagedTenantAlertRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Alert is navigation property rn
func (b *ManagedTenantsManagedTenantEmailNotificationRequestBuilder) Alert() *ManagedTenantsManagedTenantAlertRequestBuilder {
	bb := &ManagedTenantsManagedTenantAlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alert"
	return bb
}

// ManagementTemplateCollections returns request builder for ManagedTenantsManagementTemplateCollection collection
func (b *ManagedTenantsManagementTemplateRequestBuilder) ManagementTemplateCollections() *ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequestBuilder {
	bb := &ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementTemplateCollections"
	return bb
}

// ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequestBuilder is request builder for ManagedTenantsManagementTemplateCollection collection rcn
type ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementTemplateCollection collection
func (b *ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequestBuilder) Request() *ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequest {
	return &ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementTemplateCollection item
func (b *ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementTemplateCollectionRequestBuilder {
	bb := &ManagedTenantsManagementTemplateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequest is request for ManagedTenantsManagementTemplateCollection collection
type ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementTemplateCollection collection
func (r *ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementTemplateCollection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementTemplateCollection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementTemplateCollection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementTemplateCollection collection, max N pages
func (r *ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementTemplateCollection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementTemplateCollection collection
func (r *ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementTemplateCollection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementTemplateCollection collection
func (r *ManagedTenantsManagementTemplateManagementTemplateCollectionsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementTemplateCollection) (resObj *ManagedTenantsManagementTemplateCollection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagementTemplateSteps returns request builder for ManagedTenantsManagementTemplateStep collection
func (b *ManagedTenantsManagementTemplateRequestBuilder) ManagementTemplateSteps() *ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequestBuilder {
	bb := &ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementTemplateSteps"
	return bb
}

// ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequestBuilder is request builder for ManagedTenantsManagementTemplateStep collection rcn
type ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementTemplateStep collection
func (b *ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequestBuilder) Request() *ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequest {
	return &ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementTemplateStep item
func (b *ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementTemplateStepRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequest is request for ManagedTenantsManagementTemplateStep collection
type ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementTemplateStep collection
func (r *ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementTemplateStep, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementTemplateStep
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementTemplateStep
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementTemplateStep collection, max N pages
func (r *ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementTemplateStep, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementTemplateStep collection
func (r *ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementTemplateStep, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementTemplateStep collection
func (r *ManagedTenantsManagementTemplateManagementTemplateStepsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementTemplateStep) (resObj *ManagedTenantsManagementTemplateStep, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagementTemplates returns request builder for ManagedTenantsManagementTemplate collection
func (b *ManagedTenantsManagementTemplateCollectionRequestBuilder) ManagementTemplates() *ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequestBuilder {
	bb := &ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementTemplates"
	return bb
}

// ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequestBuilder is request builder for ManagedTenantsManagementTemplate collection rcn
type ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementTemplate collection
func (b *ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequestBuilder) Request() *ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequest {
	return &ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementTemplate item
func (b *ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementTemplateRequestBuilder {
	bb := &ManagedTenantsManagementTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequest is request for ManagedTenantsManagementTemplate collection
type ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementTemplate collection
func (r *ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementTemplate collection, max N pages
func (r *ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementTemplate collection
func (r *ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementTemplate collection
func (r *ManagedTenantsManagementTemplateCollectionManagementTemplatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementTemplate) (resObj *ManagedTenantsManagementTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AcceptedVersion is navigation property rn
func (b *ManagedTenantsManagementTemplateStepRequestBuilder) AcceptedVersion() *ManagedTenantsManagementTemplateStepVersionRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepVersionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/acceptedVersion"
	return bb
}

// ManagementTemplate is navigation property rn
func (b *ManagedTenantsManagementTemplateStepRequestBuilder) ManagementTemplate() *ManagedTenantsManagementTemplateRequestBuilder {
	bb := &ManagedTenantsManagementTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementTemplate"
	return bb
}

// Versions returns request builder for ManagedTenantsManagementTemplateStepVersion collection
func (b *ManagedTenantsManagementTemplateStepRequestBuilder) Versions() *ManagedTenantsManagementTemplateStepVersionsCollectionRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepVersionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/versions"
	return bb
}

// ManagedTenantsManagementTemplateStepVersionsCollectionRequestBuilder is request builder for ManagedTenantsManagementTemplateStepVersion collection rcn
type ManagedTenantsManagementTemplateStepVersionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementTemplateStepVersion collection
func (b *ManagedTenantsManagementTemplateStepVersionsCollectionRequestBuilder) Request() *ManagedTenantsManagementTemplateStepVersionsCollectionRequest {
	return &ManagedTenantsManagementTemplateStepVersionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementTemplateStepVersion item
func (b *ManagedTenantsManagementTemplateStepVersionsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementTemplateStepVersionRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepVersionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagementTemplateStepVersionsCollectionRequest is request for ManagedTenantsManagementTemplateStepVersion collection
type ManagedTenantsManagementTemplateStepVersionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementTemplateStepVersion collection
func (r *ManagedTenantsManagementTemplateStepVersionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementTemplateStepVersion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementTemplateStepVersion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementTemplateStepVersion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementTemplateStepVersion collection, max N pages
func (r *ManagedTenantsManagementTemplateStepVersionsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementTemplateStepVersion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementTemplateStepVersion collection
func (r *ManagedTenantsManagementTemplateStepVersionsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementTemplateStepVersion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementTemplateStepVersion collection
func (r *ManagedTenantsManagementTemplateStepVersionsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementTemplateStepVersion) (resObj *ManagedTenantsManagementTemplateStepVersion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TemplateStepVersion is navigation property rn
func (b *ManagedTenantsManagementTemplateStepDeploymentRequestBuilder) TemplateStepVersion() *ManagedTenantsManagementTemplateStepVersionRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepVersionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/templateStepVersion"
	return bb
}

// AcceptedFor is navigation property rn
func (b *ManagedTenantsManagementTemplateStepVersionRequestBuilder) AcceptedFor() *ManagedTenantsManagementTemplateStepRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/acceptedFor"
	return bb
}

// Deployments returns request builder for ManagedTenantsManagementTemplateStepDeployment collection
func (b *ManagedTenantsManagementTemplateStepVersionRequestBuilder) Deployments() *ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deployments"
	return bb
}

// ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequestBuilder is request builder for ManagedTenantsManagementTemplateStepDeployment collection rcn
type ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedTenantsManagementTemplateStepDeployment collection
func (b *ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequestBuilder) Request() *ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequest {
	return &ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedTenantsManagementTemplateStepDeployment item
func (b *ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequestBuilder) ID(id string) *ManagedTenantsManagementTemplateStepDeploymentRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepDeploymentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequest is request for ManagedTenantsManagementTemplateStepDeployment collection
type ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedTenantsManagementTemplateStepDeployment collection
func (r *ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedTenantsManagementTemplateStepDeployment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedTenantsManagementTemplateStepDeployment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedTenantsManagementTemplateStepDeployment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedTenantsManagementTemplateStepDeployment collection, max N pages
func (r *ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedTenantsManagementTemplateStepDeployment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedTenantsManagementTemplateStepDeployment collection
func (r *ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequest) Get(ctx context.Context) ([]ManagedTenantsManagementTemplateStepDeployment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedTenantsManagementTemplateStepDeployment collection
func (r *ManagedTenantsManagementTemplateStepVersionDeploymentsCollectionRequest) Add(ctx context.Context, reqObj *ManagedTenantsManagementTemplateStepDeployment) (resObj *ManagedTenantsManagementTemplateStepDeployment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TemplateStep is navigation property rn
func (b *ManagedTenantsManagementTemplateStepVersionRequestBuilder) TemplateStep() *ManagedTenantsManagementTemplateStepRequestBuilder {
	bb := &ManagedTenantsManagementTemplateStepRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/templateStep"
	return bb
}

// Licenses is navigation property rn
func (b *ManagedTenantsTemplateActionRequestBuilder) Licenses() *LicenseDetailsRequestBuilder {
	bb := &LicenseDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/licenses"
	return bb
}
