// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// UnifiedRoleManagementAlertCollectionRefreshRequestParameter undocumented
type UnifiedRoleManagementAlertCollectionRefreshRequestParameter struct {
	// ScopeType undocumented
	ScopeType *string `json:"scopeType,omitempty"`
	// ScopeID undocumented
	ScopeID *string `json:"scopeId,omitempty"`
}

// UnifiedRbacResourceNamespaceImportResourceActionsRequestParameter undocumented
type UnifiedRbacResourceNamespaceImportResourceActionsRequestParameter struct {
	// Format undocumented
	Format *string `json:"format,omitempty"`
	// Value undocumented
	Value *string `json:"value,omitempty"`
	// OverwriteResourceNamespace undocumented
	OverwriteResourceNamespace *bool `json:"overwriteResourceNamespace,omitempty"`
}

// UnifiedRoleAssignmentScheduleRequestObjectCancelRequestParameter undocumented
type UnifiedRoleAssignmentScheduleRequestObjectCancelRequestParameter struct {
}

// UnifiedRoleEligibilityScheduleRequestObjectCancelRequestParameter undocumented
type UnifiedRoleEligibilityScheduleRequestObjectCancelRequestParameter struct {
}

// UnifiedRoleManagementAlertRefreshRequestParameter undocumented
type UnifiedRoleManagementAlertRefreshRequestParameter struct {
}

// UnifiedRoleManagementAlertIncidentRemediateRequestParameter undocumented
type UnifiedRoleManagementAlertIncidentRemediateRequestParameter struct {
}

// ResourceNamespaces returns request builder for UnifiedRbacResourceNamespace collection
func (b *UnifiedRbacApplicationRequestBuilder) ResourceNamespaces() *UnifiedRbacApplicationResourceNamespacesCollectionRequestBuilder {
	bb := &UnifiedRbacApplicationResourceNamespacesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/resourceNamespaces"
	return bb
}

// UnifiedRbacApplicationResourceNamespacesCollectionRequestBuilder is request builder for UnifiedRbacResourceNamespace collection rcn
type UnifiedRbacApplicationResourceNamespacesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRbacResourceNamespace collection
func (b *UnifiedRbacApplicationResourceNamespacesCollectionRequestBuilder) Request() *UnifiedRbacApplicationResourceNamespacesCollectionRequest {
	return &UnifiedRbacApplicationResourceNamespacesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRbacResourceNamespace item
func (b *UnifiedRbacApplicationResourceNamespacesCollectionRequestBuilder) ID(id string) *UnifiedRbacResourceNamespaceRequestBuilder {
	bb := &UnifiedRbacResourceNamespaceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRbacApplicationResourceNamespacesCollectionRequest is request for UnifiedRbacResourceNamespace collection
type UnifiedRbacApplicationResourceNamespacesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRbacResourceNamespace collection
func (r *UnifiedRbacApplicationResourceNamespacesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRbacResourceNamespace, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRbacResourceNamespace
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRbacResourceNamespace
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRbacResourceNamespace collection, max N pages
func (r *UnifiedRbacApplicationResourceNamespacesCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRbacResourceNamespace, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRbacResourceNamespace collection
func (r *UnifiedRbacApplicationResourceNamespacesCollectionRequest) Get(ctx context.Context) ([]UnifiedRbacResourceNamespace, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRbacResourceNamespace collection
func (r *UnifiedRbacApplicationResourceNamespacesCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRbacResourceNamespace) (resObj *UnifiedRbacResourceNamespace, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleAssignments returns request builder for UnifiedRoleAssignment collection
func (b *UnifiedRbacApplicationRequestBuilder) RoleAssignments() *UnifiedRbacApplicationRoleAssignmentsCollectionRequestBuilder {
	bb := &UnifiedRbacApplicationRoleAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleAssignments"
	return bb
}

// UnifiedRbacApplicationRoleAssignmentsCollectionRequestBuilder is request builder for UnifiedRoleAssignment collection rcn
type UnifiedRbacApplicationRoleAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleAssignment collection
func (b *UnifiedRbacApplicationRoleAssignmentsCollectionRequestBuilder) Request() *UnifiedRbacApplicationRoleAssignmentsCollectionRequest {
	return &UnifiedRbacApplicationRoleAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleAssignment item
func (b *UnifiedRbacApplicationRoleAssignmentsCollectionRequestBuilder) ID(id string) *UnifiedRoleAssignmentRequestBuilder {
	bb := &UnifiedRoleAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRbacApplicationRoleAssignmentsCollectionRequest is request for UnifiedRoleAssignment collection
type UnifiedRbacApplicationRoleAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleAssignment collection
func (r *UnifiedRbacApplicationRoleAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleAssignment collection, max N pages
func (r *UnifiedRbacApplicationRoleAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleAssignment collection
func (r *UnifiedRbacApplicationRoleAssignmentsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleAssignment collection
func (r *UnifiedRbacApplicationRoleAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleAssignment) (resObj *UnifiedRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleDefinitions returns request builder for UnifiedRoleDefinition collection
func (b *UnifiedRbacApplicationRequestBuilder) RoleDefinitions() *UnifiedRbacApplicationRoleDefinitionsCollectionRequestBuilder {
	bb := &UnifiedRbacApplicationRoleDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinitions"
	return bb
}

// UnifiedRbacApplicationRoleDefinitionsCollectionRequestBuilder is request builder for UnifiedRoleDefinition collection rcn
type UnifiedRbacApplicationRoleDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleDefinition collection
func (b *UnifiedRbacApplicationRoleDefinitionsCollectionRequestBuilder) Request() *UnifiedRbacApplicationRoleDefinitionsCollectionRequest {
	return &UnifiedRbacApplicationRoleDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleDefinition item
func (b *UnifiedRbacApplicationRoleDefinitionsCollectionRequestBuilder) ID(id string) *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRbacApplicationRoleDefinitionsCollectionRequest is request for UnifiedRoleDefinition collection
type UnifiedRbacApplicationRoleDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleDefinition collection
func (r *UnifiedRbacApplicationRoleDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleDefinition collection, max N pages
func (r *UnifiedRbacApplicationRoleDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleDefinition collection
func (r *UnifiedRbacApplicationRoleDefinitionsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleDefinition collection
func (r *UnifiedRbacApplicationRoleDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleDefinition) (resObj *UnifiedRoleDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TransitiveRoleAssignments returns request builder for UnifiedRoleAssignment collection
func (b *UnifiedRbacApplicationRequestBuilder) TransitiveRoleAssignments() *UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequestBuilder {
	bb := &UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/transitiveRoleAssignments"
	return bb
}

// UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequestBuilder is request builder for UnifiedRoleAssignment collection rcn
type UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleAssignment collection
func (b *UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequestBuilder) Request() *UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequest {
	return &UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleAssignment item
func (b *UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequestBuilder) ID(id string) *UnifiedRoleAssignmentRequestBuilder {
	bb := &UnifiedRoleAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequest is request for UnifiedRoleAssignment collection
type UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleAssignment collection
func (r *UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleAssignment collection, max N pages
func (r *UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleAssignment collection
func (r *UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleAssignment collection
func (r *UnifiedRbacApplicationTransitiveRoleAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleAssignment) (resObj *UnifiedRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ResourceScope is navigation property rn
func (b *UnifiedRbacResourceActionRequestBuilder) ResourceScope() *UnifiedRbacResourceScopeRequestBuilder {
	bb := &UnifiedRbacResourceScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/resourceScope"
	return bb
}

// ResourceActions returns request builder for UnifiedRbacResourceAction collection
func (b *UnifiedRbacResourceNamespaceRequestBuilder) ResourceActions() *UnifiedRbacResourceNamespaceResourceActionsCollectionRequestBuilder {
	bb := &UnifiedRbacResourceNamespaceResourceActionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/resourceActions"
	return bb
}

// UnifiedRbacResourceNamespaceResourceActionsCollectionRequestBuilder is request builder for UnifiedRbacResourceAction collection rcn
type UnifiedRbacResourceNamespaceResourceActionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRbacResourceAction collection
func (b *UnifiedRbacResourceNamespaceResourceActionsCollectionRequestBuilder) Request() *UnifiedRbacResourceNamespaceResourceActionsCollectionRequest {
	return &UnifiedRbacResourceNamespaceResourceActionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRbacResourceAction item
func (b *UnifiedRbacResourceNamespaceResourceActionsCollectionRequestBuilder) ID(id string) *UnifiedRbacResourceActionRequestBuilder {
	bb := &UnifiedRbacResourceActionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRbacResourceNamespaceResourceActionsCollectionRequest is request for UnifiedRbacResourceAction collection
type UnifiedRbacResourceNamespaceResourceActionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRbacResourceAction collection
func (r *UnifiedRbacResourceNamespaceResourceActionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRbacResourceAction, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRbacResourceAction
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRbacResourceAction
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRbacResourceAction collection, max N pages
func (r *UnifiedRbacResourceNamespaceResourceActionsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRbacResourceAction, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRbacResourceAction collection
func (r *UnifiedRbacResourceNamespaceResourceActionsCollectionRequest) Get(ctx context.Context) ([]UnifiedRbacResourceAction, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRbacResourceAction collection
func (r *UnifiedRbacResourceNamespaceResourceActionsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRbacResourceAction) (resObj *UnifiedRbacResourceAction, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppScope is navigation property rn
func (b *UnifiedRoleAssignmentRequestBuilder) AppScope() *AppScopeRequestBuilder {
	bb := &AppScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appScope"
	return bb
}

// DirectoryScope is navigation property rn
func (b *UnifiedRoleAssignmentRequestBuilder) DirectoryScope() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryScope"
	return bb
}

// Principal is navigation property rn
func (b *UnifiedRoleAssignmentRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// RoleDefinition is navigation property rn
func (b *UnifiedRoleAssignmentRequestBuilder) RoleDefinition() *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// AppScopes returns request builder for AppScope collection
func (b *UnifiedRoleAssignmentMultipleRequestBuilder) AppScopes() *UnifiedRoleAssignmentMultipleAppScopesCollectionRequestBuilder {
	bb := &UnifiedRoleAssignmentMultipleAppScopesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appScopes"
	return bb
}

// UnifiedRoleAssignmentMultipleAppScopesCollectionRequestBuilder is request builder for AppScope collection rcn
type UnifiedRoleAssignmentMultipleAppScopesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppScope collection
func (b *UnifiedRoleAssignmentMultipleAppScopesCollectionRequestBuilder) Request() *UnifiedRoleAssignmentMultipleAppScopesCollectionRequest {
	return &UnifiedRoleAssignmentMultipleAppScopesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppScope item
func (b *UnifiedRoleAssignmentMultipleAppScopesCollectionRequestBuilder) ID(id string) *AppScopeRequestBuilder {
	bb := &AppScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleAssignmentMultipleAppScopesCollectionRequest is request for AppScope collection
type UnifiedRoleAssignmentMultipleAppScopesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppScope collection
func (r *UnifiedRoleAssignmentMultipleAppScopesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppScope, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppScope
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppScope
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppScope collection, max N pages
func (r *UnifiedRoleAssignmentMultipleAppScopesCollectionRequest) GetN(ctx context.Context, n int) ([]AppScope, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppScope collection
func (r *UnifiedRoleAssignmentMultipleAppScopesCollectionRequest) Get(ctx context.Context) ([]AppScope, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppScope collection
func (r *UnifiedRoleAssignmentMultipleAppScopesCollectionRequest) Add(ctx context.Context, reqObj *AppScope) (resObj *AppScope, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DirectoryScopes returns request builder for DirectoryObject collection
func (b *UnifiedRoleAssignmentMultipleRequestBuilder) DirectoryScopes() *UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequestBuilder {
	bb := &UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryScopes"
	return bb
}

// UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequestBuilder is request builder for DirectoryObject collection rcn
type UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequestBuilder) Request() *UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequest {
	return &UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequest is request for DirectoryObject collection
type UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *UnifiedRoleAssignmentMultipleDirectoryScopesCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Principals returns request builder for DirectoryObject collection
func (b *UnifiedRoleAssignmentMultipleRequestBuilder) Principals() *UnifiedRoleAssignmentMultiplePrincipalsCollectionRequestBuilder {
	bb := &UnifiedRoleAssignmentMultiplePrincipalsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principals"
	return bb
}

// UnifiedRoleAssignmentMultiplePrincipalsCollectionRequestBuilder is request builder for DirectoryObject collection rcn
type UnifiedRoleAssignmentMultiplePrincipalsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *UnifiedRoleAssignmentMultiplePrincipalsCollectionRequestBuilder) Request() *UnifiedRoleAssignmentMultiplePrincipalsCollectionRequest {
	return &UnifiedRoleAssignmentMultiplePrincipalsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *UnifiedRoleAssignmentMultiplePrincipalsCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleAssignmentMultiplePrincipalsCollectionRequest is request for DirectoryObject collection
type UnifiedRoleAssignmentMultiplePrincipalsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *UnifiedRoleAssignmentMultiplePrincipalsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *UnifiedRoleAssignmentMultiplePrincipalsCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *UnifiedRoleAssignmentMultiplePrincipalsCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *UnifiedRoleAssignmentMultiplePrincipalsCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleDefinition is navigation property rn
func (b *UnifiedRoleAssignmentMultipleRequestBuilder) RoleDefinition() *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// ActivatedUsing is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestBuilder) ActivatedUsing() *UnifiedRoleEligibilityScheduleRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activatedUsing"
	return bb
}

// ActivatedUsing is navigation property rn
func (b *UnifiedRoleAssignmentScheduleInstanceRequestBuilder) ActivatedUsing() *UnifiedRoleEligibilityScheduleInstanceRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleInstanceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activatedUsing"
	return bb
}

// ActivatedUsing is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) ActivatedUsing() *UnifiedRoleEligibilityScheduleRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activatedUsing"
	return bb
}

// AppScope is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) AppScope() *AppScopeRequestBuilder {
	bb := &AppScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appScope"
	return bb
}

// DirectoryScope is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) DirectoryScope() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryScope"
	return bb
}

// Principal is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// RoleDefinition is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) RoleDefinition() *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// TargetSchedule is navigation property rn
func (b *UnifiedRoleAssignmentScheduleRequestObjectRequestBuilder) TargetSchedule() *UnifiedRoleAssignmentScheduleRequestBuilder {
	bb := &UnifiedRoleAssignmentScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/targetSchedule"
	return bb
}

// InheritsPermissionsFrom returns request builder for UnifiedRoleDefinition collection
func (b *UnifiedRoleDefinitionRequestBuilder) InheritsPermissionsFrom() *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder {
	bb := &UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/inheritsPermissionsFrom"
	return bb
}

// UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder is request builder for UnifiedRoleDefinition collection rcn
type UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleDefinition collection
func (b *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder) Request() *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest {
	return &UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleDefinition item
func (b *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequestBuilder) ID(id string) *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest is request for UnifiedRoleDefinition collection
type UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleDefinition collection
func (r *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleDefinition collection, max N pages
func (r *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleDefinition collection
func (r *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleDefinition collection
func (r *UnifiedRoleDefinitionInheritsPermissionsFromCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleDefinition) (resObj *UnifiedRoleDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppScope is navigation property rn
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) AppScope() *AppScopeRequestBuilder {
	bb := &AppScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appScope"
	return bb
}

// DirectoryScope is navigation property rn
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) DirectoryScope() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryScope"
	return bb
}

// Principal is navigation property rn
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// RoleDefinition is navigation property rn
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) RoleDefinition() *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// TargetSchedule is navigation property rn
func (b *UnifiedRoleEligibilityScheduleRequestObjectRequestBuilder) TargetSchedule() *UnifiedRoleEligibilityScheduleRequestBuilder {
	bb := &UnifiedRoleEligibilityScheduleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/targetSchedule"
	return bb
}

// AlertConfiguration is navigation property rn
func (b *UnifiedRoleManagementAlertRequestBuilder) AlertConfiguration() *UnifiedRoleManagementAlertConfigurationRequestBuilder {
	bb := &UnifiedRoleManagementAlertConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alertConfiguration"
	return bb
}

// AlertDefinition is navigation property rn
func (b *UnifiedRoleManagementAlertRequestBuilder) AlertDefinition() *UnifiedRoleManagementAlertDefinitionRequestBuilder {
	bb := &UnifiedRoleManagementAlertDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alertDefinition"
	return bb
}

// AlertIncidents returns request builder for UnifiedRoleManagementAlertIncident collection
func (b *UnifiedRoleManagementAlertRequestBuilder) AlertIncidents() *UnifiedRoleManagementAlertAlertIncidentsCollectionRequestBuilder {
	bb := &UnifiedRoleManagementAlertAlertIncidentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alertIncidents"
	return bb
}

// UnifiedRoleManagementAlertAlertIncidentsCollectionRequestBuilder is request builder for UnifiedRoleManagementAlertIncident collection rcn
type UnifiedRoleManagementAlertAlertIncidentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementAlertIncident collection
func (b *UnifiedRoleManagementAlertAlertIncidentsCollectionRequestBuilder) Request() *UnifiedRoleManagementAlertAlertIncidentsCollectionRequest {
	return &UnifiedRoleManagementAlertAlertIncidentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementAlertIncident item
func (b *UnifiedRoleManagementAlertAlertIncidentsCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementAlertIncidentRequestBuilder {
	bb := &UnifiedRoleManagementAlertIncidentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementAlertAlertIncidentsCollectionRequest is request for UnifiedRoleManagementAlertIncident collection
type UnifiedRoleManagementAlertAlertIncidentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementAlertIncident collection
func (r *UnifiedRoleManagementAlertAlertIncidentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementAlertIncident, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementAlertIncident
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementAlertIncident
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementAlertIncident collection, max N pages
func (r *UnifiedRoleManagementAlertAlertIncidentsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementAlertIncident, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementAlertIncident collection
func (r *UnifiedRoleManagementAlertAlertIncidentsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementAlertIncident, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementAlertIncident collection
func (r *UnifiedRoleManagementAlertAlertIncidentsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementAlertIncident) (resObj *UnifiedRoleManagementAlertIncident, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AlertDefinition is navigation property rn
func (b *UnifiedRoleManagementAlertConfigurationRequestBuilder) AlertDefinition() *UnifiedRoleManagementAlertDefinitionRequestBuilder {
	bb := &UnifiedRoleManagementAlertDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alertDefinition"
	return bb
}

// EffectiveRules returns request builder for UnifiedRoleManagementPolicyRule collection
func (b *UnifiedRoleManagementPolicyRequestBuilder) EffectiveRules() *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/effectiveRules"
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyRule collection rcn
type UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest {
	return &UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyRule item
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest is request for UnifiedRoleManagementPolicyRule collection
type UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyRule collection, max N pages
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyRule) (resObj *UnifiedRoleManagementPolicyRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Rules returns request builder for UnifiedRoleManagementPolicyRule collection
func (b *UnifiedRoleManagementPolicyRequestBuilder) Rules() *UnifiedRoleManagementPolicyRulesCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRulesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rules"
	return bb
}

// UnifiedRoleManagementPolicyRulesCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyRule collection rcn
type UnifiedRoleManagementPolicyRulesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyRule collection
func (b *UnifiedRoleManagementPolicyRulesCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyRulesCollectionRequest {
	return &UnifiedRoleManagementPolicyRulesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyRule item
func (b *UnifiedRoleManagementPolicyRulesCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyRulesCollectionRequest is request for UnifiedRoleManagementPolicyRule collection
type UnifiedRoleManagementPolicyRulesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyRulesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyRule collection, max N pages
func (r *UnifiedRoleManagementPolicyRulesCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyRulesCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyRule collection
func (r *UnifiedRoleManagementPolicyRulesCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyRule) (resObj *UnifiedRoleManagementPolicyRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Policy is navigation property rn
func (b *UnifiedRoleManagementPolicyAssignmentRequestBuilder) Policy() *UnifiedRoleManagementPolicyRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/policy"
	return bb
}

// TargetObjects returns request builder for DirectoryObject collection
func (b *UnifiedRoleManagementPolicyRuleTargetRequestBuilder) TargetObjects() *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/targetObjects"
	return bb
}

// UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder is request builder for DirectoryObject collection rcn
type UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest {
	return &UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest is request for DirectoryObject collection
type UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *UnifiedRoleManagementPolicyRuleTargetTargetObjectsCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppScope is navigation property rn
func (b *UnifiedRoleScheduleBaseRequestBuilder) AppScope() *AppScopeRequestBuilder {
	bb := &AppScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appScope"
	return bb
}

// DirectoryScope is navigation property rn
func (b *UnifiedRoleScheduleBaseRequestBuilder) DirectoryScope() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryScope"
	return bb
}

// Principal is navigation property rn
func (b *UnifiedRoleScheduleBaseRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// RoleDefinition is navigation property rn
func (b *UnifiedRoleScheduleBaseRequestBuilder) RoleDefinition() *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// AppScope is navigation property rn
func (b *UnifiedRoleScheduleInstanceBaseRequestBuilder) AppScope() *AppScopeRequestBuilder {
	bb := &AppScopeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appScope"
	return bb
}

// DirectoryScope is navigation property rn
func (b *UnifiedRoleScheduleInstanceBaseRequestBuilder) DirectoryScope() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryScope"
	return bb
}

// Principal is navigation property rn
func (b *UnifiedRoleScheduleInstanceBaseRequestBuilder) Principal() *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/principal"
	return bb
}

// RoleDefinition is navigation property rn
func (b *UnifiedRoleScheduleInstanceBaseRequestBuilder) RoleDefinition() *UnifiedRoleDefinitionRequestBuilder {
	bb := &UnifiedRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRbacApplicationRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRbacResourceActionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRbacResourceNamespaceRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRbacResourceScopeRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRoleAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRoleAssignmentMultipleRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRoleDefinitionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRoleManagementAlertRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRoleManagementAlertDefinitionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRoleManagementPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// UnifiedRoleManagementPolicyApprovalRule returns request builder for UnifiedRoleManagementPolicyApprovalRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder) UnifiedRoleManagementPolicyApprovalRule() *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyApprovalRule collection rcn
type UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyApprovalRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequest {
	return &UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyApprovalRule item
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyApprovalRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyApprovalRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequest is request for UnifiedRoleManagementPolicyApprovalRule collection
type UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyApprovalRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyApprovalRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyApprovalRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyApprovalRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyApprovalRule collection, max N pages
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyApprovalRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyApprovalRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyApprovalRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyApprovalRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyApprovalRuleCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyApprovalRule) (resObj *UnifiedRoleManagementPolicyApprovalRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *UnifiedRoleManagementPolicyAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// UnifiedRoleManagementPolicyAuthenticationContextRule returns request builder for UnifiedRoleManagementPolicyAuthenticationContextRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder) UnifiedRoleManagementPolicyAuthenticationContextRule() *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyAuthenticationContextRule collection rcn
type UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyAuthenticationContextRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest {
	return &UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyAuthenticationContextRule item
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyAuthenticationContextRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyAuthenticationContextRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest is request for UnifiedRoleManagementPolicyAuthenticationContextRule collection
type UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyAuthenticationContextRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyAuthenticationContextRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyAuthenticationContextRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyAuthenticationContextRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyAuthenticationContextRule collection, max N pages
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyAuthenticationContextRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyAuthenticationContextRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyAuthenticationContextRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyAuthenticationContextRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyAuthenticationContextRuleCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyAuthenticationContextRule) (resObj *UnifiedRoleManagementPolicyAuthenticationContextRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UnifiedRoleManagementPolicyEnablementRule returns request builder for UnifiedRoleManagementPolicyEnablementRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder) UnifiedRoleManagementPolicyEnablementRule() *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyEnablementRule collection rcn
type UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyEnablementRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequest {
	return &UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyEnablementRule item
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyEnablementRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyEnablementRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequest is request for UnifiedRoleManagementPolicyEnablementRule collection
type UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyEnablementRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyEnablementRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyEnablementRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyEnablementRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyEnablementRule collection, max N pages
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyEnablementRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyEnablementRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyEnablementRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyEnablementRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyEnablementRuleCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyEnablementRule) (resObj *UnifiedRoleManagementPolicyEnablementRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UnifiedRoleManagementPolicyExpirationRule returns request builder for UnifiedRoleManagementPolicyExpirationRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder) UnifiedRoleManagementPolicyExpirationRule() *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyExpirationRule collection rcn
type UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyExpirationRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequest {
	return &UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyExpirationRule item
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyExpirationRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyExpirationRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequest is request for UnifiedRoleManagementPolicyExpirationRule collection
type UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyExpirationRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyExpirationRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyExpirationRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyExpirationRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyExpirationRule collection, max N pages
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyExpirationRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyExpirationRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyExpirationRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyExpirationRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyExpirationRuleCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyExpirationRule) (resObj *UnifiedRoleManagementPolicyExpirationRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UnifiedRoleManagementPolicyNotificationRule returns request builder for UnifiedRoleManagementPolicyNotificationRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionRequestBuilder) UnifiedRoleManagementPolicyNotificationRule() *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder {
	bb := &UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyNotificationRule collection rcn
type UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyNotificationRule collection
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder) Request() *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequest {
	return &UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyNotificationRule item
func (b *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyNotificationRuleRequestBuilder {
	bb := &UnifiedRoleManagementPolicyNotificationRuleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequest is request for UnifiedRoleManagementPolicyNotificationRule collection
type UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyNotificationRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyNotificationRule, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyNotificationRule
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyNotificationRule
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyNotificationRule collection, max N pages
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyNotificationRule, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyNotificationRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyNotificationRule, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyNotificationRule collection
func (r *UnifiedRoleManagementPolicyEffectiveRulesCollectionUnifiedRoleManagementPolicyNotificationRuleCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyNotificationRule) (resObj *UnifiedRoleManagementPolicyNotificationRule, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *UnifiedRoleScheduleBaseRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *UnifiedRoleScheduleInstanceBaseRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
