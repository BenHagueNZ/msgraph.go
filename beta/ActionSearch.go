// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// SearchEntityQueryRequestParameter undocumented
type SearchEntityQueryRequestParameter struct {
	// Requests undocumented
	Requests []SearchRequestObject `json:"requests,omitempty"`
}

// Acronyms returns request builder for SearchAcronym collection
func (b *SearchEntityRequestBuilder) Acronyms() *SearchEntityAcronymsCollectionRequestBuilder {
	bb := &SearchEntityAcronymsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/acronyms"
	return bb
}

// SearchEntityAcronymsCollectionRequestBuilder is request builder for SearchAcronym collection rcn
type SearchEntityAcronymsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SearchAcronym collection
func (b *SearchEntityAcronymsCollectionRequestBuilder) Request() *SearchEntityAcronymsCollectionRequest {
	return &SearchEntityAcronymsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SearchAcronym item
func (b *SearchEntityAcronymsCollectionRequestBuilder) ID(id string) *SearchAcronymRequestBuilder {
	bb := &SearchAcronymRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SearchEntityAcronymsCollectionRequest is request for SearchAcronym collection
type SearchEntityAcronymsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SearchAcronym collection
func (r *SearchEntityAcronymsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SearchAcronym, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SearchAcronym
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SearchAcronym
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SearchAcronym collection, max N pages
func (r *SearchEntityAcronymsCollectionRequest) GetN(ctx context.Context, n int) ([]SearchAcronym, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SearchAcronym collection
func (r *SearchEntityAcronymsCollectionRequest) Get(ctx context.Context) ([]SearchAcronym, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SearchAcronym collection
func (r *SearchEntityAcronymsCollectionRequest) Add(ctx context.Context, reqObj *SearchAcronym) (resObj *SearchAcronym, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Bookmarks returns request builder for SearchBookmark collection
func (b *SearchEntityRequestBuilder) Bookmarks() *SearchEntityBookmarksCollectionRequestBuilder {
	bb := &SearchEntityBookmarksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/bookmarks"
	return bb
}

// SearchEntityBookmarksCollectionRequestBuilder is request builder for SearchBookmark collection rcn
type SearchEntityBookmarksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SearchBookmark collection
func (b *SearchEntityBookmarksCollectionRequestBuilder) Request() *SearchEntityBookmarksCollectionRequest {
	return &SearchEntityBookmarksCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SearchBookmark item
func (b *SearchEntityBookmarksCollectionRequestBuilder) ID(id string) *SearchBookmarkRequestBuilder {
	bb := &SearchBookmarkRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SearchEntityBookmarksCollectionRequest is request for SearchBookmark collection
type SearchEntityBookmarksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SearchBookmark collection
func (r *SearchEntityBookmarksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SearchBookmark, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SearchBookmark
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SearchBookmark
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SearchBookmark collection, max N pages
func (r *SearchEntityBookmarksCollectionRequest) GetN(ctx context.Context, n int) ([]SearchBookmark, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SearchBookmark collection
func (r *SearchEntityBookmarksCollectionRequest) Get(ctx context.Context) ([]SearchBookmark, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SearchBookmark collection
func (r *SearchEntityBookmarksCollectionRequest) Add(ctx context.Context, reqObj *SearchBookmark) (resObj *SearchBookmark, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Qnas returns request builder for SearchQna collection
func (b *SearchEntityRequestBuilder) Qnas() *SearchEntityQnasCollectionRequestBuilder {
	bb := &SearchEntityQnasCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/qnas"
	return bb
}

// SearchEntityQnasCollectionRequestBuilder is request builder for SearchQna collection rcn
type SearchEntityQnasCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SearchQna collection
func (b *SearchEntityQnasCollectionRequestBuilder) Request() *SearchEntityQnasCollectionRequest {
	return &SearchEntityQnasCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SearchQna item
func (b *SearchEntityQnasCollectionRequestBuilder) ID(id string) *SearchQnaRequestBuilder {
	bb := &SearchQnaRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SearchEntityQnasCollectionRequest is request for SearchQna collection
type SearchEntityQnasCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SearchQna collection
func (r *SearchEntityQnasCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SearchQna, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SearchQna
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SearchQna
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SearchQna collection, max N pages
func (r *SearchEntityQnasCollectionRequest) GetN(ctx context.Context, n int) ([]SearchQna, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SearchQna collection
func (r *SearchEntityQnasCollectionRequest) Get(ctx context.Context) ([]SearchQna, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SearchQna collection
func (r *SearchEntityQnasCollectionRequest) Add(ctx context.Context, reqObj *SearchQna) (resObj *SearchQna, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Underscoresource is navigation property rn
func (b *SearchHitRequestBuilder) Underscoresource() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/_source"
	return bb
}

// Resource is navigation property rn
func (b *SearchHitRequestBuilder) Resource() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/resource"
	return bb
}

// Entity is navigation property rn
func (b *SearchEntityRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
