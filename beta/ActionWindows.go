// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// WindowsAutopilotDeploymentProfileCollectionHasPayloadLinksRequestParameter undocumented
type WindowsAutopilotDeploymentProfileCollectionHasPayloadLinksRequestParameter struct {
	// PayloadIDs undocumented
	PayloadIDs []string `json:"payloadIds,omitempty"`
}

// WindowsAutopilotDeploymentProfileAssignRequestParameter undocumented
type WindowsAutopilotDeploymentProfileAssignRequestParameter struct {
	// DeviceIDs undocumented
	DeviceIDs []string `json:"deviceIds,omitempty"`
}

// WindowsAutopilotDeviceIdentityAssignResourceAccountToDeviceRequestParameter undocumented
type WindowsAutopilotDeviceIdentityAssignResourceAccountToDeviceRequestParameter struct {
	// UserPrincipalName undocumented
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// AddressableUserName undocumented
	AddressableUserName *string `json:"addressableUserName,omitempty"`
	// ResourceAccountName undocumented
	ResourceAccountName *string `json:"resourceAccountName,omitempty"`
}

// WindowsAutopilotDeviceIdentityAssignUserToDeviceRequestParameter undocumented
type WindowsAutopilotDeviceIdentityAssignUserToDeviceRequestParameter struct {
	// UserPrincipalName undocumented
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// AddressableUserName undocumented
	AddressableUserName *string `json:"addressableUserName,omitempty"`
}

// WindowsAutopilotDeviceIdentityUnassignResourceAccountFromDeviceRequestParameter undocumented
type WindowsAutopilotDeviceIdentityUnassignResourceAccountFromDeviceRequestParameter struct {
}

// WindowsAutopilotDeviceIdentityUnassignUserFromDeviceRequestParameter undocumented
type WindowsAutopilotDeviceIdentityUnassignUserFromDeviceRequestParameter struct {
}

// WindowsAutopilotDeviceIdentityUpdateDevicePropertiesRequestParameter undocumented
type WindowsAutopilotDeviceIdentityUpdateDevicePropertiesRequestParameter struct {
	// UserPrincipalName undocumented
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// AddressableUserName undocumented
	AddressableUserName *string `json:"addressableUserName,omitempty"`
	// GroupTag undocumented
	GroupTag *string `json:"groupTag,omitempty"`
	// DisplayName undocumented
	DisplayName *string `json:"displayName,omitempty"`
	// DeviceAccountUpn undocumented
	DeviceAccountUpn *string `json:"deviceAccountUpn,omitempty"`
	// DeviceAccountPassword undocumented
	DeviceAccountPassword *string `json:"deviceAccountPassword,omitempty"`
	// DeviceFriendlyName undocumented
	DeviceFriendlyName *string `json:"deviceFriendlyName,omitempty"`
}

// WindowsAutopilotSettingsSyncRequestParameter undocumented
type WindowsAutopilotSettingsSyncRequestParameter struct {
}

// WindowsDefenderApplicationControlSupplementalPolicyAssignRequestParameter undocumented
type WindowsDefenderApplicationControlSupplementalPolicyAssignRequestParameter struct {
	// WdacPolicyAssignments undocumented
	WdacPolicyAssignments []WindowsDefenderApplicationControlSupplementalPolicyAssignment `json:"wdacPolicyAssignments,omitempty"`
}

// WindowsDriverUpdateProfileAssignRequestParameter undocumented
type WindowsDriverUpdateProfileAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []WindowsDriverUpdateProfileAssignment `json:"assignments,omitempty"`
}

// WindowsDriverUpdateProfileExecuteActionRequestParameter undocumented
type WindowsDriverUpdateProfileExecuteActionRequestParameter struct {
	// ActionName undocumented
	ActionName *DriverApprovalAction `json:"actionName,omitempty"`
	// DriverIDs undocumented
	DriverIDs []string `json:"driverIds,omitempty"`
	// DeploymentDate undocumented
	DeploymentDate *time.Time `json:"deploymentDate,omitempty"`
}

// WindowsDriverUpdateProfileSyncInventoryRequestParameter undocumented
type WindowsDriverUpdateProfileSyncInventoryRequestParameter struct {
}

// WindowsFeatureUpdateProfileAssignRequestParameter undocumented
type WindowsFeatureUpdateProfileAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []WindowsFeatureUpdateProfileAssignment `json:"assignments,omitempty"`
}

// WindowsInformationProtectionAssignRequestParameter undocumented
type WindowsInformationProtectionAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []TargetedManagedAppPolicyAssignment `json:"assignments,omitempty"`
}

// WindowsInformationProtectionDeviceRegistrationWipeRequestParameter undocumented
type WindowsInformationProtectionDeviceRegistrationWipeRequestParameter struct {
}

// WindowsManagedAppProtectionAssignRequestParameter undocumented
type WindowsManagedAppProtectionAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []TargetedManagedAppPolicyAssignment `json:"assignments,omitempty"`
}

// WindowsManagedAppProtectionTargetAppsRequestParameter undocumented
type WindowsManagedAppProtectionTargetAppsRequestParameter struct {
	// Apps undocumented
	Apps []ManagedMobileApp `json:"apps,omitempty"`
}

// WindowsManagementAppSetAsManagedInstallerRequestParameter undocumented
type WindowsManagementAppSetAsManagedInstallerRequestParameter struct {
}

// WindowsQualityUpdateProfileAssignRequestParameter undocumented
type WindowsQualityUpdateProfileAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []WindowsQualityUpdateProfileAssignment `json:"assignments,omitempty"`
}

// WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequestParameter undocumented
type WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequestParameter struct {
}

// WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequestParameter undocumented
type WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequestParameter struct {
}

// AssignedDevices returns request builder for WindowsAutopilotDeviceIdentity collection
func (b *WindowsAutopilotDeploymentProfileRequestBuilder) AssignedDevices() *WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequestBuilder {
	bb := &WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignedDevices"
	return bb
}

// WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequestBuilder is request builder for WindowsAutopilotDeviceIdentity collection rcn
type WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsAutopilotDeviceIdentity collection
func (b *WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequestBuilder) Request() *WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequest {
	return &WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsAutopilotDeviceIdentity item
func (b *WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequestBuilder) ID(id string) *WindowsAutopilotDeviceIdentityRequestBuilder {
	bb := &WindowsAutopilotDeviceIdentityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequest is request for WindowsAutopilotDeviceIdentity collection
type WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsAutopilotDeviceIdentity collection
func (r *WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsAutopilotDeviceIdentity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsAutopilotDeviceIdentity
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsAutopilotDeviceIdentity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsAutopilotDeviceIdentity collection, max N pages
func (r *WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsAutopilotDeviceIdentity, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsAutopilotDeviceIdentity collection
func (r *WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequest) Get(ctx context.Context) ([]WindowsAutopilotDeviceIdentity, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsAutopilotDeviceIdentity collection
func (r *WindowsAutopilotDeploymentProfileAssignedDevicesCollectionRequest) Add(ctx context.Context, reqObj *WindowsAutopilotDeviceIdentity) (resObj *WindowsAutopilotDeviceIdentity, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for WindowsAutopilotDeploymentProfileAssignment collection
func (b *WindowsAutopilotDeploymentProfileRequestBuilder) Assignments() *WindowsAutopilotDeploymentProfileAssignmentsCollectionRequestBuilder {
	bb := &WindowsAutopilotDeploymentProfileAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// WindowsAutopilotDeploymentProfileAssignmentsCollectionRequestBuilder is request builder for WindowsAutopilotDeploymentProfileAssignment collection rcn
type WindowsAutopilotDeploymentProfileAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsAutopilotDeploymentProfileAssignment collection
func (b *WindowsAutopilotDeploymentProfileAssignmentsCollectionRequestBuilder) Request() *WindowsAutopilotDeploymentProfileAssignmentsCollectionRequest {
	return &WindowsAutopilotDeploymentProfileAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsAutopilotDeploymentProfileAssignment item
func (b *WindowsAutopilotDeploymentProfileAssignmentsCollectionRequestBuilder) ID(id string) *WindowsAutopilotDeploymentProfileAssignmentRequestBuilder {
	bb := &WindowsAutopilotDeploymentProfileAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsAutopilotDeploymentProfileAssignmentsCollectionRequest is request for WindowsAutopilotDeploymentProfileAssignment collection
type WindowsAutopilotDeploymentProfileAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsAutopilotDeploymentProfileAssignment collection
func (r *WindowsAutopilotDeploymentProfileAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsAutopilotDeploymentProfileAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsAutopilotDeploymentProfileAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsAutopilotDeploymentProfileAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsAutopilotDeploymentProfileAssignment collection, max N pages
func (r *WindowsAutopilotDeploymentProfileAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsAutopilotDeploymentProfileAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsAutopilotDeploymentProfileAssignment collection
func (r *WindowsAutopilotDeploymentProfileAssignmentsCollectionRequest) Get(ctx context.Context) ([]WindowsAutopilotDeploymentProfileAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsAutopilotDeploymentProfileAssignment collection
func (r *WindowsAutopilotDeploymentProfileAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *WindowsAutopilotDeploymentProfileAssignment) (resObj *WindowsAutopilotDeploymentProfileAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeploymentProfile is navigation property rn
func (b *WindowsAutopilotDeviceIdentityRequestBuilder) DeploymentProfile() *WindowsAutopilotDeploymentProfileRequestBuilder {
	bb := &WindowsAutopilotDeploymentProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deploymentProfile"
	return bb
}

// IntendedDeploymentProfile is navigation property rn
func (b *WindowsAutopilotDeviceIdentityRequestBuilder) IntendedDeploymentProfile() *WindowsAutopilotDeploymentProfileRequestBuilder {
	bb := &WindowsAutopilotDeploymentProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/intendedDeploymentProfile"
	return bb
}

// Assignments returns request builder for WindowsDefenderApplicationControlSupplementalPolicyAssignment collection
func (b *WindowsDefenderApplicationControlSupplementalPolicyRequestBuilder) Assignments() *WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequestBuilder {
	bb := &WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequestBuilder is request builder for WindowsDefenderApplicationControlSupplementalPolicyAssignment collection rcn
type WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsDefenderApplicationControlSupplementalPolicyAssignment collection
func (b *WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequestBuilder) Request() *WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequest {
	return &WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsDefenderApplicationControlSupplementalPolicyAssignment item
func (b *WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequestBuilder) ID(id string) *WindowsDefenderApplicationControlSupplementalPolicyAssignmentRequestBuilder {
	bb := &WindowsDefenderApplicationControlSupplementalPolicyAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequest is request for WindowsDefenderApplicationControlSupplementalPolicyAssignment collection
type WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsDefenderApplicationControlSupplementalPolicyAssignment collection
func (r *WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsDefenderApplicationControlSupplementalPolicyAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsDefenderApplicationControlSupplementalPolicyAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsDefenderApplicationControlSupplementalPolicyAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsDefenderApplicationControlSupplementalPolicyAssignment collection, max N pages
func (r *WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsDefenderApplicationControlSupplementalPolicyAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsDefenderApplicationControlSupplementalPolicyAssignment collection
func (r *WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequest) Get(ctx context.Context) ([]WindowsDefenderApplicationControlSupplementalPolicyAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsDefenderApplicationControlSupplementalPolicyAssignment collection
func (r *WindowsDefenderApplicationControlSupplementalPolicyAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *WindowsDefenderApplicationControlSupplementalPolicyAssignment) (resObj *WindowsDefenderApplicationControlSupplementalPolicyAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeploySummary is navigation property rn
func (b *WindowsDefenderApplicationControlSupplementalPolicyRequestBuilder) DeploySummary() *WindowsDefenderApplicationControlSupplementalPolicyDeploymentSummaryRequestBuilder {
	bb := &WindowsDefenderApplicationControlSupplementalPolicyDeploymentSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deploySummary"
	return bb
}

// DeviceStatuses returns request builder for WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus collection
func (b *WindowsDefenderApplicationControlSupplementalPolicyRequestBuilder) DeviceStatuses() *WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequestBuilder {
	bb := &WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStatuses"
	return bb
}

// WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequestBuilder is request builder for WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus collection rcn
type WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus collection
func (b *WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequestBuilder) Request() *WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequest {
	return &WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus item
func (b *WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequestBuilder) ID(id string) *WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatusRequestBuilder {
	bb := &WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequest is request for WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus collection
type WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus collection
func (r *WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus collection, max N pages
func (r *WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus collection
func (r *WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequest) Get(ctx context.Context) ([]WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus collection
func (r *WindowsDefenderApplicationControlSupplementalPolicyDeviceStatusesCollectionRequest) Add(ctx context.Context, reqObj *WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus) (resObj *WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Policy is navigation property rn
func (b *WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatusRequestBuilder) Policy() *WindowsDefenderApplicationControlSupplementalPolicyRequestBuilder {
	bb := &WindowsDefenderApplicationControlSupplementalPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/policy"
	return bb
}

// NetworkAccessConfigurations returns request builder for DeviceConfiguration collection
func (b *WindowsDomainJoinConfigurationRequestBuilder) NetworkAccessConfigurations() *WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequestBuilder {
	bb := &WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/networkAccessConfigurations"
	return bb
}

// WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequestBuilder is request builder for DeviceConfiguration collection rcn
type WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceConfiguration collection
func (b *WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequestBuilder) Request() *WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequest {
	return &WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceConfiguration item
func (b *WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequestBuilder) ID(id string) *DeviceConfigurationRequestBuilder {
	bb := &DeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequest is request for DeviceConfiguration collection
type WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DeviceConfiguration collection
func (r *WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DeviceConfiguration collection, max N pages
func (r *WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]DeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DeviceConfiguration collection
func (r *WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequest) Get(ctx context.Context) ([]DeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DeviceConfiguration collection
func (r *WindowsDomainJoinConfigurationNetworkAccessConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *DeviceConfiguration) (resObj *DeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for WindowsDriverUpdateProfileAssignment collection
func (b *WindowsDriverUpdateProfileRequestBuilder) Assignments() *WindowsDriverUpdateProfileAssignmentsCollectionRequestBuilder {
	bb := &WindowsDriverUpdateProfileAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// WindowsDriverUpdateProfileAssignmentsCollectionRequestBuilder is request builder for WindowsDriverUpdateProfileAssignment collection rcn
type WindowsDriverUpdateProfileAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsDriverUpdateProfileAssignment collection
func (b *WindowsDriverUpdateProfileAssignmentsCollectionRequestBuilder) Request() *WindowsDriverUpdateProfileAssignmentsCollectionRequest {
	return &WindowsDriverUpdateProfileAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsDriverUpdateProfileAssignment item
func (b *WindowsDriverUpdateProfileAssignmentsCollectionRequestBuilder) ID(id string) *WindowsDriverUpdateProfileAssignmentRequestBuilder {
	bb := &WindowsDriverUpdateProfileAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsDriverUpdateProfileAssignmentsCollectionRequest is request for WindowsDriverUpdateProfileAssignment collection
type WindowsDriverUpdateProfileAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsDriverUpdateProfileAssignment collection
func (r *WindowsDriverUpdateProfileAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsDriverUpdateProfileAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsDriverUpdateProfileAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsDriverUpdateProfileAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsDriverUpdateProfileAssignment collection, max N pages
func (r *WindowsDriverUpdateProfileAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsDriverUpdateProfileAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsDriverUpdateProfileAssignment collection
func (r *WindowsDriverUpdateProfileAssignmentsCollectionRequest) Get(ctx context.Context) ([]WindowsDriverUpdateProfileAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsDriverUpdateProfileAssignment collection
func (r *WindowsDriverUpdateProfileAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *WindowsDriverUpdateProfileAssignment) (resObj *WindowsDriverUpdateProfileAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DriverInventories returns request builder for WindowsDriverUpdateInventory collection
func (b *WindowsDriverUpdateProfileRequestBuilder) DriverInventories() *WindowsDriverUpdateProfileDriverInventoriesCollectionRequestBuilder {
	bb := &WindowsDriverUpdateProfileDriverInventoriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/driverInventories"
	return bb
}

// WindowsDriverUpdateProfileDriverInventoriesCollectionRequestBuilder is request builder for WindowsDriverUpdateInventory collection rcn
type WindowsDriverUpdateProfileDriverInventoriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsDriverUpdateInventory collection
func (b *WindowsDriverUpdateProfileDriverInventoriesCollectionRequestBuilder) Request() *WindowsDriverUpdateProfileDriverInventoriesCollectionRequest {
	return &WindowsDriverUpdateProfileDriverInventoriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsDriverUpdateInventory item
func (b *WindowsDriverUpdateProfileDriverInventoriesCollectionRequestBuilder) ID(id string) *WindowsDriverUpdateInventoryRequestBuilder {
	bb := &WindowsDriverUpdateInventoryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsDriverUpdateProfileDriverInventoriesCollectionRequest is request for WindowsDriverUpdateInventory collection
type WindowsDriverUpdateProfileDriverInventoriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsDriverUpdateInventory collection
func (r *WindowsDriverUpdateProfileDriverInventoriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsDriverUpdateInventory, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsDriverUpdateInventory
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsDriverUpdateInventory
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsDriverUpdateInventory collection, max N pages
func (r *WindowsDriverUpdateProfileDriverInventoriesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsDriverUpdateInventory, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsDriverUpdateInventory collection
func (r *WindowsDriverUpdateProfileDriverInventoriesCollectionRequest) Get(ctx context.Context) ([]WindowsDriverUpdateInventory, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsDriverUpdateInventory collection
func (r *WindowsDriverUpdateProfileDriverInventoriesCollectionRequest) Add(ctx context.Context, reqObj *WindowsDriverUpdateInventory) (resObj *WindowsDriverUpdateInventory, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for WindowsFeatureUpdateProfileAssignment collection
func (b *WindowsFeatureUpdateProfileRequestBuilder) Assignments() *WindowsFeatureUpdateProfileAssignmentsCollectionRequestBuilder {
	bb := &WindowsFeatureUpdateProfileAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// WindowsFeatureUpdateProfileAssignmentsCollectionRequestBuilder is request builder for WindowsFeatureUpdateProfileAssignment collection rcn
type WindowsFeatureUpdateProfileAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsFeatureUpdateProfileAssignment collection
func (b *WindowsFeatureUpdateProfileAssignmentsCollectionRequestBuilder) Request() *WindowsFeatureUpdateProfileAssignmentsCollectionRequest {
	return &WindowsFeatureUpdateProfileAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsFeatureUpdateProfileAssignment item
func (b *WindowsFeatureUpdateProfileAssignmentsCollectionRequestBuilder) ID(id string) *WindowsFeatureUpdateProfileAssignmentRequestBuilder {
	bb := &WindowsFeatureUpdateProfileAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsFeatureUpdateProfileAssignmentsCollectionRequest is request for WindowsFeatureUpdateProfileAssignment collection
type WindowsFeatureUpdateProfileAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsFeatureUpdateProfileAssignment collection
func (r *WindowsFeatureUpdateProfileAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsFeatureUpdateProfileAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsFeatureUpdateProfileAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsFeatureUpdateProfileAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsFeatureUpdateProfileAssignment collection, max N pages
func (r *WindowsFeatureUpdateProfileAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsFeatureUpdateProfileAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsFeatureUpdateProfileAssignment collection
func (r *WindowsFeatureUpdateProfileAssignmentsCollectionRequest) Get(ctx context.Context) ([]WindowsFeatureUpdateProfileAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsFeatureUpdateProfileAssignment collection
func (r *WindowsFeatureUpdateProfileAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *WindowsFeatureUpdateProfileAssignment) (resObj *WindowsFeatureUpdateProfileAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Device is navigation property rn
func (b *WindowsHelloForBusinessAuthenticationMethodRequestBuilder) Device() *DeviceRequestBuilder {
	bb := &DeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/device"
	return bb
}

// Assignments returns request builder for TargetedManagedAppPolicyAssignment collection
func (b *WindowsInformationProtectionRequestBuilder) Assignments() *WindowsInformationProtectionAssignmentsCollectionRequestBuilder {
	bb := &WindowsInformationProtectionAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// WindowsInformationProtectionAssignmentsCollectionRequestBuilder is request builder for TargetedManagedAppPolicyAssignment collection rcn
type WindowsInformationProtectionAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TargetedManagedAppPolicyAssignment collection
func (b *WindowsInformationProtectionAssignmentsCollectionRequestBuilder) Request() *WindowsInformationProtectionAssignmentsCollectionRequest {
	return &WindowsInformationProtectionAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TargetedManagedAppPolicyAssignment item
func (b *WindowsInformationProtectionAssignmentsCollectionRequestBuilder) ID(id string) *TargetedManagedAppPolicyAssignmentRequestBuilder {
	bb := &TargetedManagedAppPolicyAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsInformationProtectionAssignmentsCollectionRequest is request for TargetedManagedAppPolicyAssignment collection
type WindowsInformationProtectionAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TargetedManagedAppPolicyAssignment collection
func (r *WindowsInformationProtectionAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TargetedManagedAppPolicyAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TargetedManagedAppPolicyAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TargetedManagedAppPolicyAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TargetedManagedAppPolicyAssignment collection, max N pages
func (r *WindowsInformationProtectionAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]TargetedManagedAppPolicyAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TargetedManagedAppPolicyAssignment collection
func (r *WindowsInformationProtectionAssignmentsCollectionRequest) Get(ctx context.Context) ([]TargetedManagedAppPolicyAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TargetedManagedAppPolicyAssignment collection
func (r *WindowsInformationProtectionAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *TargetedManagedAppPolicyAssignment) (resObj *TargetedManagedAppPolicyAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ExemptAppLockerFiles returns request builder for WindowsInformationProtectionAppLockerFile collection
func (b *WindowsInformationProtectionRequestBuilder) ExemptAppLockerFiles() *WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder {
	bb := &WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/exemptAppLockerFiles"
	return bb
}

// WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder is request builder for WindowsInformationProtectionAppLockerFile collection rcn
type WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtectionAppLockerFile collection
func (b *WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder) Request() *WindowsInformationProtectionExemptAppLockerFilesCollectionRequest {
	return &WindowsInformationProtectionExemptAppLockerFilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtectionAppLockerFile item
func (b *WindowsInformationProtectionExemptAppLockerFilesCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionAppLockerFileRequestBuilder {
	bb := &WindowsInformationProtectionAppLockerFileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsInformationProtectionExemptAppLockerFilesCollectionRequest is request for WindowsInformationProtectionAppLockerFile collection
type WindowsInformationProtectionExemptAppLockerFilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionExemptAppLockerFilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtectionAppLockerFile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtectionAppLockerFile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtectionAppLockerFile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtectionAppLockerFile collection, max N pages
func (r *WindowsInformationProtectionExemptAppLockerFilesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtectionAppLockerFile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionExemptAppLockerFilesCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtectionAppLockerFile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionExemptAppLockerFilesCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtectionAppLockerFile) (resObj *WindowsInformationProtectionAppLockerFile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ProtectedAppLockerFiles returns request builder for WindowsInformationProtectionAppLockerFile collection
func (b *WindowsInformationProtectionRequestBuilder) ProtectedAppLockerFiles() *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder {
	bb := &WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/protectedAppLockerFiles"
	return bb
}

// WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder is request builder for WindowsInformationProtectionAppLockerFile collection rcn
type WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtectionAppLockerFile collection
func (b *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder) Request() *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest {
	return &WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtectionAppLockerFile item
func (b *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionAppLockerFileRequestBuilder {
	bb := &WindowsInformationProtectionAppLockerFileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest is request for WindowsInformationProtectionAppLockerFile collection
type WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtectionAppLockerFile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtectionAppLockerFile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtectionAppLockerFile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtectionAppLockerFile collection, max N pages
func (r *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtectionAppLockerFile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtectionAppLockerFile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtectionAppLockerFile collection
func (r *WindowsInformationProtectionProtectedAppLockerFilesCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtectionAppLockerFile) (resObj *WindowsInformationProtectionAppLockerFile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceMalwareStates returns request builder for MalwareStateForWindowsDevice collection
func (b *WindowsMalwareInformationRequestBuilder) DeviceMalwareStates() *WindowsMalwareInformationDeviceMalwareStatesCollectionRequestBuilder {
	bb := &WindowsMalwareInformationDeviceMalwareStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceMalwareStates"
	return bb
}

// WindowsMalwareInformationDeviceMalwareStatesCollectionRequestBuilder is request builder for MalwareStateForWindowsDevice collection rcn
type WindowsMalwareInformationDeviceMalwareStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MalwareStateForWindowsDevice collection
func (b *WindowsMalwareInformationDeviceMalwareStatesCollectionRequestBuilder) Request() *WindowsMalwareInformationDeviceMalwareStatesCollectionRequest {
	return &WindowsMalwareInformationDeviceMalwareStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MalwareStateForWindowsDevice item
func (b *WindowsMalwareInformationDeviceMalwareStatesCollectionRequestBuilder) ID(id string) *MalwareStateForWindowsDeviceRequestBuilder {
	bb := &MalwareStateForWindowsDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsMalwareInformationDeviceMalwareStatesCollectionRequest is request for MalwareStateForWindowsDevice collection
type WindowsMalwareInformationDeviceMalwareStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MalwareStateForWindowsDevice collection
func (r *WindowsMalwareInformationDeviceMalwareStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MalwareStateForWindowsDevice, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MalwareStateForWindowsDevice
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MalwareStateForWindowsDevice
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MalwareStateForWindowsDevice collection, max N pages
func (r *WindowsMalwareInformationDeviceMalwareStatesCollectionRequest) GetN(ctx context.Context, n int) ([]MalwareStateForWindowsDevice, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MalwareStateForWindowsDevice collection
func (r *WindowsMalwareInformationDeviceMalwareStatesCollectionRequest) Get(ctx context.Context) ([]MalwareStateForWindowsDevice, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MalwareStateForWindowsDevice collection
func (r *WindowsMalwareInformationDeviceMalwareStatesCollectionRequest) Add(ctx context.Context, reqObj *MalwareStateForWindowsDevice) (resObj *MalwareStateForWindowsDevice, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Apps returns request builder for ManagedMobileApp collection
func (b *WindowsManagedAppProtectionRequestBuilder) Apps() *WindowsManagedAppProtectionAppsCollectionRequestBuilder {
	bb := &WindowsManagedAppProtectionAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/apps"
	return bb
}

// WindowsManagedAppProtectionAppsCollectionRequestBuilder is request builder for ManagedMobileApp collection rcn
type WindowsManagedAppProtectionAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedMobileApp collection
func (b *WindowsManagedAppProtectionAppsCollectionRequestBuilder) Request() *WindowsManagedAppProtectionAppsCollectionRequest {
	return &WindowsManagedAppProtectionAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedMobileApp item
func (b *WindowsManagedAppProtectionAppsCollectionRequestBuilder) ID(id string) *ManagedMobileAppRequestBuilder {
	bb := &ManagedMobileAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsManagedAppProtectionAppsCollectionRequest is request for ManagedMobileApp collection
type WindowsManagedAppProtectionAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedMobileApp collection
func (r *WindowsManagedAppProtectionAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedMobileApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedMobileApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedMobileApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedMobileApp collection, max N pages
func (r *WindowsManagedAppProtectionAppsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedMobileApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedMobileApp collection
func (r *WindowsManagedAppProtectionAppsCollectionRequest) Get(ctx context.Context) ([]ManagedMobileApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedMobileApp collection
func (r *WindowsManagedAppProtectionAppsCollectionRequest) Add(ctx context.Context, reqObj *ManagedMobileApp) (resObj *ManagedMobileApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for TargetedManagedAppPolicyAssignment collection
func (b *WindowsManagedAppProtectionRequestBuilder) Assignments() *WindowsManagedAppProtectionAssignmentsCollectionRequestBuilder {
	bb := &WindowsManagedAppProtectionAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// WindowsManagedAppProtectionAssignmentsCollectionRequestBuilder is request builder for TargetedManagedAppPolicyAssignment collection rcn
type WindowsManagedAppProtectionAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TargetedManagedAppPolicyAssignment collection
func (b *WindowsManagedAppProtectionAssignmentsCollectionRequestBuilder) Request() *WindowsManagedAppProtectionAssignmentsCollectionRequest {
	return &WindowsManagedAppProtectionAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TargetedManagedAppPolicyAssignment item
func (b *WindowsManagedAppProtectionAssignmentsCollectionRequestBuilder) ID(id string) *TargetedManagedAppPolicyAssignmentRequestBuilder {
	bb := &TargetedManagedAppPolicyAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsManagedAppProtectionAssignmentsCollectionRequest is request for TargetedManagedAppPolicyAssignment collection
type WindowsManagedAppProtectionAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TargetedManagedAppPolicyAssignment collection
func (r *WindowsManagedAppProtectionAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TargetedManagedAppPolicyAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TargetedManagedAppPolicyAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TargetedManagedAppPolicyAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TargetedManagedAppPolicyAssignment collection, max N pages
func (r *WindowsManagedAppProtectionAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]TargetedManagedAppPolicyAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TargetedManagedAppPolicyAssignment collection
func (r *WindowsManagedAppProtectionAssignmentsCollectionRequest) Get(ctx context.Context) ([]TargetedManagedAppPolicyAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TargetedManagedAppPolicyAssignment collection
func (r *WindowsManagedAppProtectionAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *TargetedManagedAppPolicyAssignment) (resObj *TargetedManagedAppPolicyAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// HealthStates returns request builder for WindowsManagementAppHealthState collection
func (b *WindowsManagementAppRequestBuilder) HealthStates() *WindowsManagementAppHealthStatesCollectionRequestBuilder {
	bb := &WindowsManagementAppHealthStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/healthStates"
	return bb
}

// WindowsManagementAppHealthStatesCollectionRequestBuilder is request builder for WindowsManagementAppHealthState collection rcn
type WindowsManagementAppHealthStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsManagementAppHealthState collection
func (b *WindowsManagementAppHealthStatesCollectionRequestBuilder) Request() *WindowsManagementAppHealthStatesCollectionRequest {
	return &WindowsManagementAppHealthStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsManagementAppHealthState item
func (b *WindowsManagementAppHealthStatesCollectionRequestBuilder) ID(id string) *WindowsManagementAppHealthStateRequestBuilder {
	bb := &WindowsManagementAppHealthStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsManagementAppHealthStatesCollectionRequest is request for WindowsManagementAppHealthState collection
type WindowsManagementAppHealthStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsManagementAppHealthState collection
func (r *WindowsManagementAppHealthStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsManagementAppHealthState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsManagementAppHealthState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsManagementAppHealthState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsManagementAppHealthState collection, max N pages
func (r *WindowsManagementAppHealthStatesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsManagementAppHealthState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsManagementAppHealthState collection
func (r *WindowsManagementAppHealthStatesCollectionRequest) Get(ctx context.Context) ([]WindowsManagementAppHealthState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsManagementAppHealthState collection
func (r *WindowsManagementAppHealthStatesCollectionRequest) Add(ctx context.Context, reqObj *WindowsManagementAppHealthState) (resObj *WindowsManagementAppHealthState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *WindowsPhone81ImportedPFXCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *WindowsPhone81ImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *WindowsPhone81SCEPCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *WindowsPhone81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RootCertificate is navigation property rn
func (b *WindowsPhone81SCEPCertificateProfileRequestBuilder) RootCertificate() *WindowsPhone81TrustedRootCertificateRequestBuilder {
	bb := &WindowsPhone81TrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificate"
	return bb
}

// IdentityCertificate is navigation property rn
func (b *WindowsPhone81VpnConfigurationRequestBuilder) IdentityCertificate() *WindowsPhone81CertificateProfileBaseRequestBuilder {
	bb := &WindowsPhone81CertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}

// DetectedMalwareState returns request builder for WindowsDeviceMalwareState collection
func (b *WindowsProtectionStateRequestBuilder) DetectedMalwareState() *WindowsProtectionStateDetectedMalwareStateCollectionRequestBuilder {
	bb := &WindowsProtectionStateDetectedMalwareStateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/detectedMalwareState"
	return bb
}

// WindowsProtectionStateDetectedMalwareStateCollectionRequestBuilder is request builder for WindowsDeviceMalwareState collection rcn
type WindowsProtectionStateDetectedMalwareStateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsDeviceMalwareState collection
func (b *WindowsProtectionStateDetectedMalwareStateCollectionRequestBuilder) Request() *WindowsProtectionStateDetectedMalwareStateCollectionRequest {
	return &WindowsProtectionStateDetectedMalwareStateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsDeviceMalwareState item
func (b *WindowsProtectionStateDetectedMalwareStateCollectionRequestBuilder) ID(id string) *WindowsDeviceMalwareStateRequestBuilder {
	bb := &WindowsDeviceMalwareStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsProtectionStateDetectedMalwareStateCollectionRequest is request for WindowsDeviceMalwareState collection
type WindowsProtectionStateDetectedMalwareStateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsDeviceMalwareState collection
func (r *WindowsProtectionStateDetectedMalwareStateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsDeviceMalwareState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsDeviceMalwareState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsDeviceMalwareState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsDeviceMalwareState collection, max N pages
func (r *WindowsProtectionStateDetectedMalwareStateCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsDeviceMalwareState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsDeviceMalwareState collection
func (r *WindowsProtectionStateDetectedMalwareStateCollectionRequest) Get(ctx context.Context) ([]WindowsDeviceMalwareState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsDeviceMalwareState collection
func (r *WindowsProtectionStateDetectedMalwareStateCollectionRequest) Add(ctx context.Context, reqObj *WindowsDeviceMalwareState) (resObj *WindowsDeviceMalwareState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for WindowsQualityUpdateProfileAssignment collection
func (b *WindowsQualityUpdateProfileRequestBuilder) Assignments() *WindowsQualityUpdateProfileAssignmentsCollectionRequestBuilder {
	bb := &WindowsQualityUpdateProfileAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// WindowsQualityUpdateProfileAssignmentsCollectionRequestBuilder is request builder for WindowsQualityUpdateProfileAssignment collection rcn
type WindowsQualityUpdateProfileAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsQualityUpdateProfileAssignment collection
func (b *WindowsQualityUpdateProfileAssignmentsCollectionRequestBuilder) Request() *WindowsQualityUpdateProfileAssignmentsCollectionRequest {
	return &WindowsQualityUpdateProfileAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsQualityUpdateProfileAssignment item
func (b *WindowsQualityUpdateProfileAssignmentsCollectionRequestBuilder) ID(id string) *WindowsQualityUpdateProfileAssignmentRequestBuilder {
	bb := &WindowsQualityUpdateProfileAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsQualityUpdateProfileAssignmentsCollectionRequest is request for WindowsQualityUpdateProfileAssignment collection
type WindowsQualityUpdateProfileAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsQualityUpdateProfileAssignment collection
func (r *WindowsQualityUpdateProfileAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsQualityUpdateProfileAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsQualityUpdateProfileAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsQualityUpdateProfileAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsQualityUpdateProfileAssignment collection, max N pages
func (r *WindowsQualityUpdateProfileAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsQualityUpdateProfileAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsQualityUpdateProfileAssignment collection
func (r *WindowsQualityUpdateProfileAssignmentsCollectionRequest) Get(ctx context.Context) ([]WindowsQualityUpdateProfileAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsQualityUpdateProfileAssignment collection
func (r *WindowsQualityUpdateProfileAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *WindowsQualityUpdateProfileAssignment) (resObj *WindowsQualityUpdateProfileAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CommittedContainedApps returns request builder for MobileContainedApp collection
func (b *WindowsUniversalAppXRequestBuilder) CommittedContainedApps() *WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder {
	bb := &WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/committedContainedApps"
	return bb
}

// WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder is request builder for MobileContainedApp collection rcn
type WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MobileContainedApp collection
func (b *WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder) Request() *WindowsUniversalAppXCommittedContainedAppsCollectionRequest {
	return &WindowsUniversalAppXCommittedContainedAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MobileContainedApp item
func (b *WindowsUniversalAppXCommittedContainedAppsCollectionRequestBuilder) ID(id string) *MobileContainedAppRequestBuilder {
	bb := &MobileContainedAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUniversalAppXCommittedContainedAppsCollectionRequest is request for MobileContainedApp collection
type WindowsUniversalAppXCommittedContainedAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MobileContainedApp collection
func (r *WindowsUniversalAppXCommittedContainedAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MobileContainedApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MobileContainedApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MobileContainedApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MobileContainedApp collection, max N pages
func (r *WindowsUniversalAppXCommittedContainedAppsCollectionRequest) GetN(ctx context.Context, n int) ([]MobileContainedApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MobileContainedApp collection
func (r *WindowsUniversalAppXCommittedContainedAppsCollectionRequest) Get(ctx context.Context) ([]MobileContainedApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MobileContainedApp collection
func (r *WindowsUniversalAppXCommittedContainedAppsCollectionRequest) Add(ctx context.Context, reqObj *MobileContainedApp) (resObj *MobileContainedApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IdentityCertificateForClientAuthentication is navigation property rn
func (b *WindowsWiFiEnterpriseEAPConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *WindowsCertificateProfileBaseRequestBuilder {
	bb := &WindowsCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// RootCertificateForClientValidation is navigation property rn
func (b *WindowsWiFiEnterpriseEAPConfigurationRequestBuilder) RootCertificateForClientValidation() *Windows81TrustedRootCertificateRequestBuilder {
	bb := &Windows81TrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificateForClientValidation"
	return bb
}

// RootCertificatesForServerValidation returns request builder for Windows81TrustedRootCertificate collection
func (b *WindowsWiFiEnterpriseEAPConfigurationRequestBuilder) RootCertificatesForServerValidation() *WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequestBuilder {
	bb := &WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificatesForServerValidation"
	return bb
}

// WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequestBuilder is request builder for Windows81TrustedRootCertificate collection rcn
type WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Windows81TrustedRootCertificate collection
func (b *WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequestBuilder) Request() *WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequest {
	return &WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Windows81TrustedRootCertificate item
func (b *WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequestBuilder) ID(id string) *Windows81TrustedRootCertificateRequestBuilder {
	bb := &Windows81TrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequest is request for Windows81TrustedRootCertificate collection
type WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Windows81TrustedRootCertificate collection
func (r *WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Windows81TrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Windows81TrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Windows81TrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Windows81TrustedRootCertificate collection, max N pages
func (r *WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequest) GetN(ctx context.Context, n int) ([]Windows81TrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Windows81TrustedRootCertificate collection
func (r *WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequest) Get(ctx context.Context) ([]Windows81TrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Windows81TrustedRootCertificate collection
func (r *WindowsWiFiEnterpriseEAPConfigurationRootCertificatesForServerValidationCollectionRequest) Add(ctx context.Context, reqObj *Windows81TrustedRootCertificate) (resObj *Windows81TrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IdentityCertificateForClientAuthentication is navigation property rn
func (b *WindowsWiredNetworkConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *WindowsCertificateProfileBaseRequestBuilder {
	bb := &WindowsCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// RootCertificateForClientValidation is navigation property rn
func (b *WindowsWiredNetworkConfigurationRequestBuilder) RootCertificateForClientValidation() *Windows81TrustedRootCertificateRequestBuilder {
	bb := &Windows81TrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificateForClientValidation"
	return bb
}

// RootCertificatesForServerValidation returns request builder for Windows81TrustedRootCertificate collection
func (b *WindowsWiredNetworkConfigurationRequestBuilder) RootCertificatesForServerValidation() *WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequestBuilder {
	bb := &WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificatesForServerValidation"
	return bb
}

// WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequestBuilder is request builder for Windows81TrustedRootCertificate collection rcn
type WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Windows81TrustedRootCertificate collection
func (b *WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequestBuilder) Request() *WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequest {
	return &WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Windows81TrustedRootCertificate item
func (b *WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequestBuilder) ID(id string) *Windows81TrustedRootCertificateRequestBuilder {
	bb := &Windows81TrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequest is request for Windows81TrustedRootCertificate collection
type WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Windows81TrustedRootCertificate collection
func (r *WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Windows81TrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Windows81TrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Windows81TrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Windows81TrustedRootCertificate collection, max N pages
func (r *WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequest) GetN(ctx context.Context, n int) ([]Windows81TrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Windows81TrustedRootCertificate collection
func (r *WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequest) Get(ctx context.Context) ([]Windows81TrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Windows81TrustedRootCertificate collection
func (r *WindowsWiredNetworkConfigurationRootCertificatesForServerValidationCollectionRequest) Add(ctx context.Context, reqObj *Windows81TrustedRootCertificate) (resObj *Windows81TrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecondaryIdentityCertificateForClientAuthentication is navigation property rn
func (b *WindowsWiredNetworkConfigurationRequestBuilder) SecondaryIdentityCertificateForClientAuthentication() *WindowsCertificateProfileBaseRequestBuilder {
	bb := &WindowsCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/secondaryIdentityCertificateForClientAuthentication"
	return bb
}

// SecondaryRootCertificateForClientValidation is navigation property rn
func (b *WindowsWiredNetworkConfigurationRequestBuilder) SecondaryRootCertificateForClientValidation() *Windows81TrustedRootCertificateRequestBuilder {
	bb := &Windows81TrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/secondaryRootCertificateForClientValidation"
	return bb
}

// WindowsAppX returns request builder for WindowsAppX collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) WindowsAppX() *DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequestBuilder is request builder for WindowsAppX collection rcn
type DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsAppX collection
func (b *DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsAppX item
func (b *DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequestBuilder) ID(id string) *WindowsAppXRequestBuilder {
	bb := &WindowsAppXRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequest is request for WindowsAppX collection
type DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsAppX collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsAppX, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsAppX
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsAppX
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsAppX collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsAppX, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsAppX collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequest) Get(ctx context.Context) ([]WindowsAppX, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsAppX collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsAppXCollectionRequest) Add(ctx context.Context, reqObj *WindowsAppX) (resObj *WindowsAppX, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsAssignedAccessProfileRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsAutopilotDeploymentProfileAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsAutopilotDeploymentProfilePolicySetItem returns request builder for WindowsAutopilotDeploymentProfilePolicySetItem collection
func (b *PolicySetItemsCollectionRequestBuilder) WindowsAutopilotDeploymentProfilePolicySetItem() *PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequestBuilder {
	bb := &PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequestBuilder is request builder for WindowsAutopilotDeploymentProfilePolicySetItem collection rcn
type PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsAutopilotDeploymentProfilePolicySetItem collection
func (b *PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequestBuilder) Request() *PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequest {
	return &PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsAutopilotDeploymentProfilePolicySetItem item
func (b *PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequestBuilder) ID(id string) *WindowsAutopilotDeploymentProfilePolicySetItemRequestBuilder {
	bb := &WindowsAutopilotDeploymentProfilePolicySetItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequest is request for WindowsAutopilotDeploymentProfilePolicySetItem collection
type PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsAutopilotDeploymentProfilePolicySetItem collection
func (r *PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsAutopilotDeploymentProfilePolicySetItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsAutopilotDeploymentProfilePolicySetItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsAutopilotDeploymentProfilePolicySetItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsAutopilotDeploymentProfilePolicySetItem collection, max N pages
func (r *PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsAutopilotDeploymentProfilePolicySetItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsAutopilotDeploymentProfilePolicySetItem collection
func (r *PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequest) Get(ctx context.Context) ([]WindowsAutopilotDeploymentProfilePolicySetItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsAutopilotDeploymentProfilePolicySetItem collection
func (r *PolicySetItemsCollectionWindowsAutopilotDeploymentProfilePolicySetItemCollectionRequest) Add(ctx context.Context, reqObj *WindowsAutopilotDeploymentProfilePolicySetItem) (resObj *WindowsAutopilotDeploymentProfilePolicySetItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsAutopilotDeviceIdentityRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsAutopilotSettingsRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsDefenderAdvancedThreatProtectionConfiguration returns request builder for WindowsDefenderAdvancedThreatProtectionConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsDefenderAdvancedThreatProtectionConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder is request builder for WindowsDefenderAdvancedThreatProtectionConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsDefenderAdvancedThreatProtectionConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsDefenderAdvancedThreatProtectionConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequestBuilder) ID(id string) *WindowsDefenderAdvancedThreatProtectionConfigurationRequestBuilder {
	bb := &WindowsDefenderAdvancedThreatProtectionConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest is request for WindowsDefenderAdvancedThreatProtectionConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsDefenderAdvancedThreatProtectionConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsDefenderAdvancedThreatProtectionConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsDefenderAdvancedThreatProtectionConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsDefenderAdvancedThreatProtectionConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsDefenderAdvancedThreatProtectionConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsDefenderAdvancedThreatProtectionConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsDefenderAdvancedThreatProtectionConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsDefenderAdvancedThreatProtectionConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsDefenderAdvancedThreatProtectionConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDefenderAdvancedThreatProtectionConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsDefenderAdvancedThreatProtectionConfiguration) (resObj *WindowsDefenderAdvancedThreatProtectionConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsDefenderApplicationControlSupplementalPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsDefenderApplicationControlSupplementalPolicyAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsDefenderApplicationControlSupplementalPolicyDeploymentStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsDefenderApplicationControlSupplementalPolicyDeploymentSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsDeliveryOptimizationConfiguration returns request builder for WindowsDeliveryOptimizationConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsDeliveryOptimizationConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequestBuilder is request builder for WindowsDeliveryOptimizationConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsDeliveryOptimizationConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsDeliveryOptimizationConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequestBuilder) ID(id string) *WindowsDeliveryOptimizationConfigurationRequestBuilder {
	bb := &WindowsDeliveryOptimizationConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequest is request for WindowsDeliveryOptimizationConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsDeliveryOptimizationConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsDeliveryOptimizationConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsDeliveryOptimizationConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsDeliveryOptimizationConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsDeliveryOptimizationConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsDeliveryOptimizationConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsDeliveryOptimizationConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsDeliveryOptimizationConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsDeliveryOptimizationConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDeliveryOptimizationConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsDeliveryOptimizationConfiguration) (resObj *WindowsDeliveryOptimizationConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsDeviceMalwareStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsDomainJoinConfiguration returns request builder for WindowsDomainJoinConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsDomainJoinConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequestBuilder is request builder for WindowsDomainJoinConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsDomainJoinConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsDomainJoinConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequestBuilder) ID(id string) *WindowsDomainJoinConfigurationRequestBuilder {
	bb := &WindowsDomainJoinConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequest is request for WindowsDomainJoinConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsDomainJoinConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsDomainJoinConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsDomainJoinConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsDomainJoinConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsDomainJoinConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsDomainJoinConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsDomainJoinConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsDomainJoinConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsDomainJoinConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsDomainJoinConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsDomainJoinConfiguration) (resObj *WindowsDomainJoinConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsDriverUpdateInventoryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsDriverUpdateProfileRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsDriverUpdateProfileAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsFeatureUpdateCatalogItem returns request builder for WindowsFeatureUpdateCatalogItem collection
func (b *DeviceManagementWindowsUpdateCatalogItemsCollectionRequestBuilder) WindowsFeatureUpdateCatalogItem() *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequestBuilder {
	bb := &DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequestBuilder is request builder for WindowsFeatureUpdateCatalogItem collection rcn
type DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsFeatureUpdateCatalogItem collection
func (b *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequestBuilder) Request() *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequest {
	return &DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsFeatureUpdateCatalogItem item
func (b *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequestBuilder) ID(id string) *WindowsFeatureUpdateCatalogItemRequestBuilder {
	bb := &WindowsFeatureUpdateCatalogItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequest is request for WindowsFeatureUpdateCatalogItem collection
type DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsFeatureUpdateCatalogItem collection
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsFeatureUpdateCatalogItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsFeatureUpdateCatalogItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsFeatureUpdateCatalogItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsFeatureUpdateCatalogItem collection, max N pages
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsFeatureUpdateCatalogItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsFeatureUpdateCatalogItem collection
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequest) Get(ctx context.Context) ([]WindowsFeatureUpdateCatalogItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsFeatureUpdateCatalogItem collection
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsFeatureUpdateCatalogItemCollectionRequest) Add(ctx context.Context, reqObj *WindowsFeatureUpdateCatalogItem) (resObj *WindowsFeatureUpdateCatalogItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsFeatureUpdateProfileRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsFeatureUpdateProfileAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsHealthMonitoringConfiguration returns request builder for WindowsHealthMonitoringConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsHealthMonitoringConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequestBuilder is request builder for WindowsHealthMonitoringConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsHealthMonitoringConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsHealthMonitoringConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequestBuilder) ID(id string) *WindowsHealthMonitoringConfigurationRequestBuilder {
	bb := &WindowsHealthMonitoringConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequest is request for WindowsHealthMonitoringConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsHealthMonitoringConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsHealthMonitoringConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsHealthMonitoringConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsHealthMonitoringConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsHealthMonitoringConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsHealthMonitoringConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsHealthMonitoringConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsHealthMonitoringConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsHealthMonitoringConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsHealthMonitoringConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsHealthMonitoringConfiguration) (resObj *WindowsHealthMonitoringConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsHelloForBusinessAuthenticationMethod returns request builder for WindowsHelloForBusinessAuthenticationMethod collection
func (b *AuthenticationMethodsCollectionRequestBuilder) WindowsHelloForBusinessAuthenticationMethod() *AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder {
	bb := &AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder is request builder for WindowsHelloForBusinessAuthenticationMethod collection rcn
type AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsHelloForBusinessAuthenticationMethod collection
func (b *AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder) Request() *AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequest {
	return &AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsHelloForBusinessAuthenticationMethod item
func (b *AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequestBuilder) ID(id string) *WindowsHelloForBusinessAuthenticationMethodRequestBuilder {
	bb := &WindowsHelloForBusinessAuthenticationMethodRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequest is request for WindowsHelloForBusinessAuthenticationMethod collection
type AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsHelloForBusinessAuthenticationMethod
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsHelloForBusinessAuthenticationMethod
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsHelloForBusinessAuthenticationMethod collection, max N pages
func (r *AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequest) Get(ctx context.Context) ([]WindowsHelloForBusinessAuthenticationMethod, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsHelloForBusinessAuthenticationMethod collection
func (r *AuthenticationMethodsCollectionWindowsHelloForBusinessAuthenticationMethodCollectionRequest) Add(ctx context.Context, reqObj *WindowsHelloForBusinessAuthenticationMethod) (resObj *WindowsHelloForBusinessAuthenticationMethod, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsIdentityProtectionConfiguration returns request builder for WindowsIdentityProtectionConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsIdentityProtectionConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequestBuilder is request builder for WindowsIdentityProtectionConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsIdentityProtectionConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsIdentityProtectionConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequestBuilder) ID(id string) *WindowsIdentityProtectionConfigurationRequestBuilder {
	bb := &WindowsIdentityProtectionConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequest is request for WindowsIdentityProtectionConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsIdentityProtectionConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsIdentityProtectionConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsIdentityProtectionConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsIdentityProtectionConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsIdentityProtectionConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsIdentityProtectionConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsIdentityProtectionConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsIdentityProtectionConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsIdentityProtectionConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsIdentityProtectionConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsIdentityProtectionConfiguration) (resObj *WindowsIdentityProtectionConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsInformationProtection returns request builder for WindowsInformationProtection collection
func (b *DeviceAppManagementManagedAppPoliciesCollectionRequestBuilder) WindowsInformationProtection() *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequestBuilder is request builder for WindowsInformationProtection collection rcn
type DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtection collection
func (b *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequest {
	return &DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtection item
func (b *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionRequestBuilder {
	bb := &WindowsInformationProtectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequest is request for WindowsInformationProtection collection
type DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtection collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtection collection, max N pages
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtection collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtection collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtection) (resObj *WindowsInformationProtection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsInformationProtectionAppLearningSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsInformationProtectionAppLockerFileRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsInformationProtectionDeviceRegistrationRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsInformationProtectionNetworkLearningSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsInformationProtectionPolicy returns request builder for WindowsInformationProtectionPolicy collection
func (b *DeviceAppManagementManagedAppPoliciesCollectionRequestBuilder) WindowsInformationProtectionPolicy() *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequestBuilder is request builder for WindowsInformationProtectionPolicy collection rcn
type DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsInformationProtectionPolicy collection
func (b *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequest {
	return &DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsInformationProtectionPolicy item
func (b *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequestBuilder) ID(id string) *WindowsInformationProtectionPolicyRequestBuilder {
	bb := &WindowsInformationProtectionPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequest is request for WindowsInformationProtectionPolicy collection
type DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsInformationProtectionPolicy collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsInformationProtectionPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsInformationProtectionPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsInformationProtectionPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsInformationProtectionPolicy collection, max N pages
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsInformationProtectionPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsInformationProtectionPolicy collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequest) Get(ctx context.Context) ([]WindowsInformationProtectionPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsInformationProtectionPolicy collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsInformationProtectionPolicyCollectionRequest) Add(ctx context.Context, reqObj *WindowsInformationProtectionPolicy) (resObj *WindowsInformationProtectionPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsInformationProtectionWipeActionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsKioskConfiguration returns request builder for WindowsKioskConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsKioskConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequestBuilder is request builder for WindowsKioskConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsKioskConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsKioskConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequestBuilder) ID(id string) *WindowsKioskConfigurationRequestBuilder {
	bb := &WindowsKioskConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequest is request for WindowsKioskConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsKioskConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsKioskConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsKioskConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsKioskConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsKioskConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsKioskConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsKioskConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsKioskConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsKioskConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsKioskConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsKioskConfiguration) (resObj *WindowsKioskConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsMalwareInformationRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsManagedAppProtection returns request builder for WindowsManagedAppProtection collection
func (b *DeviceAppManagementManagedAppPoliciesCollectionRequestBuilder) WindowsManagedAppProtection() *DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequestBuilder is request builder for WindowsManagedAppProtection collection rcn
type DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsManagedAppProtection collection
func (b *DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequest {
	return &DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsManagedAppProtection item
func (b *DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequestBuilder) ID(id string) *WindowsManagedAppProtectionRequestBuilder {
	bb := &WindowsManagedAppProtectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequest is request for WindowsManagedAppProtection collection
type DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsManagedAppProtection collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsManagedAppProtection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsManagedAppProtection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsManagedAppProtection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsManagedAppProtection collection, max N pages
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsManagedAppProtection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsManagedAppProtection collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequest) Get(ctx context.Context) ([]WindowsManagedAppProtection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsManagedAppProtection collection
func (r *DeviceAppManagementManagedAppPoliciesCollectionWindowsManagedAppProtectionCollectionRequest) Add(ctx context.Context, reqObj *WindowsManagedAppProtection) (resObj *WindowsManagedAppProtection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsManagedDevice returns request builder for WindowsManagedDevice collection
func (b *DetectedAppManagedDevicesCollectionRequestBuilder) WindowsManagedDevice() *DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequestBuilder {
	bb := &DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequestBuilder is request builder for WindowsManagedDevice collection rcn
type DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsManagedDevice collection
func (b *DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequestBuilder) Request() *DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequest {
	return &DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsManagedDevice item
func (b *DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequestBuilder) ID(id string) *WindowsManagedDeviceRequestBuilder {
	bb := &WindowsManagedDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequest is request for WindowsManagedDevice collection
type DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsManagedDevice collection
func (r *DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsManagedDevice, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsManagedDevice
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsManagedDevice
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsManagedDevice collection, max N pages
func (r *DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsManagedDevice, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsManagedDevice collection
func (r *DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequest) Get(ctx context.Context) ([]WindowsManagedDevice, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsManagedDevice collection
func (r *DetectedAppManagedDevicesCollectionWindowsManagedDeviceCollectionRequest) Add(ctx context.Context, reqObj *WindowsManagedDevice) (resObj *WindowsManagedDevice, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsManagementAppRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsManagementAppHealthStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsManagementAppHealthSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsMicrosoftEdgeApp returns request builder for WindowsMicrosoftEdgeApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) WindowsMicrosoftEdgeApp() *DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequestBuilder is request builder for WindowsMicrosoftEdgeApp collection rcn
type DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsMicrosoftEdgeApp collection
func (b *DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsMicrosoftEdgeApp item
func (b *DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequestBuilder) ID(id string) *WindowsMicrosoftEdgeAppRequestBuilder {
	bb := &WindowsMicrosoftEdgeAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequest is request for WindowsMicrosoftEdgeApp collection
type DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsMicrosoftEdgeApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsMicrosoftEdgeApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsMicrosoftEdgeApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsMicrosoftEdgeApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsMicrosoftEdgeApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsMicrosoftEdgeApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsMicrosoftEdgeApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequest) Get(ctx context.Context) ([]WindowsMicrosoftEdgeApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsMicrosoftEdgeApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsMicrosoftEdgeAppCollectionRequest) Add(ctx context.Context, reqObj *WindowsMicrosoftEdgeApp) (resObj *WindowsMicrosoftEdgeApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsMobileMSI returns request builder for WindowsMobileMSI collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) WindowsMobileMSI() *DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequestBuilder is request builder for WindowsMobileMSI collection rcn
type DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsMobileMSI collection
func (b *DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsMobileMSI item
func (b *DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequestBuilder) ID(id string) *WindowsMobileMSIRequestBuilder {
	bb := &WindowsMobileMSIRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequest is request for WindowsMobileMSI collection
type DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsMobileMSI collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsMobileMSI, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsMobileMSI
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsMobileMSI
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsMobileMSI collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequest) GetN(ctx context.Context, n int) ([]WindowsMobileMSI, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsMobileMSI collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequest) Get(ctx context.Context) ([]WindowsMobileMSI, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsMobileMSI collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsMobileMSICollectionRequest) Add(ctx context.Context, reqObj *WindowsMobileMSI) (resObj *WindowsMobileMSI, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsOfficeClientConfiguration returns request builder for WindowsOfficeClientConfiguration collection
func (b *OfficeConfigurationClientConfigurationsCollectionRequestBuilder) WindowsOfficeClientConfiguration() *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequestBuilder {
	bb := &OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequestBuilder is request builder for WindowsOfficeClientConfiguration collection rcn
type OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsOfficeClientConfiguration collection
func (b *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequestBuilder) Request() *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequest {
	return &OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsOfficeClientConfiguration item
func (b *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequestBuilder) ID(id string) *WindowsOfficeClientConfigurationRequestBuilder {
	bb := &WindowsOfficeClientConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequest is request for WindowsOfficeClientConfiguration collection
type OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsOfficeClientConfiguration collection
func (r *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsOfficeClientConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsOfficeClientConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsOfficeClientConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsOfficeClientConfiguration collection, max N pages
func (r *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsOfficeClientConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsOfficeClientConfiguration collection
func (r *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsOfficeClientConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsOfficeClientConfiguration collection
func (r *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsOfficeClientConfiguration) (resObj *WindowsOfficeClientConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsOfficeClientSecurityConfiguration returns request builder for WindowsOfficeClientSecurityConfiguration collection
func (b *OfficeConfigurationClientConfigurationsCollectionRequestBuilder) WindowsOfficeClientSecurityConfiguration() *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequestBuilder {
	bb := &OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequestBuilder is request builder for WindowsOfficeClientSecurityConfiguration collection rcn
type OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsOfficeClientSecurityConfiguration collection
func (b *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequestBuilder) Request() *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequest {
	return &OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsOfficeClientSecurityConfiguration item
func (b *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequestBuilder) ID(id string) *WindowsOfficeClientSecurityConfigurationRequestBuilder {
	bb := &WindowsOfficeClientSecurityConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequest is request for WindowsOfficeClientSecurityConfiguration collection
type OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsOfficeClientSecurityConfiguration collection
func (r *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsOfficeClientSecurityConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsOfficeClientSecurityConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsOfficeClientSecurityConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsOfficeClientSecurityConfiguration collection, max N pages
func (r *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsOfficeClientSecurityConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsOfficeClientSecurityConfiguration collection
func (r *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsOfficeClientSecurityConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsOfficeClientSecurityConfiguration collection
func (r *OfficeConfigurationClientConfigurationsCollectionWindowsOfficeClientSecurityConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsOfficeClientSecurityConfiguration) (resObj *WindowsOfficeClientSecurityConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsPhone81AppX returns request builder for WindowsPhone81AppX collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) WindowsPhone81AppX() *DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequestBuilder is request builder for WindowsPhone81AppX collection rcn
type DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhone81AppX collection
func (b *DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhone81AppX item
func (b *DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequestBuilder) ID(id string) *WindowsPhone81AppXRequestBuilder {
	bb := &WindowsPhone81AppXRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequest is request for WindowsPhone81AppX collection
type DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhone81AppX collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhone81AppX, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhone81AppX
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhone81AppX
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhone81AppX collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhone81AppX, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhone81AppX collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequest) Get(ctx context.Context) ([]WindowsPhone81AppX, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhone81AppX collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhone81AppXCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhone81AppX) (resObj *WindowsPhone81AppX, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsPhone81CertificateProfileBase returns request builder for WindowsPhone81CertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsPhone81CertificateProfileBase() *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequestBuilder is request builder for WindowsPhone81CertificateProfileBase collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhone81CertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhone81CertificateProfileBase item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequestBuilder) ID(id string) *WindowsPhone81CertificateProfileBaseRequestBuilder {
	bb := &WindowsPhone81CertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequest is request for WindowsPhone81CertificateProfileBase collection
type DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhone81CertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhone81CertificateProfileBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhone81CertificateProfileBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhone81CertificateProfileBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhone81CertificateProfileBase collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhone81CertificateProfileBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhone81CertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequest) Get(ctx context.Context) ([]WindowsPhone81CertificateProfileBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhone81CertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CertificateProfileBaseCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhone81CertificateProfileBase) (resObj *WindowsPhone81CertificateProfileBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsPhone81CompliancePolicy returns request builder for WindowsPhone81CompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) WindowsPhone81CompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequestBuilder is request builder for WindowsPhone81CompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhone81CompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhone81CompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequestBuilder) ID(id string) *WindowsPhone81CompliancePolicyRequestBuilder {
	bb := &WindowsPhone81CompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequest is request for WindowsPhone81CompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhone81CompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhone81CompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhone81CompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhone81CompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhone81CompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhone81CompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhone81CompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequest) Get(ctx context.Context) ([]WindowsPhone81CompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhone81CompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionWindowsPhone81CompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhone81CompliancePolicy) (resObj *WindowsPhone81CompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsPhone81CustomConfiguration returns request builder for WindowsPhone81CustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsPhone81CustomConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequestBuilder is request builder for WindowsPhone81CustomConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhone81CustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhone81CustomConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequestBuilder) ID(id string) *WindowsPhone81CustomConfigurationRequestBuilder {
	bb := &WindowsPhone81CustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequest is request for WindowsPhone81CustomConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhone81CustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhone81CustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhone81CustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhone81CustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhone81CustomConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhone81CustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhone81CustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsPhone81CustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhone81CustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81CustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhone81CustomConfiguration) (resObj *WindowsPhone81CustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsPhone81GeneralConfiguration returns request builder for WindowsPhone81GeneralConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsPhone81GeneralConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequestBuilder is request builder for WindowsPhone81GeneralConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhone81GeneralConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhone81GeneralConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequestBuilder) ID(id string) *WindowsPhone81GeneralConfigurationRequestBuilder {
	bb := &WindowsPhone81GeneralConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequest is request for WindowsPhone81GeneralConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhone81GeneralConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhone81GeneralConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhone81GeneralConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhone81GeneralConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhone81GeneralConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhone81GeneralConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhone81GeneralConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsPhone81GeneralConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhone81GeneralConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81GeneralConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhone81GeneralConfiguration) (resObj *WindowsPhone81GeneralConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsCertificateProfileBase is navigation property rn
func (b *WindowsPhone81ImportedPFXCertificateProfileRequestBuilder) WindowsCertificateProfileBase() *WindowsCertificateProfileBaseRequestBuilder {
	bb := &WindowsCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsCertificateProfileBase"
	return bb
}

// WindowsPhone81CertificateProfileBase is navigation property rn
func (b *WindowsPhone81SCEPCertificateProfileRequestBuilder) WindowsPhone81CertificateProfileBase() *WindowsPhone81CertificateProfileBaseRequestBuilder {
	bb := &WindowsPhone81CertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// WindowsPhone81StoreApp returns request builder for WindowsPhone81StoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) WindowsPhone81StoreApp() *DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequestBuilder is request builder for WindowsPhone81StoreApp collection rcn
type DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhone81StoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhone81StoreApp item
func (b *DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequestBuilder) ID(id string) *WindowsPhone81StoreAppRequestBuilder {
	bb := &WindowsPhone81StoreAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequest is request for WindowsPhone81StoreApp collection
type DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhone81StoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhone81StoreApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhone81StoreApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhone81StoreApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhone81StoreApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhone81StoreApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhone81StoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequest) Get(ctx context.Context) ([]WindowsPhone81StoreApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhone81StoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhone81StoreAppCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhone81StoreApp) (resObj *WindowsPhone81StoreApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsPhone81TrustedRootCertificate returns request builder for WindowsPhone81TrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsPhone81TrustedRootCertificate() *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequestBuilder is request builder for WindowsPhone81TrustedRootCertificate collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhone81TrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhone81TrustedRootCertificate item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequestBuilder) ID(id string) *WindowsPhone81TrustedRootCertificateRequestBuilder {
	bb := &WindowsPhone81TrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequest is request for WindowsPhone81TrustedRootCertificate collection
type DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhone81TrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhone81TrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhone81TrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhone81TrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhone81TrustedRootCertificate collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhone81TrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhone81TrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequest) Get(ctx context.Context) ([]WindowsPhone81TrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhone81TrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhone81TrustedRootCertificateCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhone81TrustedRootCertificate) (resObj *WindowsPhone81TrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsPhoneEASEmailProfileConfiguration returns request builder for WindowsPhoneEASEmailProfileConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsPhoneEASEmailProfileConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequestBuilder is request builder for WindowsPhoneEASEmailProfileConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhoneEASEmailProfileConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhoneEASEmailProfileConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequestBuilder) ID(id string) *WindowsPhoneEASEmailProfileConfigurationRequestBuilder {
	bb := &WindowsPhoneEASEmailProfileConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequest is request for WindowsPhoneEASEmailProfileConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhoneEASEmailProfileConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhoneEASEmailProfileConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhoneEASEmailProfileConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhoneEASEmailProfileConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhoneEASEmailProfileConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhoneEASEmailProfileConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhoneEASEmailProfileConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsPhoneEASEmailProfileConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhoneEASEmailProfileConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsPhoneEASEmailProfileConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhoneEASEmailProfileConfiguration) (resObj *WindowsPhoneEASEmailProfileConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsPhoneXAP returns request builder for WindowsPhoneXAP collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) WindowsPhoneXAP() *DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequestBuilder is request builder for WindowsPhoneXAP collection rcn
type DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsPhoneXAP collection
func (b *DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsPhoneXAP item
func (b *DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequestBuilder) ID(id string) *WindowsPhoneXAPRequestBuilder {
	bb := &WindowsPhoneXAPRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequest is request for WindowsPhoneXAP collection
type DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsPhoneXAP collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsPhoneXAP, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsPhoneXAP
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsPhoneXAP
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsPhoneXAP collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsPhoneXAP, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsPhoneXAP collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequest) Get(ctx context.Context) ([]WindowsPhoneXAP, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsPhoneXAP collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsPhoneXAPCollectionRequest) Add(ctx context.Context, reqObj *WindowsPhoneXAP) (resObj *WindowsPhoneXAP, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsPrivacyDataAccessControlItemRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsProtectionStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsQualityUpdateCatalogItem returns request builder for WindowsQualityUpdateCatalogItem collection
func (b *DeviceManagementWindowsUpdateCatalogItemsCollectionRequestBuilder) WindowsQualityUpdateCatalogItem() *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequestBuilder {
	bb := &DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequestBuilder is request builder for WindowsQualityUpdateCatalogItem collection rcn
type DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsQualityUpdateCatalogItem collection
func (b *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequestBuilder) Request() *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequest {
	return &DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsQualityUpdateCatalogItem item
func (b *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequestBuilder) ID(id string) *WindowsQualityUpdateCatalogItemRequestBuilder {
	bb := &WindowsQualityUpdateCatalogItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequest is request for WindowsQualityUpdateCatalogItem collection
type DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsQualityUpdateCatalogItem collection
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsQualityUpdateCatalogItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsQualityUpdateCatalogItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsQualityUpdateCatalogItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsQualityUpdateCatalogItem collection, max N pages
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsQualityUpdateCatalogItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsQualityUpdateCatalogItem collection
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequest) Get(ctx context.Context) ([]WindowsQualityUpdateCatalogItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsQualityUpdateCatalogItem collection
func (r *DeviceManagementWindowsUpdateCatalogItemsCollectionWindowsQualityUpdateCatalogItemCollectionRequest) Add(ctx context.Context, reqObj *WindowsQualityUpdateCatalogItem) (resObj *WindowsQualityUpdateCatalogItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsQualityUpdateProfileRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *WindowsQualityUpdateProfileAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsStoreApp returns request builder for WindowsStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) WindowsStoreApp() *DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequestBuilder is request builder for WindowsStoreApp collection rcn
type DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsStoreApp item
func (b *DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequestBuilder) ID(id string) *WindowsStoreAppRequestBuilder {
	bb := &WindowsStoreAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequest is request for WindowsStoreApp collection
type DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsStoreApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsStoreApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsStoreApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsStoreApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsStoreApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequest) Get(ctx context.Context) ([]WindowsStoreApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsStoreAppCollectionRequest) Add(ctx context.Context, reqObj *WindowsStoreApp) (resObj *WindowsStoreApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsUniversalAppX returns request builder for WindowsUniversalAppX collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) WindowsUniversalAppX() *DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequestBuilder is request builder for WindowsUniversalAppX collection rcn
type DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUniversalAppX collection
func (b *DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUniversalAppX item
func (b *DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequestBuilder) ID(id string) *WindowsUniversalAppXRequestBuilder {
	bb := &WindowsUniversalAppXRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequest is request for WindowsUniversalAppX collection
type DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUniversalAppX collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUniversalAppX, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUniversalAppX
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUniversalAppX
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUniversalAppX collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUniversalAppX, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUniversalAppX collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequest) Get(ctx context.Context) ([]WindowsUniversalAppX, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUniversalAppX collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsUniversalAppXCollectionRequest) Add(ctx context.Context, reqObj *WindowsUniversalAppX) (resObj *WindowsUniversalAppX, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsUniversalAppXContainedApp returns request builder for WindowsUniversalAppXContainedApp collection
func (b *MicrosoftStoreForBusinessAppContainedAppsCollectionRequestBuilder) WindowsUniversalAppXContainedApp() *MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequestBuilder {
	bb := &MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequestBuilder is request builder for WindowsUniversalAppXContainedApp collection rcn
type MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUniversalAppXContainedApp collection
func (b *MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequestBuilder) Request() *MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequest {
	return &MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUniversalAppXContainedApp item
func (b *MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequestBuilder) ID(id string) *WindowsUniversalAppXContainedAppRequestBuilder {
	bb := &WindowsUniversalAppXContainedAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequest is request for WindowsUniversalAppXContainedApp collection
type MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUniversalAppXContainedApp collection
func (r *MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUniversalAppXContainedApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUniversalAppXContainedApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUniversalAppXContainedApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUniversalAppXContainedApp collection, max N pages
func (r *MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUniversalAppXContainedApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUniversalAppXContainedApp collection
func (r *MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequest) Get(ctx context.Context) ([]WindowsUniversalAppXContainedApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUniversalAppXContainedApp collection
func (r *MicrosoftStoreForBusinessAppContainedAppsCollectionWindowsUniversalAppXContainedAppCollectionRequest) Add(ctx context.Context, reqObj *WindowsUniversalAppXContainedApp) (resObj *WindowsUniversalAppXContainedApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsUpdateForBusinessConfiguration returns request builder for WindowsUpdateForBusinessConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsUpdateForBusinessConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequestBuilder is request builder for WindowsUpdateForBusinessConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdateForBusinessConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdateForBusinessConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequestBuilder) ID(id string) *WindowsUpdateForBusinessConfigurationRequestBuilder {
	bb := &WindowsUpdateForBusinessConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequest is request for WindowsUpdateForBusinessConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdateForBusinessConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdateForBusinessConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdateForBusinessConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdateForBusinessConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdateForBusinessConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdateForBusinessConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdateForBusinessConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsUpdateForBusinessConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdateForBusinessConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsUpdateForBusinessConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdateForBusinessConfiguration) (resObj *WindowsUpdateForBusinessConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *WindowsUpdateStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// WindowsVPNConfiguration returns request builder for WindowsVPNConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsVPNConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequestBuilder is request builder for WindowsVPNConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsVPNConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsVPNConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequestBuilder) ID(id string) *WindowsVPNConfigurationRequestBuilder {
	bb := &WindowsVPNConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequest is request for WindowsVPNConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsVPNConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsVPNConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsVPNConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsVPNConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsVPNConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsVPNConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsVPNConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsVPNConfiguration) (resObj *WindowsVPNConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsWebApp returns request builder for WindowsWebApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) WindowsWebApp() *DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequestBuilder is request builder for WindowsWebApp collection rcn
type DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsWebApp collection
func (b *DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsWebApp item
func (b *DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequestBuilder) ID(id string) *WindowsWebAppRequestBuilder {
	bb := &WindowsWebAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequest is request for WindowsWebApp collection
type DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsWebApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsWebApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsWebApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsWebApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsWebApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsWebApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsWebApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequest) Get(ctx context.Context) ([]WindowsWebApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsWebApp collection
func (r *DeviceAppManagementMobileAppsCollectionWindowsWebAppCollectionRequest) Add(ctx context.Context, reqObj *WindowsWebApp) (resObj *WindowsWebApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsWiFiConfiguration returns request builder for WindowsWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsWiFiConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequestBuilder is request builder for WindowsWiFiConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsWiFiConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequestBuilder) ID(id string) *WindowsWiFiConfigurationRequestBuilder {
	bb := &WindowsWiFiConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequest is request for WindowsWiFiConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsWiFiConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsWiFiConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsWiFiConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsWiFiConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsWiFiConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsWiFiConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsWiFiConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsWiFiConfiguration) (resObj *WindowsWiFiConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsWiredNetworkConfiguration returns request builder for WindowsWiredNetworkConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) WindowsWiredNetworkConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequestBuilder is request builder for WindowsWiredNetworkConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsWiredNetworkConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsWiredNetworkConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequestBuilder) ID(id string) *WindowsWiredNetworkConfigurationRequestBuilder {
	bb := &WindowsWiredNetworkConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequest is request for WindowsWiredNetworkConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsWiredNetworkConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsWiredNetworkConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsWiredNetworkConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsWiredNetworkConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsWiredNetworkConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsWiredNetworkConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsWiredNetworkConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequest) Get(ctx context.Context) ([]WindowsWiredNetworkConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsWiredNetworkConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindowsWiredNetworkConfigurationCollectionRequest) Add(ctx context.Context, reqObj *WindowsWiredNetworkConfiguration) (resObj *WindowsWiredNetworkConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsUpdatesUpdatableAssetCollectionWindowsUpdatesEnrollAssetsRequestParameter undocumented
type WindowsUpdatesUpdatableAssetCollectionWindowsUpdatesEnrollAssetsRequestParameter struct {
	// UpdateCategory undocumented
	UpdateCategory *WindowsUpdatesUpdateCategory `json:"updateCategory,omitempty"`
	// Assets undocumented
	Assets []WindowsUpdatesUpdatableAsset `json:"assets,omitempty"`
}

// WindowsUpdatesUpdatableAssetCollectionWindowsUpdatesEnrollAssetsByIDRequestParameter undocumented
type WindowsUpdatesUpdatableAssetCollectionWindowsUpdatesEnrollAssetsByIDRequestParameter struct {
	// UpdateCategory undocumented
	UpdateCategory *WindowsUpdatesUpdateCategory `json:"updateCategory,omitempty"`
	// MemberEntityType undocumented
	MemberEntityType *string `json:"memberEntityType,omitempty"`
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// WindowsUpdatesUpdatableAssetCollectionWindowsUpdatesUnenrollAssetsRequestParameter undocumented
type WindowsUpdatesUpdatableAssetCollectionWindowsUpdatesUnenrollAssetsRequestParameter struct {
	// UpdateCategory undocumented
	UpdateCategory *WindowsUpdatesUpdateCategory `json:"updateCategory,omitempty"`
	// Assets undocumented
	Assets []WindowsUpdatesUpdatableAsset `json:"assets,omitempty"`
}

// WindowsUpdatesUpdatableAssetCollectionWindowsUpdatesUnenrollAssetsByIDRequestParameter undocumented
type WindowsUpdatesUpdatableAssetCollectionWindowsUpdatesUnenrollAssetsByIDRequestParameter struct {
	// UpdateCategory undocumented
	UpdateCategory *WindowsUpdatesUpdateCategory `json:"updateCategory,omitempty"`
	// MemberEntityType undocumented
	MemberEntityType *string `json:"memberEntityType,omitempty"`
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// WindowsUpdatesDeploymentAudienceWindowsUpdatesUpdateAudienceRequestParameter undocumented
type WindowsUpdatesDeploymentAudienceWindowsUpdatesUpdateAudienceRequestParameter struct {
	// AddMembers undocumented
	AddMembers []WindowsUpdatesUpdatableAsset `json:"addMembers,omitempty"`
	// RemoveMembers undocumented
	RemoveMembers []WindowsUpdatesUpdatableAsset `json:"removeMembers,omitempty"`
	// AddExclusions undocumented
	AddExclusions []WindowsUpdatesUpdatableAsset `json:"addExclusions,omitempty"`
	// RemoveExclusions undocumented
	RemoveExclusions []WindowsUpdatesUpdatableAsset `json:"removeExclusions,omitempty"`
}

// WindowsUpdatesDeploymentAudienceWindowsUpdatesUpdateAudienceByIDRequestParameter undocumented
type WindowsUpdatesDeploymentAudienceWindowsUpdatesUpdateAudienceByIDRequestParameter struct {
	// MemberEntityType undocumented
	MemberEntityType *string `json:"memberEntityType,omitempty"`
	// AddMembers undocumented
	AddMembers []string `json:"addMembers,omitempty"`
	// RemoveMembers undocumented
	RemoveMembers []string `json:"removeMembers,omitempty"`
	// AddExclusions undocumented
	AddExclusions []string `json:"addExclusions,omitempty"`
	// RemoveExclusions undocumented
	RemoveExclusions []string `json:"removeExclusions,omitempty"`
}

// WindowsUpdatesUpdatableAssetWindowsUpdatesAddMembersRequestParameter undocumented
type WindowsUpdatesUpdatableAssetWindowsUpdatesAddMembersRequestParameter struct {
	// Assets undocumented
	Assets []WindowsUpdatesUpdatableAsset `json:"assets,omitempty"`
}

// WindowsUpdatesUpdatableAssetWindowsUpdatesAddMembersByIDRequestParameter undocumented
type WindowsUpdatesUpdatableAssetWindowsUpdatesAddMembersByIDRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
	// MemberEntityType undocumented
	MemberEntityType *string `json:"memberEntityType,omitempty"`
}

// WindowsUpdatesUpdatableAssetWindowsUpdatesRemoveMembersRequestParameter undocumented
type WindowsUpdatesUpdatableAssetWindowsUpdatesRemoveMembersRequestParameter struct {
	// Assets undocumented
	Assets []WindowsUpdatesUpdatableAsset `json:"assets,omitempty"`
}

// WindowsUpdatesUpdatableAssetWindowsUpdatesRemoveMembersByIDRequestParameter undocumented
type WindowsUpdatesUpdatableAssetWindowsUpdatesRemoveMembersByIDRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
	// MemberEntityType undocumented
	MemberEntityType *string `json:"memberEntityType,omitempty"`
}

// CatalogEntry is navigation property rn
func (b *WindowsUpdatesApplicableContentRequestBuilder) CatalogEntry() *WindowsUpdatesCatalogEntryRequestBuilder {
	bb := &WindowsUpdatesCatalogEntryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/catalogEntry"
	return bb
}

// Entries returns request builder for WindowsUpdatesCatalogEntry collection
func (b *WindowsUpdatesCatalogRequestBuilder) Entries() *WindowsUpdatesCatalogEntriesCollectionRequestBuilder {
	bb := &WindowsUpdatesCatalogEntriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/entries"
	return bb
}

// WindowsUpdatesCatalogEntriesCollectionRequestBuilder is request builder for WindowsUpdatesCatalogEntry collection rcn
type WindowsUpdatesCatalogEntriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesCatalogEntry collection
func (b *WindowsUpdatesCatalogEntriesCollectionRequestBuilder) Request() *WindowsUpdatesCatalogEntriesCollectionRequest {
	return &WindowsUpdatesCatalogEntriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesCatalogEntry item
func (b *WindowsUpdatesCatalogEntriesCollectionRequestBuilder) ID(id string) *WindowsUpdatesCatalogEntryRequestBuilder {
	bb := &WindowsUpdatesCatalogEntryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUpdatesCatalogEntriesCollectionRequest is request for WindowsUpdatesCatalogEntry collection
type WindowsUpdatesCatalogEntriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesCatalogEntry collection
func (r *WindowsUpdatesCatalogEntriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesCatalogEntry, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesCatalogEntry
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesCatalogEntry
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesCatalogEntry collection, max N pages
func (r *WindowsUpdatesCatalogEntriesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesCatalogEntry, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesCatalogEntry collection
func (r *WindowsUpdatesCatalogEntriesCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesCatalogEntry, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesCatalogEntry collection
func (r *WindowsUpdatesCatalogEntriesCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesCatalogEntry) (resObj *WindowsUpdatesCatalogEntry, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CatalogEntry is navigation property rn
func (b *WindowsUpdatesCatalogContentRequestBuilder) CatalogEntry() *WindowsUpdatesCatalogEntryRequestBuilder {
	bb := &WindowsUpdatesCatalogEntryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/catalogEntry"
	return bb
}

// UpdatePolicy is navigation property rn
func (b *WindowsUpdatesComplianceChangeRequestBuilder) UpdatePolicy() *WindowsUpdatesUpdatePolicyRequestBuilder {
	bb := &WindowsUpdatesUpdatePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/updatePolicy"
	return bb
}

// Deployments returns request builder for WindowsUpdatesDeployment collection
func (b *WindowsUpdatesContentApprovalRequestBuilder) Deployments() *WindowsUpdatesContentApprovalDeploymentsCollectionRequestBuilder {
	bb := &WindowsUpdatesContentApprovalDeploymentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deployments"
	return bb
}

// WindowsUpdatesContentApprovalDeploymentsCollectionRequestBuilder is request builder for WindowsUpdatesDeployment collection rcn
type WindowsUpdatesContentApprovalDeploymentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesDeployment collection
func (b *WindowsUpdatesContentApprovalDeploymentsCollectionRequestBuilder) Request() *WindowsUpdatesContentApprovalDeploymentsCollectionRequest {
	return &WindowsUpdatesContentApprovalDeploymentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesDeployment item
func (b *WindowsUpdatesContentApprovalDeploymentsCollectionRequestBuilder) ID(id string) *WindowsUpdatesDeploymentRequestBuilder {
	bb := &WindowsUpdatesDeploymentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUpdatesContentApprovalDeploymentsCollectionRequest is request for WindowsUpdatesDeployment collection
type WindowsUpdatesContentApprovalDeploymentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesDeployment collection
func (r *WindowsUpdatesContentApprovalDeploymentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesDeployment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesDeployment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesDeployment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesDeployment collection, max N pages
func (r *WindowsUpdatesContentApprovalDeploymentsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesDeployment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesDeployment collection
func (r *WindowsUpdatesContentApprovalDeploymentsCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesDeployment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesDeployment collection
func (r *WindowsUpdatesContentApprovalDeploymentsCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesDeployment) (resObj *WindowsUpdatesDeployment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Audience is navigation property rn
func (b *WindowsUpdatesDeploymentRequestBuilder) Audience() *WindowsUpdatesDeploymentAudienceRequestBuilder {
	bb := &WindowsUpdatesDeploymentAudienceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/audience"
	return bb
}

// Exclusions returns request builder for WindowsUpdatesUpdatableAsset collection
func (b *WindowsUpdatesDeploymentAudienceRequestBuilder) Exclusions() *WindowsUpdatesDeploymentAudienceExclusionsCollectionRequestBuilder {
	bb := &WindowsUpdatesDeploymentAudienceExclusionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/exclusions"
	return bb
}

// WindowsUpdatesDeploymentAudienceExclusionsCollectionRequestBuilder is request builder for WindowsUpdatesUpdatableAsset collection rcn
type WindowsUpdatesDeploymentAudienceExclusionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesUpdatableAsset collection
func (b *WindowsUpdatesDeploymentAudienceExclusionsCollectionRequestBuilder) Request() *WindowsUpdatesDeploymentAudienceExclusionsCollectionRequest {
	return &WindowsUpdatesDeploymentAudienceExclusionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesUpdatableAsset item
func (b *WindowsUpdatesDeploymentAudienceExclusionsCollectionRequestBuilder) ID(id string) *WindowsUpdatesUpdatableAssetRequestBuilder {
	bb := &WindowsUpdatesUpdatableAssetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUpdatesDeploymentAudienceExclusionsCollectionRequest is request for WindowsUpdatesUpdatableAsset collection
type WindowsUpdatesDeploymentAudienceExclusionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesUpdatableAsset collection
func (r *WindowsUpdatesDeploymentAudienceExclusionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesUpdatableAsset, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesUpdatableAsset
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesUpdatableAsset
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesUpdatableAsset collection, max N pages
func (r *WindowsUpdatesDeploymentAudienceExclusionsCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesUpdatableAsset, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesUpdatableAsset collection
func (r *WindowsUpdatesDeploymentAudienceExclusionsCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesUpdatableAsset, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesUpdatableAsset collection
func (r *WindowsUpdatesDeploymentAudienceExclusionsCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesUpdatableAsset) (resObj *WindowsUpdatesUpdatableAsset, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Members returns request builder for WindowsUpdatesUpdatableAsset collection
func (b *WindowsUpdatesDeploymentAudienceRequestBuilder) Members() *WindowsUpdatesDeploymentAudienceMembersCollectionRequestBuilder {
	bb := &WindowsUpdatesDeploymentAudienceMembersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/members"
	return bb
}

// WindowsUpdatesDeploymentAudienceMembersCollectionRequestBuilder is request builder for WindowsUpdatesUpdatableAsset collection rcn
type WindowsUpdatesDeploymentAudienceMembersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesUpdatableAsset collection
func (b *WindowsUpdatesDeploymentAudienceMembersCollectionRequestBuilder) Request() *WindowsUpdatesDeploymentAudienceMembersCollectionRequest {
	return &WindowsUpdatesDeploymentAudienceMembersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesUpdatableAsset item
func (b *WindowsUpdatesDeploymentAudienceMembersCollectionRequestBuilder) ID(id string) *WindowsUpdatesUpdatableAssetRequestBuilder {
	bb := &WindowsUpdatesUpdatableAssetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUpdatesDeploymentAudienceMembersCollectionRequest is request for WindowsUpdatesUpdatableAsset collection
type WindowsUpdatesDeploymentAudienceMembersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesUpdatableAsset collection
func (r *WindowsUpdatesDeploymentAudienceMembersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesUpdatableAsset, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesUpdatableAsset
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesUpdatableAsset
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesUpdatableAsset collection, max N pages
func (r *WindowsUpdatesDeploymentAudienceMembersCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesUpdatableAsset, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesUpdatableAsset collection
func (r *WindowsUpdatesDeploymentAudienceMembersCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesUpdatableAsset, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesUpdatableAsset collection
func (r *WindowsUpdatesDeploymentAudienceMembersCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesUpdatableAsset) (resObj *WindowsUpdatesUpdatableAsset, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Members returns request builder for WindowsUpdatesUpdatableAsset collection
func (b *WindowsUpdatesUpdatableAssetGroupRequestBuilder) Members() *WindowsUpdatesUpdatableAssetGroupMembersCollectionRequestBuilder {
	bb := &WindowsUpdatesUpdatableAssetGroupMembersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/members"
	return bb
}

// WindowsUpdatesUpdatableAssetGroupMembersCollectionRequestBuilder is request builder for WindowsUpdatesUpdatableAsset collection rcn
type WindowsUpdatesUpdatableAssetGroupMembersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesUpdatableAsset collection
func (b *WindowsUpdatesUpdatableAssetGroupMembersCollectionRequestBuilder) Request() *WindowsUpdatesUpdatableAssetGroupMembersCollectionRequest {
	return &WindowsUpdatesUpdatableAssetGroupMembersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesUpdatableAsset item
func (b *WindowsUpdatesUpdatableAssetGroupMembersCollectionRequestBuilder) ID(id string) *WindowsUpdatesUpdatableAssetRequestBuilder {
	bb := &WindowsUpdatesUpdatableAssetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUpdatesUpdatableAssetGroupMembersCollectionRequest is request for WindowsUpdatesUpdatableAsset collection
type WindowsUpdatesUpdatableAssetGroupMembersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesUpdatableAsset collection
func (r *WindowsUpdatesUpdatableAssetGroupMembersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesUpdatableAsset, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesUpdatableAsset
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesUpdatableAsset
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesUpdatableAsset collection, max N pages
func (r *WindowsUpdatesUpdatableAssetGroupMembersCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesUpdatableAsset, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesUpdatableAsset collection
func (r *WindowsUpdatesUpdatableAssetGroupMembersCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesUpdatableAsset, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesUpdatableAsset collection
func (r *WindowsUpdatesUpdatableAssetGroupMembersCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesUpdatableAsset) (resObj *WindowsUpdatesUpdatableAsset, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Audience is navigation property rn
func (b *WindowsUpdatesUpdatePolicyRequestBuilder) Audience() *WindowsUpdatesDeploymentAudienceRequestBuilder {
	bb := &WindowsUpdatesDeploymentAudienceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/audience"
	return bb
}

// ComplianceChanges returns request builder for WindowsUpdatesComplianceChange collection
func (b *WindowsUpdatesUpdatePolicyRequestBuilder) ComplianceChanges() *WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequestBuilder {
	bb := &WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/complianceChanges"
	return bb
}

// WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequestBuilder is request builder for WindowsUpdatesComplianceChange collection rcn
type WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesComplianceChange collection
func (b *WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequestBuilder) Request() *WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequest {
	return &WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesComplianceChange item
func (b *WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequestBuilder) ID(id string) *WindowsUpdatesComplianceChangeRequestBuilder {
	bb := &WindowsUpdatesComplianceChangeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequest is request for WindowsUpdatesComplianceChange collection
type WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesComplianceChange collection
func (r *WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesComplianceChange, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesComplianceChange
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesComplianceChange
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesComplianceChange collection, max N pages
func (r *WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesComplianceChange, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesComplianceChange collection
func (r *WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesComplianceChange, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesComplianceChange collection
func (r *WindowsUpdatesUpdatePolicyComplianceChangesCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesComplianceChange) (resObj *WindowsUpdatesComplianceChange, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsUpdatesAzureADDevice returns request builder for WindowsUpdatesAzureADDevice collection
func (b *WindowsUpdatesUpdatableAssetRequestBuilder) WindowsUpdatesAzureADDevice() *WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequestBuilder {
	bb := &WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequestBuilder is request builder for WindowsUpdatesAzureADDevice collection rcn
type WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesAzureADDevice collection
func (b *WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequestBuilder) Request() *WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequest {
	return &WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesAzureADDevice item
func (b *WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequestBuilder) ID(id string) *WindowsUpdatesAzureADDeviceRequestBuilder {
	bb := &WindowsUpdatesAzureADDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequest is request for WindowsUpdatesAzureADDevice collection
type WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesAzureADDevice collection
func (r *WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesAzureADDevice, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesAzureADDevice
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesAzureADDevice
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesAzureADDevice collection, max N pages
func (r *WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesAzureADDevice, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesAzureADDevice collection
func (r *WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesAzureADDevice, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesAzureADDevice collection
func (r *WindowsUpdatesUpdatableAssetWindowsUpdatesAzureADDeviceCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesAzureADDevice) (resObj *WindowsUpdatesAzureADDevice, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsUpdatesContentApproval returns request builder for WindowsUpdatesContentApproval collection
func (b *WindowsUpdatesComplianceChangeRequestBuilder) WindowsUpdatesContentApproval() *WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequestBuilder {
	bb := &WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequestBuilder is request builder for WindowsUpdatesContentApproval collection rcn
type WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesContentApproval collection
func (b *WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequestBuilder) Request() *WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequest {
	return &WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesContentApproval item
func (b *WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequestBuilder) ID(id string) *WindowsUpdatesContentApprovalRequestBuilder {
	bb := &WindowsUpdatesContentApprovalRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequest is request for WindowsUpdatesContentApproval collection
type WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesContentApproval collection
func (r *WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesContentApproval, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesContentApproval
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesContentApproval
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesContentApproval collection, max N pages
func (r *WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesContentApproval, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesContentApproval collection
func (r *WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesContentApproval, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesContentApproval collection
func (r *WindowsUpdatesComplianceChangeWindowsUpdatesContentApprovalCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesContentApproval) (resObj *WindowsUpdatesContentApproval, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsUpdatesSoftwareUpdateCatalogEntry returns request builder for WindowsUpdatesSoftwareUpdateCatalogEntry collection
func (b *WindowsUpdatesCatalogEntryRequestBuilder) WindowsUpdatesSoftwareUpdateCatalogEntry() *WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequestBuilder {
	bb := &WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequestBuilder is request builder for WindowsUpdatesSoftwareUpdateCatalogEntry collection rcn
type WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesSoftwareUpdateCatalogEntry collection
func (b *WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequestBuilder) Request() *WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequest {
	return &WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesSoftwareUpdateCatalogEntry item
func (b *WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequestBuilder) ID(id string) *WindowsUpdatesSoftwareUpdateCatalogEntryRequestBuilder {
	bb := &WindowsUpdatesSoftwareUpdateCatalogEntryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequest is request for WindowsUpdatesSoftwareUpdateCatalogEntry collection
type WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesSoftwareUpdateCatalogEntry collection
func (r *WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesSoftwareUpdateCatalogEntry, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesSoftwareUpdateCatalogEntry
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesSoftwareUpdateCatalogEntry
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesSoftwareUpdateCatalogEntry collection, max N pages
func (r *WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesSoftwareUpdateCatalogEntry, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesSoftwareUpdateCatalogEntry collection
func (r *WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesSoftwareUpdateCatalogEntry, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesSoftwareUpdateCatalogEntry collection
func (r *WindowsUpdatesCatalogEntryWindowsUpdatesSoftwareUpdateCatalogEntryCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesSoftwareUpdateCatalogEntry) (resObj *WindowsUpdatesSoftwareUpdateCatalogEntry, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsUpdatesUpdatableAssetGroup returns request builder for WindowsUpdatesUpdatableAssetGroup collection
func (b *WindowsUpdatesUpdatableAssetRequestBuilder) WindowsUpdatesUpdatableAssetGroup() *WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequestBuilder {
	bb := &WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequestBuilder is request builder for WindowsUpdatesUpdatableAssetGroup collection rcn
type WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdatesUpdatableAssetGroup collection
func (b *WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequestBuilder) Request() *WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequest {
	return &WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdatesUpdatableAssetGroup item
func (b *WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequestBuilder) ID(id string) *WindowsUpdatesUpdatableAssetGroupRequestBuilder {
	bb := &WindowsUpdatesUpdatableAssetGroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequest is request for WindowsUpdatesUpdatableAssetGroup collection
type WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdatesUpdatableAssetGroup collection
func (r *WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]WindowsUpdatesUpdatableAssetGroup, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdatesUpdatableAssetGroup
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdatesUpdatableAssetGroup
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for WindowsUpdatesUpdatableAssetGroup collection, max N pages
func (r *WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequest) GetN(ctx context.Context, n int) ([]WindowsUpdatesUpdatableAssetGroup, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for WindowsUpdatesUpdatableAssetGroup collection
func (r *WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequest) Get(ctx context.Context) ([]WindowsUpdatesUpdatableAssetGroup, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for WindowsUpdatesUpdatableAssetGroup collection
func (r *WindowsUpdatesUpdatableAssetWindowsUpdatesUpdatableAssetGroupCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdatesUpdatableAssetGroup) (resObj *WindowsUpdatesUpdatableAssetGroup, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
