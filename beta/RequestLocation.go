// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// LocationRequestBuilder is request builder for Location
type LocationRequestBuilder struct{ BaseRequestBuilder }

// Request returns LocationRequest
func (b *LocationRequestBuilder) Request() *LocationRequest {
	return &LocationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// LocationRequest is request for Location
type LocationRequest struct{ BaseRequest }

// Get performs GET request for Location
func (r *LocationRequest) Get(ctx context.Context) (resObj *Location, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Location
func (r *LocationRequest) Update(ctx context.Context, reqObj *Location) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Location
func (r *LocationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// LocationConstraintRequestBuilder is request builder for LocationConstraint
type LocationConstraintRequestBuilder struct{ BaseRequestBuilder }

// Request returns LocationConstraintRequest
func (b *LocationConstraintRequestBuilder) Request() *LocationConstraintRequest {
	return &LocationConstraintRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// LocationConstraintRequest is request for LocationConstraint
type LocationConstraintRequest struct{ BaseRequest }

// Get performs GET request for LocationConstraint
func (r *LocationConstraintRequest) Get(ctx context.Context) (resObj *LocationConstraint, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for LocationConstraint
func (r *LocationConstraintRequest) Update(ctx context.Context, reqObj *LocationConstraint) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for LocationConstraint
func (r *LocationConstraintRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// LocationConstraintItemRequestBuilder is request builder for LocationConstraintItem
type LocationConstraintItemRequestBuilder struct{ BaseRequestBuilder }

// Request returns LocationConstraintItemRequest
func (b *LocationConstraintItemRequestBuilder) Request() *LocationConstraintItemRequest {
	return &LocationConstraintItemRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// LocationConstraintItemRequest is request for LocationConstraintItem
type LocationConstraintItemRequest struct{ BaseRequest }

// Get performs GET request for LocationConstraintItem
func (r *LocationConstraintItemRequest) Get(ctx context.Context) (resObj *LocationConstraintItem, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for LocationConstraintItem
func (r *LocationConstraintItemRequest) Update(ctx context.Context, reqObj *LocationConstraintItem) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for LocationConstraintItem
func (r *LocationConstraintItemRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
