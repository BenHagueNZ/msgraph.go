// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// ExecutionScope returns request builder for User collection
func (b *WorkflowRequestBuilder) ExecutionScope() *WorkflowExecutionScopeCollectionRequestBuilder {
	bb := &WorkflowExecutionScopeCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/executionScope"
	return bb
}

// WorkflowExecutionScopeCollectionRequestBuilder is request builder for User collection
type WorkflowExecutionScopeCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for User collection
func (b *WorkflowExecutionScopeCollectionRequestBuilder) Request() *WorkflowExecutionScopeCollectionRequest {
	return &WorkflowExecutionScopeCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for User item
func (b *WorkflowExecutionScopeCollectionRequestBuilder) ID(id string) *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WorkflowExecutionScopeCollectionRequest is request for User collection
type WorkflowExecutionScopeCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for User collection
func (r *WorkflowExecutionScopeCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]User, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []User
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []User
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for User collection, max N pages
func (r *WorkflowExecutionScopeCollectionRequest) GetN(ctx context.Context, n int) ([]User, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for User collection
func (r *WorkflowExecutionScopeCollectionRequest) Get(ctx context.Context) ([]User, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for User collection
func (r *WorkflowExecutionScopeCollectionRequest) Add(ctx context.Context, reqObj *User) (resObj *User, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Runs returns request builder for IdentityGovernance_run collection
func (b *WorkflowRequestBuilder) Runs() *WorkflowRunsCollectionRequestBuilder {
	bb := &WorkflowRunsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/runs"
	return bb
}

// WorkflowRunsCollectionRequestBuilder is request builder for IdentityGovernance_run collection
type WorkflowRunsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernance_run collection
func (b *WorkflowRunsCollectionRequestBuilder) Request() *WorkflowRunsCollectionRequest {
	return &WorkflowRunsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernance_run item
func (b *WorkflowRunsCollectionRequestBuilder) ID(id string) *IdentityGovernance_runRequestBuilder {
	bb := &IdentityGovernance_runRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WorkflowRunsCollectionRequest is request for IdentityGovernance_run collection
type WorkflowRunsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernance_run collection
func (r *WorkflowRunsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernance_run, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernance_run
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernance_run
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernance_run collection, max N pages
func (r *WorkflowRunsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernance_run, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernance_run collection
func (r *WorkflowRunsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernance_run, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernance_run collection
func (r *WorkflowRunsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernance_run) (resObj *IdentityGovernance_run, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TaskReports returns request builder for IdentityGovernance_taskReport collection
func (b *WorkflowRequestBuilder) TaskReports() *WorkflowTaskReportsCollectionRequestBuilder {
	bb := &WorkflowTaskReportsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskReports"
	return bb
}

// WorkflowTaskReportsCollectionRequestBuilder is request builder for IdentityGovernance_taskReport collection
type WorkflowTaskReportsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernance_taskReport collection
func (b *WorkflowTaskReportsCollectionRequestBuilder) Request() *WorkflowTaskReportsCollectionRequest {
	return &WorkflowTaskReportsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernance_taskReport item
func (b *WorkflowTaskReportsCollectionRequestBuilder) ID(id string) *IdentityGovernance_taskReportRequestBuilder {
	bb := &IdentityGovernance_taskReportRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WorkflowTaskReportsCollectionRequest is request for IdentityGovernance_taskReport collection
type WorkflowTaskReportsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernance_taskReport collection
func (r *WorkflowTaskReportsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernance_taskReport, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernance_taskReport
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernance_taskReport
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernance_taskReport collection, max N pages
func (r *WorkflowTaskReportsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernance_taskReport, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernance_taskReport collection
func (r *WorkflowTaskReportsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernance_taskReport, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernance_taskReport collection
func (r *WorkflowTaskReportsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernance_taskReport) (resObj *IdentityGovernance_taskReport, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserProcessingResults returns request builder for IdentityGovernance_userProcessingResult collection
func (b *WorkflowRequestBuilder) UserProcessingResults() *WorkflowUserProcessingResultsCollectionRequestBuilder {
	bb := &WorkflowUserProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userProcessingResults"
	return bb
}

// WorkflowUserProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernance_userProcessingResult collection
type WorkflowUserProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernance_userProcessingResult collection
func (b *WorkflowUserProcessingResultsCollectionRequestBuilder) Request() *WorkflowUserProcessingResultsCollectionRequest {
	return &WorkflowUserProcessingResultsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernance_userProcessingResult item
func (b *WorkflowUserProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernance_userProcessingResultRequestBuilder {
	bb := &IdentityGovernance_userProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WorkflowUserProcessingResultsCollectionRequest is request for IdentityGovernance_userProcessingResult collection
type WorkflowUserProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernance_userProcessingResult collection
func (r *WorkflowUserProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernance_userProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernance_userProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernance_userProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernance_userProcessingResult collection, max N pages
func (r *WorkflowUserProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernance_userProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernance_userProcessingResult collection
func (r *WorkflowUserProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernance_userProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernance_userProcessingResult collection
func (r *WorkflowUserProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernance_userProcessingResult) (resObj *IdentityGovernance_userProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Versions returns request builder for IdentityGovernance_workflowVersion collection
func (b *WorkflowRequestBuilder) Versions() *WorkflowVersionsCollectionRequestBuilder {
	bb := &WorkflowVersionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/versions"
	return bb
}

// WorkflowVersionsCollectionRequestBuilder is request builder for IdentityGovernance_workflowVersion collection
type WorkflowVersionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernance_workflowVersion collection
func (b *WorkflowVersionsCollectionRequestBuilder) Request() *WorkflowVersionsCollectionRequest {
	return &WorkflowVersionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernance_workflowVersion item
func (b *WorkflowVersionsCollectionRequestBuilder) ID(id string) *IdentityGovernance_workflowVersionRequestBuilder {
	bb := &IdentityGovernance_workflowVersionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WorkflowVersionsCollectionRequest is request for IdentityGovernance_workflowVersion collection
type WorkflowVersionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernance_workflowVersion collection
func (r *WorkflowVersionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernance_workflowVersion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernance_workflowVersion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernance_workflowVersion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernance_workflowVersion collection, max N pages
func (r *WorkflowVersionsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernance_workflowVersion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernance_workflowVersion collection
func (r *WorkflowVersionsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernance_workflowVersion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernance_workflowVersion collection
func (r *WorkflowVersionsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernance_workflowVersion) (resObj *IdentityGovernance_workflowVersion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CreatedBy is navigation property
func (b *WorkflowBaseRequestBuilder) CreatedBy() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/createdBy"
	return bb
}

// LastModifiedBy is navigation property
func (b *WorkflowBaseRequestBuilder) LastModifiedBy() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastModifiedBy"
	return bb
}

// Tasks returns request builder for IdentityGovernance_task collection
func (b *WorkflowBaseRequestBuilder) Tasks() *WorkflowBaseTasksCollectionRequestBuilder {
	bb := &WorkflowBaseTasksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tasks"
	return bb
}

// WorkflowBaseTasksCollectionRequestBuilder is request builder for IdentityGovernance_task collection
type WorkflowBaseTasksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernance_task collection
func (b *WorkflowBaseTasksCollectionRequestBuilder) Request() *WorkflowBaseTasksCollectionRequest {
	return &WorkflowBaseTasksCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernance_task item
func (b *WorkflowBaseTasksCollectionRequestBuilder) ID(id string) *IdentityGovernance_taskRequestBuilder {
	bb := &IdentityGovernance_taskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WorkflowBaseTasksCollectionRequest is request for IdentityGovernance_task collection
type WorkflowBaseTasksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernance_task collection
func (r *WorkflowBaseTasksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernance_task, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernance_task
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernance_task
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernance_task collection, max N pages
func (r *WorkflowBaseTasksCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernance_task, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernance_task collection
func (r *WorkflowBaseTasksCollectionRequest) Get(ctx context.Context) ([]IdentityGovernance_task, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernance_task collection
func (r *WorkflowBaseTasksCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernance_task) (resObj *IdentityGovernance_task, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Tasks returns request builder for IdentityGovernance_task collection
func (b *WorkflowTemplateRequestBuilder) Tasks() *WorkflowTemplateTasksCollectionRequestBuilder {
	bb := &WorkflowTemplateTasksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tasks"
	return bb
}

// WorkflowTemplateTasksCollectionRequestBuilder is request builder for IdentityGovernance_task collection
type WorkflowTemplateTasksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernance_task collection
func (b *WorkflowTemplateTasksCollectionRequestBuilder) Request() *WorkflowTemplateTasksCollectionRequest {
	return &WorkflowTemplateTasksCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernance_task item
func (b *WorkflowTemplateTasksCollectionRequestBuilder) ID(id string) *IdentityGovernance_taskRequestBuilder {
	bb := &IdentityGovernance_taskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WorkflowTemplateTasksCollectionRequest is request for IdentityGovernance_task collection
type WorkflowTemplateTasksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernance_task collection
func (r *WorkflowTemplateTasksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernance_task, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernance_task
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernance_task
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernance_task collection, max N pages
func (r *WorkflowTemplateTasksCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernance_task, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernance_task collection
func (r *WorkflowTemplateTasksCollectionRequest) Get(ctx context.Context) ([]IdentityGovernance_task, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernance_task collection
func (r *WorkflowTemplateTasksCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernance_task) (resObj *IdentityGovernance_task, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
