// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// ApplePushNotificationCertificateGenerateApplePushNotificationCertificateSigningRequestActionRequestParameter undocumented
type ApplePushNotificationCertificateGenerateApplePushNotificationCertificateSigningRequestActionRequestParameter struct {
}

// AppleUserInitiatedEnrollmentProfileSetPriorityRequestParameter undocumented
type AppleUserInitiatedEnrollmentProfileSetPriorityRequestParameter struct {
	// Priority undocumented
	Priority *int `json:"priority,omitempty"`
}

// Assignments returns request builder for AppleEnrollmentProfileAssignment collection
func (b *AppleUserInitiatedEnrollmentProfileRequestBuilder) Assignments() *AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequestBuilder {
	bb := &AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequestBuilder is request builder for AppleEnrollmentProfileAssignment collection rcn
type AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppleEnrollmentProfileAssignment collection
func (b *AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequestBuilder) Request() *AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequest {
	return &AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppleEnrollmentProfileAssignment item
func (b *AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequestBuilder) ID(id string) *AppleEnrollmentProfileAssignmentRequestBuilder {
	bb := &AppleEnrollmentProfileAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequest is request for AppleEnrollmentProfileAssignment collection
type AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppleEnrollmentProfileAssignment collection
func (r *AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppleEnrollmentProfileAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppleEnrollmentProfileAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppleEnrollmentProfileAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppleEnrollmentProfileAssignment collection, max N pages
func (r *AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]AppleEnrollmentProfileAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppleEnrollmentProfileAssignment collection
func (r *AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequest) Get(ctx context.Context) ([]AppleEnrollmentProfileAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppleEnrollmentProfileAssignment collection
func (r *AppleUserInitiatedEnrollmentProfileAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *AppleEnrollmentProfileAssignment) (resObj *AppleEnrollmentProfileAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppleDeviceFeaturesConfigurationBase returns request builder for AppleDeviceFeaturesConfigurationBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AppleDeviceFeaturesConfigurationBase() *DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder is request builder for AppleDeviceFeaturesConfigurationBase collection rcn
type DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppleDeviceFeaturesConfigurationBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppleDeviceFeaturesConfigurationBase item
func (b *DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequestBuilder) ID(id string) *AppleDeviceFeaturesConfigurationBaseRequestBuilder {
	bb := &AppleDeviceFeaturesConfigurationBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequest is request for AppleDeviceFeaturesConfigurationBase collection
type DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppleDeviceFeaturesConfigurationBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppleDeviceFeaturesConfigurationBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppleDeviceFeaturesConfigurationBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppleDeviceFeaturesConfigurationBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppleDeviceFeaturesConfigurationBase collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequest) GetN(ctx context.Context, n int) ([]AppleDeviceFeaturesConfigurationBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppleDeviceFeaturesConfigurationBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequest) Get(ctx context.Context) ([]AppleDeviceFeaturesConfigurationBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppleDeviceFeaturesConfigurationBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAppleDeviceFeaturesConfigurationBaseCollectionRequest) Add(ctx context.Context, reqObj *AppleDeviceFeaturesConfigurationBase) (resObj *AppleDeviceFeaturesConfigurationBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *AppleEnrollmentProfileAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// AppleExpeditedCheckinConfigurationBase returns request builder for AppleExpeditedCheckinConfigurationBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AppleExpeditedCheckinConfigurationBase() *DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequestBuilder is request builder for AppleExpeditedCheckinConfigurationBase collection rcn
type DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppleExpeditedCheckinConfigurationBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppleExpeditedCheckinConfigurationBase item
func (b *DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequestBuilder) ID(id string) *AppleExpeditedCheckinConfigurationBaseRequestBuilder {
	bb := &AppleExpeditedCheckinConfigurationBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequest is request for AppleExpeditedCheckinConfigurationBase collection
type DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppleExpeditedCheckinConfigurationBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppleExpeditedCheckinConfigurationBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppleExpeditedCheckinConfigurationBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppleExpeditedCheckinConfigurationBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppleExpeditedCheckinConfigurationBase collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequest) GetN(ctx context.Context, n int) ([]AppleExpeditedCheckinConfigurationBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppleExpeditedCheckinConfigurationBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequest) Get(ctx context.Context) ([]AppleExpeditedCheckinConfigurationBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppleExpeditedCheckinConfigurationBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAppleExpeditedCheckinConfigurationBaseCollectionRequest) Add(ctx context.Context, reqObj *AppleExpeditedCheckinConfigurationBase) (resObj *AppleExpeditedCheckinConfigurationBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppleManagedIdentityProvider returns request builder for AppleManagedIdentityProvider collection
func (b *B2cIdentityUserFlowUserFlowIdentityProvidersCollectionRequestBuilder) AppleManagedIdentityProvider() *B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequestBuilder {
	bb := &B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequestBuilder is request builder for AppleManagedIdentityProvider collection rcn
type B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppleManagedIdentityProvider collection
func (b *B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequestBuilder) Request() *B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequest {
	return &B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppleManagedIdentityProvider item
func (b *B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequestBuilder) ID(id string) *AppleManagedIdentityProviderRequestBuilder {
	bb := &AppleManagedIdentityProviderRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequest is request for AppleManagedIdentityProvider collection
type B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppleManagedIdentityProvider collection
func (r *B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppleManagedIdentityProvider, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppleManagedIdentityProvider
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppleManagedIdentityProvider
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppleManagedIdentityProvider collection, max N pages
func (r *B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequest) GetN(ctx context.Context, n int) ([]AppleManagedIdentityProvider, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppleManagedIdentityProvider collection
func (r *B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequest) Get(ctx context.Context) ([]AppleManagedIdentityProvider, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppleManagedIdentityProvider collection
func (r *B2cIdentityUserFlowUserFlowIdentityProvidersCollectionAppleManagedIdentityProviderCollectionRequest) Add(ctx context.Context, reqObj *AppleManagedIdentityProvider) (resObj *AppleManagedIdentityProvider, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ApplePushNotificationCertificateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *AppleUserInitiatedEnrollmentProfileRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// AppleVPNConfiguration returns request builder for AppleVPNConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AppleVPNConfiguration() *DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequestBuilder is request builder for AppleVPNConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppleVPNConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppleVPNConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequestBuilder) ID(id string) *AppleVPNConfigurationRequestBuilder {
	bb := &AppleVPNConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequest is request for AppleVPNConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppleVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppleVPNConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppleVPNConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppleVPNConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppleVPNConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AppleVPNConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppleVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequest) Get(ctx context.Context) ([]AppleVPNConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppleVPNConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAppleVPNConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AppleVPNConfiguration) (resObj *AppleVPNConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AppleVPPTokenTroubleshootingEvent returns request builder for AppleVPPTokenTroubleshootingEvent collection
func (b *DeviceManagementTroubleshootingEventsCollectionRequestBuilder) AppleVPPTokenTroubleshootingEvent() *DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequestBuilder {
	bb := &DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequestBuilder is request builder for AppleVPPTokenTroubleshootingEvent collection rcn
type DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppleVPPTokenTroubleshootingEvent collection
func (b *DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequestBuilder) Request() *DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequest {
	return &DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppleVPPTokenTroubleshootingEvent item
func (b *DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequestBuilder) ID(id string) *AppleVPPTokenTroubleshootingEventRequestBuilder {
	bb := &AppleVPPTokenTroubleshootingEventRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequest is request for AppleVPPTokenTroubleshootingEvent collection
type DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppleVPPTokenTroubleshootingEvent collection
func (r *DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppleVPPTokenTroubleshootingEvent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppleVPPTokenTroubleshootingEvent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppleVPPTokenTroubleshootingEvent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppleVPPTokenTroubleshootingEvent collection, max N pages
func (r *DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequest) GetN(ctx context.Context, n int) ([]AppleVPPTokenTroubleshootingEvent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppleVPPTokenTroubleshootingEvent collection
func (r *DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequest) Get(ctx context.Context) ([]AppleVPPTokenTroubleshootingEvent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppleVPPTokenTroubleshootingEvent collection
func (r *DeviceManagementTroubleshootingEventsCollectionAppleVPPTokenTroubleshootingEventCollectionRequest) Add(ctx context.Context, reqObj *AppleVPPTokenTroubleshootingEvent) (resObj *AppleVPPTokenTroubleshootingEvent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
