// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// SigningCertificateUpdateStatusRequestBuilder is request builder for SigningCertificateUpdateStatus
type SigningCertificateUpdateStatusRequestBuilder struct{ BaseRequestBuilder }

// Request returns SigningCertificateUpdateStatusRequest
func (b *SigningCertificateUpdateStatusRequestBuilder) Request() *SigningCertificateUpdateStatusRequest {
	return &SigningCertificateUpdateStatusRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// SigningCertificateUpdateStatusRequest is request for SigningCertificateUpdateStatus
type SigningCertificateUpdateStatusRequest struct{ BaseRequest }

// Get performs GET request for SigningCertificateUpdateStatus
func (r *SigningCertificateUpdateStatusRequest) Get(ctx context.Context) (resObj *SigningCertificateUpdateStatus, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for SigningCertificateUpdateStatus
func (r *SigningCertificateUpdateStatusRequest) Update(ctx context.Context, reqObj *SigningCertificateUpdateStatus) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for SigningCertificateUpdateStatus
func (r *SigningCertificateUpdateStatusRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// SigningResultRequestBuilder is request builder for SigningResult
type SigningResultRequestBuilder struct{ BaseRequestBuilder }

// Request returns SigningResultRequest
func (b *SigningResultRequestBuilder) Request() *SigningResultRequest {
	return &SigningResultRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// SigningResultRequest is request for SigningResult
type SigningResultRequest struct{ BaseRequest }

// Get performs GET request for SigningResult
func (r *SigningResultRequest) Get(ctx context.Context) (resObj *SigningResult, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for SigningResult
func (r *SigningResultRequest) Update(ctx context.Context, reqObj *SigningResult) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for SigningResult
func (r *SigningResultRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
