// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// PrivilegedAccessRequestBuilder is request builder for PrivilegedAccess
type PrivilegedAccessRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessRequest
func (b *PrivilegedAccessRequestBuilder) Request() *PrivilegedAccessRequest {
	return &PrivilegedAccessRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessRequest is request for PrivilegedAccess
type PrivilegedAccessRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccess
func (r *PrivilegedAccessRequest) Get(ctx context.Context) (resObj *PrivilegedAccess, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccess
func (r *PrivilegedAccessRequest) Update(ctx context.Context, reqObj *PrivilegedAccess) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccess
func (r *PrivilegedAccessRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedAccessGroupRequestBuilder is request builder for PrivilegedAccessGroup
type PrivilegedAccessGroupRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessGroupRequest
func (b *PrivilegedAccessGroupRequestBuilder) Request() *PrivilegedAccessGroupRequest {
	return &PrivilegedAccessGroupRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessGroupRequest is request for PrivilegedAccessGroup
type PrivilegedAccessGroupRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccessGroup
func (r *PrivilegedAccessGroupRequest) Get(ctx context.Context) (resObj *PrivilegedAccessGroup, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccessGroup
func (r *PrivilegedAccessGroupRequest) Update(ctx context.Context, reqObj *PrivilegedAccessGroup) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccessGroup
func (r *PrivilegedAccessGroupRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedAccessGroupAssignmentScheduleRequestBuilder is request builder for PrivilegedAccessGroupAssignmentSchedule
type PrivilegedAccessGroupAssignmentScheduleRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessGroupAssignmentScheduleRequest
func (b *PrivilegedAccessGroupAssignmentScheduleRequestBuilder) Request() *PrivilegedAccessGroupAssignmentScheduleRequest {
	return &PrivilegedAccessGroupAssignmentScheduleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessGroupAssignmentScheduleRequest is request for PrivilegedAccessGroupAssignmentSchedule
type PrivilegedAccessGroupAssignmentScheduleRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccessGroupAssignmentSchedule
func (r *PrivilegedAccessGroupAssignmentScheduleRequest) Get(ctx context.Context) (resObj *PrivilegedAccessGroupAssignmentSchedule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccessGroupAssignmentSchedule
func (r *PrivilegedAccessGroupAssignmentScheduleRequest) Update(ctx context.Context, reqObj *PrivilegedAccessGroupAssignmentSchedule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccessGroupAssignmentSchedule
func (r *PrivilegedAccessGroupAssignmentScheduleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedAccessGroupAssignmentScheduleInstanceRequestBuilder is request builder for PrivilegedAccessGroupAssignmentScheduleInstance
type PrivilegedAccessGroupAssignmentScheduleInstanceRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessGroupAssignmentScheduleInstanceRequest
func (b *PrivilegedAccessGroupAssignmentScheduleInstanceRequestBuilder) Request() *PrivilegedAccessGroupAssignmentScheduleInstanceRequest {
	return &PrivilegedAccessGroupAssignmentScheduleInstanceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessGroupAssignmentScheduleInstanceRequest is request for PrivilegedAccessGroupAssignmentScheduleInstance
type PrivilegedAccessGroupAssignmentScheduleInstanceRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccessGroupAssignmentScheduleInstance
func (r *PrivilegedAccessGroupAssignmentScheduleInstanceRequest) Get(ctx context.Context) (resObj *PrivilegedAccessGroupAssignmentScheduleInstance, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccessGroupAssignmentScheduleInstance
func (r *PrivilegedAccessGroupAssignmentScheduleInstanceRequest) Update(ctx context.Context, reqObj *PrivilegedAccessGroupAssignmentScheduleInstance) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccessGroupAssignmentScheduleInstance
func (r *PrivilegedAccessGroupAssignmentScheduleInstanceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedAccessGroupAssignmentScheduleRequestObjectRequestBuilder is request builder for PrivilegedAccessGroupAssignmentScheduleRequestObject
type PrivilegedAccessGroupAssignmentScheduleRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessGroupAssignmentScheduleRequestObjectRequest
func (b *PrivilegedAccessGroupAssignmentScheduleRequestObjectRequestBuilder) Request() *PrivilegedAccessGroupAssignmentScheduleRequestObjectRequest {
	return &PrivilegedAccessGroupAssignmentScheduleRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessGroupAssignmentScheduleRequestObjectRequest is request for PrivilegedAccessGroupAssignmentScheduleRequestObject
type PrivilegedAccessGroupAssignmentScheduleRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccessGroupAssignmentScheduleRequestObject
func (r *PrivilegedAccessGroupAssignmentScheduleRequestObjectRequest) Get(ctx context.Context) (resObj *PrivilegedAccessGroupAssignmentScheduleRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccessGroupAssignmentScheduleRequestObject
func (r *PrivilegedAccessGroupAssignmentScheduleRequestObjectRequest) Update(ctx context.Context, reqObj *PrivilegedAccessGroupAssignmentScheduleRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccessGroupAssignmentScheduleRequestObject
func (r *PrivilegedAccessGroupAssignmentScheduleRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedAccessGroupEligibilityScheduleRequestBuilder is request builder for PrivilegedAccessGroupEligibilitySchedule
type PrivilegedAccessGroupEligibilityScheduleRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessGroupEligibilityScheduleRequest
func (b *PrivilegedAccessGroupEligibilityScheduleRequestBuilder) Request() *PrivilegedAccessGroupEligibilityScheduleRequest {
	return &PrivilegedAccessGroupEligibilityScheduleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessGroupEligibilityScheduleRequest is request for PrivilegedAccessGroupEligibilitySchedule
type PrivilegedAccessGroupEligibilityScheduleRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccessGroupEligibilitySchedule
func (r *PrivilegedAccessGroupEligibilityScheduleRequest) Get(ctx context.Context) (resObj *PrivilegedAccessGroupEligibilitySchedule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccessGroupEligibilitySchedule
func (r *PrivilegedAccessGroupEligibilityScheduleRequest) Update(ctx context.Context, reqObj *PrivilegedAccessGroupEligibilitySchedule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccessGroupEligibilitySchedule
func (r *PrivilegedAccessGroupEligibilityScheduleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedAccessGroupEligibilityScheduleInstanceRequestBuilder is request builder for PrivilegedAccessGroupEligibilityScheduleInstance
type PrivilegedAccessGroupEligibilityScheduleInstanceRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessGroupEligibilityScheduleInstanceRequest
func (b *PrivilegedAccessGroupEligibilityScheduleInstanceRequestBuilder) Request() *PrivilegedAccessGroupEligibilityScheduleInstanceRequest {
	return &PrivilegedAccessGroupEligibilityScheduleInstanceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessGroupEligibilityScheduleInstanceRequest is request for PrivilegedAccessGroupEligibilityScheduleInstance
type PrivilegedAccessGroupEligibilityScheduleInstanceRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccessGroupEligibilityScheduleInstance
func (r *PrivilegedAccessGroupEligibilityScheduleInstanceRequest) Get(ctx context.Context) (resObj *PrivilegedAccessGroupEligibilityScheduleInstance, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccessGroupEligibilityScheduleInstance
func (r *PrivilegedAccessGroupEligibilityScheduleInstanceRequest) Update(ctx context.Context, reqObj *PrivilegedAccessGroupEligibilityScheduleInstance) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccessGroupEligibilityScheduleInstance
func (r *PrivilegedAccessGroupEligibilityScheduleInstanceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedAccessGroupEligibilityScheduleRequestObjectRequestBuilder is request builder for PrivilegedAccessGroupEligibilityScheduleRequestObject
type PrivilegedAccessGroupEligibilityScheduleRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessGroupEligibilityScheduleRequestObjectRequest
func (b *PrivilegedAccessGroupEligibilityScheduleRequestObjectRequestBuilder) Request() *PrivilegedAccessGroupEligibilityScheduleRequestObjectRequest {
	return &PrivilegedAccessGroupEligibilityScheduleRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessGroupEligibilityScheduleRequestObjectRequest is request for PrivilegedAccessGroupEligibilityScheduleRequestObject
type PrivilegedAccessGroupEligibilityScheduleRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccessGroupEligibilityScheduleRequestObject
func (r *PrivilegedAccessGroupEligibilityScheduleRequestObjectRequest) Get(ctx context.Context) (resObj *PrivilegedAccessGroupEligibilityScheduleRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccessGroupEligibilityScheduleRequestObject
func (r *PrivilegedAccessGroupEligibilityScheduleRequestObjectRequest) Update(ctx context.Context, reqObj *PrivilegedAccessGroupEligibilityScheduleRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccessGroupEligibilityScheduleRequestObject
func (r *PrivilegedAccessGroupEligibilityScheduleRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedAccessRootRequestBuilder is request builder for PrivilegedAccessRoot
type PrivilegedAccessRootRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessRootRequest
func (b *PrivilegedAccessRootRequestBuilder) Request() *PrivilegedAccessRootRequest {
	return &PrivilegedAccessRootRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessRootRequest is request for PrivilegedAccessRoot
type PrivilegedAccessRootRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccessRoot
func (r *PrivilegedAccessRootRequest) Get(ctx context.Context) (resObj *PrivilegedAccessRoot, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccessRoot
func (r *PrivilegedAccessRootRequest) Update(ctx context.Context, reqObj *PrivilegedAccessRoot) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccessRoot
func (r *PrivilegedAccessRootRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedAccessScheduleRequestBuilder is request builder for PrivilegedAccessSchedule
type PrivilegedAccessScheduleRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessScheduleRequest
func (b *PrivilegedAccessScheduleRequestBuilder) Request() *PrivilegedAccessScheduleRequest {
	return &PrivilegedAccessScheduleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessScheduleRequest is request for PrivilegedAccessSchedule
type PrivilegedAccessScheduleRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccessSchedule
func (r *PrivilegedAccessScheduleRequest) Get(ctx context.Context) (resObj *PrivilegedAccessSchedule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccessSchedule
func (r *PrivilegedAccessScheduleRequest) Update(ctx context.Context, reqObj *PrivilegedAccessSchedule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccessSchedule
func (r *PrivilegedAccessScheduleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedAccessScheduleInstanceRequestBuilder is request builder for PrivilegedAccessScheduleInstance
type PrivilegedAccessScheduleInstanceRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessScheduleInstanceRequest
func (b *PrivilegedAccessScheduleInstanceRequestBuilder) Request() *PrivilegedAccessScheduleInstanceRequest {
	return &PrivilegedAccessScheduleInstanceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessScheduleInstanceRequest is request for PrivilegedAccessScheduleInstance
type PrivilegedAccessScheduleInstanceRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccessScheduleInstance
func (r *PrivilegedAccessScheduleInstanceRequest) Get(ctx context.Context) (resObj *PrivilegedAccessScheduleInstance, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccessScheduleInstance
func (r *PrivilegedAccessScheduleInstanceRequest) Update(ctx context.Context, reqObj *PrivilegedAccessScheduleInstance) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccessScheduleInstance
func (r *PrivilegedAccessScheduleInstanceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedAccessScheduleRequestObjectRequestBuilder is request builder for PrivilegedAccessScheduleRequestObject
type PrivilegedAccessScheduleRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedAccessScheduleRequestObjectRequest
func (b *PrivilegedAccessScheduleRequestObjectRequestBuilder) Request() *PrivilegedAccessScheduleRequestObjectRequest {
	return &PrivilegedAccessScheduleRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedAccessScheduleRequestObjectRequest is request for PrivilegedAccessScheduleRequestObject
type PrivilegedAccessScheduleRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedAccessScheduleRequestObject
func (r *PrivilegedAccessScheduleRequestObjectRequest) Get(ctx context.Context) (resObj *PrivilegedAccessScheduleRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedAccessScheduleRequestObject
func (r *PrivilegedAccessScheduleRequestObjectRequest) Update(ctx context.Context, reqObj *PrivilegedAccessScheduleRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedAccessScheduleRequestObject
func (r *PrivilegedAccessScheduleRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedApprovalRequestBuilder is request builder for PrivilegedApproval
type PrivilegedApprovalRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedApprovalRequest
func (b *PrivilegedApprovalRequestBuilder) Request() *PrivilegedApprovalRequest {
	return &PrivilegedApprovalRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedApprovalRequest is request for PrivilegedApproval
type PrivilegedApprovalRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedApproval
func (r *PrivilegedApprovalRequest) Get(ctx context.Context) (resObj *PrivilegedApproval, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedApproval
func (r *PrivilegedApprovalRequest) Update(ctx context.Context, reqObj *PrivilegedApproval) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedApproval
func (r *PrivilegedApprovalRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedOperationEventRequestBuilder is request builder for PrivilegedOperationEvent
type PrivilegedOperationEventRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedOperationEventRequest
func (b *PrivilegedOperationEventRequestBuilder) Request() *PrivilegedOperationEventRequest {
	return &PrivilegedOperationEventRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedOperationEventRequest is request for PrivilegedOperationEvent
type PrivilegedOperationEventRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedOperationEvent
func (r *PrivilegedOperationEventRequest) Get(ctx context.Context) (resObj *PrivilegedOperationEvent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedOperationEvent
func (r *PrivilegedOperationEventRequest) Update(ctx context.Context, reqObj *PrivilegedOperationEvent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedOperationEvent
func (r *PrivilegedOperationEventRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedRoleRequestBuilder is request builder for PrivilegedRole
type PrivilegedRoleRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedRoleRequest
func (b *PrivilegedRoleRequestBuilder) Request() *PrivilegedRoleRequest {
	return &PrivilegedRoleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedRoleRequest is request for PrivilegedRole
type PrivilegedRoleRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedRole
func (r *PrivilegedRoleRequest) Get(ctx context.Context) (resObj *PrivilegedRole, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedRole
func (r *PrivilegedRoleRequest) Update(ctx context.Context, reqObj *PrivilegedRole) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedRole
func (r *PrivilegedRoleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedRoleAssignmentRequestBuilder is request builder for PrivilegedRoleAssignment
type PrivilegedRoleAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedRoleAssignmentRequest
func (b *PrivilegedRoleAssignmentRequestBuilder) Request() *PrivilegedRoleAssignmentRequest {
	return &PrivilegedRoleAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedRoleAssignmentRequest is request for PrivilegedRoleAssignment
type PrivilegedRoleAssignmentRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedRoleAssignment
func (r *PrivilegedRoleAssignmentRequest) Get(ctx context.Context) (resObj *PrivilegedRoleAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedRoleAssignment
func (r *PrivilegedRoleAssignmentRequest) Update(ctx context.Context, reqObj *PrivilegedRoleAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedRoleAssignment
func (r *PrivilegedRoleAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedRoleAssignmentRequestRequestBuilder is request builder for PrivilegedRoleAssignmentRequest
type PrivilegedRoleAssignmentRequestRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedRoleAssignmentRequestRequest
func (b *PrivilegedRoleAssignmentRequestRequestBuilder) Request() *PrivilegedRoleAssignmentRequestRequest {
	return &PrivilegedRoleAssignmentRequestRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedRoleAssignmentRequestRequest is request for PrivilegedRoleAssignmentRequest
type PrivilegedRoleAssignmentRequestRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedRoleAssignmentRequest
func (r *PrivilegedRoleAssignmentRequestRequest) Get(ctx context.Context) (resObj *PrivilegedRoleAssignmentRequest, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedRoleAssignmentRequest
func (r *PrivilegedRoleAssignmentRequestRequest) Update(ctx context.Context, reqObj *PrivilegedRoleAssignmentRequest) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedRoleAssignmentRequest
func (r *PrivilegedRoleAssignmentRequestRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedRoleAssignmentRequestObjectRequestBuilder is request builder for PrivilegedRoleAssignmentRequestObject
type PrivilegedRoleAssignmentRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedRoleAssignmentRequestObjectRequest
func (b *PrivilegedRoleAssignmentRequestObjectRequestBuilder) Request() *PrivilegedRoleAssignmentRequestObjectRequest {
	return &PrivilegedRoleAssignmentRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedRoleAssignmentRequestObjectRequest is request for PrivilegedRoleAssignmentRequestObject
type PrivilegedRoleAssignmentRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedRoleAssignmentRequestObject
func (r *PrivilegedRoleAssignmentRequestObjectRequest) Get(ctx context.Context) (resObj *PrivilegedRoleAssignmentRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedRoleAssignmentRequestObject
func (r *PrivilegedRoleAssignmentRequestObjectRequest) Update(ctx context.Context, reqObj *PrivilegedRoleAssignmentRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedRoleAssignmentRequestObject
func (r *PrivilegedRoleAssignmentRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedRoleSettingsRequestBuilder is request builder for PrivilegedRoleSettings
type PrivilegedRoleSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedRoleSettingsRequest
func (b *PrivilegedRoleSettingsRequestBuilder) Request() *PrivilegedRoleSettingsRequest {
	return &PrivilegedRoleSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedRoleSettingsRequest is request for PrivilegedRoleSettings
type PrivilegedRoleSettingsRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedRoleSettings
func (r *PrivilegedRoleSettingsRequest) Get(ctx context.Context) (resObj *PrivilegedRoleSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedRoleSettings
func (r *PrivilegedRoleSettingsRequest) Update(ctx context.Context, reqObj *PrivilegedRoleSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedRoleSettings
func (r *PrivilegedRoleSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedRoleSummaryRequestBuilder is request builder for PrivilegedRoleSummary
type PrivilegedRoleSummaryRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedRoleSummaryRequest
func (b *PrivilegedRoleSummaryRequestBuilder) Request() *PrivilegedRoleSummaryRequest {
	return &PrivilegedRoleSummaryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedRoleSummaryRequest is request for PrivilegedRoleSummary
type PrivilegedRoleSummaryRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedRoleSummary
func (r *PrivilegedRoleSummaryRequest) Get(ctx context.Context) (resObj *PrivilegedRoleSummary, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedRoleSummary
func (r *PrivilegedRoleSummaryRequest) Update(ctx context.Context, reqObj *PrivilegedRoleSummary) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedRoleSummary
func (r *PrivilegedRoleSummaryRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PrivilegedSignupStatusRequestBuilder is request builder for PrivilegedSignupStatus
type PrivilegedSignupStatusRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedSignupStatusRequest
func (b *PrivilegedSignupStatusRequestBuilder) Request() *PrivilegedSignupStatusRequest {
	return &PrivilegedSignupStatusRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedSignupStatusRequest is request for PrivilegedSignupStatus
type PrivilegedSignupStatusRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedSignupStatus
func (r *PrivilegedSignupStatusRequest) Get(ctx context.Context) (resObj *PrivilegedSignupStatus, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedSignupStatus
func (r *PrivilegedSignupStatusRequest) Update(ctx context.Context, reqObj *PrivilegedSignupStatus) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedSignupStatus
func (r *PrivilegedSignupStatusRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type PrivilegedAccessGroupAssignmentScheduleRequestObjectCancelRequestBuilder struct{ BaseRequestBuilder }

// Cancel action undocumentedrav
func (b *PrivilegedAccessGroupAssignmentScheduleRequestObjectRequestBuilder) Cancel(reqObj *PrivilegedAccessGroupAssignmentScheduleRequestObjectCancelRequestParameter) *PrivilegedAccessGroupAssignmentScheduleRequestObjectCancelRequestBuilder {
	bb := &PrivilegedAccessGroupAssignmentScheduleRequestObjectCancelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Cancel"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type PrivilegedAccessGroupAssignmentScheduleRequestObjectCancelRequest struct{ BaseRequest }

func (b *PrivilegedAccessGroupAssignmentScheduleRequestObjectCancelRequestBuilder) Request() *PrivilegedAccessGroupAssignmentScheduleRequestObjectCancelRequest {
	return &PrivilegedAccessGroupAssignmentScheduleRequestObjectCancelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *PrivilegedAccessGroupAssignmentScheduleRequestObjectCancelRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type PrivilegedAccessGroupEligibilityScheduleRequestObjectCancelRequestBuilder struct{ BaseRequestBuilder }

// Cancel action undocumentedrav
func (b *PrivilegedAccessGroupEligibilityScheduleRequestObjectRequestBuilder) Cancel(reqObj *PrivilegedAccessGroupEligibilityScheduleRequestObjectCancelRequestParameter) *PrivilegedAccessGroupEligibilityScheduleRequestObjectCancelRequestBuilder {
	bb := &PrivilegedAccessGroupEligibilityScheduleRequestObjectCancelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Cancel"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type PrivilegedAccessGroupEligibilityScheduleRequestObjectCancelRequest struct{ BaseRequest }

func (b *PrivilegedAccessGroupEligibilityScheduleRequestObjectCancelRequestBuilder) Request() *PrivilegedAccessGroupEligibilityScheduleRequestObjectCancelRequest {
	return &PrivilegedAccessGroupEligibilityScheduleRequestObjectCancelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *PrivilegedAccessGroupEligibilityScheduleRequestObjectCancelRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type PrivilegedRoleSelfActivateRequestBuilder struct{ BaseRequestBuilder }

// SelfActivate action undocumentedras
func (b *PrivilegedRoleRequestBuilder) SelfActivate(reqObj *PrivilegedRoleSelfActivateRequestParameter) *PrivilegedRoleSelfActivateRequestBuilder {
	bb := &PrivilegedRoleSelfActivateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/SelfActivate"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type PrivilegedRoleSelfActivateRequest struct{ BaseRequest }

func (b *PrivilegedRoleSelfActivateRequestBuilder) Request() *PrivilegedRoleSelfActivateRequest {
	return &PrivilegedRoleSelfActivateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *PrivilegedRoleSelfActivateRequest) Post(ctx context.Context) (resObj *PrivilegedRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type PrivilegedRoleSelfDeactivateRequestBuilder struct{ BaseRequestBuilder }

// SelfDeactivate action undocumentedras
func (b *PrivilegedRoleRequestBuilder) SelfDeactivate(reqObj *PrivilegedRoleSelfDeactivateRequestParameter) *PrivilegedRoleSelfDeactivateRequestBuilder {
	bb := &PrivilegedRoleSelfDeactivateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/SelfDeactivate"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type PrivilegedRoleSelfDeactivateRequest struct{ BaseRequest }

func (b *PrivilegedRoleSelfDeactivateRequestBuilder) Request() *PrivilegedRoleSelfDeactivateRequest {
	return &PrivilegedRoleSelfDeactivateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *PrivilegedRoleSelfDeactivateRequest) Post(ctx context.Context) (resObj *PrivilegedRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type PrivilegedRoleAssignmentMakeEligibleRequestBuilder struct{ BaseRequestBuilder }

// MakeEligible action undocumentedras
func (b *PrivilegedRoleAssignmentRequestBuilder) MakeEligible(reqObj *PrivilegedRoleAssignmentMakeEligibleRequestParameter) *PrivilegedRoleAssignmentMakeEligibleRequestBuilder {
	bb := &PrivilegedRoleAssignmentMakeEligibleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/MakeEligible"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type PrivilegedRoleAssignmentMakeEligibleRequest struct{ BaseRequest }

func (b *PrivilegedRoleAssignmentMakeEligibleRequestBuilder) Request() *PrivilegedRoleAssignmentMakeEligibleRequest {
	return &PrivilegedRoleAssignmentMakeEligibleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *PrivilegedRoleAssignmentMakeEligibleRequest) Post(ctx context.Context) (resObj *PrivilegedRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type PrivilegedRoleAssignmentMakePermanentRequestBuilder struct{ BaseRequestBuilder }

// MakePermanent action undocumentedras
func (b *PrivilegedRoleAssignmentRequestBuilder) MakePermanent(reqObj *PrivilegedRoleAssignmentMakePermanentRequestParameter) *PrivilegedRoleAssignmentMakePermanentRequestBuilder {
	bb := &PrivilegedRoleAssignmentMakePermanentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/MakePermanent"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type PrivilegedRoleAssignmentMakePermanentRequest struct{ BaseRequest }

func (b *PrivilegedRoleAssignmentMakePermanentRequestBuilder) Request() *PrivilegedRoleAssignmentMakePermanentRequest {
	return &PrivilegedRoleAssignmentMakePermanentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *PrivilegedRoleAssignmentMakePermanentRequest) Post(ctx context.Context) (resObj *PrivilegedRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type PrivilegedRoleAssignmentRequestObjectCancelRequestBuilder struct{ BaseRequestBuilder }

// Cancel action undocumentedras
func (b *PrivilegedRoleAssignmentRequestObjectRequestBuilder) Cancel(reqObj *PrivilegedRoleAssignmentRequestObjectCancelRequestParameter) *PrivilegedRoleAssignmentRequestObjectCancelRequestBuilder {
	bb := &PrivilegedRoleAssignmentRequestObjectCancelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Cancel"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type PrivilegedRoleAssignmentRequestObjectCancelRequest struct{ BaseRequest }

func (b *PrivilegedRoleAssignmentRequestObjectCancelRequestBuilder) Request() *PrivilegedRoleAssignmentRequestObjectCancelRequest {
	return &PrivilegedRoleAssignmentRequestObjectCancelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *PrivilegedRoleAssignmentRequestObjectCancelRequest) Post(ctx context.Context) (resObj *PrivilegedRoleAssignmentRequest, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}
