// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// IOSLobAppProvisioningConfigurationCollectionHasPayloadLinksRequestParameter undocumented
type IOSLobAppProvisioningConfigurationCollectionHasPayloadLinksRequestParameter struct {
	// PayloadIDs undocumented
	PayloadIDs []string `json:"payloadIds,omitempty"`
}

// IOSManagedAppProtectionCollectionHasPayloadLinksRequestParameter undocumented
type IOSManagedAppProtectionCollectionHasPayloadLinksRequestParameter struct {
	// PayloadIDs undocumented
	PayloadIDs []string `json:"payloadIds,omitempty"`
}

// IOSLobAppProvisioningConfigurationAssignRequestParameter undocumented
type IOSLobAppProvisioningConfigurationAssignRequestParameter struct {
	// AppProvisioningConfigurationGroupAssignments undocumented
	AppProvisioningConfigurationGroupAssignments []MobileAppProvisioningConfigGroupAssignment `json:"appProvisioningConfigurationGroupAssignments,omitempty"`
	// IOSLobAppProvisioningConfigAssignments undocumented
	IOSLobAppProvisioningConfigAssignments []IOSLobAppProvisioningConfigurationAssignment `json:"iOSLobAppProvisioningConfigAssignments,omitempty"`
}

// IOSVPPAppRevokeAllLicensesRequestParameter undocumented
type IOSVPPAppRevokeAllLicensesRequestParameter struct {
	// NotifyManagedDevices undocumented
	NotifyManagedDevices *bool `json:"notifyManagedDevices,omitempty"`
}

// IOSVPPAppRevokeDeviceLicenseRequestParameter undocumented
type IOSVPPAppRevokeDeviceLicenseRequestParameter struct {
	// ManagedDeviceID undocumented
	ManagedDeviceID *string `json:"managedDeviceId,omitempty"`
	// NotifyManagedDevices undocumented
	NotifyManagedDevices *bool `json:"notifyManagedDevices,omitempty"`
}

// IOSVPPAppRevokeUserLicenseRequestParameter undocumented
type IOSVPPAppRevokeUserLicenseRequestParameter struct {
	// UserID undocumented
	UserID *string `json:"userId,omitempty"`
	// NotifyManagedDevices undocumented
	NotifyManagedDevices *bool `json:"notifyManagedDevices,omitempty"`
}

// DerivedCredentialSettings is navigation property rn
func (b *IOSDerivedCredentialAuthenticationConfigurationRequestBuilder) DerivedCredentialSettings() *DeviceManagementDerivedCredentialSettingsRequestBuilder {
	bb := &DeviceManagementDerivedCredentialSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/derivedCredentialSettings"
	return bb
}

// IdentityCertificateForClientAuthentication is navigation property rn
func (b *IOSDeviceFeaturesConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *IOSCertificateProfileBaseRequestBuilder {
	bb := &IOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// SingleSignOnExtensionPkinitCertificate is navigation property rn
func (b *IOSDeviceFeaturesConfigurationRequestBuilder) SingleSignOnExtensionPkinitCertificate() *IOSCertificateProfileBaseRequestBuilder {
	bb := &IOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/singleSignOnExtensionPkinitCertificate"
	return bb
}

// DerivedCredentialSettings is navigation property rn
func (b *IOSEasEmailProfileConfigurationRequestBuilder) DerivedCredentialSettings() *DeviceManagementDerivedCredentialSettingsRequestBuilder {
	bb := &DeviceManagementDerivedCredentialSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/derivedCredentialSettings"
	return bb
}

// IdentityCertificate is navigation property rn
func (b *IOSEasEmailProfileConfigurationRequestBuilder) IdentityCertificate() *IOSCertificateProfileBaseRequestBuilder {
	bb := &IOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}

// SmimeEncryptionCertificate is navigation property rn
func (b *IOSEasEmailProfileConfigurationRequestBuilder) SmimeEncryptionCertificate() *IOSCertificateProfileRequestBuilder {
	bb := &IOSCertificateProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/smimeEncryptionCertificate"
	return bb
}

// SmimeSigningCertificate is navigation property rn
func (b *IOSEasEmailProfileConfigurationRequestBuilder) SmimeSigningCertificate() *IOSCertificateProfileRequestBuilder {
	bb := &IOSCertificateProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/smimeSigningCertificate"
	return bb
}

// DerivedCredentialSettings is navigation property rn
func (b *IOSEnterpriseWiFiConfigurationRequestBuilder) DerivedCredentialSettings() *DeviceManagementDerivedCredentialSettingsRequestBuilder {
	bb := &DeviceManagementDerivedCredentialSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/derivedCredentialSettings"
	return bb
}

// IdentityCertificateForClientAuthentication is navigation property rn
func (b *IOSEnterpriseWiFiConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *IOSCertificateProfileBaseRequestBuilder {
	bb := &IOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// RootCertificatesForServerValidation returns request builder for IOSTrustedRootCertificate collection
func (b *IOSEnterpriseWiFiConfigurationRequestBuilder) RootCertificatesForServerValidation() *IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder {
	bb := &IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificatesForServerValidation"
	return bb
}

// IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder is request builder for IOSTrustedRootCertificate collection rcn
type IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSTrustedRootCertificate collection
func (b *IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder) Request() *IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest {
	return &IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSTrustedRootCertificate item
func (b *IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder) ID(id string) *IOSTrustedRootCertificateRequestBuilder {
	bb := &IOSTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest is request for IOSTrustedRootCertificate collection
type IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSTrustedRootCertificate collection
func (r *IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSTrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSTrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSTrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSTrustedRootCertificate collection, max N pages
func (r *IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSTrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSTrustedRootCertificate collection
func (r *IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest) Get(ctx context.Context) ([]IOSTrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSTrustedRootCertificate collection
func (r *IOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest) Add(ctx context.Context, reqObj *IOSTrustedRootCertificate) (resObj *IOSTrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *IOSImportedPFXCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *IOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for IOSLobAppProvisioningConfigurationAssignment collection
func (b *IOSLobAppProvisioningConfigurationRequestBuilder) Assignments() *IOSLobAppProvisioningConfigurationAssignmentsCollectionRequestBuilder {
	bb := &IOSLobAppProvisioningConfigurationAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// IOSLobAppProvisioningConfigurationAssignmentsCollectionRequestBuilder is request builder for IOSLobAppProvisioningConfigurationAssignment collection rcn
type IOSLobAppProvisioningConfigurationAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSLobAppProvisioningConfigurationAssignment collection
func (b *IOSLobAppProvisioningConfigurationAssignmentsCollectionRequestBuilder) Request() *IOSLobAppProvisioningConfigurationAssignmentsCollectionRequest {
	return &IOSLobAppProvisioningConfigurationAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSLobAppProvisioningConfigurationAssignment item
func (b *IOSLobAppProvisioningConfigurationAssignmentsCollectionRequestBuilder) ID(id string) *IOSLobAppProvisioningConfigurationAssignmentRequestBuilder {
	bb := &IOSLobAppProvisioningConfigurationAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSLobAppProvisioningConfigurationAssignmentsCollectionRequest is request for IOSLobAppProvisioningConfigurationAssignment collection
type IOSLobAppProvisioningConfigurationAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSLobAppProvisioningConfigurationAssignment collection
func (r *IOSLobAppProvisioningConfigurationAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSLobAppProvisioningConfigurationAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSLobAppProvisioningConfigurationAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSLobAppProvisioningConfigurationAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSLobAppProvisioningConfigurationAssignment collection, max N pages
func (r *IOSLobAppProvisioningConfigurationAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]IOSLobAppProvisioningConfigurationAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSLobAppProvisioningConfigurationAssignment collection
func (r *IOSLobAppProvisioningConfigurationAssignmentsCollectionRequest) Get(ctx context.Context) ([]IOSLobAppProvisioningConfigurationAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSLobAppProvisioningConfigurationAssignment collection
func (r *IOSLobAppProvisioningConfigurationAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *IOSLobAppProvisioningConfigurationAssignment) (resObj *IOSLobAppProvisioningConfigurationAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceStatuses returns request builder for ManagedDeviceMobileAppConfigurationDeviceStatus collection
func (b *IOSLobAppProvisioningConfigurationRequestBuilder) DeviceStatuses() *IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequestBuilder {
	bb := &IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStatuses"
	return bb
}

// IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequestBuilder is request builder for ManagedDeviceMobileAppConfigurationDeviceStatus collection rcn
type IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceMobileAppConfigurationDeviceStatus collection
func (b *IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequestBuilder) Request() *IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequest {
	return &IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceMobileAppConfigurationDeviceStatus item
func (b *IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequestBuilder) ID(id string) *ManagedDeviceMobileAppConfigurationDeviceStatusRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationDeviceStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequest is request for ManagedDeviceMobileAppConfigurationDeviceStatus collection
type IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceMobileAppConfigurationDeviceStatus collection
func (r *IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceMobileAppConfigurationDeviceStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceMobileAppConfigurationDeviceStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceMobileAppConfigurationDeviceStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceMobileAppConfigurationDeviceStatus collection, max N pages
func (r *IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceMobileAppConfigurationDeviceStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceMobileAppConfigurationDeviceStatus collection
func (r *IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceMobileAppConfigurationDeviceStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceMobileAppConfigurationDeviceStatus collection
func (r *IOSLobAppProvisioningConfigurationDeviceStatusesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceMobileAppConfigurationDeviceStatus) (resObj *ManagedDeviceMobileAppConfigurationDeviceStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GroupAssignments returns request builder for MobileAppProvisioningConfigGroupAssignment collection
func (b *IOSLobAppProvisioningConfigurationRequestBuilder) GroupAssignments() *IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequestBuilder {
	bb := &IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/groupAssignments"
	return bb
}

// IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequestBuilder is request builder for MobileAppProvisioningConfigGroupAssignment collection rcn
type IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MobileAppProvisioningConfigGroupAssignment collection
func (b *IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequestBuilder) Request() *IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequest {
	return &IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MobileAppProvisioningConfigGroupAssignment item
func (b *IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequestBuilder) ID(id string) *MobileAppProvisioningConfigGroupAssignmentRequestBuilder {
	bb := &MobileAppProvisioningConfigGroupAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequest is request for MobileAppProvisioningConfigGroupAssignment collection
type IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MobileAppProvisioningConfigGroupAssignment collection
func (r *IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MobileAppProvisioningConfigGroupAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MobileAppProvisioningConfigGroupAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MobileAppProvisioningConfigGroupAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MobileAppProvisioningConfigGroupAssignment collection, max N pages
func (r *IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]MobileAppProvisioningConfigGroupAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MobileAppProvisioningConfigGroupAssignment collection
func (r *IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequest) Get(ctx context.Context) ([]MobileAppProvisioningConfigGroupAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MobileAppProvisioningConfigGroupAssignment collection
func (r *IOSLobAppProvisioningConfigurationGroupAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *MobileAppProvisioningConfigGroupAssignment) (resObj *MobileAppProvisioningConfigGroupAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserStatuses returns request builder for ManagedDeviceMobileAppConfigurationUserStatus collection
func (b *IOSLobAppProvisioningConfigurationRequestBuilder) UserStatuses() *IOSLobAppProvisioningConfigurationUserStatusesCollectionRequestBuilder {
	bb := &IOSLobAppProvisioningConfigurationUserStatusesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userStatuses"
	return bb
}

// IOSLobAppProvisioningConfigurationUserStatusesCollectionRequestBuilder is request builder for ManagedDeviceMobileAppConfigurationUserStatus collection rcn
type IOSLobAppProvisioningConfigurationUserStatusesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceMobileAppConfigurationUserStatus collection
func (b *IOSLobAppProvisioningConfigurationUserStatusesCollectionRequestBuilder) Request() *IOSLobAppProvisioningConfigurationUserStatusesCollectionRequest {
	return &IOSLobAppProvisioningConfigurationUserStatusesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceMobileAppConfigurationUserStatus item
func (b *IOSLobAppProvisioningConfigurationUserStatusesCollectionRequestBuilder) ID(id string) *ManagedDeviceMobileAppConfigurationUserStatusRequestBuilder {
	bb := &ManagedDeviceMobileAppConfigurationUserStatusRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSLobAppProvisioningConfigurationUserStatusesCollectionRequest is request for ManagedDeviceMobileAppConfigurationUserStatus collection
type IOSLobAppProvisioningConfigurationUserStatusesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceMobileAppConfigurationUserStatus collection
func (r *IOSLobAppProvisioningConfigurationUserStatusesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceMobileAppConfigurationUserStatus, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceMobileAppConfigurationUserStatus
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceMobileAppConfigurationUserStatus
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceMobileAppConfigurationUserStatus collection, max N pages
func (r *IOSLobAppProvisioningConfigurationUserStatusesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceMobileAppConfigurationUserStatus, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceMobileAppConfigurationUserStatus collection
func (r *IOSLobAppProvisioningConfigurationUserStatusesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceMobileAppConfigurationUserStatus, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceMobileAppConfigurationUserStatus collection
func (r *IOSLobAppProvisioningConfigurationUserStatusesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceMobileAppConfigurationUserStatus) (resObj *ManagedDeviceMobileAppConfigurationUserStatus, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Apps returns request builder for ManagedMobileApp collection
func (b *IOSManagedAppProtectionRequestBuilder) Apps() *IOSManagedAppProtectionAppsCollectionRequestBuilder {
	bb := &IOSManagedAppProtectionAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/apps"
	return bb
}

// IOSManagedAppProtectionAppsCollectionRequestBuilder is request builder for ManagedMobileApp collection rcn
type IOSManagedAppProtectionAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedMobileApp collection
func (b *IOSManagedAppProtectionAppsCollectionRequestBuilder) Request() *IOSManagedAppProtectionAppsCollectionRequest {
	return &IOSManagedAppProtectionAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedMobileApp item
func (b *IOSManagedAppProtectionAppsCollectionRequestBuilder) ID(id string) *ManagedMobileAppRequestBuilder {
	bb := &ManagedMobileAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSManagedAppProtectionAppsCollectionRequest is request for ManagedMobileApp collection
type IOSManagedAppProtectionAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedMobileApp collection
func (r *IOSManagedAppProtectionAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedMobileApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedMobileApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedMobileApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedMobileApp collection, max N pages
func (r *IOSManagedAppProtectionAppsCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedMobileApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedMobileApp collection
func (r *IOSManagedAppProtectionAppsCollectionRequest) Get(ctx context.Context) ([]ManagedMobileApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedMobileApp collection
func (r *IOSManagedAppProtectionAppsCollectionRequest) Add(ctx context.Context, reqObj *ManagedMobileApp) (resObj *ManagedMobileApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeploymentSummary is navigation property rn
func (b *IOSManagedAppProtectionRequestBuilder) DeploymentSummary() *ManagedAppPolicyDeploymentSummaryRequestBuilder {
	bb := &ManagedAppPolicyDeploymentSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deploymentSummary"
	return bb
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *IOSPkcsCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *IOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *IOSScepCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *IOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RootCertificate is navigation property rn
func (b *IOSScepCertificateProfileRequestBuilder) RootCertificate() *IOSTrustedRootCertificateRequestBuilder {
	bb := &IOSTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificate"
	return bb
}

// DerivedCredentialSettings is navigation property rn
func (b *IOSVPNConfigurationRequestBuilder) DerivedCredentialSettings() *DeviceManagementDerivedCredentialSettingsRequestBuilder {
	bb := &DeviceManagementDerivedCredentialSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/derivedCredentialSettings"
	return bb
}

// IdentityCertificate is navigation property rn
func (b *IOSVPNConfigurationRequestBuilder) IdentityCertificate() *IOSCertificateProfileBaseRequestBuilder {
	bb := &IOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}

// AssignedLicenses returns request builder for IOSVPPAppAssignedLicense collection
func (b *IOSVPPAppRequestBuilder) AssignedLicenses() *IOSVPPAppAssignedLicensesCollectionRequestBuilder {
	bb := &IOSVPPAppAssignedLicensesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignedLicenses"
	return bb
}

// IOSVPPAppAssignedLicensesCollectionRequestBuilder is request builder for IOSVPPAppAssignedLicense collection rcn
type IOSVPPAppAssignedLicensesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPAppAssignedLicense collection
func (b *IOSVPPAppAssignedLicensesCollectionRequestBuilder) Request() *IOSVPPAppAssignedLicensesCollectionRequest {
	return &IOSVPPAppAssignedLicensesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPAppAssignedLicense item
func (b *IOSVPPAppAssignedLicensesCollectionRequestBuilder) ID(id string) *IOSVPPAppAssignedLicenseRequestBuilder {
	bb := &IOSVPPAppAssignedLicenseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSVPPAppAssignedLicensesCollectionRequest is request for IOSVPPAppAssignedLicense collection
type IOSVPPAppAssignedLicensesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPAppAssignedLicense collection
func (r *IOSVPPAppAssignedLicensesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPAppAssignedLicense, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPAppAssignedLicense
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPAppAssignedLicense
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPAppAssignedLicense collection, max N pages
func (r *IOSVPPAppAssignedLicensesCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPAppAssignedLicense, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPAppAssignedLicense collection
func (r *IOSVPPAppAssignedLicensesCollectionRequest) Get(ctx context.Context) ([]IOSVPPAppAssignedLicense, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPAppAssignedLicense collection
func (r *IOSVPPAppAssignedLicensesCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPAppAssignedLicense) (resObj *IOSVPPAppAssignedLicense, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSCertificateProfile returns request builder for IOSCertificateProfile collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSCertificateProfile() *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder is request builder for IOSCertificateProfile collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSCertificateProfile collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSCertificateProfile item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequestBuilder) ID(id string) *IOSCertificateProfileRequestBuilder {
	bb := &IOSCertificateProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest is request for IOSCertificateProfile collection
type DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSCertificateProfile collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSCertificateProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSCertificateProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSCertificateProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSCertificateProfile collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest) GetN(ctx context.Context, n int) ([]IOSCertificateProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSCertificateProfile collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest) Get(ctx context.Context) ([]IOSCertificateProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSCertificateProfile collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCertificateProfileCollectionRequest) Add(ctx context.Context, reqObj *IOSCertificateProfile) (resObj *IOSCertificateProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSCertificateProfile is navigation property rn
func (b *IOSCertificateProfileBaseRequestBuilder) IOSCertificateProfile() *IOSCertificateProfileRequestBuilder {
	bb := &IOSCertificateProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// IOSCompliancePolicy returns request builder for IOSCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) IOSCompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder is request builder for IOSCompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSCompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequestBuilder) ID(id string) *IOSCompliancePolicyRequestBuilder {
	bb := &IOSCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest is request for IOSCompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSCompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]IOSCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]IOSCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionIOSCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *IOSCompliancePolicy) (resObj *IOSCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSCustomConfiguration returns request builder for IOSCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSCustomConfiguration() *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder is request builder for IOSCustomConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSCustomConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequestBuilder) ID(id string) *IOSCustomConfigurationRequestBuilder {
	bb := &IOSCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest is request for IOSCustomConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSCustomConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSCustomConfiguration) (resObj *IOSCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSDerivedCredentialAuthenticationConfiguration returns request builder for IOSDerivedCredentialAuthenticationConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSDerivedCredentialAuthenticationConfiguration() *DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder is request builder for IOSDerivedCredentialAuthenticationConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSDerivedCredentialAuthenticationConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSDerivedCredentialAuthenticationConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequestBuilder) ID(id string) *IOSDerivedCredentialAuthenticationConfigurationRequestBuilder {
	bb := &IOSDerivedCredentialAuthenticationConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequest is request for IOSDerivedCredentialAuthenticationConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSDerivedCredentialAuthenticationConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSDerivedCredentialAuthenticationConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSDerivedCredentialAuthenticationConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSDerivedCredentialAuthenticationConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSDerivedCredentialAuthenticationConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSDerivedCredentialAuthenticationConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSDerivedCredentialAuthenticationConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSDerivedCredentialAuthenticationConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSDerivedCredentialAuthenticationConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSDerivedCredentialAuthenticationConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSDerivedCredentialAuthenticationConfiguration) (resObj *IOSDerivedCredentialAuthenticationConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSEduDeviceConfiguration returns request builder for IOSEduDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSEduDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequestBuilder is request builder for IOSEduDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSEduDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSEduDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequestBuilder) ID(id string) *IOSEduDeviceConfigurationRequestBuilder {
	bb := &IOSEduDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequest is request for IOSEduDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSEduDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSEduDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSEduDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSEduDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSEduDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSEduDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSEduDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSEduDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSEduDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSEduDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSEduDeviceConfiguration) (resObj *IOSEduDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSEducationDeviceConfiguration returns request builder for IOSEducationDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSEducationDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequestBuilder is request builder for IOSEducationDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSEducationDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSEducationDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequestBuilder) ID(id string) *IOSEducationDeviceConfigurationRequestBuilder {
	bb := &IOSEducationDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequest is request for IOSEducationDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSEducationDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSEducationDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSEducationDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSEducationDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSEducationDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSEducationDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSEducationDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSEducationDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSEducationDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSEducationDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSEducationDeviceConfiguration) (resObj *IOSEducationDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSGeneralDeviceConfiguration returns request builder for IOSGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSGeneralDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder is request builder for IOSGeneralDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSGeneralDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *IOSGeneralDeviceConfigurationRequestBuilder {
	bb := &IOSGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest is request for IOSGeneralDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSGeneralDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSGeneralDeviceConfiguration) (resObj *IOSGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSCertificateProfile is navigation property rn
func (b *IOSImportedPFXCertificateProfileRequestBuilder) IOSCertificateProfile() *IOSCertificateProfileRequestBuilder {
	bb := &IOSCertificateProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// Entity is navigation property rn
func (b *IOSLobAppProvisioningConfigurationRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *IOSLobAppProvisioningConfigurationAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// IOSLobAppProvisioningConfigurationPolicySetItem returns request builder for IOSLobAppProvisioningConfigurationPolicySetItem collection
func (b *PolicySetItemsCollectionRequestBuilder) IOSLobAppProvisioningConfigurationPolicySetItem() *PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequestBuilder {
	bb := &PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequestBuilder is request builder for IOSLobAppProvisioningConfigurationPolicySetItem collection rcn
type PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSLobAppProvisioningConfigurationPolicySetItem collection
func (b *PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequestBuilder) Request() *PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequest {
	return &PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSLobAppProvisioningConfigurationPolicySetItem item
func (b *PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequestBuilder) ID(id string) *IOSLobAppProvisioningConfigurationPolicySetItemRequestBuilder {
	bb := &IOSLobAppProvisioningConfigurationPolicySetItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequest is request for IOSLobAppProvisioningConfigurationPolicySetItem collection
type PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSLobAppProvisioningConfigurationPolicySetItem collection
func (r *PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSLobAppProvisioningConfigurationPolicySetItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSLobAppProvisioningConfigurationPolicySetItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSLobAppProvisioningConfigurationPolicySetItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSLobAppProvisioningConfigurationPolicySetItem collection, max N pages
func (r *PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequest) GetN(ctx context.Context, n int) ([]IOSLobAppProvisioningConfigurationPolicySetItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSLobAppProvisioningConfigurationPolicySetItem collection
func (r *PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequest) Get(ctx context.Context) ([]IOSLobAppProvisioningConfigurationPolicySetItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSLobAppProvisioningConfigurationPolicySetItem collection
func (r *PolicySetItemsCollectionIOSLobAppProvisioningConfigurationPolicySetItemCollectionRequest) Add(ctx context.Context, reqObj *IOSLobAppProvisioningConfigurationPolicySetItem) (resObj *IOSLobAppProvisioningConfigurationPolicySetItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSManagedAppRegistration returns request builder for IOSManagedAppRegistration collection
func (b *DeviceAppManagementManagedAppRegistrationsCollectionRequestBuilder) IOSManagedAppRegistration() *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder is request builder for IOSManagedAppRegistration collection rcn
type DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSManagedAppRegistration collection
func (b *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder) Request() *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest {
	return &DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSManagedAppRegistration item
func (b *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequestBuilder) ID(id string) *IOSManagedAppRegistrationRequestBuilder {
	bb := &IOSManagedAppRegistrationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest is request for IOSManagedAppRegistration collection
type DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSManagedAppRegistration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSManagedAppRegistration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSManagedAppRegistration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSManagedAppRegistration collection, max N pages
func (r *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSManagedAppRegistration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest) Get(ctx context.Context) ([]IOSManagedAppRegistration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSManagedAppRegistration collection
func (r *DeviceAppManagementManagedAppRegistrationsCollectionIOSManagedAppRegistrationCollectionRequest) Add(ctx context.Context, reqObj *IOSManagedAppRegistration) (resObj *IOSManagedAppRegistration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSMobileAppConfiguration returns request builder for IOSMobileAppConfiguration collection
func (b *DeviceAppManagementMobileAppConfigurationsCollectionRequestBuilder) IOSMobileAppConfiguration() *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder is request builder for IOSMobileAppConfiguration collection rcn
type DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSMobileAppConfiguration collection
func (b *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest {
	return &DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSMobileAppConfiguration item
func (b *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequestBuilder) ID(id string) *IOSMobileAppConfigurationRequestBuilder {
	bb := &IOSMobileAppConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest is request for IOSMobileAppConfiguration collection
type DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSMobileAppConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSMobileAppConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSMobileAppConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSMobileAppConfiguration collection, max N pages
func (r *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSMobileAppConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSMobileAppConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSMobileAppConfiguration collection
func (r *DeviceAppManagementMobileAppConfigurationsCollectionIOSMobileAppConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSMobileAppConfiguration) (resObj *IOSMobileAppConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSCertificateProfileBase is navigation property rn
func (b *IOSPkcsCertificateProfileRequestBuilder) IOSCertificateProfileBase() *IOSCertificateProfileBaseRequestBuilder {
	bb := &IOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IOSCertificateProfileBase"
	return bb
}

// IOSCertificateProfileBase is navigation property rn
func (b *IOSScepCertificateProfileRequestBuilder) IOSCertificateProfileBase() *IOSCertificateProfileBaseRequestBuilder {
	bb := &IOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/IOSCertificateProfileBase"
	return bb
}

// IOSStoreApp returns request builder for IOSStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) IOSStoreApp() *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder is request builder for IOSStoreApp collection rcn
type DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSStoreApp collection
func (b *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSStoreApp item
func (b *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequestBuilder) ID(id string) *IOSStoreAppRequestBuilder {
	bb := &IOSStoreAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest is request for IOSStoreApp collection
type DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSStoreApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSStoreApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSStoreApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSStoreApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest) GetN(ctx context.Context, n int) ([]IOSStoreApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest) Get(ctx context.Context) ([]IOSStoreApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSStoreApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSStoreAppCollectionRequest) Add(ctx context.Context, reqObj *IOSStoreApp) (resObj *IOSStoreApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSTrustedRootCertificate returns request builder for IOSTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSTrustedRootCertificate() *DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequestBuilder is request builder for IOSTrustedRootCertificate collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSTrustedRootCertificate item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequestBuilder) ID(id string) *IOSTrustedRootCertificateRequestBuilder {
	bb := &IOSTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequest is request for IOSTrustedRootCertificate collection
type DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSTrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSTrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSTrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSTrustedRootCertificate collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequest) GetN(ctx context.Context, n int) ([]IOSTrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequest) Get(ctx context.Context) ([]IOSTrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSTrustedRootCertificateCollectionRequest) Add(ctx context.Context, reqObj *IOSTrustedRootCertificate) (resObj *IOSTrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSUpdateConfiguration returns request builder for IOSUpdateConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSUpdateConfiguration() *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder is request builder for IOSUpdateConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSUpdateConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSUpdateConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequestBuilder) ID(id string) *IOSUpdateConfigurationRequestBuilder {
	bb := &IOSUpdateConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest is request for IOSUpdateConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSUpdateConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSUpdateConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSUpdateConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSUpdateConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSUpdateConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSUpdateConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSUpdateConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSUpdateConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSUpdateConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSUpdateConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSUpdateConfiguration) (resObj *IOSUpdateConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *IOSUpdateDeviceStatusRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// IOSVPPApp returns request builder for IOSVPPApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) IOSVPPApp() *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder is request builder for IOSVPPApp collection rcn
type DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPApp collection
func (b *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPApp item
func (b *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequestBuilder) ID(id string) *IOSVPPAppRequestBuilder {
	bb := &IOSVPPAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest is request for IOSVPPApp collection
type DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest) Get(ctx context.Context) ([]IOSVPPApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPApp collection
func (r *DeviceAppManagementMobileAppsCollectionIOSVPPAppCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPApp) (resObj *IOSVPPApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSVPPAppAssignedDeviceLicense returns request builder for IOSVPPAppAssignedDeviceLicense collection
func (b *IOSVPPAppAssignedLicensesCollectionRequestBuilder) IOSVPPAppAssignedDeviceLicense() *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequestBuilder {
	bb := &IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequestBuilder is request builder for IOSVPPAppAssignedDeviceLicense collection rcn
type IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPAppAssignedDeviceLicense collection
func (b *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequestBuilder) Request() *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequest {
	return &IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPAppAssignedDeviceLicense item
func (b *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequestBuilder) ID(id string) *IOSVPPAppAssignedDeviceLicenseRequestBuilder {
	bb := &IOSVPPAppAssignedDeviceLicenseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequest is request for IOSVPPAppAssignedDeviceLicense collection
type IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPAppAssignedDeviceLicense collection
func (r *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPAppAssignedDeviceLicense, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPAppAssignedDeviceLicense
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPAppAssignedDeviceLicense
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPAppAssignedDeviceLicense collection, max N pages
func (r *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPAppAssignedDeviceLicense, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPAppAssignedDeviceLicense collection
func (r *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequest) Get(ctx context.Context) ([]IOSVPPAppAssignedDeviceLicense, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPAppAssignedDeviceLicense collection
func (r *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedDeviceLicenseCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPAppAssignedDeviceLicense) (resObj *IOSVPPAppAssignedDeviceLicense, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *IOSVPPAppAssignedLicensesCollectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// IOSVPPAppAssignedUserLicense returns request builder for IOSVPPAppAssignedUserLicense collection
func (b *IOSVPPAppAssignedLicensesCollectionRequestBuilder) IOSVPPAppAssignedUserLicense() *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequestBuilder {
	bb := &IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequestBuilder is request builder for IOSVPPAppAssignedUserLicense collection rcn
type IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPAppAssignedUserLicense collection
func (b *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequestBuilder) Request() *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequest {
	return &IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPAppAssignedUserLicense item
func (b *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequestBuilder) ID(id string) *IOSVPPAppAssignedUserLicenseRequestBuilder {
	bb := &IOSVPPAppAssignedUserLicenseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequest is request for IOSVPPAppAssignedUserLicense collection
type IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPAppAssignedUserLicense collection
func (r *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPAppAssignedUserLicense, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPAppAssignedUserLicense
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPAppAssignedUserLicense
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPAppAssignedUserLicense collection, max N pages
func (r *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPAppAssignedUserLicense, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPAppAssignedUserLicense collection
func (r *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequest) Get(ctx context.Context) ([]IOSVPPAppAssignedUserLicense, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPAppAssignedUserLicense collection
func (r *IOSVPPAppAssignedLicensesCollectionIOSVPPAppAssignedUserLicenseCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPAppAssignedUserLicense) (resObj *IOSVPPAppAssignedUserLicense, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSVPPEBook returns request builder for IOSVPPEBook collection
func (b *DeviceAppManagementManagedEBooksCollectionRequestBuilder) IOSVPPEBook() *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder {
	bb := &DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder is request builder for IOSVPPEBook collection rcn
type DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPEBook collection
func (b *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder) Request() *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest {
	return &DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPEBook item
func (b *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequestBuilder) ID(id string) *IOSVPPEBookRequestBuilder {
	bb := &IOSVPPEBookRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest is request for IOSVPPEBook collection
type DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPEBook collection
func (r *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPEBook, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPEBook
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPEBook
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPEBook collection, max N pages
func (r *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPEBook, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPEBook collection
func (r *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest) Get(ctx context.Context) ([]IOSVPPEBook, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPEBook collection
func (r *DeviceAppManagementManagedEBooksCollectionIOSVPPEBookCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPEBook) (resObj *IOSVPPEBook, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSVPPEBookAssignment returns request builder for IOSVPPEBookAssignment collection
func (b *ManagedEBookAssignmentsCollectionRequestBuilder) IOSVPPEBookAssignment() *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder {
	bb := &ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder is request builder for IOSVPPEBookAssignment collection rcn
type ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVPPEBookAssignment collection
func (b *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder) Request() *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest {
	return &ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVPPEBookAssignment item
func (b *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequestBuilder) ID(id string) *IOSVPPEBookAssignmentRequestBuilder {
	bb := &IOSVPPEBookAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest is request for IOSVPPEBookAssignment collection
type ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVPPEBookAssignment collection
func (r *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSVPPEBookAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVPPEBookAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVPPEBookAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSVPPEBookAssignment collection, max N pages
func (r *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest) GetN(ctx context.Context, n int) ([]IOSVPPEBookAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSVPPEBookAssignment collection
func (r *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest) Get(ctx context.Context) ([]IOSVPPEBookAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSVPPEBookAssignment collection
func (r *ManagedEBookAssignmentsCollectionIOSVPPEBookAssignmentCollectionRequest) Add(ctx context.Context, reqObj *IOSVPPEBookAssignment) (resObj *IOSVPPEBookAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IOSWiFiConfiguration returns request builder for IOSWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) IOSWiFiConfiguration() *DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequestBuilder is request builder for IOSWiFiConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSWiFiConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequestBuilder) ID(id string) *IOSWiFiConfigurationRequestBuilder {
	bb := &IOSWiFiConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequest is request for IOSWiFiConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IOSWiFiConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSWiFiConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSWiFiConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IOSWiFiConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]IOSWiFiConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IOSWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequest) Get(ctx context.Context) ([]IOSWiFiConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IOSWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionIOSWiFiConfigurationCollectionRequest) Add(ctx context.Context, reqObj *IOSWiFiConfiguration) (resObj *IOSWiFiConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
