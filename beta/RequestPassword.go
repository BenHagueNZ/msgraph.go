// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// PasswordAuthenticationMethodRequestBuilder is request builder for PasswordAuthenticationMethod
type PasswordAuthenticationMethodRequestBuilder struct{ BaseRequestBuilder }

// Request returns PasswordAuthenticationMethodRequest
func (b *PasswordAuthenticationMethodRequestBuilder) Request() *PasswordAuthenticationMethodRequest {
	return &PasswordAuthenticationMethodRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PasswordAuthenticationMethodRequest is request for PasswordAuthenticationMethod
type PasswordAuthenticationMethodRequest struct{ BaseRequest }

// Get performs GET request for PasswordAuthenticationMethod
func (r *PasswordAuthenticationMethodRequest) Get(ctx context.Context) (resObj *PasswordAuthenticationMethod, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PasswordAuthenticationMethod
func (r *PasswordAuthenticationMethodRequest) Update(ctx context.Context, reqObj *PasswordAuthenticationMethod) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PasswordAuthenticationMethod
func (r *PasswordAuthenticationMethodRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PasswordCredentialRequestBuilder is request builder for PasswordCredential
type PasswordCredentialRequestBuilder struct{ BaseRequestBuilder }

// Request returns PasswordCredentialRequest
func (b *PasswordCredentialRequestBuilder) Request() *PasswordCredentialRequest {
	return &PasswordCredentialRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PasswordCredentialRequest is request for PasswordCredential
type PasswordCredentialRequest struct{ BaseRequest }

// Get performs GET request for PasswordCredential
func (r *PasswordCredentialRequest) Get(ctx context.Context) (resObj *PasswordCredential, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PasswordCredential
func (r *PasswordCredentialRequest) Update(ctx context.Context, reqObj *PasswordCredential) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PasswordCredential
func (r *PasswordCredentialRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PasswordCredentialConfigurationRequestBuilder is request builder for PasswordCredentialConfiguration
type PasswordCredentialConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns PasswordCredentialConfigurationRequest
func (b *PasswordCredentialConfigurationRequestBuilder) Request() *PasswordCredentialConfigurationRequest {
	return &PasswordCredentialConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PasswordCredentialConfigurationRequest is request for PasswordCredentialConfiguration
type PasswordCredentialConfigurationRequest struct{ BaseRequest }

// Get performs GET request for PasswordCredentialConfiguration
func (r *PasswordCredentialConfigurationRequest) Get(ctx context.Context) (resObj *PasswordCredentialConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PasswordCredentialConfiguration
func (r *PasswordCredentialConfigurationRequest) Update(ctx context.Context, reqObj *PasswordCredentialConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PasswordCredentialConfiguration
func (r *PasswordCredentialConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PasswordProfileRequestBuilder is request builder for PasswordProfile
type PasswordProfileRequestBuilder struct{ BaseRequestBuilder }

// Request returns PasswordProfileRequest
func (b *PasswordProfileRequestBuilder) Request() *PasswordProfileRequest {
	return &PasswordProfileRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PasswordProfileRequest is request for PasswordProfile
type PasswordProfileRequest struct{ BaseRequest }

// Get performs GET request for PasswordProfile
func (r *PasswordProfileRequest) Get(ctx context.Context) (resObj *PasswordProfile, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PasswordProfile
func (r *PasswordProfileRequest) Update(ctx context.Context, reqObj *PasswordProfile) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PasswordProfile
func (r *PasswordProfileRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PasswordResetResponseRequestBuilder is request builder for PasswordResetResponse
type PasswordResetResponseRequestBuilder struct{ BaseRequestBuilder }

// Request returns PasswordResetResponseRequest
func (b *PasswordResetResponseRequestBuilder) Request() *PasswordResetResponseRequest {
	return &PasswordResetResponseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PasswordResetResponseRequest is request for PasswordResetResponse
type PasswordResetResponseRequest struct{ BaseRequest }

// Get performs GET request for PasswordResetResponse
func (r *PasswordResetResponseRequest) Get(ctx context.Context) (resObj *PasswordResetResponse, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PasswordResetResponse
func (r *PasswordResetResponseRequest) Update(ctx context.Context, reqObj *PasswordResetResponse) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PasswordResetResponse
func (r *PasswordResetResponseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PasswordSingleSignOnCredentialSetRequestBuilder is request builder for PasswordSingleSignOnCredentialSet
type PasswordSingleSignOnCredentialSetRequestBuilder struct{ BaseRequestBuilder }

// Request returns PasswordSingleSignOnCredentialSetRequest
func (b *PasswordSingleSignOnCredentialSetRequestBuilder) Request() *PasswordSingleSignOnCredentialSetRequest {
	return &PasswordSingleSignOnCredentialSetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PasswordSingleSignOnCredentialSetRequest is request for PasswordSingleSignOnCredentialSet
type PasswordSingleSignOnCredentialSetRequest struct{ BaseRequest }

// Get performs GET request for PasswordSingleSignOnCredentialSet
func (r *PasswordSingleSignOnCredentialSetRequest) Get(ctx context.Context) (resObj *PasswordSingleSignOnCredentialSet, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PasswordSingleSignOnCredentialSet
func (r *PasswordSingleSignOnCredentialSetRequest) Update(ctx context.Context, reqObj *PasswordSingleSignOnCredentialSet) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PasswordSingleSignOnCredentialSet
func (r *PasswordSingleSignOnCredentialSetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PasswordSingleSignOnFieldRequestBuilder is request builder for PasswordSingleSignOnField
type PasswordSingleSignOnFieldRequestBuilder struct{ BaseRequestBuilder }

// Request returns PasswordSingleSignOnFieldRequest
func (b *PasswordSingleSignOnFieldRequestBuilder) Request() *PasswordSingleSignOnFieldRequest {
	return &PasswordSingleSignOnFieldRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PasswordSingleSignOnFieldRequest is request for PasswordSingleSignOnField
type PasswordSingleSignOnFieldRequest struct{ BaseRequest }

// Get performs GET request for PasswordSingleSignOnField
func (r *PasswordSingleSignOnFieldRequest) Get(ctx context.Context) (resObj *PasswordSingleSignOnField, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PasswordSingleSignOnField
func (r *PasswordSingleSignOnFieldRequest) Update(ctx context.Context, reqObj *PasswordSingleSignOnField) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PasswordSingleSignOnField
func (r *PasswordSingleSignOnFieldRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PasswordSingleSignOnSettingsRequestBuilder is request builder for PasswordSingleSignOnSettings
type PasswordSingleSignOnSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns PasswordSingleSignOnSettingsRequest
func (b *PasswordSingleSignOnSettingsRequestBuilder) Request() *PasswordSingleSignOnSettingsRequest {
	return &PasswordSingleSignOnSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PasswordSingleSignOnSettingsRequest is request for PasswordSingleSignOnSettings
type PasswordSingleSignOnSettingsRequest struct{ BaseRequest }

// Get performs GET request for PasswordSingleSignOnSettings
func (r *PasswordSingleSignOnSettingsRequest) Get(ctx context.Context) (resObj *PasswordSingleSignOnSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PasswordSingleSignOnSettings
func (r *PasswordSingleSignOnSettingsRequest) Update(ctx context.Context, reqObj *PasswordSingleSignOnSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PasswordSingleSignOnSettings
func (r *PasswordSingleSignOnSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PasswordValidationInformationRequestBuilder is request builder for PasswordValidationInformation
type PasswordValidationInformationRequestBuilder struct{ BaseRequestBuilder }

// Request returns PasswordValidationInformationRequest
func (b *PasswordValidationInformationRequestBuilder) Request() *PasswordValidationInformationRequest {
	return &PasswordValidationInformationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PasswordValidationInformationRequest is request for PasswordValidationInformation
type PasswordValidationInformationRequest struct{ BaseRequest }

// Get performs GET request for PasswordValidationInformation
func (r *PasswordValidationInformationRequest) Get(ctx context.Context) (resObj *PasswordValidationInformation, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PasswordValidationInformation
func (r *PasswordValidationInformationRequest) Update(ctx context.Context, reqObj *PasswordValidationInformation) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PasswordValidationInformation
func (r *PasswordValidationInformationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
