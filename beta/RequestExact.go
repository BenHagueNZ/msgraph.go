// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// ExactDataMatchStoreColumnRequestBuilder is request builder for ExactDataMatchStoreColumn
type ExactDataMatchStoreColumnRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExactDataMatchStoreColumnRequest
func (b *ExactDataMatchStoreColumnRequestBuilder) Request() *ExactDataMatchStoreColumnRequest {
	return &ExactDataMatchStoreColumnRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExactDataMatchStoreColumnRequest is request for ExactDataMatchStoreColumn
type ExactDataMatchStoreColumnRequest struct{ BaseRequest }

// Get performs GET request for ExactDataMatchStoreColumn
func (r *ExactDataMatchStoreColumnRequest) Get(ctx context.Context) (resObj *ExactDataMatchStoreColumn, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExactDataMatchStoreColumn
func (r *ExactDataMatchStoreColumnRequest) Update(ctx context.Context, reqObj *ExactDataMatchStoreColumn) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExactDataMatchStoreColumn
func (r *ExactDataMatchStoreColumnRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExactMatchClassificationRequestObjectRequestBuilder is request builder for ExactMatchClassificationRequestObject
type ExactMatchClassificationRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExactMatchClassificationRequestObjectRequest
func (b *ExactMatchClassificationRequestObjectRequestBuilder) Request() *ExactMatchClassificationRequestObjectRequest {
	return &ExactMatchClassificationRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExactMatchClassificationRequestObjectRequest is request for ExactMatchClassificationRequestObject
type ExactMatchClassificationRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for ExactMatchClassificationRequestObject
func (r *ExactMatchClassificationRequestObjectRequest) Get(ctx context.Context) (resObj *ExactMatchClassificationRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExactMatchClassificationRequestObject
func (r *ExactMatchClassificationRequestObjectRequest) Update(ctx context.Context, reqObj *ExactMatchClassificationRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExactMatchClassificationRequestObject
func (r *ExactMatchClassificationRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExactMatchClassificationResultRequestBuilder is request builder for ExactMatchClassificationResult
type ExactMatchClassificationResultRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExactMatchClassificationResultRequest
func (b *ExactMatchClassificationResultRequestBuilder) Request() *ExactMatchClassificationResultRequest {
	return &ExactMatchClassificationResultRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExactMatchClassificationResultRequest is request for ExactMatchClassificationResult
type ExactMatchClassificationResultRequest struct{ BaseRequest }

// Get performs GET request for ExactMatchClassificationResult
func (r *ExactMatchClassificationResultRequest) Get(ctx context.Context) (resObj *ExactMatchClassificationResult, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExactMatchClassificationResult
func (r *ExactMatchClassificationResultRequest) Update(ctx context.Context, reqObj *ExactMatchClassificationResult) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExactMatchClassificationResult
func (r *ExactMatchClassificationResultRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExactMatchDataStoreRequestBuilder is request builder for ExactMatchDataStore
type ExactMatchDataStoreRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExactMatchDataStoreRequest
func (b *ExactMatchDataStoreRequestBuilder) Request() *ExactMatchDataStoreRequest {
	return &ExactMatchDataStoreRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExactMatchDataStoreRequest is request for ExactMatchDataStore
type ExactMatchDataStoreRequest struct{ BaseRequest }

// Get performs GET request for ExactMatchDataStore
func (r *ExactMatchDataStoreRequest) Get(ctx context.Context) (resObj *ExactMatchDataStore, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExactMatchDataStore
func (r *ExactMatchDataStoreRequest) Update(ctx context.Context, reqObj *ExactMatchDataStore) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExactMatchDataStore
func (r *ExactMatchDataStoreRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExactMatchDataStoreBaseRequestBuilder is request builder for ExactMatchDataStoreBase
type ExactMatchDataStoreBaseRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExactMatchDataStoreBaseRequest
func (b *ExactMatchDataStoreBaseRequestBuilder) Request() *ExactMatchDataStoreBaseRequest {
	return &ExactMatchDataStoreBaseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExactMatchDataStoreBaseRequest is request for ExactMatchDataStoreBase
type ExactMatchDataStoreBaseRequest struct{ BaseRequest }

// Get performs GET request for ExactMatchDataStoreBase
func (r *ExactMatchDataStoreBaseRequest) Get(ctx context.Context) (resObj *ExactMatchDataStoreBase, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExactMatchDataStoreBase
func (r *ExactMatchDataStoreBaseRequest) Update(ctx context.Context, reqObj *ExactMatchDataStoreBase) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExactMatchDataStoreBase
func (r *ExactMatchDataStoreBaseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExactMatchDetectedSensitiveContentRequestBuilder is request builder for ExactMatchDetectedSensitiveContent
type ExactMatchDetectedSensitiveContentRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExactMatchDetectedSensitiveContentRequest
func (b *ExactMatchDetectedSensitiveContentRequestBuilder) Request() *ExactMatchDetectedSensitiveContentRequest {
	return &ExactMatchDetectedSensitiveContentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExactMatchDetectedSensitiveContentRequest is request for ExactMatchDetectedSensitiveContent
type ExactMatchDetectedSensitiveContentRequest struct{ BaseRequest }

// Get performs GET request for ExactMatchDetectedSensitiveContent
func (r *ExactMatchDetectedSensitiveContentRequest) Get(ctx context.Context) (resObj *ExactMatchDetectedSensitiveContent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExactMatchDetectedSensitiveContent
func (r *ExactMatchDetectedSensitiveContentRequest) Update(ctx context.Context, reqObj *ExactMatchDetectedSensitiveContent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExactMatchDetectedSensitiveContent
func (r *ExactMatchDetectedSensitiveContentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExactMatchJobBaseRequestBuilder is request builder for ExactMatchJobBase
type ExactMatchJobBaseRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExactMatchJobBaseRequest
func (b *ExactMatchJobBaseRequestBuilder) Request() *ExactMatchJobBaseRequest {
	return &ExactMatchJobBaseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExactMatchJobBaseRequest is request for ExactMatchJobBase
type ExactMatchJobBaseRequest struct{ BaseRequest }

// Get performs GET request for ExactMatchJobBase
func (r *ExactMatchJobBaseRequest) Get(ctx context.Context) (resObj *ExactMatchJobBase, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExactMatchJobBase
func (r *ExactMatchJobBaseRequest) Update(ctx context.Context, reqObj *ExactMatchJobBase) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExactMatchJobBase
func (r *ExactMatchJobBaseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExactMatchLookupJobRequestBuilder is request builder for ExactMatchLookupJob
type ExactMatchLookupJobRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExactMatchLookupJobRequest
func (b *ExactMatchLookupJobRequestBuilder) Request() *ExactMatchLookupJobRequest {
	return &ExactMatchLookupJobRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExactMatchLookupJobRequest is request for ExactMatchLookupJob
type ExactMatchLookupJobRequest struct{ BaseRequest }

// Get performs GET request for ExactMatchLookupJob
func (r *ExactMatchLookupJobRequest) Get(ctx context.Context) (resObj *ExactMatchLookupJob, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExactMatchLookupJob
func (r *ExactMatchLookupJobRequest) Update(ctx context.Context, reqObj *ExactMatchLookupJob) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExactMatchLookupJob
func (r *ExactMatchLookupJobRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExactMatchSessionRequestBuilder is request builder for ExactMatchSession
type ExactMatchSessionRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExactMatchSessionRequest
func (b *ExactMatchSessionRequestBuilder) Request() *ExactMatchSessionRequest {
	return &ExactMatchSessionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExactMatchSessionRequest is request for ExactMatchSession
type ExactMatchSessionRequest struct{ BaseRequest }

// Get performs GET request for ExactMatchSession
func (r *ExactMatchSessionRequest) Get(ctx context.Context) (resObj *ExactMatchSession, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExactMatchSession
func (r *ExactMatchSessionRequest) Update(ctx context.Context, reqObj *ExactMatchSession) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExactMatchSession
func (r *ExactMatchSessionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExactMatchSessionBaseRequestBuilder is request builder for ExactMatchSessionBase
type ExactMatchSessionBaseRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExactMatchSessionBaseRequest
func (b *ExactMatchSessionBaseRequestBuilder) Request() *ExactMatchSessionBaseRequest {
	return &ExactMatchSessionBaseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExactMatchSessionBaseRequest is request for ExactMatchSessionBase
type ExactMatchSessionBaseRequest struct{ BaseRequest }

// Get performs GET request for ExactMatchSessionBase
func (r *ExactMatchSessionBaseRequest) Get(ctx context.Context) (resObj *ExactMatchSessionBase, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExactMatchSessionBase
func (r *ExactMatchSessionBaseRequest) Update(ctx context.Context, reqObj *ExactMatchSessionBase) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExactMatchSessionBase
func (r *ExactMatchSessionBaseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ExactMatchUploadAgentRequestBuilder is request builder for ExactMatchUploadAgent
type ExactMatchUploadAgentRequestBuilder struct{ BaseRequestBuilder }

// Request returns ExactMatchUploadAgentRequest
func (b *ExactMatchUploadAgentRequestBuilder) Request() *ExactMatchUploadAgentRequest {
	return &ExactMatchUploadAgentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ExactMatchUploadAgentRequest is request for ExactMatchUploadAgent
type ExactMatchUploadAgentRequest struct{ BaseRequest }

// Get performs GET request for ExactMatchUploadAgent
func (r *ExactMatchUploadAgentRequest) Get(ctx context.Context) (resObj *ExactMatchUploadAgent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ExactMatchUploadAgent
func (r *ExactMatchUploadAgentRequest) Update(ctx context.Context, reqObj *ExactMatchUploadAgent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ExactMatchUploadAgent
func (r *ExactMatchUploadAgentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type ExactMatchDataStoreLookupRequestBuilder struct{ BaseRequestBuilder }

// Lookup action undocumentedrac
func (b *ExactMatchDataStoreRequestBuilder) Lookup(reqObj *ExactMatchDataStoreLookupRequestParameter) *ExactMatchDataStoreLookupRequestBuilder {
	bb := &ExactMatchDataStoreLookupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Lookup"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ExactMatchDataStoreLookupRequest struct{ BaseRequest }

func (b *ExactMatchDataStoreLookupRequestBuilder) Request() *ExactMatchDataStoreLookupRequest {
	return &ExactMatchDataStoreLookupRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ExactMatchDataStoreLookupRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]string, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []string
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []string
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, _ = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

func (r *ExactMatchDataStoreLookupRequest) PostN(ctx context.Context, n int) ([]string, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, n)
}

func (r *ExactMatchDataStoreLookupRequest) Post(ctx context.Context) ([]string, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, 0)
}

type ExactMatchSessionCancelRequestBuilder struct{ BaseRequestBuilder }

// Cancel action undocumentedrav
func (b *ExactMatchSessionRequestBuilder) Cancel(reqObj *ExactMatchSessionCancelRequestParameter) *ExactMatchSessionCancelRequestBuilder {
	bb := &ExactMatchSessionCancelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Cancel"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ExactMatchSessionCancelRequest struct{ BaseRequest }

func (b *ExactMatchSessionCancelRequestBuilder) Request() *ExactMatchSessionCancelRequest {
	return &ExactMatchSessionCancelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ExactMatchSessionCancelRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type ExactMatchSessionRenewRequestBuilder struct{ BaseRequestBuilder }

// Renew action undocumentedras
func (b *ExactMatchSessionRequestBuilder) Renew(reqObj *ExactMatchSessionRenewRequestParameter) *ExactMatchSessionRenewRequestBuilder {
	bb := &ExactMatchSessionRenewRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Renew"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ExactMatchSessionRenewRequest struct{ BaseRequest }

func (b *ExactMatchSessionRenewRequestBuilder) Request() *ExactMatchSessionRenewRequest {
	return &ExactMatchSessionRenewRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ExactMatchSessionRenewRequest) Post(ctx context.Context) (resObj *ExactMatchSession, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type ExactMatchSessionCommitRequestBuilder struct{ BaseRequestBuilder }

// Commit action undocumentedrav
func (b *ExactMatchSessionRequestBuilder) Commit(reqObj *ExactMatchSessionCommitRequestParameter) *ExactMatchSessionCommitRequestBuilder {
	bb := &ExactMatchSessionCommitRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Commit"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type ExactMatchSessionCommitRequest struct{ BaseRequest }

func (b *ExactMatchSessionCommitRequestBuilder) Request() *ExactMatchSessionCommitRequest {
	return &ExactMatchSessionCommitRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *ExactMatchSessionCommitRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
