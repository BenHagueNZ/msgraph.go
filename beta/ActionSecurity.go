// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// SecurityActionCancelSecurityActionRequestParameter undocumented
type SecurityActionCancelSecurityActionRequestParameter struct {
}

// Alerts returns request builder for Alert collection
func (b *SecurityRequestBuilder) Alerts() *SecurityAlertsCollectionRequestBuilder {
	bb := &SecurityAlertsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alerts"
	return bb
}

// SecurityAlertsCollectionRequestBuilder is request builder for Alert collection rcn
type SecurityAlertsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Alert collection
func (b *SecurityAlertsCollectionRequestBuilder) Request() *SecurityAlertsCollectionRequest {
	return &SecurityAlertsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Alert item
func (b *SecurityAlertsCollectionRequestBuilder) ID(id string) *AlertRequestBuilder {
	bb := &AlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityAlertsCollectionRequest is request for Alert collection
type SecurityAlertsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Alert collection
func (r *SecurityAlertsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Alert, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Alert
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Alert
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Alert collection, max N pages
func (r *SecurityAlertsCollectionRequest) GetN(ctx context.Context, n int) ([]Alert, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Alert collection
func (r *SecurityAlertsCollectionRequest) Get(ctx context.Context) ([]Alert, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Alert collection
func (r *SecurityAlertsCollectionRequest) Add(ctx context.Context, reqObj *Alert) (resObj *Alert, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AlertsUnderscorev2 returns request builder for SecurityAlert collection
func (b *SecurityRequestBuilder) AlertsUnderscorev2() *SecurityAlertsUnderscorev2CollectionRequestBuilder {
	bb := &SecurityAlertsUnderscorev2CollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alerts_v2"
	return bb
}

// SecurityAlertsUnderscorev2CollectionRequestBuilder is request builder for SecurityAlert collection rcn
type SecurityAlertsUnderscorev2CollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityAlert collection
func (b *SecurityAlertsUnderscorev2CollectionRequestBuilder) Request() *SecurityAlertsUnderscorev2CollectionRequest {
	return &SecurityAlertsUnderscorev2CollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityAlert item
func (b *SecurityAlertsUnderscorev2CollectionRequestBuilder) ID(id string) *SecurityAlertRequestBuilder {
	bb := &SecurityAlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityAlertsUnderscorev2CollectionRequest is request for SecurityAlert collection
type SecurityAlertsUnderscorev2CollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityAlert collection
func (r *SecurityAlertsUnderscorev2CollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityAlert, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityAlert
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityAlert
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityAlert collection, max N pages
func (r *SecurityAlertsUnderscorev2CollectionRequest) GetN(ctx context.Context, n int) ([]SecurityAlert, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityAlert collection
func (r *SecurityAlertsUnderscorev2CollectionRequest) Get(ctx context.Context) ([]SecurityAlert, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityAlert collection
func (r *SecurityAlertsUnderscorev2CollectionRequest) Add(ctx context.Context, reqObj *SecurityAlert) (resObj *SecurityAlert, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AttackSimulation is navigation property rn
func (b *SecurityRequestBuilder) AttackSimulation() *AttackSimulationRootRequestBuilder {
	bb := &AttackSimulationRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/attackSimulation"
	return bb
}

// Cases is navigation property rn
func (b *SecurityRequestBuilder) Cases() *SecurityCasesRootRequestBuilder {
	bb := &SecurityCasesRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cases"
	return bb
}

// CloudAppSecurityProfiles returns request builder for CloudAppSecurityProfile collection
func (b *SecurityRequestBuilder) CloudAppSecurityProfiles() *SecurityCloudAppSecurityProfilesCollectionRequestBuilder {
	bb := &SecurityCloudAppSecurityProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cloudAppSecurityProfiles"
	return bb
}

// SecurityCloudAppSecurityProfilesCollectionRequestBuilder is request builder for CloudAppSecurityProfile collection rcn
type SecurityCloudAppSecurityProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudAppSecurityProfile collection
func (b *SecurityCloudAppSecurityProfilesCollectionRequestBuilder) Request() *SecurityCloudAppSecurityProfilesCollectionRequest {
	return &SecurityCloudAppSecurityProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudAppSecurityProfile item
func (b *SecurityCloudAppSecurityProfilesCollectionRequestBuilder) ID(id string) *CloudAppSecurityProfileRequestBuilder {
	bb := &CloudAppSecurityProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCloudAppSecurityProfilesCollectionRequest is request for CloudAppSecurityProfile collection
type SecurityCloudAppSecurityProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudAppSecurityProfile collection
func (r *SecurityCloudAppSecurityProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudAppSecurityProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudAppSecurityProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudAppSecurityProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudAppSecurityProfile collection, max N pages
func (r *SecurityCloudAppSecurityProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]CloudAppSecurityProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudAppSecurityProfile collection
func (r *SecurityCloudAppSecurityProfilesCollectionRequest) Get(ctx context.Context) ([]CloudAppSecurityProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudAppSecurityProfile collection
func (r *SecurityCloudAppSecurityProfilesCollectionRequest) Add(ctx context.Context, reqObj *CloudAppSecurityProfile) (resObj *CloudAppSecurityProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DomainSecurityProfiles returns request builder for DomainSecurityProfile collection
func (b *SecurityRequestBuilder) DomainSecurityProfiles() *SecurityDomainSecurityProfilesCollectionRequestBuilder {
	bb := &SecurityDomainSecurityProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/domainSecurityProfiles"
	return bb
}

// SecurityDomainSecurityProfilesCollectionRequestBuilder is request builder for DomainSecurityProfile collection rcn
type SecurityDomainSecurityProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DomainSecurityProfile collection
func (b *SecurityDomainSecurityProfilesCollectionRequestBuilder) Request() *SecurityDomainSecurityProfilesCollectionRequest {
	return &SecurityDomainSecurityProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DomainSecurityProfile item
func (b *SecurityDomainSecurityProfilesCollectionRequestBuilder) ID(id string) *DomainSecurityProfileRequestBuilder {
	bb := &DomainSecurityProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityDomainSecurityProfilesCollectionRequest is request for DomainSecurityProfile collection
type SecurityDomainSecurityProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DomainSecurityProfile collection
func (r *SecurityDomainSecurityProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DomainSecurityProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DomainSecurityProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DomainSecurityProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DomainSecurityProfile collection, max N pages
func (r *SecurityDomainSecurityProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]DomainSecurityProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DomainSecurityProfile collection
func (r *SecurityDomainSecurityProfilesCollectionRequest) Get(ctx context.Context) ([]DomainSecurityProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DomainSecurityProfile collection
func (r *SecurityDomainSecurityProfilesCollectionRequest) Add(ctx context.Context, reqObj *DomainSecurityProfile) (resObj *DomainSecurityProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// FileSecurityProfiles returns request builder for FileSecurityProfile collection
func (b *SecurityRequestBuilder) FileSecurityProfiles() *SecurityFileSecurityProfilesCollectionRequestBuilder {
	bb := &SecurityFileSecurityProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/fileSecurityProfiles"
	return bb
}

// SecurityFileSecurityProfilesCollectionRequestBuilder is request builder for FileSecurityProfile collection rcn
type SecurityFileSecurityProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for FileSecurityProfile collection
func (b *SecurityFileSecurityProfilesCollectionRequestBuilder) Request() *SecurityFileSecurityProfilesCollectionRequest {
	return &SecurityFileSecurityProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for FileSecurityProfile item
func (b *SecurityFileSecurityProfilesCollectionRequestBuilder) ID(id string) *FileSecurityProfileRequestBuilder {
	bb := &FileSecurityProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityFileSecurityProfilesCollectionRequest is request for FileSecurityProfile collection
type SecurityFileSecurityProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for FileSecurityProfile collection
func (r *SecurityFileSecurityProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]FileSecurityProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []FileSecurityProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []FileSecurityProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for FileSecurityProfile collection, max N pages
func (r *SecurityFileSecurityProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]FileSecurityProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for FileSecurityProfile collection
func (r *SecurityFileSecurityProfilesCollectionRequest) Get(ctx context.Context) ([]FileSecurityProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for FileSecurityProfile collection
func (r *SecurityFileSecurityProfilesCollectionRequest) Add(ctx context.Context, reqObj *FileSecurityProfile) (resObj *FileSecurityProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// HostSecurityProfiles returns request builder for HostSecurityProfile collection
func (b *SecurityRequestBuilder) HostSecurityProfiles() *SecurityHostSecurityProfilesCollectionRequestBuilder {
	bb := &SecurityHostSecurityProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/hostSecurityProfiles"
	return bb
}

// SecurityHostSecurityProfilesCollectionRequestBuilder is request builder for HostSecurityProfile collection rcn
type SecurityHostSecurityProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for HostSecurityProfile collection
func (b *SecurityHostSecurityProfilesCollectionRequestBuilder) Request() *SecurityHostSecurityProfilesCollectionRequest {
	return &SecurityHostSecurityProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for HostSecurityProfile item
func (b *SecurityHostSecurityProfilesCollectionRequestBuilder) ID(id string) *HostSecurityProfileRequestBuilder {
	bb := &HostSecurityProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityHostSecurityProfilesCollectionRequest is request for HostSecurityProfile collection
type SecurityHostSecurityProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for HostSecurityProfile collection
func (r *SecurityHostSecurityProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]HostSecurityProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []HostSecurityProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []HostSecurityProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for HostSecurityProfile collection, max N pages
func (r *SecurityHostSecurityProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]HostSecurityProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for HostSecurityProfile collection
func (r *SecurityHostSecurityProfilesCollectionRequest) Get(ctx context.Context) ([]HostSecurityProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for HostSecurityProfile collection
func (r *SecurityHostSecurityProfilesCollectionRequest) Add(ctx context.Context, reqObj *HostSecurityProfile) (resObj *HostSecurityProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Incidents returns request builder for SecurityIncident collection
func (b *SecurityRequestBuilder) Incidents() *SecurityIncidentsCollectionRequestBuilder {
	bb := &SecurityIncidentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/incidents"
	return bb
}

// SecurityIncidentsCollectionRequestBuilder is request builder for SecurityIncident collection rcn
type SecurityIncidentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityIncident collection
func (b *SecurityIncidentsCollectionRequestBuilder) Request() *SecurityIncidentsCollectionRequest {
	return &SecurityIncidentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityIncident item
func (b *SecurityIncidentsCollectionRequestBuilder) ID(id string) *SecurityIncidentRequestBuilder {
	bb := &SecurityIncidentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityIncidentsCollectionRequest is request for SecurityIncident collection
type SecurityIncidentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityIncident collection
func (r *SecurityIncidentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityIncident, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityIncident
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityIncident
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityIncident collection, max N pages
func (r *SecurityIncidentsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityIncident, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityIncident collection
func (r *SecurityIncidentsCollectionRequest) Get(ctx context.Context) ([]SecurityIncident, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityIncident collection
func (r *SecurityIncidentsCollectionRequest) Add(ctx context.Context, reqObj *SecurityIncident) (resObj *SecurityIncident, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// InformationProtection is navigation property rn
func (b *SecurityRequestBuilder) InformationProtection() *SecurityInformationProtectionRequestBuilder {
	bb := &SecurityInformationProtectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/informationProtection"
	return bb
}

// IPSecurityProfiles returns request builder for IPSecurityProfile collection
func (b *SecurityRequestBuilder) IPSecurityProfiles() *SecurityIPSecurityProfilesCollectionRequestBuilder {
	bb := &SecurityIPSecurityProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/ipSecurityProfiles"
	return bb
}

// SecurityIPSecurityProfilesCollectionRequestBuilder is request builder for IPSecurityProfile collection rcn
type SecurityIPSecurityProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IPSecurityProfile collection
func (b *SecurityIPSecurityProfilesCollectionRequestBuilder) Request() *SecurityIPSecurityProfilesCollectionRequest {
	return &SecurityIPSecurityProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IPSecurityProfile item
func (b *SecurityIPSecurityProfilesCollectionRequestBuilder) ID(id string) *IPSecurityProfileRequestBuilder {
	bb := &IPSecurityProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityIPSecurityProfilesCollectionRequest is request for IPSecurityProfile collection
type SecurityIPSecurityProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IPSecurityProfile collection
func (r *SecurityIPSecurityProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IPSecurityProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IPSecurityProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IPSecurityProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IPSecurityProfile collection, max N pages
func (r *SecurityIPSecurityProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]IPSecurityProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IPSecurityProfile collection
func (r *SecurityIPSecurityProfilesCollectionRequest) Get(ctx context.Context) ([]IPSecurityProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IPSecurityProfile collection
func (r *SecurityIPSecurityProfilesCollectionRequest) Add(ctx context.Context, reqObj *IPSecurityProfile) (resObj *IPSecurityProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Labels is navigation property rn
func (b *SecurityRequestBuilder) Labels() *SecurityLabelsRootRequestBuilder {
	bb := &SecurityLabelsRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/labels"
	return bb
}

// ProviderTenantSettings returns request builder for ProviderTenantSetting collection
func (b *SecurityRequestBuilder) ProviderTenantSettings() *SecurityProviderTenantSettingsCollectionRequestBuilder {
	bb := &SecurityProviderTenantSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/providerTenantSettings"
	return bb
}

// SecurityProviderTenantSettingsCollectionRequestBuilder is request builder for ProviderTenantSetting collection rcn
type SecurityProviderTenantSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ProviderTenantSetting collection
func (b *SecurityProviderTenantSettingsCollectionRequestBuilder) Request() *SecurityProviderTenantSettingsCollectionRequest {
	return &SecurityProviderTenantSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ProviderTenantSetting item
func (b *SecurityProviderTenantSettingsCollectionRequestBuilder) ID(id string) *ProviderTenantSettingRequestBuilder {
	bb := &ProviderTenantSettingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityProviderTenantSettingsCollectionRequest is request for ProviderTenantSetting collection
type SecurityProviderTenantSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ProviderTenantSetting collection
func (r *SecurityProviderTenantSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ProviderTenantSetting, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ProviderTenantSetting
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ProviderTenantSetting
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ProviderTenantSetting collection, max N pages
func (r *SecurityProviderTenantSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]ProviderTenantSetting, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ProviderTenantSetting collection
func (r *SecurityProviderTenantSettingsCollectionRequest) Get(ctx context.Context) ([]ProviderTenantSetting, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ProviderTenantSetting collection
func (r *SecurityProviderTenantSettingsCollectionRequest) Add(ctx context.Context, reqObj *ProviderTenantSetting) (resObj *ProviderTenantSetting, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecureScoreControlProfiles returns request builder for SecureScoreControlProfile collection
func (b *SecurityRequestBuilder) SecureScoreControlProfiles() *SecuritySecureScoreControlProfilesCollectionRequestBuilder {
	bb := &SecuritySecureScoreControlProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/secureScoreControlProfiles"
	return bb
}

// SecuritySecureScoreControlProfilesCollectionRequestBuilder is request builder for SecureScoreControlProfile collection rcn
type SecuritySecureScoreControlProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecureScoreControlProfile collection
func (b *SecuritySecureScoreControlProfilesCollectionRequestBuilder) Request() *SecuritySecureScoreControlProfilesCollectionRequest {
	return &SecuritySecureScoreControlProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecureScoreControlProfile item
func (b *SecuritySecureScoreControlProfilesCollectionRequestBuilder) ID(id string) *SecureScoreControlProfileRequestBuilder {
	bb := &SecureScoreControlProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecuritySecureScoreControlProfilesCollectionRequest is request for SecureScoreControlProfile collection
type SecuritySecureScoreControlProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecureScoreControlProfile collection
func (r *SecuritySecureScoreControlProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecureScoreControlProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecureScoreControlProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecureScoreControlProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecureScoreControlProfile collection, max N pages
func (r *SecuritySecureScoreControlProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]SecureScoreControlProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecureScoreControlProfile collection
func (r *SecuritySecureScoreControlProfilesCollectionRequest) Get(ctx context.Context) ([]SecureScoreControlProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecureScoreControlProfile collection
func (r *SecuritySecureScoreControlProfilesCollectionRequest) Add(ctx context.Context, reqObj *SecureScoreControlProfile) (resObj *SecureScoreControlProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecureScores returns request builder for SecureScore collection
func (b *SecurityRequestBuilder) SecureScores() *SecuritySecureScoresCollectionRequestBuilder {
	bb := &SecuritySecureScoresCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/secureScores"
	return bb
}

// SecuritySecureScoresCollectionRequestBuilder is request builder for SecureScore collection rcn
type SecuritySecureScoresCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecureScore collection
func (b *SecuritySecureScoresCollectionRequestBuilder) Request() *SecuritySecureScoresCollectionRequest {
	return &SecuritySecureScoresCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecureScore item
func (b *SecuritySecureScoresCollectionRequestBuilder) ID(id string) *SecureScoreRequestBuilder {
	bb := &SecureScoreRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecuritySecureScoresCollectionRequest is request for SecureScore collection
type SecuritySecureScoresCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecureScore collection
func (r *SecuritySecureScoresCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecureScore, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecureScore
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecureScore
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecureScore collection, max N pages
func (r *SecuritySecureScoresCollectionRequest) GetN(ctx context.Context, n int) ([]SecureScore, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecureScore collection
func (r *SecuritySecureScoresCollectionRequest) Get(ctx context.Context) ([]SecureScore, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecureScore collection
func (r *SecuritySecureScoresCollectionRequest) Add(ctx context.Context, reqObj *SecureScore) (resObj *SecureScore, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityActions returns request builder for SecurityAction collection
func (b *SecurityRequestBuilder) SecurityActions() *SecuritySecurityActionsCollectionRequestBuilder {
	bb := &SecuritySecurityActionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/securityActions"
	return bb
}

// SecuritySecurityActionsCollectionRequestBuilder is request builder for SecurityAction collection rcn
type SecuritySecurityActionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityAction collection
func (b *SecuritySecurityActionsCollectionRequestBuilder) Request() *SecuritySecurityActionsCollectionRequest {
	return &SecuritySecurityActionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityAction item
func (b *SecuritySecurityActionsCollectionRequestBuilder) ID(id string) *SecurityActionRequestBuilder {
	bb := &SecurityActionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecuritySecurityActionsCollectionRequest is request for SecurityAction collection
type SecuritySecurityActionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityAction collection
func (r *SecuritySecurityActionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityAction, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityAction
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityAction
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityAction collection, max N pages
func (r *SecuritySecurityActionsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityAction, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityAction collection
func (r *SecuritySecurityActionsCollectionRequest) Get(ctx context.Context) ([]SecurityAction, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityAction collection
func (r *SecuritySecurityActionsCollectionRequest) Add(ctx context.Context, reqObj *SecurityAction) (resObj *SecurityAction, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SubjectRightsRequests returns request builder for SubjectRightsRequestObject collection
func (b *SecurityRequestBuilder) SubjectRightsRequests() *SecuritySubjectRightsRequestsCollectionRequestBuilder {
	bb := &SecuritySubjectRightsRequestsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/subjectRightsRequests"
	return bb
}

// SecuritySubjectRightsRequestsCollectionRequestBuilder is request builder for SubjectRightsRequestObject collection rcn
type SecuritySubjectRightsRequestsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SubjectRightsRequestObject collection
func (b *SecuritySubjectRightsRequestsCollectionRequestBuilder) Request() *SecuritySubjectRightsRequestsCollectionRequest {
	return &SecuritySubjectRightsRequestsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SubjectRightsRequestObject item
func (b *SecuritySubjectRightsRequestsCollectionRequestBuilder) ID(id string) *SubjectRightsRequestObjectRequestBuilder {
	bb := &SubjectRightsRequestObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecuritySubjectRightsRequestsCollectionRequest is request for SubjectRightsRequestObject collection
type SecuritySubjectRightsRequestsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SubjectRightsRequestObject collection
func (r *SecuritySubjectRightsRequestsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SubjectRightsRequestObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SubjectRightsRequestObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SubjectRightsRequestObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SubjectRightsRequestObject collection, max N pages
func (r *SecuritySubjectRightsRequestsCollectionRequest) GetN(ctx context.Context, n int) ([]SubjectRightsRequestObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SubjectRightsRequestObject collection
func (r *SecuritySubjectRightsRequestsCollectionRequest) Get(ctx context.Context) ([]SubjectRightsRequestObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SubjectRightsRequestObject collection
func (r *SecuritySubjectRightsRequestsCollectionRequest) Add(ctx context.Context, reqObj *SubjectRightsRequestObject) (resObj *SubjectRightsRequestObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ThreatIntelligence is navigation property rn
func (b *SecurityRequestBuilder) ThreatIntelligence() *SecurityThreatIntelligenceRequestBuilder {
	bb := &SecurityThreatIntelligenceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/threatIntelligence"
	return bb
}

// ThreatSubmission is navigation property rn
func (b *SecurityRequestBuilder) ThreatSubmission() *SecurityThreatSubmissionRootRequestBuilder {
	bb := &SecurityThreatSubmissionRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/threatSubmission"
	return bb
}

// TiIndicators returns request builder for TiIndicator collection
func (b *SecurityRequestBuilder) TiIndicators() *SecurityTiIndicatorsCollectionRequestBuilder {
	bb := &SecurityTiIndicatorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tiIndicators"
	return bb
}

// SecurityTiIndicatorsCollectionRequestBuilder is request builder for TiIndicator collection rcn
type SecurityTiIndicatorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TiIndicator collection
func (b *SecurityTiIndicatorsCollectionRequestBuilder) Request() *SecurityTiIndicatorsCollectionRequest {
	return &SecurityTiIndicatorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TiIndicator item
func (b *SecurityTiIndicatorsCollectionRequestBuilder) ID(id string) *TiIndicatorRequestBuilder {
	bb := &TiIndicatorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityTiIndicatorsCollectionRequest is request for TiIndicator collection
type SecurityTiIndicatorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TiIndicator collection
func (r *SecurityTiIndicatorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TiIndicator, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TiIndicator
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TiIndicator
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TiIndicator collection, max N pages
func (r *SecurityTiIndicatorsCollectionRequest) GetN(ctx context.Context, n int) ([]TiIndicator, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TiIndicator collection
func (r *SecurityTiIndicatorsCollectionRequest) Get(ctx context.Context) ([]TiIndicator, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TiIndicator collection
func (r *SecurityTiIndicatorsCollectionRequest) Add(ctx context.Context, reqObj *TiIndicator) (resObj *TiIndicator, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TriggerTypes is navigation property rn
func (b *SecurityRequestBuilder) TriggerTypes() *SecurityTriggerTypesRootRequestBuilder {
	bb := &SecurityTriggerTypesRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/triggerTypes"
	return bb
}

// Triggers is navigation property rn
func (b *SecurityRequestBuilder) Triggers() *SecurityTriggersRootRequestBuilder {
	bb := &SecurityTriggersRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/triggers"
	return bb
}

// UserSecurityProfiles returns request builder for UserSecurityProfile collection
func (b *SecurityRequestBuilder) UserSecurityProfiles() *SecurityUserSecurityProfilesCollectionRequestBuilder {
	bb := &SecurityUserSecurityProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userSecurityProfiles"
	return bb
}

// SecurityUserSecurityProfilesCollectionRequestBuilder is request builder for UserSecurityProfile collection rcn
type SecurityUserSecurityProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserSecurityProfile collection
func (b *SecurityUserSecurityProfilesCollectionRequestBuilder) Request() *SecurityUserSecurityProfilesCollectionRequest {
	return &SecurityUserSecurityProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserSecurityProfile item
func (b *SecurityUserSecurityProfilesCollectionRequestBuilder) ID(id string) *UserSecurityProfileRequestBuilder {
	bb := &UserSecurityProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityUserSecurityProfilesCollectionRequest is request for UserSecurityProfile collection
type SecurityUserSecurityProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserSecurityProfile collection
func (r *SecurityUserSecurityProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserSecurityProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserSecurityProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserSecurityProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserSecurityProfile collection, max N pages
func (r *SecurityUserSecurityProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]UserSecurityProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserSecurityProfile collection
func (r *SecurityUserSecurityProfilesCollectionRequest) Get(ctx context.Context) ([]UserSecurityProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserSecurityProfile collection
func (r *SecurityUserSecurityProfilesCollectionRequest) Add(ctx context.Context, reqObj *UserSecurityProfile) (resObj *UserSecurityProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SettingStates returns request builder for SecurityBaselineSettingState collection
func (b *SecurityBaselineStateRequestBuilder) SettingStates() *SecurityBaselineStateSettingStatesCollectionRequestBuilder {
	bb := &SecurityBaselineStateSettingStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settingStates"
	return bb
}

// SecurityBaselineStateSettingStatesCollectionRequestBuilder is request builder for SecurityBaselineSettingState collection rcn
type SecurityBaselineStateSettingStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityBaselineSettingState collection
func (b *SecurityBaselineStateSettingStatesCollectionRequestBuilder) Request() *SecurityBaselineStateSettingStatesCollectionRequest {
	return &SecurityBaselineStateSettingStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityBaselineSettingState item
func (b *SecurityBaselineStateSettingStatesCollectionRequestBuilder) ID(id string) *SecurityBaselineSettingStateRequestBuilder {
	bb := &SecurityBaselineSettingStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityBaselineStateSettingStatesCollectionRequest is request for SecurityBaselineSettingState collection
type SecurityBaselineStateSettingStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityBaselineSettingState collection
func (r *SecurityBaselineStateSettingStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityBaselineSettingState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityBaselineSettingState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityBaselineSettingState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityBaselineSettingState collection, max N pages
func (r *SecurityBaselineStateSettingStatesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityBaselineSettingState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityBaselineSettingState collection
func (r *SecurityBaselineStateSettingStatesCollectionRequest) Get(ctx context.Context) ([]SecurityBaselineSettingState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityBaselineSettingState collection
func (r *SecurityBaselineStateSettingStatesCollectionRequest) Add(ctx context.Context, reqObj *SecurityBaselineSettingState) (resObj *SecurityBaselineSettingState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CategoryDeviceStateSummaries returns request builder for SecurityBaselineCategoryStateSummary collection
func (b *SecurityBaselineTemplateRequestBuilder) CategoryDeviceStateSummaries() *SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequestBuilder {
	bb := &SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/categoryDeviceStateSummaries"
	return bb
}

// SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequestBuilder is request builder for SecurityBaselineCategoryStateSummary collection rcn
type SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityBaselineCategoryStateSummary collection
func (b *SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequestBuilder) Request() *SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequest {
	return &SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityBaselineCategoryStateSummary item
func (b *SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequestBuilder) ID(id string) *SecurityBaselineCategoryStateSummaryRequestBuilder {
	bb := &SecurityBaselineCategoryStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequest is request for SecurityBaselineCategoryStateSummary collection
type SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityBaselineCategoryStateSummary collection
func (r *SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityBaselineCategoryStateSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityBaselineCategoryStateSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityBaselineCategoryStateSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityBaselineCategoryStateSummary collection, max N pages
func (r *SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityBaselineCategoryStateSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityBaselineCategoryStateSummary collection
func (r *SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequest) Get(ctx context.Context) ([]SecurityBaselineCategoryStateSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityBaselineCategoryStateSummary collection
func (r *SecurityBaselineTemplateCategoryDeviceStateSummariesCollectionRequest) Add(ctx context.Context, reqObj *SecurityBaselineCategoryStateSummary) (resObj *SecurityBaselineCategoryStateSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeviceStateSummary is navigation property rn
func (b *SecurityBaselineTemplateRequestBuilder) DeviceStateSummary() *SecurityBaselineStateSummaryRequestBuilder {
	bb := &SecurityBaselineStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStateSummary"
	return bb
}

// DeviceStates returns request builder for SecurityBaselineDeviceState collection
func (b *SecurityBaselineTemplateRequestBuilder) DeviceStates() *SecurityBaselineTemplateDeviceStatesCollectionRequestBuilder {
	bb := &SecurityBaselineTemplateDeviceStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStates"
	return bb
}

// SecurityBaselineTemplateDeviceStatesCollectionRequestBuilder is request builder for SecurityBaselineDeviceState collection rcn
type SecurityBaselineTemplateDeviceStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityBaselineDeviceState collection
func (b *SecurityBaselineTemplateDeviceStatesCollectionRequestBuilder) Request() *SecurityBaselineTemplateDeviceStatesCollectionRequest {
	return &SecurityBaselineTemplateDeviceStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityBaselineDeviceState item
func (b *SecurityBaselineTemplateDeviceStatesCollectionRequestBuilder) ID(id string) *SecurityBaselineDeviceStateRequestBuilder {
	bb := &SecurityBaselineDeviceStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityBaselineTemplateDeviceStatesCollectionRequest is request for SecurityBaselineDeviceState collection
type SecurityBaselineTemplateDeviceStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityBaselineDeviceState collection
func (r *SecurityBaselineTemplateDeviceStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityBaselineDeviceState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityBaselineDeviceState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityBaselineDeviceState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityBaselineDeviceState collection, max N pages
func (r *SecurityBaselineTemplateDeviceStatesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityBaselineDeviceState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityBaselineDeviceState collection
func (r *SecurityBaselineTemplateDeviceStatesCollectionRequest) Get(ctx context.Context) ([]SecurityBaselineDeviceState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityBaselineDeviceState collection
func (r *SecurityBaselineTemplateDeviceStatesCollectionRequest) Add(ctx context.Context, reqObj *SecurityBaselineDeviceState) (resObj *SecurityBaselineDeviceState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDevices returns request builder for VulnerableManagedDevice collection
func (b *SecurityConfigurationTaskRequestBuilder) ManagedDevices() *SecurityConfigurationTaskManagedDevicesCollectionRequestBuilder {
	bb := &SecurityConfigurationTaskManagedDevicesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDevices"
	return bb
}

// SecurityConfigurationTaskManagedDevicesCollectionRequestBuilder is request builder for VulnerableManagedDevice collection rcn
type SecurityConfigurationTaskManagedDevicesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for VulnerableManagedDevice collection
func (b *SecurityConfigurationTaskManagedDevicesCollectionRequestBuilder) Request() *SecurityConfigurationTaskManagedDevicesCollectionRequest {
	return &SecurityConfigurationTaskManagedDevicesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for VulnerableManagedDevice item
func (b *SecurityConfigurationTaskManagedDevicesCollectionRequestBuilder) ID(id string) *VulnerableManagedDeviceRequestBuilder {
	bb := &VulnerableManagedDeviceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityConfigurationTaskManagedDevicesCollectionRequest is request for VulnerableManagedDevice collection
type SecurityConfigurationTaskManagedDevicesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for VulnerableManagedDevice collection
func (r *SecurityConfigurationTaskManagedDevicesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]VulnerableManagedDevice, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []VulnerableManagedDevice
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []VulnerableManagedDevice
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for VulnerableManagedDevice collection, max N pages
func (r *SecurityConfigurationTaskManagedDevicesCollectionRequest) GetN(ctx context.Context, n int) ([]VulnerableManagedDevice, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for VulnerableManagedDevice collection
func (r *SecurityConfigurationTaskManagedDevicesCollectionRequest) Get(ctx context.Context) ([]VulnerableManagedDevice, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for VulnerableManagedDevice collection
func (r *SecurityConfigurationTaskManagedDevicesCollectionRequest) Add(ctx context.Context, reqObj *VulnerableManagedDevice) (resObj *VulnerableManagedDevice, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *SecurityRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *SecurityActionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// SecurityBaselineStateSummary is navigation property rn
func (b *SecurityBaselineCategoryStateSummaryRequestBuilder) SecurityBaselineStateSummary() *SecurityBaselineStateSummaryRequestBuilder {
	bb := &SecurityBaselineStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityBaselineStateSummary"
	return bb
}

// Entity is navigation property rn
func (b *SecurityBaselineDeviceStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *SecurityBaselineSettingStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *SecurityBaselineStateRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// SecurityBaselineTemplate returns request builder for SecurityBaselineTemplate collection
func (b *DeviceManagementTemplatesCollectionRequestBuilder) SecurityBaselineTemplate() *DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequestBuilder {
	bb := &DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequestBuilder is request builder for SecurityBaselineTemplate collection rcn
type DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityBaselineTemplate collection
func (b *DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequestBuilder) Request() *DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequest {
	return &DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityBaselineTemplate item
func (b *DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequestBuilder) ID(id string) *SecurityBaselineTemplateRequestBuilder {
	bb := &SecurityBaselineTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequest is request for SecurityBaselineTemplate collection
type DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityBaselineTemplate collection
func (r *DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityBaselineTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityBaselineTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityBaselineTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityBaselineTemplate collection, max N pages
func (r *DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityBaselineTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityBaselineTemplate collection
func (r *DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequest) Get(ctx context.Context) ([]SecurityBaselineTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityBaselineTemplate collection
func (r *DeviceManagementTemplatesCollectionSecurityBaselineTemplateCollectionRequest) Add(ctx context.Context, reqObj *SecurityBaselineTemplate) (resObj *SecurityBaselineTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityConfigurationTask returns request builder for SecurityConfigurationTask collection
func (b *DeviceAppManagementDeviceAppManagementTasksCollectionRequestBuilder) SecurityConfigurationTask() *DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequestBuilder {
	bb := &DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequestBuilder is request builder for SecurityConfigurationTask collection rcn
type DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityConfigurationTask collection
func (b *DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequestBuilder) Request() *DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequest {
	return &DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityConfigurationTask item
func (b *DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequestBuilder) ID(id string) *SecurityConfigurationTaskRequestBuilder {
	bb := &SecurityConfigurationTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequest is request for SecurityConfigurationTask collection
type DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityConfigurationTask collection
func (r *DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityConfigurationTask, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityConfigurationTask
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityConfigurationTask
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityConfigurationTask collection, max N pages
func (r *DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityConfigurationTask, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityConfigurationTask collection
func (r *DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequest) Get(ctx context.Context) ([]SecurityConfigurationTask, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityConfigurationTask collection
func (r *DeviceAppManagementDeviceAppManagementTasksCollectionSecurityConfigurationTaskCollectionRequest) Add(ctx context.Context, reqObj *SecurityConfigurationTask) (resObj *SecurityConfigurationTask, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *SecurityReportsRootRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// SecurityEdiscoveryCustodianCollectionSecurityApplyHoldRequestParameter undocumented
type SecurityEdiscoveryCustodianCollectionSecurityApplyHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// SecurityEdiscoveryCustodianCollectionSecurityRemoveHoldRequestParameter undocumented
type SecurityEdiscoveryCustodianCollectionSecurityRemoveHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// SecurityEdiscoveryNoncustodialDataSourceCollectionSecurityApplyHoldRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceCollectionSecurityApplyHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// SecurityEdiscoveryNoncustodialDataSourceCollectionSecurityRemoveHoldRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceCollectionSecurityRemoveHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// SecuritySensitivityLabelCollectionSecurityEvaluateApplicationRequestParameter undocumented
type SecuritySensitivityLabelCollectionSecurityEvaluateApplicationRequestParameter struct {
	// ContentInfo undocumented
	ContentInfo *SecurityContentInfo `json:"contentInfo,omitempty"`
	// LabelingOptions undocumented
	LabelingOptions *SecurityLabelingOptions `json:"labelingOptions,omitempty"`
}

// SecuritySensitivityLabelCollectionSecurityEvaluateClassificationResultsRequestParameter undocumented
type SecuritySensitivityLabelCollectionSecurityEvaluateClassificationResultsRequestParameter struct {
	// ContentInfo undocumented
	ContentInfo *SecurityContentInfo `json:"contentInfo,omitempty"`
	// ClassificationResults undocumented
	ClassificationResults []SecurityClassificationResult `json:"classificationResults,omitempty"`
}

// SecuritySensitivityLabelCollectionSecurityEvaluateRemovalRequestParameter undocumented
type SecuritySensitivityLabelCollectionSecurityEvaluateRemovalRequestParameter struct {
	// ContentInfo undocumented
	ContentInfo *SecurityContentInfo `json:"contentInfo,omitempty"`
	// DowngradeJustification undocumented
	DowngradeJustification *SecurityDowngradeJustification `json:"downgradeJustification,omitempty"`
}

// SecuritySensitivityLabelCollectionSecurityExtractContentLabelRequestParameter undocumented
type SecuritySensitivityLabelCollectionSecurityExtractContentLabelRequestParameter struct {
	// ContentInfo undocumented
	ContentInfo *SecurityContentInfo `json:"contentInfo,omitempty"`
}

// SecuritySecurityRunHuntingQueryRequestParameter undocumented
type SecuritySecurityRunHuntingQueryRequestParameter struct {
	// Query undocumented
	Query *string `json:"query,omitempty"`
}

// SecurityEdiscoveryCaseSecurityCloseRequestParameter undocumented
type SecurityEdiscoveryCaseSecurityCloseRequestParameter struct {
}

// SecurityEdiscoveryCaseSecurityReopenRequestParameter undocumented
type SecurityEdiscoveryCaseSecurityReopenRequestParameter struct {
}

// SecurityEdiscoveryCaseSettingsSecurityResetToDefaultRequestParameter undocumented
type SecurityEdiscoveryCaseSettingsSecurityResetToDefaultRequestParameter struct {
}

// SecurityEdiscoveryCustodianSecurityActivateRequestParameter undocumented
type SecurityEdiscoveryCustodianSecurityActivateRequestParameter struct {
}

// SecurityEdiscoveryCustodianSecurityApplyHoldRequestParameter undocumented
type SecurityEdiscoveryCustodianSecurityApplyHoldRequestParameter struct {
}

// SecurityEdiscoveryCustodianSecurityReleaseRequestParameter undocumented
type SecurityEdiscoveryCustodianSecurityReleaseRequestParameter struct {
}

// SecurityEdiscoveryCustodianSecurityRemoveHoldRequestParameter undocumented
type SecurityEdiscoveryCustodianSecurityRemoveHoldRequestParameter struct {
}

// SecurityEdiscoveryCustodianSecurityUpdateIndexRequestParameter undocumented
type SecurityEdiscoveryCustodianSecurityUpdateIndexRequestParameter struct {
}

// SecurityEdiscoveryNoncustodialDataSourceSecurityApplyHoldRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceSecurityApplyHoldRequestParameter struct {
}

// SecurityEdiscoveryNoncustodialDataSourceSecurityReleaseRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceSecurityReleaseRequestParameter struct {
}

// SecurityEdiscoveryNoncustodialDataSourceSecurityRemoveHoldRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceSecurityRemoveHoldRequestParameter struct {
}

// SecurityEdiscoveryNoncustodialDataSourceSecurityUpdateIndexRequestParameter undocumented
type SecurityEdiscoveryNoncustodialDataSourceSecurityUpdateIndexRequestParameter struct {
}

// SecurityEdiscoveryReviewSetSecurityAddToReviewSetRequestParameter undocumented
type SecurityEdiscoveryReviewSetSecurityAddToReviewSetRequestParameter struct {
	// Search undocumented
	Search *SecurityEdiscoverySearch `json:"search,omitempty"`
	// AdditionalDataOptions undocumented
	AdditionalDataOptions *SecurityAdditionalDataOptions `json:"additionalDataOptions,omitempty"`
}

// SecurityEdiscoveryReviewSetSecurityExportRequestParameter undocumented
type SecurityEdiscoveryReviewSetSecurityExportRequestParameter struct {
	// OutputName undocumented
	OutputName *string `json:"outputName,omitempty"`
	// Description undocumented
	Description *string `json:"description,omitempty"`
	// AzureBlobContainer undocumented
	AzureBlobContainer *string `json:"azureBlobContainer,omitempty"`
	// AzureBlobToken undocumented
	AzureBlobToken *string `json:"azureBlobToken,omitempty"`
	// ExportOptions undocumented
	ExportOptions *SecurityExportOptions `json:"exportOptions,omitempty"`
	// ExportStructure undocumented
	ExportStructure *SecurityExportFileStructure `json:"exportStructure,omitempty"`
}

// SecurityEdiscoveryReviewSetQuerySecurityExportRequestParameter undocumented
type SecurityEdiscoveryReviewSetQuerySecurityExportRequestParameter struct {
	// OutputName undocumented
	OutputName *string `json:"outputName,omitempty"`
	// Description undocumented
	Description *string `json:"description,omitempty"`
	// AzureBlobContainer undocumented
	AzureBlobContainer *string `json:"azureBlobContainer,omitempty"`
	// AzureBlobToken undocumented
	AzureBlobToken *string `json:"azureBlobToken,omitempty"`
	// ExportOptions undocumented
	ExportOptions *SecurityExportOptions `json:"exportOptions,omitempty"`
	// ExportStructure undocumented
	ExportStructure *SecurityExportFileStructure `json:"exportStructure,omitempty"`
}

// SecurityEdiscoveryReviewSetQuerySecurityApplyTagsRequestParameter undocumented
type SecurityEdiscoveryReviewSetQuerySecurityApplyTagsRequestParameter struct {
	// TagsToAdd undocumented
	TagsToAdd []SecurityEdiscoveryReviewTag `json:"tagsToAdd,omitempty"`
	// TagsToRemove undocumented
	TagsToRemove []SecurityEdiscoveryReviewTag `json:"tagsToRemove,omitempty"`
}

// SecurityEdiscoverySearchSecurityEstimateStatisticsRequestParameter undocumented
type SecurityEdiscoverySearchSecurityEstimateStatisticsRequestParameter struct {
}

// SecurityEdiscoverySearchSecurityPurgeDataRequestParameter undocumented
type SecurityEdiscoverySearchSecurityPurgeDataRequestParameter struct {
	// PurgeType undocumented
	PurgeType *SecurityPurgeType `json:"purgeType,omitempty"`
	// PurgeAreas undocumented
	PurgeAreas *SecurityPurgeAreas `json:"purgeAreas,omitempty"`
}

// SecurityThreatSubmissionSecurityReviewRequestParameter undocumented
type SecurityThreatSubmissionSecurityReviewRequestParameter struct {
	// Category undocumented
	Category *string `json:"category,omitempty"`
}

// Indicators returns request builder for SecurityArticleIndicator collection
func (b *SecurityArticleRequestBuilder) Indicators() *SecurityArticleIndicatorsCollectionRequestBuilder {
	bb := &SecurityArticleIndicatorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/indicators"
	return bb
}

// SecurityArticleIndicatorsCollectionRequestBuilder is request builder for SecurityArticleIndicator collection rcn
type SecurityArticleIndicatorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityArticleIndicator collection
func (b *SecurityArticleIndicatorsCollectionRequestBuilder) Request() *SecurityArticleIndicatorsCollectionRequest {
	return &SecurityArticleIndicatorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityArticleIndicator item
func (b *SecurityArticleIndicatorsCollectionRequestBuilder) ID(id string) *SecurityArticleIndicatorRequestBuilder {
	bb := &SecurityArticleIndicatorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityArticleIndicatorsCollectionRequest is request for SecurityArticleIndicator collection
type SecurityArticleIndicatorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityArticleIndicator collection
func (r *SecurityArticleIndicatorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityArticleIndicator, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityArticleIndicator
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityArticleIndicator
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityArticleIndicator collection, max N pages
func (r *SecurityArticleIndicatorsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityArticleIndicator, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityArticleIndicator collection
func (r *SecurityArticleIndicatorsCollectionRequest) Get(ctx context.Context) ([]SecurityArticleIndicator, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityArticleIndicator collection
func (r *SecurityArticleIndicatorsCollectionRequest) Add(ctx context.Context, reqObj *SecurityArticleIndicator) (resObj *SecurityArticleIndicator, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EdiscoveryCases returns request builder for SecurityEdiscoveryCase collection
func (b *SecurityCasesRootRequestBuilder) EdiscoveryCases() *SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder {
	bb := &SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/ediscoveryCases"
	return bb
}

// SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder is request builder for SecurityEdiscoveryCase collection rcn
type SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryCase collection
func (b *SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder) Request() *SecurityCasesRootEdiscoveryCasesCollectionRequest {
	return &SecurityCasesRootEdiscoveryCasesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryCase item
func (b *SecurityCasesRootEdiscoveryCasesCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryCaseRequestBuilder {
	bb := &SecurityEdiscoveryCaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCasesRootEdiscoveryCasesCollectionRequest is request for SecurityEdiscoveryCase collection
type SecurityCasesRootEdiscoveryCasesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryCase collection
func (r *SecurityCasesRootEdiscoveryCasesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryCase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryCase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryCase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryCase collection, max N pages
func (r *SecurityCasesRootEdiscoveryCasesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryCase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryCase collection
func (r *SecurityCasesRootEdiscoveryCasesCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryCase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryCase collection
func (r *SecurityCasesRootEdiscoveryCasesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryCase) (resObj *SecurityEdiscoveryCase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReviewSet is navigation property rn
func (b *SecurityEdiscoveryAddToReviewSetOperationRequestBuilder) ReviewSet() *SecurityEdiscoveryReviewSetRequestBuilder {
	bb := &SecurityEdiscoveryReviewSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reviewSet"
	return bb
}

// Search is navigation property rn
func (b *SecurityEdiscoveryAddToReviewSetOperationRequestBuilder) Search() *SecurityEdiscoverySearchRequestBuilder {
	bb := &SecurityEdiscoverySearchRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/search"
	return bb
}

// Custodians returns request builder for SecurityEdiscoveryCustodian collection
func (b *SecurityEdiscoveryCaseRequestBuilder) Custodians() *SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/custodians"
	return bb
}

// SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder is request builder for SecurityEdiscoveryCustodian collection rcn
type SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryCustodian collection
func (b *SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseCustodiansCollectionRequest {
	return &SecurityEdiscoveryCaseCustodiansCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryCustodian item
func (b *SecurityEdiscoveryCaseCustodiansCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryCustodianRequestBuilder {
	bb := &SecurityEdiscoveryCustodianRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseCustodiansCollectionRequest is request for SecurityEdiscoveryCustodian collection
type SecurityEdiscoveryCaseCustodiansCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryCustodian collection
func (r *SecurityEdiscoveryCaseCustodiansCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryCustodian, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryCustodian
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryCustodian
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryCustodian collection, max N pages
func (r *SecurityEdiscoveryCaseCustodiansCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryCustodian, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryCustodian collection
func (r *SecurityEdiscoveryCaseCustodiansCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryCustodian, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryCustodian collection
func (r *SecurityEdiscoveryCaseCustodiansCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryCustodian) (resObj *SecurityEdiscoveryCustodian, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// LegalHolds returns request builder for SecurityEdiscoveryHoldPolicy collection
func (b *SecurityEdiscoveryCaseRequestBuilder) LegalHolds() *SecurityEdiscoveryCaseLegalHoldsCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseLegalHoldsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/legalHolds"
	return bb
}

// SecurityEdiscoveryCaseLegalHoldsCollectionRequestBuilder is request builder for SecurityEdiscoveryHoldPolicy collection rcn
type SecurityEdiscoveryCaseLegalHoldsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryHoldPolicy collection
func (b *SecurityEdiscoveryCaseLegalHoldsCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseLegalHoldsCollectionRequest {
	return &SecurityEdiscoveryCaseLegalHoldsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryHoldPolicy item
func (b *SecurityEdiscoveryCaseLegalHoldsCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryHoldPolicyRequestBuilder {
	bb := &SecurityEdiscoveryHoldPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseLegalHoldsCollectionRequest is request for SecurityEdiscoveryHoldPolicy collection
type SecurityEdiscoveryCaseLegalHoldsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryHoldPolicy collection
func (r *SecurityEdiscoveryCaseLegalHoldsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryHoldPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryHoldPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryHoldPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryHoldPolicy collection, max N pages
func (r *SecurityEdiscoveryCaseLegalHoldsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryHoldPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryHoldPolicy collection
func (r *SecurityEdiscoveryCaseLegalHoldsCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryHoldPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryHoldPolicy collection
func (r *SecurityEdiscoveryCaseLegalHoldsCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryHoldPolicy) (resObj *SecurityEdiscoveryHoldPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// NoncustodialDataSources returns request builder for SecurityEdiscoveryNoncustodialDataSource collection
func (b *SecurityEdiscoveryCaseRequestBuilder) NoncustodialDataSources() *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/noncustodialDataSources"
	return bb
}

// SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder is request builder for SecurityEdiscoveryNoncustodialDataSource collection rcn
type SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryNoncustodialDataSource collection
func (b *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest {
	return &SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryNoncustodialDataSource item
func (b *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryNoncustodialDataSourceRequestBuilder {
	bb := &SecurityEdiscoveryNoncustodialDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest is request for SecurityEdiscoveryNoncustodialDataSource collection
type SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryNoncustodialDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryNoncustodialDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryNoncustodialDataSource collection, max N pages
func (r *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoveryCaseNoncustodialDataSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryNoncustodialDataSource) (resObj *SecurityEdiscoveryNoncustodialDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Operations returns request builder for SecurityCaseOperation collection
func (b *SecurityEdiscoveryCaseRequestBuilder) Operations() *SecurityEdiscoveryCaseOperationsCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// SecurityEdiscoveryCaseOperationsCollectionRequestBuilder is request builder for SecurityCaseOperation collection rcn
type SecurityEdiscoveryCaseOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityCaseOperation collection
func (b *SecurityEdiscoveryCaseOperationsCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseOperationsCollectionRequest {
	return &SecurityEdiscoveryCaseOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityCaseOperation item
func (b *SecurityEdiscoveryCaseOperationsCollectionRequestBuilder) ID(id string) *SecurityCaseOperationRequestBuilder {
	bb := &SecurityCaseOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseOperationsCollectionRequest is request for SecurityCaseOperation collection
type SecurityEdiscoveryCaseOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityCaseOperation collection
func (r *SecurityEdiscoveryCaseOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityCaseOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityCaseOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityCaseOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityCaseOperation collection, max N pages
func (r *SecurityEdiscoveryCaseOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityCaseOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityCaseOperation collection
func (r *SecurityEdiscoveryCaseOperationsCollectionRequest) Get(ctx context.Context) ([]SecurityCaseOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityCaseOperation collection
func (r *SecurityEdiscoveryCaseOperationsCollectionRequest) Add(ctx context.Context, reqObj *SecurityCaseOperation) (resObj *SecurityCaseOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReviewSets returns request builder for SecurityEdiscoveryReviewSet collection
func (b *SecurityEdiscoveryCaseRequestBuilder) ReviewSets() *SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reviewSets"
	return bb
}

// SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder is request builder for SecurityEdiscoveryReviewSet collection rcn
type SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryReviewSet collection
func (b *SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseReviewSetsCollectionRequest {
	return &SecurityEdiscoveryCaseReviewSetsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryReviewSet item
func (b *SecurityEdiscoveryCaseReviewSetsCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryReviewSetRequestBuilder {
	bb := &SecurityEdiscoveryReviewSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseReviewSetsCollectionRequest is request for SecurityEdiscoveryReviewSet collection
type SecurityEdiscoveryCaseReviewSetsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryReviewSet collection
func (r *SecurityEdiscoveryCaseReviewSetsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryReviewSet, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryReviewSet
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryReviewSet
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryReviewSet collection, max N pages
func (r *SecurityEdiscoveryCaseReviewSetsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryReviewSet, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryReviewSet collection
func (r *SecurityEdiscoveryCaseReviewSetsCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryReviewSet, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryReviewSet collection
func (r *SecurityEdiscoveryCaseReviewSetsCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryReviewSet) (resObj *SecurityEdiscoveryReviewSet, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Searches returns request builder for SecurityEdiscoverySearch collection
func (b *SecurityEdiscoveryCaseRequestBuilder) Searches() *SecurityEdiscoveryCaseSearchesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseSearchesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/searches"
	return bb
}

// SecurityEdiscoveryCaseSearchesCollectionRequestBuilder is request builder for SecurityEdiscoverySearch collection rcn
type SecurityEdiscoveryCaseSearchesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoverySearch collection
func (b *SecurityEdiscoveryCaseSearchesCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseSearchesCollectionRequest {
	return &SecurityEdiscoveryCaseSearchesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoverySearch item
func (b *SecurityEdiscoveryCaseSearchesCollectionRequestBuilder) ID(id string) *SecurityEdiscoverySearchRequestBuilder {
	bb := &SecurityEdiscoverySearchRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseSearchesCollectionRequest is request for SecurityEdiscoverySearch collection
type SecurityEdiscoveryCaseSearchesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoverySearch collection
func (r *SecurityEdiscoveryCaseSearchesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoverySearch, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoverySearch
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoverySearch
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoverySearch collection, max N pages
func (r *SecurityEdiscoveryCaseSearchesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoverySearch, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoverySearch collection
func (r *SecurityEdiscoveryCaseSearchesCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoverySearch, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoverySearch collection
func (r *SecurityEdiscoveryCaseSearchesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoverySearch) (resObj *SecurityEdiscoverySearch, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Settings is navigation property rn
func (b *SecurityEdiscoveryCaseRequestBuilder) Settings() *SecurityEdiscoveryCaseSettingsRequestBuilder {
	bb := &SecurityEdiscoveryCaseSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// Tags returns request builder for SecurityEdiscoveryReviewTag collection
func (b *SecurityEdiscoveryCaseRequestBuilder) Tags() *SecurityEdiscoveryCaseTagsCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCaseTagsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tags"
	return bb
}

// SecurityEdiscoveryCaseTagsCollectionRequestBuilder is request builder for SecurityEdiscoveryReviewTag collection rcn
type SecurityEdiscoveryCaseTagsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryReviewTag collection
func (b *SecurityEdiscoveryCaseTagsCollectionRequestBuilder) Request() *SecurityEdiscoveryCaseTagsCollectionRequest {
	return &SecurityEdiscoveryCaseTagsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryReviewTag item
func (b *SecurityEdiscoveryCaseTagsCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryReviewTagRequestBuilder {
	bb := &SecurityEdiscoveryReviewTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCaseTagsCollectionRequest is request for SecurityEdiscoveryReviewTag collection
type SecurityEdiscoveryCaseTagsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryCaseTagsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryReviewTag, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryReviewTag
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryReviewTag
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryReviewTag collection, max N pages
func (r *SecurityEdiscoveryCaseTagsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryReviewTag, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryCaseTagsCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryReviewTag, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryCaseTagsCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryReviewTag) (resObj *SecurityEdiscoveryReviewTag, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// LastIndexOperation is navigation property rn
func (b *SecurityEdiscoveryCustodianRequestBuilder) LastIndexOperation() *SecurityEdiscoveryIndexOperationRequestBuilder {
	bb := &SecurityEdiscoveryIndexOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastIndexOperation"
	return bb
}

// SiteSources returns request builder for SecuritySiteSource collection
func (b *SecurityEdiscoveryCustodianRequestBuilder) SiteSources() *SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/siteSources"
	return bb
}

// SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder is request builder for SecuritySiteSource collection rcn
type SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecuritySiteSource collection
func (b *SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder) Request() *SecurityEdiscoveryCustodianSiteSourcesCollectionRequest {
	return &SecurityEdiscoveryCustodianSiteSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecuritySiteSource item
func (b *SecurityEdiscoveryCustodianSiteSourcesCollectionRequestBuilder) ID(id string) *SecuritySiteSourceRequestBuilder {
	bb := &SecuritySiteSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCustodianSiteSourcesCollectionRequest is request for SecuritySiteSource collection
type SecurityEdiscoveryCustodianSiteSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecuritySiteSource collection
func (r *SecurityEdiscoveryCustodianSiteSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecuritySiteSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecuritySiteSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecuritySiteSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecuritySiteSource collection, max N pages
func (r *SecurityEdiscoveryCustodianSiteSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecuritySiteSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecuritySiteSource collection
func (r *SecurityEdiscoveryCustodianSiteSourcesCollectionRequest) Get(ctx context.Context) ([]SecuritySiteSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecuritySiteSource collection
func (r *SecurityEdiscoveryCustodianSiteSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecuritySiteSource) (resObj *SecuritySiteSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UnifiedGroupSources returns request builder for SecurityUnifiedGroupSource collection
func (b *SecurityEdiscoveryCustodianRequestBuilder) UnifiedGroupSources() *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/unifiedGroupSources"
	return bb
}

// SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder is request builder for SecurityUnifiedGroupSource collection rcn
type SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityUnifiedGroupSource collection
func (b *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder) Request() *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest {
	return &SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityUnifiedGroupSource item
func (b *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder) ID(id string) *SecurityUnifiedGroupSourceRequestBuilder {
	bb := &SecurityUnifiedGroupSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest is request for SecurityUnifiedGroupSource collection
type SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityUnifiedGroupSource collection
func (r *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityUnifiedGroupSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityUnifiedGroupSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityUnifiedGroupSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityUnifiedGroupSource collection, max N pages
func (r *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityUnifiedGroupSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityUnifiedGroupSource collection
func (r *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityUnifiedGroupSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityUnifiedGroupSource collection
func (r *SecurityEdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityUnifiedGroupSource) (resObj *SecurityUnifiedGroupSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserSources returns request builder for SecurityUserSource collection
func (b *SecurityEdiscoveryCustodianRequestBuilder) UserSources() *SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userSources"
	return bb
}

// SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder is request builder for SecurityUserSource collection rcn
type SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityUserSource collection
func (b *SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder) Request() *SecurityEdiscoveryCustodianUserSourcesCollectionRequest {
	return &SecurityEdiscoveryCustodianUserSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityUserSource item
func (b *SecurityEdiscoveryCustodianUserSourcesCollectionRequestBuilder) ID(id string) *SecurityUserSourceRequestBuilder {
	bb := &SecurityUserSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryCustodianUserSourcesCollectionRequest is request for SecurityUserSource collection
type SecurityEdiscoveryCustodianUserSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityUserSource collection
func (r *SecurityEdiscoveryCustodianUserSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityUserSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityUserSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityUserSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityUserSource collection, max N pages
func (r *SecurityEdiscoveryCustodianUserSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityUserSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityUserSource collection
func (r *SecurityEdiscoveryCustodianUserSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityUserSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityUserSource collection
func (r *SecurityEdiscoveryCustodianUserSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityUserSource) (resObj *SecurityUserSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Search is navigation property rn
func (b *SecurityEdiscoveryEstimateOperationRequestBuilder) Search() *SecurityEdiscoverySearchRequestBuilder {
	bb := &SecurityEdiscoverySearchRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/search"
	return bb
}

// ReviewSet is navigation property rn
func (b *SecurityEdiscoveryExportOperationRequestBuilder) ReviewSet() *SecurityEdiscoveryReviewSetRequestBuilder {
	bb := &SecurityEdiscoveryReviewSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reviewSet"
	return bb
}

// ReviewSetQuery is navigation property rn
func (b *SecurityEdiscoveryExportOperationRequestBuilder) ReviewSetQuery() *SecurityEdiscoveryReviewSetQueryRequestBuilder {
	bb := &SecurityEdiscoveryReviewSetQueryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reviewSetQuery"
	return bb
}

// Custodian is navigation property rn
func (b *SecurityEdiscoveryFileRequestBuilder) Custodian() *SecurityEdiscoveryCustodianRequestBuilder {
	bb := &SecurityEdiscoveryCustodianRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/custodian"
	return bb
}

// Tags returns request builder for SecurityEdiscoveryReviewTag collection
func (b *SecurityEdiscoveryFileRequestBuilder) Tags() *SecurityEdiscoveryFileTagsCollectionRequestBuilder {
	bb := &SecurityEdiscoveryFileTagsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tags"
	return bb
}

// SecurityEdiscoveryFileTagsCollectionRequestBuilder is request builder for SecurityEdiscoveryReviewTag collection rcn
type SecurityEdiscoveryFileTagsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryReviewTag collection
func (b *SecurityEdiscoveryFileTagsCollectionRequestBuilder) Request() *SecurityEdiscoveryFileTagsCollectionRequest {
	return &SecurityEdiscoveryFileTagsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryReviewTag item
func (b *SecurityEdiscoveryFileTagsCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryReviewTagRequestBuilder {
	bb := &SecurityEdiscoveryReviewTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryFileTagsCollectionRequest is request for SecurityEdiscoveryReviewTag collection
type SecurityEdiscoveryFileTagsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryFileTagsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryReviewTag, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryReviewTag
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryReviewTag
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryReviewTag collection, max N pages
func (r *SecurityEdiscoveryFileTagsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryReviewTag, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryFileTagsCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryReviewTag, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryFileTagsCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryReviewTag) (resObj *SecurityEdiscoveryReviewTag, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SiteSources returns request builder for SecuritySiteSource collection
func (b *SecurityEdiscoveryHoldPolicyRequestBuilder) SiteSources() *SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/siteSources"
	return bb
}

// SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequestBuilder is request builder for SecuritySiteSource collection rcn
type SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecuritySiteSource collection
func (b *SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequestBuilder) Request() *SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequest {
	return &SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecuritySiteSource item
func (b *SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequestBuilder) ID(id string) *SecuritySiteSourceRequestBuilder {
	bb := &SecuritySiteSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequest is request for SecuritySiteSource collection
type SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecuritySiteSource collection
func (r *SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecuritySiteSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecuritySiteSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecuritySiteSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecuritySiteSource collection, max N pages
func (r *SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecuritySiteSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecuritySiteSource collection
func (r *SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequest) Get(ctx context.Context) ([]SecuritySiteSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecuritySiteSource collection
func (r *SecurityEdiscoveryHoldPolicySiteSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecuritySiteSource) (resObj *SecuritySiteSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserSources returns request builder for SecurityUserSource collection
func (b *SecurityEdiscoveryHoldPolicyRequestBuilder) UserSources() *SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userSources"
	return bb
}

// SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequestBuilder is request builder for SecurityUserSource collection rcn
type SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityUserSource collection
func (b *SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequestBuilder) Request() *SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequest {
	return &SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityUserSource item
func (b *SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequestBuilder) ID(id string) *SecurityUserSourceRequestBuilder {
	bb := &SecurityUserSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequest is request for SecurityUserSource collection
type SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityUserSource collection
func (r *SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityUserSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityUserSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityUserSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityUserSource collection, max N pages
func (r *SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityUserSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityUserSource collection
func (r *SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityUserSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityUserSource collection
func (r *SecurityEdiscoveryHoldPolicyUserSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityUserSource) (resObj *SecurityUserSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DataSource is navigation property rn
func (b *SecurityEdiscoveryNoncustodialDataSourceRequestBuilder) DataSource() *SecurityDataSourceRequestBuilder {
	bb := &SecurityDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dataSource"
	return bb
}

// LastIndexOperation is navigation property rn
func (b *SecurityEdiscoveryNoncustodialDataSourceRequestBuilder) LastIndexOperation() *SecurityEdiscoveryIndexOperationRequestBuilder {
	bb := &SecurityEdiscoveryIndexOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastIndexOperation"
	return bb
}

// Files returns request builder for SecurityEdiscoveryFile collection
func (b *SecurityEdiscoveryReviewSetRequestBuilder) Files() *SecurityEdiscoveryReviewSetFilesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryReviewSetFilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/files"
	return bb
}

// SecurityEdiscoveryReviewSetFilesCollectionRequestBuilder is request builder for SecurityEdiscoveryFile collection rcn
type SecurityEdiscoveryReviewSetFilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryFile collection
func (b *SecurityEdiscoveryReviewSetFilesCollectionRequestBuilder) Request() *SecurityEdiscoveryReviewSetFilesCollectionRequest {
	return &SecurityEdiscoveryReviewSetFilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryFile item
func (b *SecurityEdiscoveryReviewSetFilesCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryFileRequestBuilder {
	bb := &SecurityEdiscoveryFileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryReviewSetFilesCollectionRequest is request for SecurityEdiscoveryFile collection
type SecurityEdiscoveryReviewSetFilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryFile collection
func (r *SecurityEdiscoveryReviewSetFilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryFile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryFile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryFile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryFile collection, max N pages
func (r *SecurityEdiscoveryReviewSetFilesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryFile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryFile collection
func (r *SecurityEdiscoveryReviewSetFilesCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryFile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryFile collection
func (r *SecurityEdiscoveryReviewSetFilesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryFile) (resObj *SecurityEdiscoveryFile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Queries returns request builder for SecurityEdiscoveryReviewSetQuery collection
func (b *SecurityEdiscoveryReviewSetRequestBuilder) Queries() *SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder {
	bb := &SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/queries"
	return bb
}

// SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder is request builder for SecurityEdiscoveryReviewSetQuery collection rcn
type SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryReviewSetQuery collection
func (b *SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder) Request() *SecurityEdiscoveryReviewSetQueriesCollectionRequest {
	return &SecurityEdiscoveryReviewSetQueriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryReviewSetQuery item
func (b *SecurityEdiscoveryReviewSetQueriesCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryReviewSetQueryRequestBuilder {
	bb := &SecurityEdiscoveryReviewSetQueryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryReviewSetQueriesCollectionRequest is request for SecurityEdiscoveryReviewSetQuery collection
type SecurityEdiscoveryReviewSetQueriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryReviewSetQuery collection
func (r *SecurityEdiscoveryReviewSetQueriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryReviewSetQuery, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryReviewSetQuery
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryReviewSetQuery
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryReviewSetQuery collection, max N pages
func (r *SecurityEdiscoveryReviewSetQueriesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryReviewSetQuery, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryReviewSetQuery collection
func (r *SecurityEdiscoveryReviewSetQueriesCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryReviewSetQuery, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryReviewSetQuery collection
func (r *SecurityEdiscoveryReviewSetQueriesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryReviewSetQuery) (resObj *SecurityEdiscoveryReviewSetQuery, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ChildTags returns request builder for SecurityEdiscoveryReviewTag collection
func (b *SecurityEdiscoveryReviewTagRequestBuilder) ChildTags() *SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder {
	bb := &SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/childTags"
	return bb
}

// SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder is request builder for SecurityEdiscoveryReviewTag collection rcn
type SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryReviewTag collection
func (b *SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder) Request() *SecurityEdiscoveryReviewTagChildTagsCollectionRequest {
	return &SecurityEdiscoveryReviewTagChildTagsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryReviewTag item
func (b *SecurityEdiscoveryReviewTagChildTagsCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryReviewTagRequestBuilder {
	bb := &SecurityEdiscoveryReviewTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoveryReviewTagChildTagsCollectionRequest is request for SecurityEdiscoveryReviewTag collection
type SecurityEdiscoveryReviewTagChildTagsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryReviewTagChildTagsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryReviewTag, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryReviewTag
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryReviewTag
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryReviewTag collection, max N pages
func (r *SecurityEdiscoveryReviewTagChildTagsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryReviewTag, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryReviewTagChildTagsCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryReviewTag, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryReviewTag collection
func (r *SecurityEdiscoveryReviewTagChildTagsCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryReviewTag) (resObj *SecurityEdiscoveryReviewTag, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Parent is navigation property rn
func (b *SecurityEdiscoveryReviewTagRequestBuilder) Parent() *SecurityEdiscoveryReviewTagRequestBuilder {
	bb := &SecurityEdiscoveryReviewTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/parent"
	return bb
}

// AddToReviewSetOperation is navigation property rn
func (b *SecurityEdiscoverySearchRequestBuilder) AddToReviewSetOperation() *SecurityEdiscoveryAddToReviewSetOperationRequestBuilder {
	bb := &SecurityEdiscoveryAddToReviewSetOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/addToReviewSetOperation"
	return bb
}

// AdditionalSources returns request builder for SecurityDataSource collection
func (b *SecurityEdiscoverySearchRequestBuilder) AdditionalSources() *SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/additionalSources"
	return bb
}

// SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder is request builder for SecurityDataSource collection rcn
type SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityDataSource collection
func (b *SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder) Request() *SecurityEdiscoverySearchAdditionalSourcesCollectionRequest {
	return &SecurityEdiscoverySearchAdditionalSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityDataSource item
func (b *SecurityEdiscoverySearchAdditionalSourcesCollectionRequestBuilder) ID(id string) *SecurityDataSourceRequestBuilder {
	bb := &SecurityDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoverySearchAdditionalSourcesCollectionRequest is request for SecurityDataSource collection
type SecurityEdiscoverySearchAdditionalSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityDataSource collection
func (r *SecurityEdiscoverySearchAdditionalSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityDataSource collection, max N pages
func (r *SecurityEdiscoverySearchAdditionalSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityDataSource collection
func (r *SecurityEdiscoverySearchAdditionalSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityDataSource collection
func (r *SecurityEdiscoverySearchAdditionalSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityDataSource) (resObj *SecurityDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CustodianSources returns request builder for SecurityDataSource collection
func (b *SecurityEdiscoverySearchRequestBuilder) CustodianSources() *SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/custodianSources"
	return bb
}

// SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder is request builder for SecurityDataSource collection rcn
type SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityDataSource collection
func (b *SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder) Request() *SecurityEdiscoverySearchCustodianSourcesCollectionRequest {
	return &SecurityEdiscoverySearchCustodianSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityDataSource item
func (b *SecurityEdiscoverySearchCustodianSourcesCollectionRequestBuilder) ID(id string) *SecurityDataSourceRequestBuilder {
	bb := &SecurityDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoverySearchCustodianSourcesCollectionRequest is request for SecurityDataSource collection
type SecurityEdiscoverySearchCustodianSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityDataSource collection
func (r *SecurityEdiscoverySearchCustodianSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityDataSource collection, max N pages
func (r *SecurityEdiscoverySearchCustodianSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityDataSource collection
func (r *SecurityEdiscoverySearchCustodianSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityDataSource collection
func (r *SecurityEdiscoverySearchCustodianSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityDataSource) (resObj *SecurityDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// LastEstimateStatisticsOperation is navigation property rn
func (b *SecurityEdiscoverySearchRequestBuilder) LastEstimateStatisticsOperation() *SecurityEdiscoveryEstimateOperationRequestBuilder {
	bb := &SecurityEdiscoveryEstimateOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastEstimateStatisticsOperation"
	return bb
}

// NoncustodialSources returns request builder for SecurityEdiscoveryNoncustodialDataSource collection
func (b *SecurityEdiscoverySearchRequestBuilder) NoncustodialSources() *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder {
	bb := &SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/noncustodialSources"
	return bb
}

// SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder is request builder for SecurityEdiscoveryNoncustodialDataSource collection rcn
type SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryNoncustodialDataSource collection
func (b *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder) Request() *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest {
	return &SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryNoncustodialDataSource item
func (b *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryNoncustodialDataSourceRequestBuilder {
	bb := &SecurityEdiscoveryNoncustodialDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest is request for SecurityEdiscoveryNoncustodialDataSource collection
type SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryNoncustodialDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryNoncustodialDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryNoncustodialDataSource collection, max N pages
func (r *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryNoncustodialDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryNoncustodialDataSource collection
func (r *SecurityEdiscoverySearchNoncustodialSourcesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryNoncustodialDataSource) (resObj *SecurityEdiscoveryNoncustodialDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Components returns request builder for SecurityHostComponent collection
func (b *SecurityHostRequestBuilder) Components() *SecurityHostComponentsCollectionRequestBuilder {
	bb := &SecurityHostComponentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/components"
	return bb
}

// SecurityHostComponentsCollectionRequestBuilder is request builder for SecurityHostComponent collection rcn
type SecurityHostComponentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityHostComponent collection
func (b *SecurityHostComponentsCollectionRequestBuilder) Request() *SecurityHostComponentsCollectionRequest {
	return &SecurityHostComponentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityHostComponent item
func (b *SecurityHostComponentsCollectionRequestBuilder) ID(id string) *SecurityHostComponentRequestBuilder {
	bb := &SecurityHostComponentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityHostComponentsCollectionRequest is request for SecurityHostComponent collection
type SecurityHostComponentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityHostComponent collection
func (r *SecurityHostComponentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityHostComponent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityHostComponent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityHostComponent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityHostComponent collection, max N pages
func (r *SecurityHostComponentsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityHostComponent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityHostComponent collection
func (r *SecurityHostComponentsCollectionRequest) Get(ctx context.Context) ([]SecurityHostComponent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityHostComponent collection
func (r *SecurityHostComponentsCollectionRequest) Add(ctx context.Context, reqObj *SecurityHostComponent) (resObj *SecurityHostComponent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Cookies returns request builder for SecurityHostCookie collection
func (b *SecurityHostRequestBuilder) Cookies() *SecurityHostCookiesCollectionRequestBuilder {
	bb := &SecurityHostCookiesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cookies"
	return bb
}

// SecurityHostCookiesCollectionRequestBuilder is request builder for SecurityHostCookie collection rcn
type SecurityHostCookiesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityHostCookie collection
func (b *SecurityHostCookiesCollectionRequestBuilder) Request() *SecurityHostCookiesCollectionRequest {
	return &SecurityHostCookiesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityHostCookie item
func (b *SecurityHostCookiesCollectionRequestBuilder) ID(id string) *SecurityHostCookieRequestBuilder {
	bb := &SecurityHostCookieRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityHostCookiesCollectionRequest is request for SecurityHostCookie collection
type SecurityHostCookiesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityHostCookie collection
func (r *SecurityHostCookiesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityHostCookie, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityHostCookie
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityHostCookie
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityHostCookie collection, max N pages
func (r *SecurityHostCookiesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityHostCookie, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityHostCookie collection
func (r *SecurityHostCookiesCollectionRequest) Get(ctx context.Context) ([]SecurityHostCookie, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityHostCookie collection
func (r *SecurityHostCookiesCollectionRequest) Add(ctx context.Context, reqObj *SecurityHostCookie) (resObj *SecurityHostCookie, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// PassiveDns returns request builder for SecurityPassiveDnsRecord collection
func (b *SecurityHostRequestBuilder) PassiveDns() *SecurityHostPassiveDnsCollectionRequestBuilder {
	bb := &SecurityHostPassiveDnsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/passiveDns"
	return bb
}

// SecurityHostPassiveDnsCollectionRequestBuilder is request builder for SecurityPassiveDnsRecord collection rcn
type SecurityHostPassiveDnsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityPassiveDnsRecord collection
func (b *SecurityHostPassiveDnsCollectionRequestBuilder) Request() *SecurityHostPassiveDnsCollectionRequest {
	return &SecurityHostPassiveDnsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityPassiveDnsRecord item
func (b *SecurityHostPassiveDnsCollectionRequestBuilder) ID(id string) *SecurityPassiveDnsRecordRequestBuilder {
	bb := &SecurityPassiveDnsRecordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityHostPassiveDnsCollectionRequest is request for SecurityPassiveDnsRecord collection
type SecurityHostPassiveDnsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityPassiveDnsRecord collection
func (r *SecurityHostPassiveDnsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityPassiveDnsRecord, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityPassiveDnsRecord
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityPassiveDnsRecord
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityPassiveDnsRecord collection, max N pages
func (r *SecurityHostPassiveDnsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityPassiveDnsRecord, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityPassiveDnsRecord collection
func (r *SecurityHostPassiveDnsCollectionRequest) Get(ctx context.Context) ([]SecurityPassiveDnsRecord, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityPassiveDnsRecord collection
func (r *SecurityHostPassiveDnsCollectionRequest) Add(ctx context.Context, reqObj *SecurityPassiveDnsRecord) (resObj *SecurityPassiveDnsRecord, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// PassiveDnsReverse returns request builder for SecurityPassiveDnsRecord collection
func (b *SecurityHostRequestBuilder) PassiveDnsReverse() *SecurityHostPassiveDnsReverseCollectionRequestBuilder {
	bb := &SecurityHostPassiveDnsReverseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/passiveDnsReverse"
	return bb
}

// SecurityHostPassiveDnsReverseCollectionRequestBuilder is request builder for SecurityPassiveDnsRecord collection rcn
type SecurityHostPassiveDnsReverseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityPassiveDnsRecord collection
func (b *SecurityHostPassiveDnsReverseCollectionRequestBuilder) Request() *SecurityHostPassiveDnsReverseCollectionRequest {
	return &SecurityHostPassiveDnsReverseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityPassiveDnsRecord item
func (b *SecurityHostPassiveDnsReverseCollectionRequestBuilder) ID(id string) *SecurityPassiveDnsRecordRequestBuilder {
	bb := &SecurityPassiveDnsRecordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityHostPassiveDnsReverseCollectionRequest is request for SecurityPassiveDnsRecord collection
type SecurityHostPassiveDnsReverseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityPassiveDnsRecord collection
func (r *SecurityHostPassiveDnsReverseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityPassiveDnsRecord, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityPassiveDnsRecord
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityPassiveDnsRecord
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityPassiveDnsRecord collection, max N pages
func (r *SecurityHostPassiveDnsReverseCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityPassiveDnsRecord, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityPassiveDnsRecord collection
func (r *SecurityHostPassiveDnsReverseCollectionRequest) Get(ctx context.Context) ([]SecurityPassiveDnsRecord, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityPassiveDnsRecord collection
func (r *SecurityHostPassiveDnsReverseCollectionRequest) Add(ctx context.Context, reqObj *SecurityPassiveDnsRecord) (resObj *SecurityPassiveDnsRecord, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Reputation is navigation property rn
func (b *SecurityHostRequestBuilder) Reputation() *SecurityHostReputationRequestBuilder {
	bb := &SecurityHostReputationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reputation"
	return bb
}

// Trackers returns request builder for SecurityHostTracker collection
func (b *SecurityHostRequestBuilder) Trackers() *SecurityHostTrackersCollectionRequestBuilder {
	bb := &SecurityHostTrackersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/trackers"
	return bb
}

// SecurityHostTrackersCollectionRequestBuilder is request builder for SecurityHostTracker collection rcn
type SecurityHostTrackersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityHostTracker collection
func (b *SecurityHostTrackersCollectionRequestBuilder) Request() *SecurityHostTrackersCollectionRequest {
	return &SecurityHostTrackersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityHostTracker item
func (b *SecurityHostTrackersCollectionRequestBuilder) ID(id string) *SecurityHostTrackerRequestBuilder {
	bb := &SecurityHostTrackerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityHostTrackersCollectionRequest is request for SecurityHostTracker collection
type SecurityHostTrackersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityHostTracker collection
func (r *SecurityHostTrackersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityHostTracker, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityHostTracker
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityHostTracker
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityHostTracker collection, max N pages
func (r *SecurityHostTrackersCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityHostTracker, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityHostTracker collection
func (r *SecurityHostTrackersCollectionRequest) Get(ctx context.Context) ([]SecurityHostTracker, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityHostTracker collection
func (r *SecurityHostTrackersCollectionRequest) Add(ctx context.Context, reqObj *SecurityHostTracker) (resObj *SecurityHostTracker, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Host is navigation property rn
func (b *SecurityHostComponentRequestBuilder) Host() *SecurityHostRequestBuilder {
	bb := &SecurityHostRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/host"
	return bb
}

// Host is navigation property rn
func (b *SecurityHostCookieRequestBuilder) Host() *SecurityHostRequestBuilder {
	bb := &SecurityHostRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/host"
	return bb
}

// Host is navigation property rn
func (b *SecurityHostTrackerRequestBuilder) Host() *SecurityHostRequestBuilder {
	bb := &SecurityHostRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/host"
	return bb
}

// Alerts returns request builder for SecurityAlert collection
func (b *SecurityIncidentRequestBuilder) Alerts() *SecurityIncidentAlertsCollectionRequestBuilder {
	bb := &SecurityIncidentAlertsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alerts"
	return bb
}

// SecurityIncidentAlertsCollectionRequestBuilder is request builder for SecurityAlert collection rcn
type SecurityIncidentAlertsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityAlert collection
func (b *SecurityIncidentAlertsCollectionRequestBuilder) Request() *SecurityIncidentAlertsCollectionRequest {
	return &SecurityIncidentAlertsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityAlert item
func (b *SecurityIncidentAlertsCollectionRequestBuilder) ID(id string) *SecurityAlertRequestBuilder {
	bb := &SecurityAlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityIncidentAlertsCollectionRequest is request for SecurityAlert collection
type SecurityIncidentAlertsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityAlert collection
func (r *SecurityIncidentAlertsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityAlert, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityAlert
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityAlert
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityAlert collection, max N pages
func (r *SecurityIncidentAlertsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityAlert, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityAlert collection
func (r *SecurityIncidentAlertsCollectionRequest) Get(ctx context.Context) ([]SecurityAlert, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityAlert collection
func (r *SecurityIncidentAlertsCollectionRequest) Add(ctx context.Context, reqObj *SecurityAlert) (resObj *SecurityAlert, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Artifact is navigation property rn
func (b *SecurityIndicatorRequestBuilder) Artifact() *SecurityArtifactRequestBuilder {
	bb := &SecurityArtifactRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/artifact"
	return bb
}

// LabelPolicySettings is navigation property rn
func (b *SecurityInformationProtectionRequestBuilder) LabelPolicySettings() *SecurityInformationProtectionPolicySettingRequestBuilder {
	bb := &SecurityInformationProtectionPolicySettingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/labelPolicySettings"
	return bb
}

// SensitivityLabels returns request builder for SecuritySensitivityLabel collection
func (b *SecurityInformationProtectionRequestBuilder) SensitivityLabels() *SecurityInformationProtectionSensitivityLabelsCollectionRequestBuilder {
	bb := &SecurityInformationProtectionSensitivityLabelsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sensitivityLabels"
	return bb
}

// SecurityInformationProtectionSensitivityLabelsCollectionRequestBuilder is request builder for SecuritySensitivityLabel collection rcn
type SecurityInformationProtectionSensitivityLabelsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecuritySensitivityLabel collection
func (b *SecurityInformationProtectionSensitivityLabelsCollectionRequestBuilder) Request() *SecurityInformationProtectionSensitivityLabelsCollectionRequest {
	return &SecurityInformationProtectionSensitivityLabelsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecuritySensitivityLabel item
func (b *SecurityInformationProtectionSensitivityLabelsCollectionRequestBuilder) ID(id string) *SecuritySensitivityLabelRequestBuilder {
	bb := &SecuritySensitivityLabelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityInformationProtectionSensitivityLabelsCollectionRequest is request for SecuritySensitivityLabel collection
type SecurityInformationProtectionSensitivityLabelsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecuritySensitivityLabel collection
func (r *SecurityInformationProtectionSensitivityLabelsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecuritySensitivityLabel, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecuritySensitivityLabel
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecuritySensitivityLabel
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecuritySensitivityLabel collection, max N pages
func (r *SecurityInformationProtectionSensitivityLabelsCollectionRequest) GetN(ctx context.Context, n int) ([]SecuritySensitivityLabel, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecuritySensitivityLabel collection
func (r *SecurityInformationProtectionSensitivityLabelsCollectionRequest) Get(ctx context.Context) ([]SecuritySensitivityLabel, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecuritySensitivityLabel collection
func (r *SecurityInformationProtectionSensitivityLabelsCollectionRequest) Add(ctx context.Context, reqObj *SecuritySensitivityLabel) (resObj *SecuritySensitivityLabel, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Indicators returns request builder for SecurityIntelligenceProfileIndicator collection
func (b *SecurityIntelligenceProfileRequestBuilder) Indicators() *SecurityIntelligenceProfileIndicatorsCollectionRequestBuilder {
	bb := &SecurityIntelligenceProfileIndicatorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/indicators"
	return bb
}

// SecurityIntelligenceProfileIndicatorsCollectionRequestBuilder is request builder for SecurityIntelligenceProfileIndicator collection rcn
type SecurityIntelligenceProfileIndicatorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityIntelligenceProfileIndicator collection
func (b *SecurityIntelligenceProfileIndicatorsCollectionRequestBuilder) Request() *SecurityIntelligenceProfileIndicatorsCollectionRequest {
	return &SecurityIntelligenceProfileIndicatorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityIntelligenceProfileIndicator item
func (b *SecurityIntelligenceProfileIndicatorsCollectionRequestBuilder) ID(id string) *SecurityIntelligenceProfileIndicatorRequestBuilder {
	bb := &SecurityIntelligenceProfileIndicatorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityIntelligenceProfileIndicatorsCollectionRequest is request for SecurityIntelligenceProfileIndicator collection
type SecurityIntelligenceProfileIndicatorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityIntelligenceProfileIndicator collection
func (r *SecurityIntelligenceProfileIndicatorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityIntelligenceProfileIndicator, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityIntelligenceProfileIndicator
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityIntelligenceProfileIndicator
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityIntelligenceProfileIndicator collection, max N pages
func (r *SecurityIntelligenceProfileIndicatorsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityIntelligenceProfileIndicator, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityIntelligenceProfileIndicator collection
func (r *SecurityIntelligenceProfileIndicatorsCollectionRequest) Get(ctx context.Context) ([]SecurityIntelligenceProfileIndicator, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityIntelligenceProfileIndicator collection
func (r *SecurityIntelligenceProfileIndicatorsCollectionRequest) Add(ctx context.Context, reqObj *SecurityIntelligenceProfileIndicator) (resObj *SecurityIntelligenceProfileIndicator, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RetentionLabels returns request builder for SecurityRetentionLabel collection
func (b *SecurityLabelsRootRequestBuilder) RetentionLabels() *SecurityLabelsRootRetentionLabelsCollectionRequestBuilder {
	bb := &SecurityLabelsRootRetentionLabelsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/retentionLabels"
	return bb
}

// SecurityLabelsRootRetentionLabelsCollectionRequestBuilder is request builder for SecurityRetentionLabel collection rcn
type SecurityLabelsRootRetentionLabelsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityRetentionLabel collection
func (b *SecurityLabelsRootRetentionLabelsCollectionRequestBuilder) Request() *SecurityLabelsRootRetentionLabelsCollectionRequest {
	return &SecurityLabelsRootRetentionLabelsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityRetentionLabel item
func (b *SecurityLabelsRootRetentionLabelsCollectionRequestBuilder) ID(id string) *SecurityRetentionLabelRequestBuilder {
	bb := &SecurityRetentionLabelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityLabelsRootRetentionLabelsCollectionRequest is request for SecurityRetentionLabel collection
type SecurityLabelsRootRetentionLabelsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityRetentionLabel collection
func (r *SecurityLabelsRootRetentionLabelsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityRetentionLabel, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityRetentionLabel
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityRetentionLabel
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityRetentionLabel collection, max N pages
func (r *SecurityLabelsRootRetentionLabelsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityRetentionLabel, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityRetentionLabel collection
func (r *SecurityLabelsRootRetentionLabelsCollectionRequest) Get(ctx context.Context) ([]SecurityRetentionLabel, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityRetentionLabel collection
func (r *SecurityLabelsRootRetentionLabelsCollectionRequest) Add(ctx context.Context, reqObj *SecurityRetentionLabel) (resObj *SecurityRetentionLabel, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Artifact is navigation property rn
func (b *SecurityPassiveDnsRecordRequestBuilder) Artifact() *SecurityArtifactRequestBuilder {
	bb := &SecurityArtifactRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/artifact"
	return bb
}

// ParentHost is navigation property rn
func (b *SecurityPassiveDnsRecordRequestBuilder) ParentHost() *SecurityHostRequestBuilder {
	bb := &SecurityHostRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/parentHost"
	return bb
}

// RetentionEventType is navigation property rn
func (b *SecurityRetentionEventRequestBuilder) RetentionEventType() *SecurityRetentionEventTypeRequestBuilder {
	bb := &SecurityRetentionEventTypeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/retentionEventType"
	return bb
}

// DispositionReviewStages returns request builder for SecurityDispositionReviewStage collection
func (b *SecurityRetentionLabelRequestBuilder) DispositionReviewStages() *SecurityRetentionLabelDispositionReviewStagesCollectionRequestBuilder {
	bb := &SecurityRetentionLabelDispositionReviewStagesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dispositionReviewStages"
	return bb
}

// SecurityRetentionLabelDispositionReviewStagesCollectionRequestBuilder is request builder for SecurityDispositionReviewStage collection rcn
type SecurityRetentionLabelDispositionReviewStagesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityDispositionReviewStage collection
func (b *SecurityRetentionLabelDispositionReviewStagesCollectionRequestBuilder) Request() *SecurityRetentionLabelDispositionReviewStagesCollectionRequest {
	return &SecurityRetentionLabelDispositionReviewStagesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityDispositionReviewStage item
func (b *SecurityRetentionLabelDispositionReviewStagesCollectionRequestBuilder) ID(id string) *SecurityDispositionReviewStageRequestBuilder {
	bb := &SecurityDispositionReviewStageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityRetentionLabelDispositionReviewStagesCollectionRequest is request for SecurityDispositionReviewStage collection
type SecurityRetentionLabelDispositionReviewStagesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityDispositionReviewStage collection
func (r *SecurityRetentionLabelDispositionReviewStagesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityDispositionReviewStage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityDispositionReviewStage
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityDispositionReviewStage
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityDispositionReviewStage collection, max N pages
func (r *SecurityRetentionLabelDispositionReviewStagesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityDispositionReviewStage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityDispositionReviewStage collection
func (r *SecurityRetentionLabelDispositionReviewStagesCollectionRequest) Get(ctx context.Context) ([]SecurityDispositionReviewStage, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityDispositionReviewStage collection
func (r *SecurityRetentionLabelDispositionReviewStagesCollectionRequest) Add(ctx context.Context, reqObj *SecurityDispositionReviewStage) (resObj *SecurityDispositionReviewStage, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RetentionEventType is navigation property rn
func (b *SecurityRetentionLabelRequestBuilder) RetentionEventType() *SecurityRetentionEventTypeRequestBuilder {
	bb := &SecurityRetentionEventTypeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/retentionEventType"
	return bb
}

// InformationProtection is navigation property rn
func (b *SecuritySecurityRequestBuilder) InformationProtection() *SecurityInformationProtectionRequestBuilder {
	bb := &SecurityInformationProtectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/informationProtection"
	return bb
}

// Parent is navigation property rn
func (b *SecuritySensitivityLabelRequestBuilder) Parent() *SecuritySensitivityLabelRequestBuilder {
	bb := &SecuritySensitivityLabelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/parent"
	return bb
}

// Site is navigation property rn
func (b *SecuritySiteSourceRequestBuilder) Site() *SiteRequestBuilder {
	bb := &SiteRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/site"
	return bb
}

// ArticleIndicators returns request builder for SecurityArticleIndicator collection
func (b *SecurityThreatIntelligenceRequestBuilder) ArticleIndicators() *SecurityThreatIntelligenceArticleIndicatorsCollectionRequestBuilder {
	bb := &SecurityThreatIntelligenceArticleIndicatorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/articleIndicators"
	return bb
}

// SecurityThreatIntelligenceArticleIndicatorsCollectionRequestBuilder is request builder for SecurityArticleIndicator collection rcn
type SecurityThreatIntelligenceArticleIndicatorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityArticleIndicator collection
func (b *SecurityThreatIntelligenceArticleIndicatorsCollectionRequestBuilder) Request() *SecurityThreatIntelligenceArticleIndicatorsCollectionRequest {
	return &SecurityThreatIntelligenceArticleIndicatorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityArticleIndicator item
func (b *SecurityThreatIntelligenceArticleIndicatorsCollectionRequestBuilder) ID(id string) *SecurityArticleIndicatorRequestBuilder {
	bb := &SecurityArticleIndicatorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatIntelligenceArticleIndicatorsCollectionRequest is request for SecurityArticleIndicator collection
type SecurityThreatIntelligenceArticleIndicatorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityArticleIndicator collection
func (r *SecurityThreatIntelligenceArticleIndicatorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityArticleIndicator, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityArticleIndicator
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityArticleIndicator
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityArticleIndicator collection, max N pages
func (r *SecurityThreatIntelligenceArticleIndicatorsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityArticleIndicator, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityArticleIndicator collection
func (r *SecurityThreatIntelligenceArticleIndicatorsCollectionRequest) Get(ctx context.Context) ([]SecurityArticleIndicator, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityArticleIndicator collection
func (r *SecurityThreatIntelligenceArticleIndicatorsCollectionRequest) Add(ctx context.Context, reqObj *SecurityArticleIndicator) (resObj *SecurityArticleIndicator, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Articles returns request builder for SecurityArticle collection
func (b *SecurityThreatIntelligenceRequestBuilder) Articles() *SecurityThreatIntelligenceArticlesCollectionRequestBuilder {
	bb := &SecurityThreatIntelligenceArticlesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/articles"
	return bb
}

// SecurityThreatIntelligenceArticlesCollectionRequestBuilder is request builder for SecurityArticle collection rcn
type SecurityThreatIntelligenceArticlesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityArticle collection
func (b *SecurityThreatIntelligenceArticlesCollectionRequestBuilder) Request() *SecurityThreatIntelligenceArticlesCollectionRequest {
	return &SecurityThreatIntelligenceArticlesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityArticle item
func (b *SecurityThreatIntelligenceArticlesCollectionRequestBuilder) ID(id string) *SecurityArticleRequestBuilder {
	bb := &SecurityArticleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatIntelligenceArticlesCollectionRequest is request for SecurityArticle collection
type SecurityThreatIntelligenceArticlesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityArticle collection
func (r *SecurityThreatIntelligenceArticlesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityArticle, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityArticle
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityArticle
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityArticle collection, max N pages
func (r *SecurityThreatIntelligenceArticlesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityArticle, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityArticle collection
func (r *SecurityThreatIntelligenceArticlesCollectionRequest) Get(ctx context.Context) ([]SecurityArticle, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityArticle collection
func (r *SecurityThreatIntelligenceArticlesCollectionRequest) Add(ctx context.Context, reqObj *SecurityArticle) (resObj *SecurityArticle, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// HostComponents returns request builder for SecurityHostComponent collection
func (b *SecurityThreatIntelligenceRequestBuilder) HostComponents() *SecurityThreatIntelligenceHostComponentsCollectionRequestBuilder {
	bb := &SecurityThreatIntelligenceHostComponentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/hostComponents"
	return bb
}

// SecurityThreatIntelligenceHostComponentsCollectionRequestBuilder is request builder for SecurityHostComponent collection rcn
type SecurityThreatIntelligenceHostComponentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityHostComponent collection
func (b *SecurityThreatIntelligenceHostComponentsCollectionRequestBuilder) Request() *SecurityThreatIntelligenceHostComponentsCollectionRequest {
	return &SecurityThreatIntelligenceHostComponentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityHostComponent item
func (b *SecurityThreatIntelligenceHostComponentsCollectionRequestBuilder) ID(id string) *SecurityHostComponentRequestBuilder {
	bb := &SecurityHostComponentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatIntelligenceHostComponentsCollectionRequest is request for SecurityHostComponent collection
type SecurityThreatIntelligenceHostComponentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityHostComponent collection
func (r *SecurityThreatIntelligenceHostComponentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityHostComponent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityHostComponent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityHostComponent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityHostComponent collection, max N pages
func (r *SecurityThreatIntelligenceHostComponentsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityHostComponent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityHostComponent collection
func (r *SecurityThreatIntelligenceHostComponentsCollectionRequest) Get(ctx context.Context) ([]SecurityHostComponent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityHostComponent collection
func (r *SecurityThreatIntelligenceHostComponentsCollectionRequest) Add(ctx context.Context, reqObj *SecurityHostComponent) (resObj *SecurityHostComponent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// HostCookies returns request builder for SecurityHostCookie collection
func (b *SecurityThreatIntelligenceRequestBuilder) HostCookies() *SecurityThreatIntelligenceHostCookiesCollectionRequestBuilder {
	bb := &SecurityThreatIntelligenceHostCookiesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/hostCookies"
	return bb
}

// SecurityThreatIntelligenceHostCookiesCollectionRequestBuilder is request builder for SecurityHostCookie collection rcn
type SecurityThreatIntelligenceHostCookiesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityHostCookie collection
func (b *SecurityThreatIntelligenceHostCookiesCollectionRequestBuilder) Request() *SecurityThreatIntelligenceHostCookiesCollectionRequest {
	return &SecurityThreatIntelligenceHostCookiesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityHostCookie item
func (b *SecurityThreatIntelligenceHostCookiesCollectionRequestBuilder) ID(id string) *SecurityHostCookieRequestBuilder {
	bb := &SecurityHostCookieRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatIntelligenceHostCookiesCollectionRequest is request for SecurityHostCookie collection
type SecurityThreatIntelligenceHostCookiesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityHostCookie collection
func (r *SecurityThreatIntelligenceHostCookiesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityHostCookie, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityHostCookie
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityHostCookie
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityHostCookie collection, max N pages
func (r *SecurityThreatIntelligenceHostCookiesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityHostCookie, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityHostCookie collection
func (r *SecurityThreatIntelligenceHostCookiesCollectionRequest) Get(ctx context.Context) ([]SecurityHostCookie, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityHostCookie collection
func (r *SecurityThreatIntelligenceHostCookiesCollectionRequest) Add(ctx context.Context, reqObj *SecurityHostCookie) (resObj *SecurityHostCookie, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// HostTrackers returns request builder for SecurityHostTracker collection
func (b *SecurityThreatIntelligenceRequestBuilder) HostTrackers() *SecurityThreatIntelligenceHostTrackersCollectionRequestBuilder {
	bb := &SecurityThreatIntelligenceHostTrackersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/hostTrackers"
	return bb
}

// SecurityThreatIntelligenceHostTrackersCollectionRequestBuilder is request builder for SecurityHostTracker collection rcn
type SecurityThreatIntelligenceHostTrackersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityHostTracker collection
func (b *SecurityThreatIntelligenceHostTrackersCollectionRequestBuilder) Request() *SecurityThreatIntelligenceHostTrackersCollectionRequest {
	return &SecurityThreatIntelligenceHostTrackersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityHostTracker item
func (b *SecurityThreatIntelligenceHostTrackersCollectionRequestBuilder) ID(id string) *SecurityHostTrackerRequestBuilder {
	bb := &SecurityHostTrackerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatIntelligenceHostTrackersCollectionRequest is request for SecurityHostTracker collection
type SecurityThreatIntelligenceHostTrackersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityHostTracker collection
func (r *SecurityThreatIntelligenceHostTrackersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityHostTracker, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityHostTracker
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityHostTracker
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityHostTracker collection, max N pages
func (r *SecurityThreatIntelligenceHostTrackersCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityHostTracker, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityHostTracker collection
func (r *SecurityThreatIntelligenceHostTrackersCollectionRequest) Get(ctx context.Context) ([]SecurityHostTracker, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityHostTracker collection
func (r *SecurityThreatIntelligenceHostTrackersCollectionRequest) Add(ctx context.Context, reqObj *SecurityHostTracker) (resObj *SecurityHostTracker, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Hosts returns request builder for SecurityHost collection
func (b *SecurityThreatIntelligenceRequestBuilder) Hosts() *SecurityThreatIntelligenceHostsCollectionRequestBuilder {
	bb := &SecurityThreatIntelligenceHostsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/hosts"
	return bb
}

// SecurityThreatIntelligenceHostsCollectionRequestBuilder is request builder for SecurityHost collection rcn
type SecurityThreatIntelligenceHostsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityHost collection
func (b *SecurityThreatIntelligenceHostsCollectionRequestBuilder) Request() *SecurityThreatIntelligenceHostsCollectionRequest {
	return &SecurityThreatIntelligenceHostsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityHost item
func (b *SecurityThreatIntelligenceHostsCollectionRequestBuilder) ID(id string) *SecurityHostRequestBuilder {
	bb := &SecurityHostRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatIntelligenceHostsCollectionRequest is request for SecurityHost collection
type SecurityThreatIntelligenceHostsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityHost collection
func (r *SecurityThreatIntelligenceHostsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityHost, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityHost
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityHost
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityHost collection, max N pages
func (r *SecurityThreatIntelligenceHostsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityHost, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityHost collection
func (r *SecurityThreatIntelligenceHostsCollectionRequest) Get(ctx context.Context) ([]SecurityHost, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityHost collection
func (r *SecurityThreatIntelligenceHostsCollectionRequest) Add(ctx context.Context, reqObj *SecurityHost) (resObj *SecurityHost, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IntelProfiles returns request builder for SecurityIntelligenceProfile collection
func (b *SecurityThreatIntelligenceRequestBuilder) IntelProfiles() *SecurityThreatIntelligenceIntelProfilesCollectionRequestBuilder {
	bb := &SecurityThreatIntelligenceIntelProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/intelProfiles"
	return bb
}

// SecurityThreatIntelligenceIntelProfilesCollectionRequestBuilder is request builder for SecurityIntelligenceProfile collection rcn
type SecurityThreatIntelligenceIntelProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityIntelligenceProfile collection
func (b *SecurityThreatIntelligenceIntelProfilesCollectionRequestBuilder) Request() *SecurityThreatIntelligenceIntelProfilesCollectionRequest {
	return &SecurityThreatIntelligenceIntelProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityIntelligenceProfile item
func (b *SecurityThreatIntelligenceIntelProfilesCollectionRequestBuilder) ID(id string) *SecurityIntelligenceProfileRequestBuilder {
	bb := &SecurityIntelligenceProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatIntelligenceIntelProfilesCollectionRequest is request for SecurityIntelligenceProfile collection
type SecurityThreatIntelligenceIntelProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityIntelligenceProfile collection
func (r *SecurityThreatIntelligenceIntelProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityIntelligenceProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityIntelligenceProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityIntelligenceProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityIntelligenceProfile collection, max N pages
func (r *SecurityThreatIntelligenceIntelProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityIntelligenceProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityIntelligenceProfile collection
func (r *SecurityThreatIntelligenceIntelProfilesCollectionRequest) Get(ctx context.Context) ([]SecurityIntelligenceProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityIntelligenceProfile collection
func (r *SecurityThreatIntelligenceIntelProfilesCollectionRequest) Add(ctx context.Context, reqObj *SecurityIntelligenceProfile) (resObj *SecurityIntelligenceProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IntelligenceProfileIndicators returns request builder for SecurityIntelligenceProfileIndicator collection
func (b *SecurityThreatIntelligenceRequestBuilder) IntelligenceProfileIndicators() *SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequestBuilder {
	bb := &SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/intelligenceProfileIndicators"
	return bb
}

// SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequestBuilder is request builder for SecurityIntelligenceProfileIndicator collection rcn
type SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityIntelligenceProfileIndicator collection
func (b *SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequestBuilder) Request() *SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequest {
	return &SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityIntelligenceProfileIndicator item
func (b *SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequestBuilder) ID(id string) *SecurityIntelligenceProfileIndicatorRequestBuilder {
	bb := &SecurityIntelligenceProfileIndicatorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequest is request for SecurityIntelligenceProfileIndicator collection
type SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityIntelligenceProfileIndicator collection
func (r *SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityIntelligenceProfileIndicator, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityIntelligenceProfileIndicator
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityIntelligenceProfileIndicator
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityIntelligenceProfileIndicator collection, max N pages
func (r *SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityIntelligenceProfileIndicator, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityIntelligenceProfileIndicator collection
func (r *SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequest) Get(ctx context.Context) ([]SecurityIntelligenceProfileIndicator, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityIntelligenceProfileIndicator collection
func (r *SecurityThreatIntelligenceIntelligenceProfileIndicatorsCollectionRequest) Add(ctx context.Context, reqObj *SecurityIntelligenceProfileIndicator) (resObj *SecurityIntelligenceProfileIndicator, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// PassiveDnsRecords returns request builder for SecurityPassiveDnsRecord collection
func (b *SecurityThreatIntelligenceRequestBuilder) PassiveDnsRecords() *SecurityThreatIntelligencePassiveDnsRecordsCollectionRequestBuilder {
	bb := &SecurityThreatIntelligencePassiveDnsRecordsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/passiveDnsRecords"
	return bb
}

// SecurityThreatIntelligencePassiveDnsRecordsCollectionRequestBuilder is request builder for SecurityPassiveDnsRecord collection rcn
type SecurityThreatIntelligencePassiveDnsRecordsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityPassiveDnsRecord collection
func (b *SecurityThreatIntelligencePassiveDnsRecordsCollectionRequestBuilder) Request() *SecurityThreatIntelligencePassiveDnsRecordsCollectionRequest {
	return &SecurityThreatIntelligencePassiveDnsRecordsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityPassiveDnsRecord item
func (b *SecurityThreatIntelligencePassiveDnsRecordsCollectionRequestBuilder) ID(id string) *SecurityPassiveDnsRecordRequestBuilder {
	bb := &SecurityPassiveDnsRecordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatIntelligencePassiveDnsRecordsCollectionRequest is request for SecurityPassiveDnsRecord collection
type SecurityThreatIntelligencePassiveDnsRecordsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityPassiveDnsRecord collection
func (r *SecurityThreatIntelligencePassiveDnsRecordsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityPassiveDnsRecord, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityPassiveDnsRecord
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityPassiveDnsRecord
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityPassiveDnsRecord collection, max N pages
func (r *SecurityThreatIntelligencePassiveDnsRecordsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityPassiveDnsRecord, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityPassiveDnsRecord collection
func (r *SecurityThreatIntelligencePassiveDnsRecordsCollectionRequest) Get(ctx context.Context) ([]SecurityPassiveDnsRecord, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityPassiveDnsRecord collection
func (r *SecurityThreatIntelligencePassiveDnsRecordsCollectionRequest) Add(ctx context.Context, reqObj *SecurityPassiveDnsRecord) (resObj *SecurityPassiveDnsRecord, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Vulnerabilities returns request builder for SecurityVulnerability collection
func (b *SecurityThreatIntelligenceRequestBuilder) Vulnerabilities() *SecurityThreatIntelligenceVulnerabilitiesCollectionRequestBuilder {
	bb := &SecurityThreatIntelligenceVulnerabilitiesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/vulnerabilities"
	return bb
}

// SecurityThreatIntelligenceVulnerabilitiesCollectionRequestBuilder is request builder for SecurityVulnerability collection rcn
type SecurityThreatIntelligenceVulnerabilitiesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityVulnerability collection
func (b *SecurityThreatIntelligenceVulnerabilitiesCollectionRequestBuilder) Request() *SecurityThreatIntelligenceVulnerabilitiesCollectionRequest {
	return &SecurityThreatIntelligenceVulnerabilitiesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityVulnerability item
func (b *SecurityThreatIntelligenceVulnerabilitiesCollectionRequestBuilder) ID(id string) *SecurityVulnerabilityRequestBuilder {
	bb := &SecurityVulnerabilityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatIntelligenceVulnerabilitiesCollectionRequest is request for SecurityVulnerability collection
type SecurityThreatIntelligenceVulnerabilitiesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityVulnerability collection
func (r *SecurityThreatIntelligenceVulnerabilitiesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityVulnerability, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityVulnerability
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityVulnerability
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityVulnerability collection, max N pages
func (r *SecurityThreatIntelligenceVulnerabilitiesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityVulnerability, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityVulnerability collection
func (r *SecurityThreatIntelligenceVulnerabilitiesCollectionRequest) Get(ctx context.Context) ([]SecurityVulnerability, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityVulnerability collection
func (r *SecurityThreatIntelligenceVulnerabilitiesCollectionRequest) Add(ctx context.Context, reqObj *SecurityVulnerability) (resObj *SecurityVulnerability, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EmailThreatSubmissionPolicies returns request builder for SecurityEmailThreatSubmissionPolicy collection
func (b *SecurityThreatSubmissionRootRequestBuilder) EmailThreatSubmissionPolicies() *SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequestBuilder {
	bb := &SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/emailThreatSubmissionPolicies"
	return bb
}

// SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequestBuilder is request builder for SecurityEmailThreatSubmissionPolicy collection rcn
type SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEmailThreatSubmissionPolicy collection
func (b *SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequestBuilder) Request() *SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequest {
	return &SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEmailThreatSubmissionPolicy item
func (b *SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequestBuilder) ID(id string) *SecurityEmailThreatSubmissionPolicyRequestBuilder {
	bb := &SecurityEmailThreatSubmissionPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequest is request for SecurityEmailThreatSubmissionPolicy collection
type SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEmailThreatSubmissionPolicy collection
func (r *SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEmailThreatSubmissionPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEmailThreatSubmissionPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEmailThreatSubmissionPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEmailThreatSubmissionPolicy collection, max N pages
func (r *SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEmailThreatSubmissionPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEmailThreatSubmissionPolicy collection
func (r *SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequest) Get(ctx context.Context) ([]SecurityEmailThreatSubmissionPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEmailThreatSubmissionPolicy collection
func (r *SecurityThreatSubmissionRootEmailThreatSubmissionPoliciesCollectionRequest) Add(ctx context.Context, reqObj *SecurityEmailThreatSubmissionPolicy) (resObj *SecurityEmailThreatSubmissionPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EmailThreats returns request builder for SecurityEmailThreatSubmission collection
func (b *SecurityThreatSubmissionRootRequestBuilder) EmailThreats() *SecurityThreatSubmissionRootEmailThreatsCollectionRequestBuilder {
	bb := &SecurityThreatSubmissionRootEmailThreatsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/emailThreats"
	return bb
}

// SecurityThreatSubmissionRootEmailThreatsCollectionRequestBuilder is request builder for SecurityEmailThreatSubmission collection rcn
type SecurityThreatSubmissionRootEmailThreatsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEmailThreatSubmission collection
func (b *SecurityThreatSubmissionRootEmailThreatsCollectionRequestBuilder) Request() *SecurityThreatSubmissionRootEmailThreatsCollectionRequest {
	return &SecurityThreatSubmissionRootEmailThreatsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEmailThreatSubmission item
func (b *SecurityThreatSubmissionRootEmailThreatsCollectionRequestBuilder) ID(id string) *SecurityEmailThreatSubmissionRequestBuilder {
	bb := &SecurityEmailThreatSubmissionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatSubmissionRootEmailThreatsCollectionRequest is request for SecurityEmailThreatSubmission collection
type SecurityThreatSubmissionRootEmailThreatsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEmailThreatSubmission collection
func (r *SecurityThreatSubmissionRootEmailThreatsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEmailThreatSubmission, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEmailThreatSubmission
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEmailThreatSubmission
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEmailThreatSubmission collection, max N pages
func (r *SecurityThreatSubmissionRootEmailThreatsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEmailThreatSubmission, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEmailThreatSubmission collection
func (r *SecurityThreatSubmissionRootEmailThreatsCollectionRequest) Get(ctx context.Context) ([]SecurityEmailThreatSubmission, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEmailThreatSubmission collection
func (r *SecurityThreatSubmissionRootEmailThreatsCollectionRequest) Add(ctx context.Context, reqObj *SecurityEmailThreatSubmission) (resObj *SecurityEmailThreatSubmission, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// FileThreats returns request builder for SecurityFileThreatSubmission collection
func (b *SecurityThreatSubmissionRootRequestBuilder) FileThreats() *SecurityThreatSubmissionRootFileThreatsCollectionRequestBuilder {
	bb := &SecurityThreatSubmissionRootFileThreatsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/fileThreats"
	return bb
}

// SecurityThreatSubmissionRootFileThreatsCollectionRequestBuilder is request builder for SecurityFileThreatSubmission collection rcn
type SecurityThreatSubmissionRootFileThreatsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityFileThreatSubmission collection
func (b *SecurityThreatSubmissionRootFileThreatsCollectionRequestBuilder) Request() *SecurityThreatSubmissionRootFileThreatsCollectionRequest {
	return &SecurityThreatSubmissionRootFileThreatsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityFileThreatSubmission item
func (b *SecurityThreatSubmissionRootFileThreatsCollectionRequestBuilder) ID(id string) *SecurityFileThreatSubmissionRequestBuilder {
	bb := &SecurityFileThreatSubmissionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatSubmissionRootFileThreatsCollectionRequest is request for SecurityFileThreatSubmission collection
type SecurityThreatSubmissionRootFileThreatsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityFileThreatSubmission collection
func (r *SecurityThreatSubmissionRootFileThreatsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityFileThreatSubmission, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityFileThreatSubmission
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityFileThreatSubmission
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityFileThreatSubmission collection, max N pages
func (r *SecurityThreatSubmissionRootFileThreatsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityFileThreatSubmission, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityFileThreatSubmission collection
func (r *SecurityThreatSubmissionRootFileThreatsCollectionRequest) Get(ctx context.Context) ([]SecurityFileThreatSubmission, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityFileThreatSubmission collection
func (r *SecurityThreatSubmissionRootFileThreatsCollectionRequest) Add(ctx context.Context, reqObj *SecurityFileThreatSubmission) (resObj *SecurityFileThreatSubmission, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// URLThreats returns request builder for SecurityURLThreatSubmission collection
func (b *SecurityThreatSubmissionRootRequestBuilder) URLThreats() *SecurityThreatSubmissionRootURLThreatsCollectionRequestBuilder {
	bb := &SecurityThreatSubmissionRootURLThreatsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/urlThreats"
	return bb
}

// SecurityThreatSubmissionRootURLThreatsCollectionRequestBuilder is request builder for SecurityURLThreatSubmission collection rcn
type SecurityThreatSubmissionRootURLThreatsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityURLThreatSubmission collection
func (b *SecurityThreatSubmissionRootURLThreatsCollectionRequestBuilder) Request() *SecurityThreatSubmissionRootURLThreatsCollectionRequest {
	return &SecurityThreatSubmissionRootURLThreatsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityURLThreatSubmission item
func (b *SecurityThreatSubmissionRootURLThreatsCollectionRequestBuilder) ID(id string) *SecurityURLThreatSubmissionRequestBuilder {
	bb := &SecurityURLThreatSubmissionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityThreatSubmissionRootURLThreatsCollectionRequest is request for SecurityURLThreatSubmission collection
type SecurityThreatSubmissionRootURLThreatsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityURLThreatSubmission collection
func (r *SecurityThreatSubmissionRootURLThreatsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityURLThreatSubmission, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityURLThreatSubmission
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityURLThreatSubmission
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityURLThreatSubmission collection, max N pages
func (r *SecurityThreatSubmissionRootURLThreatsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityURLThreatSubmission, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityURLThreatSubmission collection
func (r *SecurityThreatSubmissionRootURLThreatsCollectionRequest) Get(ctx context.Context) ([]SecurityURLThreatSubmission, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityURLThreatSubmission collection
func (r *SecurityThreatSubmissionRootURLThreatsCollectionRequest) Add(ctx context.Context, reqObj *SecurityURLThreatSubmission) (resObj *SecurityURLThreatSubmission, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RetentionEventTypes returns request builder for SecurityRetentionEventType collection
func (b *SecurityTriggerTypesRootRequestBuilder) RetentionEventTypes() *SecurityTriggerTypesRootRetentionEventTypesCollectionRequestBuilder {
	bb := &SecurityTriggerTypesRootRetentionEventTypesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/retentionEventTypes"
	return bb
}

// SecurityTriggerTypesRootRetentionEventTypesCollectionRequestBuilder is request builder for SecurityRetentionEventType collection rcn
type SecurityTriggerTypesRootRetentionEventTypesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityRetentionEventType collection
func (b *SecurityTriggerTypesRootRetentionEventTypesCollectionRequestBuilder) Request() *SecurityTriggerTypesRootRetentionEventTypesCollectionRequest {
	return &SecurityTriggerTypesRootRetentionEventTypesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityRetentionEventType item
func (b *SecurityTriggerTypesRootRetentionEventTypesCollectionRequestBuilder) ID(id string) *SecurityRetentionEventTypeRequestBuilder {
	bb := &SecurityRetentionEventTypeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityTriggerTypesRootRetentionEventTypesCollectionRequest is request for SecurityRetentionEventType collection
type SecurityTriggerTypesRootRetentionEventTypesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityRetentionEventType collection
func (r *SecurityTriggerTypesRootRetentionEventTypesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityRetentionEventType, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityRetentionEventType
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityRetentionEventType
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityRetentionEventType collection, max N pages
func (r *SecurityTriggerTypesRootRetentionEventTypesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityRetentionEventType, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityRetentionEventType collection
func (r *SecurityTriggerTypesRootRetentionEventTypesCollectionRequest) Get(ctx context.Context) ([]SecurityRetentionEventType, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityRetentionEventType collection
func (r *SecurityTriggerTypesRootRetentionEventTypesCollectionRequest) Add(ctx context.Context, reqObj *SecurityRetentionEventType) (resObj *SecurityRetentionEventType, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RetentionEvents returns request builder for SecurityRetentionEvent collection
func (b *SecurityTriggersRootRequestBuilder) RetentionEvents() *SecurityTriggersRootRetentionEventsCollectionRequestBuilder {
	bb := &SecurityTriggersRootRetentionEventsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/retentionEvents"
	return bb
}

// SecurityTriggersRootRetentionEventsCollectionRequestBuilder is request builder for SecurityRetentionEvent collection rcn
type SecurityTriggersRootRetentionEventsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityRetentionEvent collection
func (b *SecurityTriggersRootRetentionEventsCollectionRequestBuilder) Request() *SecurityTriggersRootRetentionEventsCollectionRequest {
	return &SecurityTriggersRootRetentionEventsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityRetentionEvent item
func (b *SecurityTriggersRootRetentionEventsCollectionRequestBuilder) ID(id string) *SecurityRetentionEventRequestBuilder {
	bb := &SecurityRetentionEventRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityTriggersRootRetentionEventsCollectionRequest is request for SecurityRetentionEvent collection
type SecurityTriggersRootRetentionEventsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityRetentionEvent collection
func (r *SecurityTriggersRootRetentionEventsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityRetentionEvent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityRetentionEvent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityRetentionEvent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityRetentionEvent collection, max N pages
func (r *SecurityTriggersRootRetentionEventsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityRetentionEvent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityRetentionEvent collection
func (r *SecurityTriggersRootRetentionEventsCollectionRequest) Get(ctx context.Context) ([]SecurityRetentionEvent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityRetentionEvent collection
func (r *SecurityTriggersRootRetentionEventsCollectionRequest) Add(ctx context.Context, reqObj *SecurityRetentionEvent) (resObj *SecurityRetentionEvent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Group is navigation property rn
func (b *SecurityUnifiedGroupSourceRequestBuilder) Group() *GroupRequestBuilder {
	bb := &GroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/group"
	return bb
}

// Articles returns request builder for SecurityArticle collection
func (b *SecurityVulnerabilityRequestBuilder) Articles() *SecurityVulnerabilityArticlesCollectionRequestBuilder {
	bb := &SecurityVulnerabilityArticlesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/articles"
	return bb
}

// SecurityVulnerabilityArticlesCollectionRequestBuilder is request builder for SecurityArticle collection rcn
type SecurityVulnerabilityArticlesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityArticle collection
func (b *SecurityVulnerabilityArticlesCollectionRequestBuilder) Request() *SecurityVulnerabilityArticlesCollectionRequest {
	return &SecurityVulnerabilityArticlesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityArticle item
func (b *SecurityVulnerabilityArticlesCollectionRequestBuilder) ID(id string) *SecurityArticleRequestBuilder {
	bb := &SecurityArticleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityVulnerabilityArticlesCollectionRequest is request for SecurityArticle collection
type SecurityVulnerabilityArticlesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityArticle collection
func (r *SecurityVulnerabilityArticlesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityArticle, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityArticle
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityArticle
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityArticle collection, max N pages
func (r *SecurityVulnerabilityArticlesCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityArticle, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityArticle collection
func (r *SecurityVulnerabilityArticlesCollectionRequest) Get(ctx context.Context) ([]SecurityArticle, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityArticle collection
func (r *SecurityVulnerabilityArticlesCollectionRequest) Add(ctx context.Context, reqObj *SecurityArticle) (resObj *SecurityArticle, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Components returns request builder for SecurityVulnerabilityComponent collection
func (b *SecurityVulnerabilityRequestBuilder) Components() *SecurityVulnerabilityComponentsCollectionRequestBuilder {
	bb := &SecurityVulnerabilityComponentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/components"
	return bb
}

// SecurityVulnerabilityComponentsCollectionRequestBuilder is request builder for SecurityVulnerabilityComponent collection rcn
type SecurityVulnerabilityComponentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityVulnerabilityComponent collection
func (b *SecurityVulnerabilityComponentsCollectionRequestBuilder) Request() *SecurityVulnerabilityComponentsCollectionRequest {
	return &SecurityVulnerabilityComponentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityVulnerabilityComponent item
func (b *SecurityVulnerabilityComponentsCollectionRequestBuilder) ID(id string) *SecurityVulnerabilityComponentRequestBuilder {
	bb := &SecurityVulnerabilityComponentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityVulnerabilityComponentsCollectionRequest is request for SecurityVulnerabilityComponent collection
type SecurityVulnerabilityComponentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityVulnerabilityComponent collection
func (r *SecurityVulnerabilityComponentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityVulnerabilityComponent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityVulnerabilityComponent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityVulnerabilityComponent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityVulnerabilityComponent collection, max N pages
func (r *SecurityVulnerabilityComponentsCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityVulnerabilityComponent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityVulnerabilityComponent collection
func (r *SecurityVulnerabilityComponentsCollectionRequest) Get(ctx context.Context) ([]SecurityVulnerabilityComponent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityVulnerabilityComponent collection
func (r *SecurityVulnerabilityComponentsCollectionRequest) Add(ctx context.Context, reqObj *SecurityVulnerabilityComponent) (resObj *SecurityVulnerabilityComponent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryAddToReviewSetOperation returns request builder for SecurityEdiscoveryAddToReviewSetOperation collection
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryAddToReviewSetOperation() *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryAddToReviewSetOperation collection rcn
type SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryAddToReviewSetOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryAddToReviewSetOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryAddToReviewSetOperationRequestBuilder {
	bb := &SecurityEdiscoveryAddToReviewSetOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest is request for SecurityEdiscoveryAddToReviewSetOperation collection
type SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryAddToReviewSetOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryAddToReviewSetOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryAddToReviewSetOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryAddToReviewSetOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryAddToReviewSetOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryAddToReviewSetOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryAddToReviewSetOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryAddToReviewSetOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryAddToReviewSetOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryAddToReviewSetOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryAddToReviewSetOperation) (resObj *SecurityEdiscoveryAddToReviewSetOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryEstimateOperation returns request builder for SecurityEdiscoveryEstimateOperation collection
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryEstimateOperation() *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryEstimateOperation collection rcn
type SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryEstimateOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryEstimateOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryEstimateOperationRequestBuilder {
	bb := &SecurityEdiscoveryEstimateOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest is request for SecurityEdiscoveryEstimateOperation collection
type SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryEstimateOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryEstimateOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryEstimateOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryEstimateOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryEstimateOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryEstimateOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryEstimateOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryEstimateOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryEstimateOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryEstimateOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryEstimateOperation) (resObj *SecurityEdiscoveryEstimateOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryExportOperation returns request builder for SecurityEdiscoveryExportOperation collection
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryExportOperation() *SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryExportOperation collection rcn
type SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryExportOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryExportOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryExportOperationRequestBuilder {
	bb := &SecurityEdiscoveryExportOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequest is request for SecurityEdiscoveryExportOperation collection
type SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryExportOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryExportOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryExportOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryExportOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryExportOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryExportOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryExportOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryExportOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryExportOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryExportOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryExportOperation) (resObj *SecurityEdiscoveryExportOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryHoldOperation returns request builder for SecurityEdiscoveryHoldOperation collection
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryHoldOperation() *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryHoldOperation collection rcn
type SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryHoldOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryHoldOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryHoldOperationRequestBuilder {
	bb := &SecurityEdiscoveryHoldOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest is request for SecurityEdiscoveryHoldOperation collection
type SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryHoldOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryHoldOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryHoldOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryHoldOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryHoldOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryHoldOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryHoldOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryHoldOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryHoldOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryHoldOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryHoldOperation) (resObj *SecurityEdiscoveryHoldOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryIndexOperation returns request builder for SecurityEdiscoveryIndexOperation collection
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryIndexOperation() *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryIndexOperation collection rcn
type SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryIndexOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryIndexOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryIndexOperationRequestBuilder {
	bb := &SecurityEdiscoveryIndexOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest is request for SecurityEdiscoveryIndexOperation collection
type SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryIndexOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryIndexOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryIndexOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryIndexOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryIndexOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryIndexOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryIndexOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryIndexOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryIndexOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryIndexOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryIndexOperation) (resObj *SecurityEdiscoveryIndexOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryPurgeDataOperation returns request builder for SecurityEdiscoveryPurgeDataOperation collection
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryPurgeDataOperation() *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryPurgeDataOperation collection rcn
type SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryPurgeDataOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryPurgeDataOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryPurgeDataOperationRequestBuilder {
	bb := &SecurityEdiscoveryPurgeDataOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest is request for SecurityEdiscoveryPurgeDataOperation collection
type SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryPurgeDataOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryPurgeDataOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryPurgeDataOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryPurgeDataOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryPurgeDataOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryPurgeDataOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryPurgeDataOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryPurgeDataOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryPurgeDataOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryPurgeDataOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryPurgeDataOperation) (resObj *SecurityEdiscoveryPurgeDataOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEdiscoveryTagOperation returns request builder for SecurityEdiscoveryTagOperation collection
func (b *SecurityCaseOperationRequestBuilder) SecurityEdiscoveryTagOperation() *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder {
	bb := &SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder is request builder for SecurityEdiscoveryTagOperation collection rcn
type SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEdiscoveryTagOperation collection
func (b *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder) Request() *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest {
	return &SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEdiscoveryTagOperation item
func (b *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequestBuilder) ID(id string) *SecurityEdiscoveryTagOperationRequestBuilder {
	bb := &SecurityEdiscoveryTagOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest is request for SecurityEdiscoveryTagOperation collection
type SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEdiscoveryTagOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEdiscoveryTagOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEdiscoveryTagOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEdiscoveryTagOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEdiscoveryTagOperation collection, max N pages
func (r *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEdiscoveryTagOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEdiscoveryTagOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest) Get(ctx context.Context) ([]SecurityEdiscoveryTagOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEdiscoveryTagOperation collection
func (r *SecurityCaseOperationSecurityEdiscoveryTagOperationCollectionRequest) Add(ctx context.Context, reqObj *SecurityEdiscoveryTagOperation) (resObj *SecurityEdiscoveryTagOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEmailContentThreatSubmission returns request builder for SecurityEmailContentThreatSubmission collection
func (b *SecurityEmailThreatSubmissionRequestBuilder) SecurityEmailContentThreatSubmission() *SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequestBuilder {
	bb := &SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequestBuilder is request builder for SecurityEmailContentThreatSubmission collection rcn
type SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEmailContentThreatSubmission collection
func (b *SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequestBuilder) Request() *SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequest {
	return &SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEmailContentThreatSubmission item
func (b *SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequestBuilder) ID(id string) *SecurityEmailContentThreatSubmissionRequestBuilder {
	bb := &SecurityEmailContentThreatSubmissionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequest is request for SecurityEmailContentThreatSubmission collection
type SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEmailContentThreatSubmission collection
func (r *SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEmailContentThreatSubmission, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEmailContentThreatSubmission
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEmailContentThreatSubmission
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEmailContentThreatSubmission collection, max N pages
func (r *SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEmailContentThreatSubmission, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEmailContentThreatSubmission collection
func (r *SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequest) Get(ctx context.Context) ([]SecurityEmailContentThreatSubmission, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEmailContentThreatSubmission collection
func (r *SecurityEmailThreatSubmissionSecurityEmailContentThreatSubmissionCollectionRequest) Add(ctx context.Context, reqObj *SecurityEmailContentThreatSubmission) (resObj *SecurityEmailContentThreatSubmission, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityEmailURLThreatSubmission returns request builder for SecurityEmailURLThreatSubmission collection
func (b *SecurityEmailThreatSubmissionRequestBuilder) SecurityEmailURLThreatSubmission() *SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequestBuilder {
	bb := &SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequestBuilder is request builder for SecurityEmailURLThreatSubmission collection rcn
type SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityEmailURLThreatSubmission collection
func (b *SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequestBuilder) Request() *SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequest {
	return &SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityEmailURLThreatSubmission item
func (b *SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequestBuilder) ID(id string) *SecurityEmailURLThreatSubmissionRequestBuilder {
	bb := &SecurityEmailURLThreatSubmissionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequest is request for SecurityEmailURLThreatSubmission collection
type SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityEmailURLThreatSubmission collection
func (r *SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityEmailURLThreatSubmission, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityEmailURLThreatSubmission
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityEmailURLThreatSubmission
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityEmailURLThreatSubmission collection, max N pages
func (r *SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityEmailURLThreatSubmission, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityEmailURLThreatSubmission collection
func (r *SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequest) Get(ctx context.Context) ([]SecurityEmailURLThreatSubmission, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityEmailURLThreatSubmission collection
func (r *SecurityEmailThreatSubmissionSecurityEmailURLThreatSubmissionCollectionRequest) Add(ctx context.Context, reqObj *SecurityEmailURLThreatSubmission) (resObj *SecurityEmailURLThreatSubmission, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityFileContentThreatSubmission returns request builder for SecurityFileContentThreatSubmission collection
func (b *SecurityFileThreatSubmissionRequestBuilder) SecurityFileContentThreatSubmission() *SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequestBuilder {
	bb := &SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequestBuilder is request builder for SecurityFileContentThreatSubmission collection rcn
type SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityFileContentThreatSubmission collection
func (b *SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequestBuilder) Request() *SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequest {
	return &SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityFileContentThreatSubmission item
func (b *SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequestBuilder) ID(id string) *SecurityFileContentThreatSubmissionRequestBuilder {
	bb := &SecurityFileContentThreatSubmissionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequest is request for SecurityFileContentThreatSubmission collection
type SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityFileContentThreatSubmission collection
func (r *SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityFileContentThreatSubmission, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityFileContentThreatSubmission
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityFileContentThreatSubmission
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityFileContentThreatSubmission collection, max N pages
func (r *SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityFileContentThreatSubmission, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityFileContentThreatSubmission collection
func (r *SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequest) Get(ctx context.Context) ([]SecurityFileContentThreatSubmission, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityFileContentThreatSubmission collection
func (r *SecurityFileThreatSubmissionSecurityFileContentThreatSubmissionCollectionRequest) Add(ctx context.Context, reqObj *SecurityFileContentThreatSubmission) (resObj *SecurityFileContentThreatSubmission, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityFileURLThreatSubmission returns request builder for SecurityFileURLThreatSubmission collection
func (b *SecurityFileThreatSubmissionRequestBuilder) SecurityFileURLThreatSubmission() *SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequestBuilder {
	bb := &SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequestBuilder is request builder for SecurityFileURLThreatSubmission collection rcn
type SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityFileURLThreatSubmission collection
func (b *SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequestBuilder) Request() *SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequest {
	return &SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityFileURLThreatSubmission item
func (b *SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequestBuilder) ID(id string) *SecurityFileURLThreatSubmissionRequestBuilder {
	bb := &SecurityFileURLThreatSubmissionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequest is request for SecurityFileURLThreatSubmission collection
type SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityFileURLThreatSubmission collection
func (r *SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityFileURLThreatSubmission, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityFileURLThreatSubmission
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityFileURLThreatSubmission
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityFileURLThreatSubmission collection, max N pages
func (r *SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityFileURLThreatSubmission, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityFileURLThreatSubmission collection
func (r *SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequest) Get(ctx context.Context) ([]SecurityFileURLThreatSubmission, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityFileURLThreatSubmission collection
func (r *SecurityFileThreatSubmissionSecurityFileURLThreatSubmissionCollectionRequest) Add(ctx context.Context, reqObj *SecurityFileURLThreatSubmission) (resObj *SecurityFileURLThreatSubmission, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityArtifact is navigation property rn
func (b *SecurityHostRequestBuilder) SecurityArtifact() *SecurityArtifactRequestBuilder {
	bb := &SecurityArtifactRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityArtifact"
	return bb
}

// SecurityArtifact is navigation property rn
func (b *SecurityHostComponentRequestBuilder) SecurityArtifact() *SecurityArtifactRequestBuilder {
	bb := &SecurityArtifactRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityArtifact"
	return bb
}

// SecurityArtifact is navigation property rn
func (b *SecurityHostCookieRequestBuilder) SecurityArtifact() *SecurityArtifactRequestBuilder {
	bb := &SecurityArtifactRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityArtifact"
	return bb
}

// SecurityArtifact is navigation property rn
func (b *SecurityHostTrackerRequestBuilder) SecurityArtifact() *SecurityArtifactRequestBuilder {
	bb := &SecurityArtifactRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityArtifact"
	return bb
}

// SecurityHostname returns request builder for SecurityHostname collection
func (b *SecurityHostRequestBuilder) SecurityHostname() *SecurityHostSecurityHostnameCollectionRequestBuilder {
	bb := &SecurityHostSecurityHostnameCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityHostSecurityHostnameCollectionRequestBuilder is request builder for SecurityHostname collection rcn
type SecurityHostSecurityHostnameCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityHostname collection
func (b *SecurityHostSecurityHostnameCollectionRequestBuilder) Request() *SecurityHostSecurityHostnameCollectionRequest {
	return &SecurityHostSecurityHostnameCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityHostname item
func (b *SecurityHostSecurityHostnameCollectionRequestBuilder) ID(id string) *SecurityHostnameRequestBuilder {
	bb := &SecurityHostnameRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityHostSecurityHostnameCollectionRequest is request for SecurityHostname collection
type SecurityHostSecurityHostnameCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityHostname collection
func (r *SecurityHostSecurityHostnameCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityHostname, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityHostname
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityHostname
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityHostname collection, max N pages
func (r *SecurityHostSecurityHostnameCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityHostname, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityHostname collection
func (r *SecurityHostSecurityHostnameCollectionRequest) Get(ctx context.Context) ([]SecurityHostname, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityHostname collection
func (r *SecurityHostSecurityHostnameCollectionRequest) Add(ctx context.Context, reqObj *SecurityHostname) (resObj *SecurityHostname, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityIPAddress returns request builder for SecurityIPAddress collection
func (b *SecurityHostRequestBuilder) SecurityIPAddress() *SecurityHostSecurityIPAddressCollectionRequestBuilder {
	bb := &SecurityHostSecurityIPAddressCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityHostSecurityIPAddressCollectionRequestBuilder is request builder for SecurityIPAddress collection rcn
type SecurityHostSecurityIPAddressCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityIPAddress collection
func (b *SecurityHostSecurityIPAddressCollectionRequestBuilder) Request() *SecurityHostSecurityIPAddressCollectionRequest {
	return &SecurityHostSecurityIPAddressCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityIPAddress item
func (b *SecurityHostSecurityIPAddressCollectionRequestBuilder) ID(id string) *SecurityIPAddressRequestBuilder {
	bb := &SecurityIPAddressRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityHostSecurityIPAddressCollectionRequest is request for SecurityIPAddress collection
type SecurityHostSecurityIPAddressCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityIPAddress collection
func (r *SecurityHostSecurityIPAddressCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityIPAddress, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityIPAddress
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityIPAddress
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityIPAddress collection, max N pages
func (r *SecurityHostSecurityIPAddressCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityIPAddress, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityIPAddress collection
func (r *SecurityHostSecurityIPAddressCollectionRequest) Get(ctx context.Context) ([]SecurityIPAddress, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityIPAddress collection
func (r *SecurityHostSecurityIPAddressCollectionRequest) Add(ctx context.Context, reqObj *SecurityIPAddress) (resObj *SecurityIPAddress, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityArtifact is navigation property rn
func (b *SecurityPassiveDnsRecordRequestBuilder) SecurityArtifact() *SecurityArtifactRequestBuilder {
	bb := &SecurityArtifactRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityArtifact"
	return bb
}

// SecuritySiteSource returns request builder for SecuritySiteSource collection
func (b *SecurityDataSourceRequestBuilder) SecuritySiteSource() *SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder {
	bb := &SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder is request builder for SecuritySiteSource collection rcn
type SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecuritySiteSource collection
func (b *SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder) Request() *SecurityDataSourceSecuritySiteSourceCollectionRequest {
	return &SecurityDataSourceSecuritySiteSourceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecuritySiteSource item
func (b *SecurityDataSourceSecuritySiteSourceCollectionRequestBuilder) ID(id string) *SecuritySiteSourceRequestBuilder {
	bb := &SecuritySiteSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityDataSourceSecuritySiteSourceCollectionRequest is request for SecuritySiteSource collection
type SecurityDataSourceSecuritySiteSourceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecuritySiteSource collection
func (r *SecurityDataSourceSecuritySiteSourceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecuritySiteSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecuritySiteSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecuritySiteSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecuritySiteSource collection, max N pages
func (r *SecurityDataSourceSecuritySiteSourceCollectionRequest) GetN(ctx context.Context, n int) ([]SecuritySiteSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecuritySiteSource collection
func (r *SecurityDataSourceSecuritySiteSourceCollectionRequest) Get(ctx context.Context) ([]SecuritySiteSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecuritySiteSource collection
func (r *SecurityDataSourceSecuritySiteSourceCollectionRequest) Add(ctx context.Context, reqObj *SecuritySiteSource) (resObj *SecuritySiteSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityArtifact is navigation property rn
func (b *SecurityUnclassifiedArtifactRequestBuilder) SecurityArtifact() *SecurityArtifactRequestBuilder {
	bb := &SecurityArtifactRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/SecurityArtifact"
	return bb
}

// SecurityUnifiedGroupSource returns request builder for SecurityUnifiedGroupSource collection
func (b *SecurityDataSourceRequestBuilder) SecurityUnifiedGroupSource() *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder {
	bb := &SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder is request builder for SecurityUnifiedGroupSource collection rcn
type SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityUnifiedGroupSource collection
func (b *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder) Request() *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest {
	return &SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityUnifiedGroupSource item
func (b *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequestBuilder) ID(id string) *SecurityUnifiedGroupSourceRequestBuilder {
	bb := &SecurityUnifiedGroupSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest is request for SecurityUnifiedGroupSource collection
type SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityUnifiedGroupSource collection
func (r *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityUnifiedGroupSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityUnifiedGroupSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityUnifiedGroupSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityUnifiedGroupSource collection, max N pages
func (r *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityUnifiedGroupSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityUnifiedGroupSource collection
func (r *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest) Get(ctx context.Context) ([]SecurityUnifiedGroupSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityUnifiedGroupSource collection
func (r *SecurityDataSourceSecurityUnifiedGroupSourceCollectionRequest) Add(ctx context.Context, reqObj *SecurityUnifiedGroupSource) (resObj *SecurityUnifiedGroupSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SecurityUserSource returns request builder for SecurityUserSource collection
func (b *SecurityDataSourceRequestBuilder) SecurityUserSource() *SecurityDataSourceSecurityUserSourceCollectionRequestBuilder {
	bb := &SecurityDataSourceSecurityUserSourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// SecurityDataSourceSecurityUserSourceCollectionRequestBuilder is request builder for SecurityUserSource collection rcn
type SecurityDataSourceSecurityUserSourceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SecurityUserSource collection
func (b *SecurityDataSourceSecurityUserSourceCollectionRequestBuilder) Request() *SecurityDataSourceSecurityUserSourceCollectionRequest {
	return &SecurityDataSourceSecurityUserSourceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SecurityUserSource item
func (b *SecurityDataSourceSecurityUserSourceCollectionRequestBuilder) ID(id string) *SecurityUserSourceRequestBuilder {
	bb := &SecurityUserSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SecurityDataSourceSecurityUserSourceCollectionRequest is request for SecurityUserSource collection
type SecurityDataSourceSecurityUserSourceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SecurityUserSource collection
func (r *SecurityDataSourceSecurityUserSourceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SecurityUserSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SecurityUserSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SecurityUserSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SecurityUserSource collection, max N pages
func (r *SecurityDataSourceSecurityUserSourceCollectionRequest) GetN(ctx context.Context, n int) ([]SecurityUserSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SecurityUserSource collection
func (r *SecurityDataSourceSecurityUserSourceCollectionRequest) Get(ctx context.Context) ([]SecurityUserSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SecurityUserSource collection
func (r *SecurityDataSourceSecurityUserSourceCollectionRequest) Add(ctx context.Context, reqObj *SecurityUserSource) (resObj *SecurityUserSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
