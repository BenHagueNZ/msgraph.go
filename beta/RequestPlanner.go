// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// PlannerRequestBuilder is request builder for Planner
type PlannerRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerRequest
func (b *PlannerRequestBuilder) Request() *PlannerRequest {
	return &PlannerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerRequest is request for Planner
type PlannerRequest struct{ BaseRequest }

// Get performs GET request for Planner
func (r *PlannerRequest) Get(ctx context.Context) (resObj *Planner, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Planner
func (r *PlannerRequest) Update(ctx context.Context, reqObj *Planner) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Planner
func (r *PlannerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerAppliedCategoriesRequestBuilder is request builder for PlannerAppliedCategories
type PlannerAppliedCategoriesRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerAppliedCategoriesRequest
func (b *PlannerAppliedCategoriesRequestBuilder) Request() *PlannerAppliedCategoriesRequest {
	return &PlannerAppliedCategoriesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerAppliedCategoriesRequest is request for PlannerAppliedCategories
type PlannerAppliedCategoriesRequest struct{ BaseRequest }

// Get performs GET request for PlannerAppliedCategories
func (r *PlannerAppliedCategoriesRequest) Get(ctx context.Context) (resObj *PlannerAppliedCategories, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerAppliedCategories
func (r *PlannerAppliedCategoriesRequest) Update(ctx context.Context, reqObj *PlannerAppliedCategories) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerAppliedCategories
func (r *PlannerAppliedCategoriesRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerAssignedToTaskBoardTaskFormatRequestBuilder is request builder for PlannerAssignedToTaskBoardTaskFormat
type PlannerAssignedToTaskBoardTaskFormatRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerAssignedToTaskBoardTaskFormatRequest
func (b *PlannerAssignedToTaskBoardTaskFormatRequestBuilder) Request() *PlannerAssignedToTaskBoardTaskFormatRequest {
	return &PlannerAssignedToTaskBoardTaskFormatRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerAssignedToTaskBoardTaskFormatRequest is request for PlannerAssignedToTaskBoardTaskFormat
type PlannerAssignedToTaskBoardTaskFormatRequest struct{ BaseRequest }

// Get performs GET request for PlannerAssignedToTaskBoardTaskFormat
func (r *PlannerAssignedToTaskBoardTaskFormatRequest) Get(ctx context.Context) (resObj *PlannerAssignedToTaskBoardTaskFormat, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerAssignedToTaskBoardTaskFormat
func (r *PlannerAssignedToTaskBoardTaskFormatRequest) Update(ctx context.Context, reqObj *PlannerAssignedToTaskBoardTaskFormat) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerAssignedToTaskBoardTaskFormat
func (r *PlannerAssignedToTaskBoardTaskFormatRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerAssignmentRequestBuilder is request builder for PlannerAssignment
type PlannerAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerAssignmentRequest
func (b *PlannerAssignmentRequestBuilder) Request() *PlannerAssignmentRequest {
	return &PlannerAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerAssignmentRequest is request for PlannerAssignment
type PlannerAssignmentRequest struct{ BaseRequest }

// Get performs GET request for PlannerAssignment
func (r *PlannerAssignmentRequest) Get(ctx context.Context) (resObj *PlannerAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerAssignment
func (r *PlannerAssignmentRequest) Update(ctx context.Context, reqObj *PlannerAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerAssignment
func (r *PlannerAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerAssignmentsRequestBuilder is request builder for PlannerAssignments
type PlannerAssignmentsRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerAssignmentsRequest
func (b *PlannerAssignmentsRequestBuilder) Request() *PlannerAssignmentsRequest {
	return &PlannerAssignmentsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerAssignmentsRequest is request for PlannerAssignments
type PlannerAssignmentsRequest struct{ BaseRequest }

// Get performs GET request for PlannerAssignments
func (r *PlannerAssignmentsRequest) Get(ctx context.Context) (resObj *PlannerAssignments, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerAssignments
func (r *PlannerAssignmentsRequest) Update(ctx context.Context, reqObj *PlannerAssignments) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerAssignments
func (r *PlannerAssignmentsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerBucketRequestBuilder is request builder for PlannerBucket
type PlannerBucketRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerBucketRequest
func (b *PlannerBucketRequestBuilder) Request() *PlannerBucketRequest {
	return &PlannerBucketRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerBucketRequest is request for PlannerBucket
type PlannerBucketRequest struct{ BaseRequest }

// Get performs GET request for PlannerBucket
func (r *PlannerBucketRequest) Get(ctx context.Context) (resObj *PlannerBucket, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerBucket
func (r *PlannerBucketRequest) Update(ctx context.Context, reqObj *PlannerBucket) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerBucket
func (r *PlannerBucketRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerBucketCreationRequestBuilder is request builder for PlannerBucketCreation
type PlannerBucketCreationRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerBucketCreationRequest
func (b *PlannerBucketCreationRequestBuilder) Request() *PlannerBucketCreationRequest {
	return &PlannerBucketCreationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerBucketCreationRequest is request for PlannerBucketCreation
type PlannerBucketCreationRequest struct{ BaseRequest }

// Get performs GET request for PlannerBucketCreation
func (r *PlannerBucketCreationRequest) Get(ctx context.Context) (resObj *PlannerBucketCreation, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerBucketCreation
func (r *PlannerBucketCreationRequest) Update(ctx context.Context, reqObj *PlannerBucketCreation) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerBucketCreation
func (r *PlannerBucketCreationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerBucketPropertyRuleRequestBuilder is request builder for PlannerBucketPropertyRule
type PlannerBucketPropertyRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerBucketPropertyRuleRequest
func (b *PlannerBucketPropertyRuleRequestBuilder) Request() *PlannerBucketPropertyRuleRequest {
	return &PlannerBucketPropertyRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerBucketPropertyRuleRequest is request for PlannerBucketPropertyRule
type PlannerBucketPropertyRuleRequest struct{ BaseRequest }

// Get performs GET request for PlannerBucketPropertyRule
func (r *PlannerBucketPropertyRuleRequest) Get(ctx context.Context) (resObj *PlannerBucketPropertyRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerBucketPropertyRule
func (r *PlannerBucketPropertyRuleRequest) Update(ctx context.Context, reqObj *PlannerBucketPropertyRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerBucketPropertyRule
func (r *PlannerBucketPropertyRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerBucketTaskBoardTaskFormatRequestBuilder is request builder for PlannerBucketTaskBoardTaskFormat
type PlannerBucketTaskBoardTaskFormatRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerBucketTaskBoardTaskFormatRequest
func (b *PlannerBucketTaskBoardTaskFormatRequestBuilder) Request() *PlannerBucketTaskBoardTaskFormatRequest {
	return &PlannerBucketTaskBoardTaskFormatRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerBucketTaskBoardTaskFormatRequest is request for PlannerBucketTaskBoardTaskFormat
type PlannerBucketTaskBoardTaskFormatRequest struct{ BaseRequest }

// Get performs GET request for PlannerBucketTaskBoardTaskFormat
func (r *PlannerBucketTaskBoardTaskFormatRequest) Get(ctx context.Context) (resObj *PlannerBucketTaskBoardTaskFormat, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerBucketTaskBoardTaskFormat
func (r *PlannerBucketTaskBoardTaskFormatRequest) Update(ctx context.Context, reqObj *PlannerBucketTaskBoardTaskFormat) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerBucketTaskBoardTaskFormat
func (r *PlannerBucketTaskBoardTaskFormatRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerCategoryDescriptionsRequestBuilder is request builder for PlannerCategoryDescriptions
type PlannerCategoryDescriptionsRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerCategoryDescriptionsRequest
func (b *PlannerCategoryDescriptionsRequestBuilder) Request() *PlannerCategoryDescriptionsRequest {
	return &PlannerCategoryDescriptionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerCategoryDescriptionsRequest is request for PlannerCategoryDescriptions
type PlannerCategoryDescriptionsRequest struct{ BaseRequest }

// Get performs GET request for PlannerCategoryDescriptions
func (r *PlannerCategoryDescriptionsRequest) Get(ctx context.Context) (resObj *PlannerCategoryDescriptions, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerCategoryDescriptions
func (r *PlannerCategoryDescriptionsRequest) Update(ctx context.Context, reqObj *PlannerCategoryDescriptions) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerCategoryDescriptions
func (r *PlannerCategoryDescriptionsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerChecklistItemRequestBuilder is request builder for PlannerChecklistItem
type PlannerChecklistItemRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerChecklistItemRequest
func (b *PlannerChecklistItemRequestBuilder) Request() *PlannerChecklistItemRequest {
	return &PlannerChecklistItemRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerChecklistItemRequest is request for PlannerChecklistItem
type PlannerChecklistItemRequest struct{ BaseRequest }

// Get performs GET request for PlannerChecklistItem
func (r *PlannerChecklistItemRequest) Get(ctx context.Context) (resObj *PlannerChecklistItem, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerChecklistItem
func (r *PlannerChecklistItemRequest) Update(ctx context.Context, reqObj *PlannerChecklistItem) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerChecklistItem
func (r *PlannerChecklistItemRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerChecklistItemsRequestBuilder is request builder for PlannerChecklistItems
type PlannerChecklistItemsRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerChecklistItemsRequest
func (b *PlannerChecklistItemsRequestBuilder) Request() *PlannerChecklistItemsRequest {
	return &PlannerChecklistItemsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerChecklistItemsRequest is request for PlannerChecklistItems
type PlannerChecklistItemsRequest struct{ BaseRequest }

// Get performs GET request for PlannerChecklistItems
func (r *PlannerChecklistItemsRequest) Get(ctx context.Context) (resObj *PlannerChecklistItems, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerChecklistItems
func (r *PlannerChecklistItemsRequest) Update(ctx context.Context, reqObj *PlannerChecklistItems) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerChecklistItems
func (r *PlannerChecklistItemsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerDeltaRequestBuilder is request builder for PlannerDelta
type PlannerDeltaRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerDeltaRequest
func (b *PlannerDeltaRequestBuilder) Request() *PlannerDeltaRequest {
	return &PlannerDeltaRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerDeltaRequest is request for PlannerDelta
type PlannerDeltaRequest struct{ BaseRequest }

// Get performs GET request for PlannerDelta
func (r *PlannerDeltaRequest) Get(ctx context.Context) (resObj *PlannerDelta, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerDelta
func (r *PlannerDeltaRequest) Update(ctx context.Context, reqObj *PlannerDelta) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerDelta
func (r *PlannerDeltaRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerExternalBucketSourceRequestBuilder is request builder for PlannerExternalBucketSource
type PlannerExternalBucketSourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerExternalBucketSourceRequest
func (b *PlannerExternalBucketSourceRequestBuilder) Request() *PlannerExternalBucketSourceRequest {
	return &PlannerExternalBucketSourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerExternalBucketSourceRequest is request for PlannerExternalBucketSource
type PlannerExternalBucketSourceRequest struct{ BaseRequest }

// Get performs GET request for PlannerExternalBucketSource
func (r *PlannerExternalBucketSourceRequest) Get(ctx context.Context) (resObj *PlannerExternalBucketSource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerExternalBucketSource
func (r *PlannerExternalBucketSourceRequest) Update(ctx context.Context, reqObj *PlannerExternalBucketSource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerExternalBucketSource
func (r *PlannerExternalBucketSourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerExternalPlanSourceRequestBuilder is request builder for PlannerExternalPlanSource
type PlannerExternalPlanSourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerExternalPlanSourceRequest
func (b *PlannerExternalPlanSourceRequestBuilder) Request() *PlannerExternalPlanSourceRequest {
	return &PlannerExternalPlanSourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerExternalPlanSourceRequest is request for PlannerExternalPlanSource
type PlannerExternalPlanSourceRequest struct{ BaseRequest }

// Get performs GET request for PlannerExternalPlanSource
func (r *PlannerExternalPlanSourceRequest) Get(ctx context.Context) (resObj *PlannerExternalPlanSource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerExternalPlanSource
func (r *PlannerExternalPlanSourceRequest) Update(ctx context.Context, reqObj *PlannerExternalPlanSource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerExternalPlanSource
func (r *PlannerExternalPlanSourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerExternalReferenceRequestBuilder is request builder for PlannerExternalReference
type PlannerExternalReferenceRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerExternalReferenceRequest
func (b *PlannerExternalReferenceRequestBuilder) Request() *PlannerExternalReferenceRequest {
	return &PlannerExternalReferenceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerExternalReferenceRequest is request for PlannerExternalReference
type PlannerExternalReferenceRequest struct{ BaseRequest }

// Get performs GET request for PlannerExternalReference
func (r *PlannerExternalReferenceRequest) Get(ctx context.Context) (resObj *PlannerExternalReference, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerExternalReference
func (r *PlannerExternalReferenceRequest) Update(ctx context.Context, reqObj *PlannerExternalReference) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerExternalReference
func (r *PlannerExternalReferenceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerExternalReferencesRequestBuilder is request builder for PlannerExternalReferences
type PlannerExternalReferencesRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerExternalReferencesRequest
func (b *PlannerExternalReferencesRequestBuilder) Request() *PlannerExternalReferencesRequest {
	return &PlannerExternalReferencesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerExternalReferencesRequest is request for PlannerExternalReferences
type PlannerExternalReferencesRequest struct{ BaseRequest }

// Get performs GET request for PlannerExternalReferences
func (r *PlannerExternalReferencesRequest) Get(ctx context.Context) (resObj *PlannerExternalReferences, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerExternalReferences
func (r *PlannerExternalReferencesRequest) Update(ctx context.Context, reqObj *PlannerExternalReferences) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerExternalReferences
func (r *PlannerExternalReferencesRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerExternalTaskSourceRequestBuilder is request builder for PlannerExternalTaskSource
type PlannerExternalTaskSourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerExternalTaskSourceRequest
func (b *PlannerExternalTaskSourceRequestBuilder) Request() *PlannerExternalTaskSourceRequest {
	return &PlannerExternalTaskSourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerExternalTaskSourceRequest is request for PlannerExternalTaskSource
type PlannerExternalTaskSourceRequest struct{ BaseRequest }

// Get performs GET request for PlannerExternalTaskSource
func (r *PlannerExternalTaskSourceRequest) Get(ctx context.Context) (resObj *PlannerExternalTaskSource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerExternalTaskSource
func (r *PlannerExternalTaskSourceRequest) Update(ctx context.Context, reqObj *PlannerExternalTaskSource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerExternalTaskSource
func (r *PlannerExternalTaskSourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerFavoritePlanReferenceRequestBuilder is request builder for PlannerFavoritePlanReference
type PlannerFavoritePlanReferenceRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerFavoritePlanReferenceRequest
func (b *PlannerFavoritePlanReferenceRequestBuilder) Request() *PlannerFavoritePlanReferenceRequest {
	return &PlannerFavoritePlanReferenceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerFavoritePlanReferenceRequest is request for PlannerFavoritePlanReference
type PlannerFavoritePlanReferenceRequest struct{ BaseRequest }

// Get performs GET request for PlannerFavoritePlanReference
func (r *PlannerFavoritePlanReferenceRequest) Get(ctx context.Context) (resObj *PlannerFavoritePlanReference, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerFavoritePlanReference
func (r *PlannerFavoritePlanReferenceRequest) Update(ctx context.Context, reqObj *PlannerFavoritePlanReference) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerFavoritePlanReference
func (r *PlannerFavoritePlanReferenceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerFavoritePlanReferenceCollectionRequestBuilder is request builder for PlannerFavoritePlanReferenceCollection
type PlannerFavoritePlanReferenceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerFavoritePlanReferenceCollectionRequest
func (b *PlannerFavoritePlanReferenceCollectionRequestBuilder) Request() *PlannerFavoritePlanReferenceCollectionRequest {
	return &PlannerFavoritePlanReferenceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerFavoritePlanReferenceCollectionRequest is request for PlannerFavoritePlanReferenceCollection
type PlannerFavoritePlanReferenceCollectionRequest struct{ BaseRequest }

// Get performs GET request for PlannerFavoritePlanReferenceCollection
func (r *PlannerFavoritePlanReferenceCollectionRequest) Get(ctx context.Context) (resObj *PlannerFavoritePlanReferenceCollection, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerFavoritePlanReferenceCollection
func (r *PlannerFavoritePlanReferenceCollectionRequest) Update(ctx context.Context, reqObj *PlannerFavoritePlanReferenceCollection) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerFavoritePlanReferenceCollection
func (r *PlannerFavoritePlanReferenceCollectionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerFieldRulesRequestBuilder is request builder for PlannerFieldRules
type PlannerFieldRulesRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerFieldRulesRequest
func (b *PlannerFieldRulesRequestBuilder) Request() *PlannerFieldRulesRequest {
	return &PlannerFieldRulesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerFieldRulesRequest is request for PlannerFieldRules
type PlannerFieldRulesRequest struct{ BaseRequest }

// Get performs GET request for PlannerFieldRules
func (r *PlannerFieldRulesRequest) Get(ctx context.Context) (resObj *PlannerFieldRules, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerFieldRules
func (r *PlannerFieldRulesRequest) Update(ctx context.Context, reqObj *PlannerFieldRules) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerFieldRules
func (r *PlannerFieldRulesRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerGroupRequestBuilder is request builder for PlannerGroup
type PlannerGroupRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerGroupRequest
func (b *PlannerGroupRequestBuilder) Request() *PlannerGroupRequest {
	return &PlannerGroupRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerGroupRequest is request for PlannerGroup
type PlannerGroupRequest struct{ BaseRequest }

// Get performs GET request for PlannerGroup
func (r *PlannerGroupRequest) Get(ctx context.Context) (resObj *PlannerGroup, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerGroup
func (r *PlannerGroupRequest) Update(ctx context.Context, reqObj *PlannerGroup) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerGroup
func (r *PlannerGroupRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerOrderHintsByAssigneeRequestBuilder is request builder for PlannerOrderHintsByAssignee
type PlannerOrderHintsByAssigneeRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerOrderHintsByAssigneeRequest
func (b *PlannerOrderHintsByAssigneeRequestBuilder) Request() *PlannerOrderHintsByAssigneeRequest {
	return &PlannerOrderHintsByAssigneeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerOrderHintsByAssigneeRequest is request for PlannerOrderHintsByAssignee
type PlannerOrderHintsByAssigneeRequest struct{ BaseRequest }

// Get performs GET request for PlannerOrderHintsByAssignee
func (r *PlannerOrderHintsByAssigneeRequest) Get(ctx context.Context) (resObj *PlannerOrderHintsByAssignee, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerOrderHintsByAssignee
func (r *PlannerOrderHintsByAssigneeRequest) Update(ctx context.Context, reqObj *PlannerOrderHintsByAssignee) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerOrderHintsByAssignee
func (r *PlannerOrderHintsByAssigneeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanRequestBuilder is request builder for PlannerPlan
type PlannerPlanRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanRequest
func (b *PlannerPlanRequestBuilder) Request() *PlannerPlanRequest {
	return &PlannerPlanRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanRequest is request for PlannerPlan
type PlannerPlanRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlan
func (r *PlannerPlanRequest) Get(ctx context.Context) (resObj *PlannerPlan, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlan
func (r *PlannerPlanRequest) Update(ctx context.Context, reqObj *PlannerPlan) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlan
func (r *PlannerPlanRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanConfigurationRequestBuilder is request builder for PlannerPlanConfiguration
type PlannerPlanConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanConfigurationRequest
func (b *PlannerPlanConfigurationRequestBuilder) Request() *PlannerPlanConfigurationRequest {
	return &PlannerPlanConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanConfigurationRequest is request for PlannerPlanConfiguration
type PlannerPlanConfigurationRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanConfiguration
func (r *PlannerPlanConfigurationRequest) Get(ctx context.Context) (resObj *PlannerPlanConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanConfiguration
func (r *PlannerPlanConfigurationRequest) Update(ctx context.Context, reqObj *PlannerPlanConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanConfiguration
func (r *PlannerPlanConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanConfigurationBucketDefinitionRequestBuilder is request builder for PlannerPlanConfigurationBucketDefinition
type PlannerPlanConfigurationBucketDefinitionRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanConfigurationBucketDefinitionRequest
func (b *PlannerPlanConfigurationBucketDefinitionRequestBuilder) Request() *PlannerPlanConfigurationBucketDefinitionRequest {
	return &PlannerPlanConfigurationBucketDefinitionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanConfigurationBucketDefinitionRequest is request for PlannerPlanConfigurationBucketDefinition
type PlannerPlanConfigurationBucketDefinitionRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanConfigurationBucketDefinition
func (r *PlannerPlanConfigurationBucketDefinitionRequest) Get(ctx context.Context) (resObj *PlannerPlanConfigurationBucketDefinition, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanConfigurationBucketDefinition
func (r *PlannerPlanConfigurationBucketDefinitionRequest) Update(ctx context.Context, reqObj *PlannerPlanConfigurationBucketDefinition) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanConfigurationBucketDefinition
func (r *PlannerPlanConfigurationBucketDefinitionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanConfigurationBucketLocalizationRequestBuilder is request builder for PlannerPlanConfigurationBucketLocalization
type PlannerPlanConfigurationBucketLocalizationRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanConfigurationBucketLocalizationRequest
func (b *PlannerPlanConfigurationBucketLocalizationRequestBuilder) Request() *PlannerPlanConfigurationBucketLocalizationRequest {
	return &PlannerPlanConfigurationBucketLocalizationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanConfigurationBucketLocalizationRequest is request for PlannerPlanConfigurationBucketLocalization
type PlannerPlanConfigurationBucketLocalizationRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanConfigurationBucketLocalization
func (r *PlannerPlanConfigurationBucketLocalizationRequest) Get(ctx context.Context) (resObj *PlannerPlanConfigurationBucketLocalization, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanConfigurationBucketLocalization
func (r *PlannerPlanConfigurationBucketLocalizationRequest) Update(ctx context.Context, reqObj *PlannerPlanConfigurationBucketLocalization) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanConfigurationBucketLocalization
func (r *PlannerPlanConfigurationBucketLocalizationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanConfigurationLocalizationRequestBuilder is request builder for PlannerPlanConfigurationLocalization
type PlannerPlanConfigurationLocalizationRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanConfigurationLocalizationRequest
func (b *PlannerPlanConfigurationLocalizationRequestBuilder) Request() *PlannerPlanConfigurationLocalizationRequest {
	return &PlannerPlanConfigurationLocalizationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanConfigurationLocalizationRequest is request for PlannerPlanConfigurationLocalization
type PlannerPlanConfigurationLocalizationRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanConfigurationLocalization
func (r *PlannerPlanConfigurationLocalizationRequest) Get(ctx context.Context) (resObj *PlannerPlanConfigurationLocalization, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanConfigurationLocalization
func (r *PlannerPlanConfigurationLocalizationRequest) Update(ctx context.Context, reqObj *PlannerPlanConfigurationLocalization) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanConfigurationLocalization
func (r *PlannerPlanConfigurationLocalizationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanContainerRequestBuilder is request builder for PlannerPlanContainer
type PlannerPlanContainerRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanContainerRequest
func (b *PlannerPlanContainerRequestBuilder) Request() *PlannerPlanContainerRequest {
	return &PlannerPlanContainerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanContainerRequest is request for PlannerPlanContainer
type PlannerPlanContainerRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanContainer
func (r *PlannerPlanContainerRequest) Get(ctx context.Context) (resObj *PlannerPlanContainer, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanContainer
func (r *PlannerPlanContainerRequest) Update(ctx context.Context, reqObj *PlannerPlanContainer) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanContainer
func (r *PlannerPlanContainerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanContextRequestBuilder is request builder for PlannerPlanContext
type PlannerPlanContextRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanContextRequest
func (b *PlannerPlanContextRequestBuilder) Request() *PlannerPlanContextRequest {
	return &PlannerPlanContextRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanContextRequest is request for PlannerPlanContext
type PlannerPlanContextRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanContext
func (r *PlannerPlanContextRequest) Get(ctx context.Context) (resObj *PlannerPlanContext, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanContext
func (r *PlannerPlanContextRequest) Update(ctx context.Context, reqObj *PlannerPlanContext) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanContext
func (r *PlannerPlanContextRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanContextCollectionRequestBuilder is request builder for PlannerPlanContextCollection
type PlannerPlanContextCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanContextCollectionRequest
func (b *PlannerPlanContextCollectionRequestBuilder) Request() *PlannerPlanContextCollectionRequest {
	return &PlannerPlanContextCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanContextCollectionRequest is request for PlannerPlanContextCollection
type PlannerPlanContextCollectionRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanContextCollection
func (r *PlannerPlanContextCollectionRequest) Get(ctx context.Context) (resObj *PlannerPlanContextCollection, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanContextCollection
func (r *PlannerPlanContextCollectionRequest) Update(ctx context.Context, reqObj *PlannerPlanContextCollection) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanContextCollection
func (r *PlannerPlanContextCollectionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanContextDetailsRequestBuilder is request builder for PlannerPlanContextDetails
type PlannerPlanContextDetailsRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanContextDetailsRequest
func (b *PlannerPlanContextDetailsRequestBuilder) Request() *PlannerPlanContextDetailsRequest {
	return &PlannerPlanContextDetailsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanContextDetailsRequest is request for PlannerPlanContextDetails
type PlannerPlanContextDetailsRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanContextDetails
func (r *PlannerPlanContextDetailsRequest) Get(ctx context.Context) (resObj *PlannerPlanContextDetails, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanContextDetails
func (r *PlannerPlanContextDetailsRequest) Update(ctx context.Context, reqObj *PlannerPlanContextDetails) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanContextDetails
func (r *PlannerPlanContextDetailsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanContextDetailsCollectionRequestBuilder is request builder for PlannerPlanContextDetailsCollection
type PlannerPlanContextDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanContextDetailsCollectionRequest
func (b *PlannerPlanContextDetailsCollectionRequestBuilder) Request() *PlannerPlanContextDetailsCollectionRequest {
	return &PlannerPlanContextDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanContextDetailsCollectionRequest is request for PlannerPlanContextDetailsCollection
type PlannerPlanContextDetailsCollectionRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanContextDetailsCollection
func (r *PlannerPlanContextDetailsCollectionRequest) Get(ctx context.Context) (resObj *PlannerPlanContextDetailsCollection, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanContextDetailsCollection
func (r *PlannerPlanContextDetailsCollectionRequest) Update(ctx context.Context, reqObj *PlannerPlanContextDetailsCollection) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanContextDetailsCollection
func (r *PlannerPlanContextDetailsCollectionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanCreationRequestBuilder is request builder for PlannerPlanCreation
type PlannerPlanCreationRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanCreationRequest
func (b *PlannerPlanCreationRequestBuilder) Request() *PlannerPlanCreationRequest {
	return &PlannerPlanCreationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanCreationRequest is request for PlannerPlanCreation
type PlannerPlanCreationRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanCreation
func (r *PlannerPlanCreationRequest) Get(ctx context.Context) (resObj *PlannerPlanCreation, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanCreation
func (r *PlannerPlanCreationRequest) Update(ctx context.Context, reqObj *PlannerPlanCreation) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanCreation
func (r *PlannerPlanCreationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanDetailsRequestBuilder is request builder for PlannerPlanDetails
type PlannerPlanDetailsRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanDetailsRequest
func (b *PlannerPlanDetailsRequestBuilder) Request() *PlannerPlanDetailsRequest {
	return &PlannerPlanDetailsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanDetailsRequest is request for PlannerPlanDetails
type PlannerPlanDetailsRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanDetails
func (r *PlannerPlanDetailsRequest) Get(ctx context.Context) (resObj *PlannerPlanDetails, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanDetails
func (r *PlannerPlanDetailsRequest) Update(ctx context.Context, reqObj *PlannerPlanDetails) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanDetails
func (r *PlannerPlanDetailsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPlanPropertyRuleRequestBuilder is request builder for PlannerPlanPropertyRule
type PlannerPlanPropertyRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPlanPropertyRuleRequest
func (b *PlannerPlanPropertyRuleRequestBuilder) Request() *PlannerPlanPropertyRuleRequest {
	return &PlannerPlanPropertyRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPlanPropertyRuleRequest is request for PlannerPlanPropertyRule
type PlannerPlanPropertyRuleRequest struct{ BaseRequest }

// Get performs GET request for PlannerPlanPropertyRule
func (r *PlannerPlanPropertyRuleRequest) Get(ctx context.Context) (resObj *PlannerPlanPropertyRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPlanPropertyRule
func (r *PlannerPlanPropertyRuleRequest) Update(ctx context.Context, reqObj *PlannerPlanPropertyRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPlanPropertyRule
func (r *PlannerPlanPropertyRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerProgressTaskBoardTaskFormatRequestBuilder is request builder for PlannerProgressTaskBoardTaskFormat
type PlannerProgressTaskBoardTaskFormatRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerProgressTaskBoardTaskFormatRequest
func (b *PlannerProgressTaskBoardTaskFormatRequestBuilder) Request() *PlannerProgressTaskBoardTaskFormatRequest {
	return &PlannerProgressTaskBoardTaskFormatRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerProgressTaskBoardTaskFormatRequest is request for PlannerProgressTaskBoardTaskFormat
type PlannerProgressTaskBoardTaskFormatRequest struct{ BaseRequest }

// Get performs GET request for PlannerProgressTaskBoardTaskFormat
func (r *PlannerProgressTaskBoardTaskFormatRequest) Get(ctx context.Context) (resObj *PlannerProgressTaskBoardTaskFormat, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerProgressTaskBoardTaskFormat
func (r *PlannerProgressTaskBoardTaskFormatRequest) Update(ctx context.Context, reqObj *PlannerProgressTaskBoardTaskFormat) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerProgressTaskBoardTaskFormat
func (r *PlannerProgressTaskBoardTaskFormatRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerPropertyRuleRequestBuilder is request builder for PlannerPropertyRule
type PlannerPropertyRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerPropertyRuleRequest
func (b *PlannerPropertyRuleRequestBuilder) Request() *PlannerPropertyRuleRequest {
	return &PlannerPropertyRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerPropertyRuleRequest is request for PlannerPropertyRule
type PlannerPropertyRuleRequest struct{ BaseRequest }

// Get performs GET request for PlannerPropertyRule
func (r *PlannerPropertyRuleRequest) Get(ctx context.Context) (resObj *PlannerPropertyRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerPropertyRule
func (r *PlannerPropertyRuleRequest) Update(ctx context.Context, reqObj *PlannerPropertyRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerPropertyRule
func (r *PlannerPropertyRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerRecentPlanReferenceRequestBuilder is request builder for PlannerRecentPlanReference
type PlannerRecentPlanReferenceRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerRecentPlanReferenceRequest
func (b *PlannerRecentPlanReferenceRequestBuilder) Request() *PlannerRecentPlanReferenceRequest {
	return &PlannerRecentPlanReferenceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerRecentPlanReferenceRequest is request for PlannerRecentPlanReference
type PlannerRecentPlanReferenceRequest struct{ BaseRequest }

// Get performs GET request for PlannerRecentPlanReference
func (r *PlannerRecentPlanReferenceRequest) Get(ctx context.Context) (resObj *PlannerRecentPlanReference, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerRecentPlanReference
func (r *PlannerRecentPlanReferenceRequest) Update(ctx context.Context, reqObj *PlannerRecentPlanReference) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerRecentPlanReference
func (r *PlannerRecentPlanReferenceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerRecentPlanReferenceCollectionRequestBuilder is request builder for PlannerRecentPlanReferenceCollection
type PlannerRecentPlanReferenceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerRecentPlanReferenceCollectionRequest
func (b *PlannerRecentPlanReferenceCollectionRequestBuilder) Request() *PlannerRecentPlanReferenceCollectionRequest {
	return &PlannerRecentPlanReferenceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerRecentPlanReferenceCollectionRequest is request for PlannerRecentPlanReferenceCollection
type PlannerRecentPlanReferenceCollectionRequest struct{ BaseRequest }

// Get performs GET request for PlannerRecentPlanReferenceCollection
func (r *PlannerRecentPlanReferenceCollectionRequest) Get(ctx context.Context) (resObj *PlannerRecentPlanReferenceCollection, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerRecentPlanReferenceCollection
func (r *PlannerRecentPlanReferenceCollectionRequest) Update(ctx context.Context, reqObj *PlannerRecentPlanReferenceCollection) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerRecentPlanReferenceCollection
func (r *PlannerRecentPlanReferenceCollectionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerRecurrenceScheduleRequestBuilder is request builder for PlannerRecurrenceSchedule
type PlannerRecurrenceScheduleRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerRecurrenceScheduleRequest
func (b *PlannerRecurrenceScheduleRequestBuilder) Request() *PlannerRecurrenceScheduleRequest {
	return &PlannerRecurrenceScheduleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerRecurrenceScheduleRequest is request for PlannerRecurrenceSchedule
type PlannerRecurrenceScheduleRequest struct{ BaseRequest }

// Get performs GET request for PlannerRecurrenceSchedule
func (r *PlannerRecurrenceScheduleRequest) Get(ctx context.Context) (resObj *PlannerRecurrenceSchedule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerRecurrenceSchedule
func (r *PlannerRecurrenceScheduleRequest) Update(ctx context.Context, reqObj *PlannerRecurrenceSchedule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerRecurrenceSchedule
func (r *PlannerRecurrenceScheduleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerRelationshipBasedUserTypeRequestBuilder is request builder for PlannerRelationshipBasedUserType
type PlannerRelationshipBasedUserTypeRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerRelationshipBasedUserTypeRequest
func (b *PlannerRelationshipBasedUserTypeRequestBuilder) Request() *PlannerRelationshipBasedUserTypeRequest {
	return &PlannerRelationshipBasedUserTypeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerRelationshipBasedUserTypeRequest is request for PlannerRelationshipBasedUserType
type PlannerRelationshipBasedUserTypeRequest struct{ BaseRequest }

// Get performs GET request for PlannerRelationshipBasedUserType
func (r *PlannerRelationshipBasedUserTypeRequest) Get(ctx context.Context) (resObj *PlannerRelationshipBasedUserType, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerRelationshipBasedUserType
func (r *PlannerRelationshipBasedUserTypeRequest) Update(ctx context.Context, reqObj *PlannerRelationshipBasedUserType) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerRelationshipBasedUserType
func (r *PlannerRelationshipBasedUserTypeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerRosterRequestBuilder is request builder for PlannerRoster
type PlannerRosterRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerRosterRequest
func (b *PlannerRosterRequestBuilder) Request() *PlannerRosterRequest {
	return &PlannerRosterRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerRosterRequest is request for PlannerRoster
type PlannerRosterRequest struct{ BaseRequest }

// Get performs GET request for PlannerRoster
func (r *PlannerRosterRequest) Get(ctx context.Context) (resObj *PlannerRoster, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerRoster
func (r *PlannerRosterRequest) Update(ctx context.Context, reqObj *PlannerRoster) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerRoster
func (r *PlannerRosterRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerRosterMemberRequestBuilder is request builder for PlannerRosterMember
type PlannerRosterMemberRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerRosterMemberRequest
func (b *PlannerRosterMemberRequestBuilder) Request() *PlannerRosterMemberRequest {
	return &PlannerRosterMemberRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerRosterMemberRequest is request for PlannerRosterMember
type PlannerRosterMemberRequest struct{ BaseRequest }

// Get performs GET request for PlannerRosterMember
func (r *PlannerRosterMemberRequest) Get(ctx context.Context) (resObj *PlannerRosterMember, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerRosterMember
func (r *PlannerRosterMemberRequest) Update(ctx context.Context, reqObj *PlannerRosterMember) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerRosterMember
func (r *PlannerRosterMemberRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerRuleOverrideRequestBuilder is request builder for PlannerRuleOverride
type PlannerRuleOverrideRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerRuleOverrideRequest
func (b *PlannerRuleOverrideRequestBuilder) Request() *PlannerRuleOverrideRequest {
	return &PlannerRuleOverrideRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerRuleOverrideRequest is request for PlannerRuleOverride
type PlannerRuleOverrideRequest struct{ BaseRequest }

// Get performs GET request for PlannerRuleOverride
func (r *PlannerRuleOverrideRequest) Get(ctx context.Context) (resObj *PlannerRuleOverride, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerRuleOverride
func (r *PlannerRuleOverrideRequest) Update(ctx context.Context, reqObj *PlannerRuleOverride) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerRuleOverride
func (r *PlannerRuleOverrideRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerSharedWithContainerRequestBuilder is request builder for PlannerSharedWithContainer
type PlannerSharedWithContainerRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerSharedWithContainerRequest
func (b *PlannerSharedWithContainerRequestBuilder) Request() *PlannerSharedWithContainerRequest {
	return &PlannerSharedWithContainerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerSharedWithContainerRequest is request for PlannerSharedWithContainer
type PlannerSharedWithContainerRequest struct{ BaseRequest }

// Get performs GET request for PlannerSharedWithContainer
func (r *PlannerSharedWithContainerRequest) Get(ctx context.Context) (resObj *PlannerSharedWithContainer, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerSharedWithContainer
func (r *PlannerSharedWithContainerRequest) Update(ctx context.Context, reqObj *PlannerSharedWithContainer) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerSharedWithContainer
func (r *PlannerSharedWithContainerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerTaskRequestBuilder is request builder for PlannerTask
type PlannerTaskRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerTaskRequest
func (b *PlannerTaskRequestBuilder) Request() *PlannerTaskRequest {
	return &PlannerTaskRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerTaskRequest is request for PlannerTask
type PlannerTaskRequest struct{ BaseRequest }

// Get performs GET request for PlannerTask
func (r *PlannerTaskRequest) Get(ctx context.Context) (resObj *PlannerTask, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerTask
func (r *PlannerTaskRequest) Update(ctx context.Context, reqObj *PlannerTask) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerTask
func (r *PlannerTaskRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerTaskConfigurationRequestBuilder is request builder for PlannerTaskConfiguration
type PlannerTaskConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerTaskConfigurationRequest
func (b *PlannerTaskConfigurationRequestBuilder) Request() *PlannerTaskConfigurationRequest {
	return &PlannerTaskConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerTaskConfigurationRequest is request for PlannerTaskConfiguration
type PlannerTaskConfigurationRequest struct{ BaseRequest }

// Get performs GET request for PlannerTaskConfiguration
func (r *PlannerTaskConfigurationRequest) Get(ctx context.Context) (resObj *PlannerTaskConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerTaskConfiguration
func (r *PlannerTaskConfigurationRequest) Update(ctx context.Context, reqObj *PlannerTaskConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerTaskConfiguration
func (r *PlannerTaskConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerTaskConfigurationRoleBaseRequestBuilder is request builder for PlannerTaskConfigurationRoleBase
type PlannerTaskConfigurationRoleBaseRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerTaskConfigurationRoleBaseRequest
func (b *PlannerTaskConfigurationRoleBaseRequestBuilder) Request() *PlannerTaskConfigurationRoleBaseRequest {
	return &PlannerTaskConfigurationRoleBaseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerTaskConfigurationRoleBaseRequest is request for PlannerTaskConfigurationRoleBase
type PlannerTaskConfigurationRoleBaseRequest struct{ BaseRequest }

// Get performs GET request for PlannerTaskConfigurationRoleBase
func (r *PlannerTaskConfigurationRoleBaseRequest) Get(ctx context.Context) (resObj *PlannerTaskConfigurationRoleBase, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerTaskConfigurationRoleBase
func (r *PlannerTaskConfigurationRoleBaseRequest) Update(ctx context.Context, reqObj *PlannerTaskConfigurationRoleBase) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerTaskConfigurationRoleBase
func (r *PlannerTaskConfigurationRoleBaseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerTaskCreationRequestBuilder is request builder for PlannerTaskCreation
type PlannerTaskCreationRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerTaskCreationRequest
func (b *PlannerTaskCreationRequestBuilder) Request() *PlannerTaskCreationRequest {
	return &PlannerTaskCreationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerTaskCreationRequest is request for PlannerTaskCreation
type PlannerTaskCreationRequest struct{ BaseRequest }

// Get performs GET request for PlannerTaskCreation
func (r *PlannerTaskCreationRequest) Get(ctx context.Context) (resObj *PlannerTaskCreation, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerTaskCreation
func (r *PlannerTaskCreationRequest) Update(ctx context.Context, reqObj *PlannerTaskCreation) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerTaskCreation
func (r *PlannerTaskCreationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerTaskDetailsRequestBuilder is request builder for PlannerTaskDetails
type PlannerTaskDetailsRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerTaskDetailsRequest
func (b *PlannerTaskDetailsRequestBuilder) Request() *PlannerTaskDetailsRequest {
	return &PlannerTaskDetailsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerTaskDetailsRequest is request for PlannerTaskDetails
type PlannerTaskDetailsRequest struct{ BaseRequest }

// Get performs GET request for PlannerTaskDetails
func (r *PlannerTaskDetailsRequest) Get(ctx context.Context) (resObj *PlannerTaskDetails, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerTaskDetails
func (r *PlannerTaskDetailsRequest) Update(ctx context.Context, reqObj *PlannerTaskDetails) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerTaskDetails
func (r *PlannerTaskDetailsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerTaskPolicyRequestBuilder is request builder for PlannerTaskPolicy
type PlannerTaskPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerTaskPolicyRequest
func (b *PlannerTaskPolicyRequestBuilder) Request() *PlannerTaskPolicyRequest {
	return &PlannerTaskPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerTaskPolicyRequest is request for PlannerTaskPolicy
type PlannerTaskPolicyRequest struct{ BaseRequest }

// Get performs GET request for PlannerTaskPolicy
func (r *PlannerTaskPolicyRequest) Get(ctx context.Context) (resObj *PlannerTaskPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerTaskPolicy
func (r *PlannerTaskPolicyRequest) Update(ctx context.Context, reqObj *PlannerTaskPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerTaskPolicy
func (r *PlannerTaskPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerTaskPropertyRuleRequestBuilder is request builder for PlannerTaskPropertyRule
type PlannerTaskPropertyRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerTaskPropertyRuleRequest
func (b *PlannerTaskPropertyRuleRequestBuilder) Request() *PlannerTaskPropertyRuleRequest {
	return &PlannerTaskPropertyRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerTaskPropertyRuleRequest is request for PlannerTaskPropertyRule
type PlannerTaskPropertyRuleRequest struct{ BaseRequest }

// Get performs GET request for PlannerTaskPropertyRule
func (r *PlannerTaskPropertyRuleRequest) Get(ctx context.Context) (resObj *PlannerTaskPropertyRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerTaskPropertyRule
func (r *PlannerTaskPropertyRuleRequest) Update(ctx context.Context, reqObj *PlannerTaskPropertyRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerTaskPropertyRule
func (r *PlannerTaskPropertyRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerTaskRecurrenceRequestBuilder is request builder for PlannerTaskRecurrence
type PlannerTaskRecurrenceRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerTaskRecurrenceRequest
func (b *PlannerTaskRecurrenceRequestBuilder) Request() *PlannerTaskRecurrenceRequest {
	return &PlannerTaskRecurrenceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerTaskRecurrenceRequest is request for PlannerTaskRecurrence
type PlannerTaskRecurrenceRequest struct{ BaseRequest }

// Get performs GET request for PlannerTaskRecurrence
func (r *PlannerTaskRecurrenceRequest) Get(ctx context.Context) (resObj *PlannerTaskRecurrence, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerTaskRecurrence
func (r *PlannerTaskRecurrenceRequest) Update(ctx context.Context, reqObj *PlannerTaskRecurrence) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerTaskRecurrence
func (r *PlannerTaskRecurrenceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerTaskRoleBasedRuleRequestBuilder is request builder for PlannerTaskRoleBasedRule
type PlannerTaskRoleBasedRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerTaskRoleBasedRuleRequest
func (b *PlannerTaskRoleBasedRuleRequestBuilder) Request() *PlannerTaskRoleBasedRuleRequest {
	return &PlannerTaskRoleBasedRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerTaskRoleBasedRuleRequest is request for PlannerTaskRoleBasedRule
type PlannerTaskRoleBasedRuleRequest struct{ BaseRequest }

// Get performs GET request for PlannerTaskRoleBasedRule
func (r *PlannerTaskRoleBasedRuleRequest) Get(ctx context.Context) (resObj *PlannerTaskRoleBasedRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerTaskRoleBasedRule
func (r *PlannerTaskRoleBasedRuleRequest) Update(ctx context.Context, reqObj *PlannerTaskRoleBasedRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerTaskRoleBasedRule
func (r *PlannerTaskRoleBasedRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerTeamsPublicationInfoRequestBuilder is request builder for PlannerTeamsPublicationInfo
type PlannerTeamsPublicationInfoRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerTeamsPublicationInfoRequest
func (b *PlannerTeamsPublicationInfoRequestBuilder) Request() *PlannerTeamsPublicationInfoRequest {
	return &PlannerTeamsPublicationInfoRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerTeamsPublicationInfoRequest is request for PlannerTeamsPublicationInfo
type PlannerTeamsPublicationInfoRequest struct{ BaseRequest }

// Get performs GET request for PlannerTeamsPublicationInfo
func (r *PlannerTeamsPublicationInfoRequest) Get(ctx context.Context) (resObj *PlannerTeamsPublicationInfo, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerTeamsPublicationInfo
func (r *PlannerTeamsPublicationInfoRequest) Update(ctx context.Context, reqObj *PlannerTeamsPublicationInfo) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerTeamsPublicationInfo
func (r *PlannerTeamsPublicationInfoRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerUserRequestBuilder is request builder for PlannerUser
type PlannerUserRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerUserRequest
func (b *PlannerUserRequestBuilder) Request() *PlannerUserRequest {
	return &PlannerUserRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerUserRequest is request for PlannerUser
type PlannerUserRequest struct{ BaseRequest }

// Get performs GET request for PlannerUser
func (r *PlannerUserRequest) Get(ctx context.Context) (resObj *PlannerUser, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerUser
func (r *PlannerUserRequest) Update(ctx context.Context, reqObj *PlannerUser) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerUser
func (r *PlannerUserRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PlannerUserIDsRequestBuilder is request builder for PlannerUserIDs
type PlannerUserIDsRequestBuilder struct{ BaseRequestBuilder }

// Request returns PlannerUserIDsRequest
func (b *PlannerUserIDsRequestBuilder) Request() *PlannerUserIDsRequest {
	return &PlannerUserIDsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PlannerUserIDsRequest is request for PlannerUserIDs
type PlannerUserIDsRequest struct{ BaseRequest }

// Get performs GET request for PlannerUserIDs
func (r *PlannerUserIDsRequest) Get(ctx context.Context) (resObj *PlannerUserIDs, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PlannerUserIDs
func (r *PlannerUserIDsRequest) Update(ctx context.Context, reqObj *PlannerUserIDs) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PlannerUserIDs
func (r *PlannerUserIDsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
