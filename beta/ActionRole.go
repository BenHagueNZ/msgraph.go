// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// RoleScopeTagCollectionGetRoleScopeTagsByIDRequestParameter undocumented
type RoleScopeTagCollectionGetRoleScopeTagsByIDRequestParameter struct {
	// RoleScopeTagIDs undocumented
	RoleScopeTagIDs []string `json:"roleScopeTagIds,omitempty"`
}

// RoleScopeTagAssignRequestParameter undocumented
type RoleScopeTagAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []RoleScopeTagAutoAssignment `json:"assignments,omitempty"`
}

// RoleDefinition is navigation property rn
func (b *RoleAssignmentRequestBuilder) RoleDefinition() *RoleDefinitionRequestBuilder {
	bb := &RoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// RoleAssignments returns request builder for RoleAssignment collection
func (b *RoleDefinitionRequestBuilder) RoleAssignments() *RoleDefinitionRoleAssignmentsCollectionRequestBuilder {
	bb := &RoleDefinitionRoleAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleAssignments"
	return bb
}

// RoleDefinitionRoleAssignmentsCollectionRequestBuilder is request builder for RoleAssignment collection rcn
type RoleDefinitionRoleAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RoleAssignment collection
func (b *RoleDefinitionRoleAssignmentsCollectionRequestBuilder) Request() *RoleDefinitionRoleAssignmentsCollectionRequest {
	return &RoleDefinitionRoleAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RoleAssignment item
func (b *RoleDefinitionRoleAssignmentsCollectionRequestBuilder) ID(id string) *RoleAssignmentRequestBuilder {
	bb := &RoleAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RoleDefinitionRoleAssignmentsCollectionRequest is request for RoleAssignment collection
type RoleDefinitionRoleAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for RoleAssignment collection
func (r *RoleDefinitionRoleAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]RoleAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RoleAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []RoleAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for RoleAssignment collection, max N pages
func (r *RoleDefinitionRoleAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]RoleAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for RoleAssignment collection
func (r *RoleDefinitionRoleAssignmentsCollectionRequest) Get(ctx context.Context) ([]RoleAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for RoleAssignment collection
func (r *RoleDefinitionRoleAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *RoleAssignment) (resObj *RoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CloudPC is navigation property rn
func (b *RoleManagementRequestBuilder) CloudPC() *RbacApplicationMultipleRequestBuilder {
	bb := &RbacApplicationMultipleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cloudPC"
	return bb
}

// DeviceManagement is navigation property rn
func (b *RoleManagementRequestBuilder) DeviceManagement() *RbacApplicationMultipleRequestBuilder {
	bb := &RbacApplicationMultipleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceManagement"
	return bb
}

// Directory is navigation property rn
func (b *RoleManagementRequestBuilder) Directory() *RbacApplicationRequestBuilder {
	bb := &RbacApplicationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directory"
	return bb
}

// EntitlementManagement is navigation property rn
func (b *RoleManagementRequestBuilder) EntitlementManagement() *RbacApplicationRequestBuilder {
	bb := &RbacApplicationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/entitlementManagement"
	return bb
}

// Exchange is navigation property rn
func (b *RoleManagementRequestBuilder) Exchange() *UnifiedRbacApplicationRequestBuilder {
	bb := &UnifiedRbacApplicationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/exchange"
	return bb
}

// AlertConfigurations returns request builder for UnifiedRoleManagementAlertConfiguration collection
func (b *RoleManagementAlertRequestBuilder) AlertConfigurations() *RoleManagementAlertAlertConfigurationsCollectionRequestBuilder {
	bb := &RoleManagementAlertAlertConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alertConfigurations"
	return bb
}

// RoleManagementAlertAlertConfigurationsCollectionRequestBuilder is request builder for UnifiedRoleManagementAlertConfiguration collection rcn
type RoleManagementAlertAlertConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementAlertConfiguration collection
func (b *RoleManagementAlertAlertConfigurationsCollectionRequestBuilder) Request() *RoleManagementAlertAlertConfigurationsCollectionRequest {
	return &RoleManagementAlertAlertConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementAlertConfiguration item
func (b *RoleManagementAlertAlertConfigurationsCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementAlertConfigurationRequestBuilder {
	bb := &UnifiedRoleManagementAlertConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RoleManagementAlertAlertConfigurationsCollectionRequest is request for UnifiedRoleManagementAlertConfiguration collection
type RoleManagementAlertAlertConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementAlertConfiguration collection
func (r *RoleManagementAlertAlertConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementAlertConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementAlertConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementAlertConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementAlertConfiguration collection, max N pages
func (r *RoleManagementAlertAlertConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementAlertConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementAlertConfiguration collection
func (r *RoleManagementAlertAlertConfigurationsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementAlertConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementAlertConfiguration collection
func (r *RoleManagementAlertAlertConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementAlertConfiguration) (resObj *UnifiedRoleManagementAlertConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AlertDefinitions returns request builder for UnifiedRoleManagementAlertDefinition collection
func (b *RoleManagementAlertRequestBuilder) AlertDefinitions() *RoleManagementAlertAlertDefinitionsCollectionRequestBuilder {
	bb := &RoleManagementAlertAlertDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alertDefinitions"
	return bb
}

// RoleManagementAlertAlertDefinitionsCollectionRequestBuilder is request builder for UnifiedRoleManagementAlertDefinition collection rcn
type RoleManagementAlertAlertDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementAlertDefinition collection
func (b *RoleManagementAlertAlertDefinitionsCollectionRequestBuilder) Request() *RoleManagementAlertAlertDefinitionsCollectionRequest {
	return &RoleManagementAlertAlertDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementAlertDefinition item
func (b *RoleManagementAlertAlertDefinitionsCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementAlertDefinitionRequestBuilder {
	bb := &UnifiedRoleManagementAlertDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RoleManagementAlertAlertDefinitionsCollectionRequest is request for UnifiedRoleManagementAlertDefinition collection
type RoleManagementAlertAlertDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementAlertDefinition collection
func (r *RoleManagementAlertAlertDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementAlertDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementAlertDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementAlertDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementAlertDefinition collection, max N pages
func (r *RoleManagementAlertAlertDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementAlertDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementAlertDefinition collection
func (r *RoleManagementAlertAlertDefinitionsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementAlertDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementAlertDefinition collection
func (r *RoleManagementAlertAlertDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementAlertDefinition) (resObj *UnifiedRoleManagementAlertDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Alerts returns request builder for UnifiedRoleManagementAlert collection
func (b *RoleManagementAlertRequestBuilder) Alerts() *RoleManagementAlertAlertsCollectionRequestBuilder {
	bb := &RoleManagementAlertAlertsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/alerts"
	return bb
}

// RoleManagementAlertAlertsCollectionRequestBuilder is request builder for UnifiedRoleManagementAlert collection rcn
type RoleManagementAlertAlertsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementAlert collection
func (b *RoleManagementAlertAlertsCollectionRequestBuilder) Request() *RoleManagementAlertAlertsCollectionRequest {
	return &RoleManagementAlertAlertsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementAlert item
func (b *RoleManagementAlertAlertsCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementAlertRequestBuilder {
	bb := &UnifiedRoleManagementAlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RoleManagementAlertAlertsCollectionRequest is request for UnifiedRoleManagementAlert collection
type RoleManagementAlertAlertsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementAlert collection
func (r *RoleManagementAlertAlertsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementAlert, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementAlert
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementAlert
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementAlert collection, max N pages
func (r *RoleManagementAlertAlertsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementAlert, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementAlert collection
func (r *RoleManagementAlertAlertsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementAlert, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementAlert collection
func (r *RoleManagementAlertAlertsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementAlert) (resObj *UnifiedRoleManagementAlert, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Operations returns request builder for LongRunningOperation collection
func (b *RoleManagementAlertRequestBuilder) Operations() *RoleManagementAlertOperationsCollectionRequestBuilder {
	bb := &RoleManagementAlertOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// RoleManagementAlertOperationsCollectionRequestBuilder is request builder for LongRunningOperation collection rcn
type RoleManagementAlertOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for LongRunningOperation collection
func (b *RoleManagementAlertOperationsCollectionRequestBuilder) Request() *RoleManagementAlertOperationsCollectionRequest {
	return &RoleManagementAlertOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for LongRunningOperation item
func (b *RoleManagementAlertOperationsCollectionRequestBuilder) ID(id string) *LongRunningOperationRequestBuilder {
	bb := &LongRunningOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RoleManagementAlertOperationsCollectionRequest is request for LongRunningOperation collection
type RoleManagementAlertOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for LongRunningOperation collection
func (r *RoleManagementAlertOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]LongRunningOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []LongRunningOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []LongRunningOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for LongRunningOperation collection, max N pages
func (r *RoleManagementAlertOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]LongRunningOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for LongRunningOperation collection
func (r *RoleManagementAlertOperationsCollectionRequest) Get(ctx context.Context) ([]LongRunningOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for LongRunningOperation collection
func (r *RoleManagementAlertOperationsCollectionRequest) Add(ctx context.Context, reqObj *LongRunningOperation) (resObj *LongRunningOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for RoleScopeTagAutoAssignment collection
func (b *RoleScopeTagRequestBuilder) Assignments() *RoleScopeTagAssignmentsCollectionRequestBuilder {
	bb := &RoleScopeTagAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// RoleScopeTagAssignmentsCollectionRequestBuilder is request builder for RoleScopeTagAutoAssignment collection rcn
type RoleScopeTagAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RoleScopeTagAutoAssignment collection
func (b *RoleScopeTagAssignmentsCollectionRequestBuilder) Request() *RoleScopeTagAssignmentsCollectionRequest {
	return &RoleScopeTagAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RoleScopeTagAutoAssignment item
func (b *RoleScopeTagAssignmentsCollectionRequestBuilder) ID(id string) *RoleScopeTagAutoAssignmentRequestBuilder {
	bb := &RoleScopeTagAutoAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RoleScopeTagAssignmentsCollectionRequest is request for RoleScopeTagAutoAssignment collection
type RoleScopeTagAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for RoleScopeTagAutoAssignment collection
func (r *RoleScopeTagAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]RoleScopeTagAutoAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RoleScopeTagAutoAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []RoleScopeTagAutoAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for RoleScopeTagAutoAssignment collection, max N pages
func (r *RoleScopeTagAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]RoleScopeTagAutoAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for RoleScopeTagAutoAssignment collection
func (r *RoleScopeTagAssignmentsCollectionRequest) Get(ctx context.Context) ([]RoleScopeTagAutoAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for RoleScopeTagAutoAssignment collection
func (r *RoleScopeTagAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *RoleScopeTagAutoAssignment) (resObj *RoleScopeTagAutoAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *RoleDefinitionRoleAssignmentsCollectionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *RoleManagementAlertRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *RoleScopeTagRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *RoleScopeTagAutoAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
