// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// PayloadRequestBuilder is request builder for Payload
type PayloadRequestBuilder struct{ BaseRequestBuilder }

// Request returns PayloadRequest
func (b *PayloadRequestBuilder) Request() *PayloadRequest {
	return &PayloadRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PayloadRequest is request for Payload
type PayloadRequest struct{ BaseRequest }

// Get performs GET request for Payload
func (r *PayloadRequest) Get(ctx context.Context) (resObj *Payload, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Payload
func (r *PayloadRequest) Update(ctx context.Context, reqObj *Payload) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Payload
func (r *PayloadRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PayloadByFilterRequestBuilder is request builder for PayloadByFilter
type PayloadByFilterRequestBuilder struct{ BaseRequestBuilder }

// Request returns PayloadByFilterRequest
func (b *PayloadByFilterRequestBuilder) Request() *PayloadByFilterRequest {
	return &PayloadByFilterRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PayloadByFilterRequest is request for PayloadByFilter
type PayloadByFilterRequest struct{ BaseRequest }

// Get performs GET request for PayloadByFilter
func (r *PayloadByFilterRequest) Get(ctx context.Context) (resObj *PayloadByFilter, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PayloadByFilter
func (r *PayloadByFilterRequest) Update(ctx context.Context, reqObj *PayloadByFilter) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PayloadByFilter
func (r *PayloadByFilterRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PayloadCoachmarkRequestBuilder is request builder for PayloadCoachmark
type PayloadCoachmarkRequestBuilder struct{ BaseRequestBuilder }

// Request returns PayloadCoachmarkRequest
func (b *PayloadCoachmarkRequestBuilder) Request() *PayloadCoachmarkRequest {
	return &PayloadCoachmarkRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PayloadCoachmarkRequest is request for PayloadCoachmark
type PayloadCoachmarkRequest struct{ BaseRequest }

// Get performs GET request for PayloadCoachmark
func (r *PayloadCoachmarkRequest) Get(ctx context.Context) (resObj *PayloadCoachmark, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PayloadCoachmark
func (r *PayloadCoachmarkRequest) Update(ctx context.Context, reqObj *PayloadCoachmark) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PayloadCoachmark
func (r *PayloadCoachmarkRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PayloadCompatibleAssignmentFilterRequestBuilder is request builder for PayloadCompatibleAssignmentFilter
type PayloadCompatibleAssignmentFilterRequestBuilder struct{ BaseRequestBuilder }

// Request returns PayloadCompatibleAssignmentFilterRequest
func (b *PayloadCompatibleAssignmentFilterRequestBuilder) Request() *PayloadCompatibleAssignmentFilterRequest {
	return &PayloadCompatibleAssignmentFilterRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PayloadCompatibleAssignmentFilterRequest is request for PayloadCompatibleAssignmentFilter
type PayloadCompatibleAssignmentFilterRequest struct{ BaseRequest }

// Get performs GET request for PayloadCompatibleAssignmentFilter
func (r *PayloadCompatibleAssignmentFilterRequest) Get(ctx context.Context) (resObj *PayloadCompatibleAssignmentFilter, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PayloadCompatibleAssignmentFilter
func (r *PayloadCompatibleAssignmentFilterRequest) Update(ctx context.Context, reqObj *PayloadCompatibleAssignmentFilter) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PayloadCompatibleAssignmentFilter
func (r *PayloadCompatibleAssignmentFilterRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PayloadDetailRequestBuilder is request builder for PayloadDetail
type PayloadDetailRequestBuilder struct{ BaseRequestBuilder }

// Request returns PayloadDetailRequest
func (b *PayloadDetailRequestBuilder) Request() *PayloadDetailRequest {
	return &PayloadDetailRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PayloadDetailRequest is request for PayloadDetail
type PayloadDetailRequest struct{ BaseRequest }

// Get performs GET request for PayloadDetail
func (r *PayloadDetailRequest) Get(ctx context.Context) (resObj *PayloadDetail, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PayloadDetail
func (r *PayloadDetailRequest) Update(ctx context.Context, reqObj *PayloadDetail) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PayloadDetail
func (r *PayloadDetailRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PayloadRequestObjectRequestBuilder is request builder for PayloadRequestObject
type PayloadRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns PayloadRequestObjectRequest
func (b *PayloadRequestObjectRequestBuilder) Request() *PayloadRequestObjectRequest {
	return &PayloadRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PayloadRequestObjectRequest is request for PayloadRequestObject
type PayloadRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for PayloadRequestObject
func (r *PayloadRequestObjectRequest) Get(ctx context.Context) (resObj *PayloadRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PayloadRequestObject
func (r *PayloadRequestObjectRequest) Update(ctx context.Context, reqObj *PayloadRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PayloadRequestObject
func (r *PayloadRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PayloadResponseRequestBuilder is request builder for PayloadResponse
type PayloadResponseRequestBuilder struct{ BaseRequestBuilder }

// Request returns PayloadResponseRequest
func (b *PayloadResponseRequestBuilder) Request() *PayloadResponseRequest {
	return &PayloadResponseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PayloadResponseRequest is request for PayloadResponse
type PayloadResponseRequest struct{ BaseRequest }

// Get performs GET request for PayloadResponse
func (r *PayloadResponseRequest) Get(ctx context.Context) (resObj *PayloadResponse, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PayloadResponse
func (r *PayloadResponseRequest) Update(ctx context.Context, reqObj *PayloadResponse) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PayloadResponse
func (r *PayloadResponseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// PayloadTypesRequestBuilder is request builder for PayloadTypes
type PayloadTypesRequestBuilder struct{ BaseRequestBuilder }

// Request returns PayloadTypesRequest
func (b *PayloadTypesRequestBuilder) Request() *PayloadTypesRequest {
	return &PayloadTypesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PayloadTypesRequest is request for PayloadTypes
type PayloadTypesRequest struct{ BaseRequest }

// Get performs GET request for PayloadTypes
func (r *PayloadTypesRequest) Get(ctx context.Context) (resObj *PayloadTypes, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PayloadTypes
func (r *PayloadTypesRequest) Update(ctx context.Context, reqObj *PayloadTypes) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PayloadTypes
func (r *PayloadTypesRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
