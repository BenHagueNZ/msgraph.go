// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// CustomAuthenticationExtensionCollectionValidateAuthenticationConfigurationRequestParameter undocumented
type CustomAuthenticationExtensionCollectionValidateAuthenticationConfigurationRequestParameter struct {
	// EndpointConfiguration undocumented
	EndpointConfiguration *CustomExtensionEndpointConfiguration `json:"endpointConfiguration,omitempty"`
	// AuthenticationConfiguration undocumented
	AuthenticationConfiguration *CustomExtensionAuthenticationConfiguration `json:"authenticationConfiguration,omitempty"`
}

// CustomAuthenticationExtensionValidateAuthenticationConfigurationRequestParameter undocumented
type CustomAuthenticationExtensionValidateAuthenticationConfigurationRequestParameter struct {
}

// CustomExtension is navigation property rn
func (b *CustomExtensionHandlerRequestBuilder) CustomExtension() *CustomAccessPackageWorkflowExtensionRequestBuilder {
	bb := &CustomAccessPackageWorkflowExtensionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/customExtension"
	return bb
}

// CustomExtension is navigation property rn
func (b *CustomExtensionStageSettingRequestBuilder) CustomExtension() *CustomCalloutExtensionRequestBuilder {
	bb := &CustomCalloutExtensionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/customExtension"
	return bb
}

// AllowedValues returns request builder for AllowedValue collection
func (b *CustomSecurityAttributeDefinitionRequestBuilder) AllowedValues() *CustomSecurityAttributeDefinitionAllowedValuesCollectionRequestBuilder {
	bb := &CustomSecurityAttributeDefinitionAllowedValuesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/allowedValues"
	return bb
}

// CustomSecurityAttributeDefinitionAllowedValuesCollectionRequestBuilder is request builder for AllowedValue collection rcn
type CustomSecurityAttributeDefinitionAllowedValuesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AllowedValue collection
func (b *CustomSecurityAttributeDefinitionAllowedValuesCollectionRequestBuilder) Request() *CustomSecurityAttributeDefinitionAllowedValuesCollectionRequest {
	return &CustomSecurityAttributeDefinitionAllowedValuesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AllowedValue item
func (b *CustomSecurityAttributeDefinitionAllowedValuesCollectionRequestBuilder) ID(id string) *AllowedValueRequestBuilder {
	bb := &AllowedValueRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// CustomSecurityAttributeDefinitionAllowedValuesCollectionRequest is request for AllowedValue collection
type CustomSecurityAttributeDefinitionAllowedValuesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AllowedValue collection
func (r *CustomSecurityAttributeDefinitionAllowedValuesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AllowedValue, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AllowedValue
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AllowedValue
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AllowedValue collection, max N pages
func (r *CustomSecurityAttributeDefinitionAllowedValuesCollectionRequest) GetN(ctx context.Context, n int) ([]AllowedValue, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AllowedValue collection
func (r *CustomSecurityAttributeDefinitionAllowedValuesCollectionRequest) Get(ctx context.Context) ([]AllowedValue, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AllowedValue collection
func (r *CustomSecurityAttributeDefinitionAllowedValuesCollectionRequest) Add(ctx context.Context, reqObj *AllowedValue) (resObj *AllowedValue, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CustomAccessPackageWorkflowExtension returns request builder for CustomAccessPackageWorkflowExtension collection
func (b *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionRequestBuilder) CustomAccessPackageWorkflowExtension() *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequestBuilder {
	bb := &AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequestBuilder is request builder for CustomAccessPackageWorkflowExtension collection rcn
type AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CustomAccessPackageWorkflowExtension collection
func (b *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequestBuilder) Request() *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequest {
	return &AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CustomAccessPackageWorkflowExtension item
func (b *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequestBuilder) ID(id string) *CustomAccessPackageWorkflowExtensionRequestBuilder {
	bb := &CustomAccessPackageWorkflowExtensionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequest is request for CustomAccessPackageWorkflowExtension collection
type AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CustomAccessPackageWorkflowExtension collection
func (r *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CustomAccessPackageWorkflowExtension, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CustomAccessPackageWorkflowExtension
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CustomAccessPackageWorkflowExtension
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CustomAccessPackageWorkflowExtension collection, max N pages
func (r *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequest) GetN(ctx context.Context, n int) ([]CustomAccessPackageWorkflowExtension, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CustomAccessPackageWorkflowExtension collection
func (r *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequest) Get(ctx context.Context) ([]CustomAccessPackageWorkflowExtension, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CustomAccessPackageWorkflowExtension collection
func (r *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAccessPackageWorkflowExtensionCollectionRequest) Add(ctx context.Context, reqObj *CustomAccessPackageWorkflowExtension) (resObj *CustomAccessPackageWorkflowExtension, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CustomAuthenticationExtension returns request builder for CustomAuthenticationExtension collection
func (b *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionRequestBuilder) CustomAuthenticationExtension() *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequestBuilder {
	bb := &AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequestBuilder is request builder for CustomAuthenticationExtension collection rcn
type AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CustomAuthenticationExtension collection
func (b *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequestBuilder) Request() *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequest {
	return &AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CustomAuthenticationExtension item
func (b *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequestBuilder) ID(id string) *CustomAuthenticationExtensionRequestBuilder {
	bb := &CustomAuthenticationExtensionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequest is request for CustomAuthenticationExtension collection
type AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CustomAuthenticationExtension collection
func (r *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CustomAuthenticationExtension, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CustomAuthenticationExtension
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CustomAuthenticationExtension
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CustomAuthenticationExtension collection, max N pages
func (r *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequest) GetN(ctx context.Context, n int) ([]CustomAuthenticationExtension, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CustomAuthenticationExtension collection
func (r *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequest) Get(ctx context.Context) ([]CustomAuthenticationExtension, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CustomAuthenticationExtension collection
func (r *AccessPackageCatalogAccessPackageCustomWorkflowExtensionsCollectionCustomAuthenticationExtensionCollectionRequest) Add(ctx context.Context, reqObj *CustomAuthenticationExtension) (resObj *CustomAuthenticationExtension, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *CustomExtensionHandlerRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *CustomExtensionStageSettingRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *CustomSecurityAttributeDefinitionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
