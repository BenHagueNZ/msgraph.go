// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// FilterRequestBuilder is request builder for Filter
type FilterRequestBuilder struct{ BaseRequestBuilder }

// Request returns FilterRequest
func (b *FilterRequestBuilder) Request() *FilterRequest {
	return &FilterRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// FilterRequest is request for Filter
type FilterRequest struct{ BaseRequest }

// Get performs GET request for Filter
func (r *FilterRequest) Get(ctx context.Context) (resObj *Filter, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Filter
func (r *FilterRequest) Update(ctx context.Context, reqObj *Filter) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Filter
func (r *FilterRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// FilterClauseRequestBuilder is request builder for FilterClause
type FilterClauseRequestBuilder struct{ BaseRequestBuilder }

// Request returns FilterClauseRequest
func (b *FilterClauseRequestBuilder) Request() *FilterClauseRequest {
	return &FilterClauseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// FilterClauseRequest is request for FilterClause
type FilterClauseRequest struct{ BaseRequest }

// Get performs GET request for FilterClause
func (r *FilterClauseRequest) Get(ctx context.Context) (resObj *FilterClause, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for FilterClause
func (r *FilterClauseRequest) Update(ctx context.Context, reqObj *FilterClause) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for FilterClause
func (r *FilterClauseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// FilterGroupRequestBuilder is request builder for FilterGroup
type FilterGroupRequestBuilder struct{ BaseRequestBuilder }

// Request returns FilterGroupRequest
func (b *FilterGroupRequestBuilder) Request() *FilterGroupRequest {
	return &FilterGroupRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// FilterGroupRequest is request for FilterGroup
type FilterGroupRequest struct{ BaseRequest }

// Get performs GET request for FilterGroup
func (r *FilterGroupRequest) Get(ctx context.Context) (resObj *FilterGroup, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for FilterGroup
func (r *FilterGroupRequest) Update(ctx context.Context, reqObj *FilterGroup) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for FilterGroup
func (r *FilterGroupRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// FilterOperandRequestBuilder is request builder for FilterOperand
type FilterOperandRequestBuilder struct{ BaseRequestBuilder }

// Request returns FilterOperandRequest
func (b *FilterOperandRequestBuilder) Request() *FilterOperandRequest {
	return &FilterOperandRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// FilterOperandRequest is request for FilterOperand
type FilterOperandRequest struct{ BaseRequest }

// Get performs GET request for FilterOperand
func (r *FilterOperandRequest) Get(ctx context.Context) (resObj *FilterOperand, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for FilterOperand
func (r *FilterOperandRequest) Update(ctx context.Context, reqObj *FilterOperand) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for FilterOperand
func (r *FilterOperandRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// FilterOperatorSchemaRequestBuilder is request builder for FilterOperatorSchema
type FilterOperatorSchemaRequestBuilder struct{ BaseRequestBuilder }

// Request returns FilterOperatorSchemaRequest
func (b *FilterOperatorSchemaRequestBuilder) Request() *FilterOperatorSchemaRequest {
	return &FilterOperatorSchemaRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// FilterOperatorSchemaRequest is request for FilterOperatorSchema
type FilterOperatorSchemaRequest struct{ BaseRequest }

// Get performs GET request for FilterOperatorSchema
func (r *FilterOperatorSchemaRequest) Get(ctx context.Context) (resObj *FilterOperatorSchema, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for FilterOperatorSchema
func (r *FilterOperatorSchemaRequest) Update(ctx context.Context, reqObj *FilterOperatorSchema) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for FilterOperatorSchema
func (r *FilterOperatorSchemaRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
