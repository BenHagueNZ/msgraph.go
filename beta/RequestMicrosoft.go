// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// MicrosoftAccountUserConversationMemberRequestBuilder is request builder for MicrosoftAccountUserConversationMember
type MicrosoftAccountUserConversationMemberRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftAccountUserConversationMemberRequest
func (b *MicrosoftAccountUserConversationMemberRequestBuilder) Request() *MicrosoftAccountUserConversationMemberRequest {
	return &MicrosoftAccountUserConversationMemberRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftAccountUserConversationMemberRequest is request for MicrosoftAccountUserConversationMember
type MicrosoftAccountUserConversationMemberRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftAccountUserConversationMember
func (r *MicrosoftAccountUserConversationMemberRequest) Get(ctx context.Context) (resObj *MicrosoftAccountUserConversationMember, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftAccountUserConversationMember
func (r *MicrosoftAccountUserConversationMemberRequest) Update(ctx context.Context, reqObj *MicrosoftAccountUserConversationMember) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftAccountUserConversationMember
func (r *MicrosoftAccountUserConversationMemberRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftApplicationDataAccessSettingsRequestBuilder is request builder for MicrosoftApplicationDataAccessSettings
type MicrosoftApplicationDataAccessSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftApplicationDataAccessSettingsRequest
func (b *MicrosoftApplicationDataAccessSettingsRequestBuilder) Request() *MicrosoftApplicationDataAccessSettingsRequest {
	return &MicrosoftApplicationDataAccessSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftApplicationDataAccessSettingsRequest is request for MicrosoftApplicationDataAccessSettings
type MicrosoftApplicationDataAccessSettingsRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftApplicationDataAccessSettings
func (r *MicrosoftApplicationDataAccessSettingsRequest) Get(ctx context.Context) (resObj *MicrosoftApplicationDataAccessSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftApplicationDataAccessSettings
func (r *MicrosoftApplicationDataAccessSettingsRequest) Update(ctx context.Context, reqObj *MicrosoftApplicationDataAccessSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftApplicationDataAccessSettings
func (r *MicrosoftApplicationDataAccessSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftAuthenticatorAuthenticationMethodRequestBuilder is request builder for MicrosoftAuthenticatorAuthenticationMethod
type MicrosoftAuthenticatorAuthenticationMethodRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftAuthenticatorAuthenticationMethodRequest
func (b *MicrosoftAuthenticatorAuthenticationMethodRequestBuilder) Request() *MicrosoftAuthenticatorAuthenticationMethodRequest {
	return &MicrosoftAuthenticatorAuthenticationMethodRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftAuthenticatorAuthenticationMethodRequest is request for MicrosoftAuthenticatorAuthenticationMethod
type MicrosoftAuthenticatorAuthenticationMethodRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftAuthenticatorAuthenticationMethod
func (r *MicrosoftAuthenticatorAuthenticationMethodRequest) Get(ctx context.Context) (resObj *MicrosoftAuthenticatorAuthenticationMethod, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftAuthenticatorAuthenticationMethod
func (r *MicrosoftAuthenticatorAuthenticationMethodRequest) Update(ctx context.Context, reqObj *MicrosoftAuthenticatorAuthenticationMethod) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftAuthenticatorAuthenticationMethod
func (r *MicrosoftAuthenticatorAuthenticationMethodRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftAuthenticatorAuthenticationMethodConfigurationRequestBuilder is request builder for MicrosoftAuthenticatorAuthenticationMethodConfiguration
type MicrosoftAuthenticatorAuthenticationMethodConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftAuthenticatorAuthenticationMethodConfigurationRequest
func (b *MicrosoftAuthenticatorAuthenticationMethodConfigurationRequestBuilder) Request() *MicrosoftAuthenticatorAuthenticationMethodConfigurationRequest {
	return &MicrosoftAuthenticatorAuthenticationMethodConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftAuthenticatorAuthenticationMethodConfigurationRequest is request for MicrosoftAuthenticatorAuthenticationMethodConfiguration
type MicrosoftAuthenticatorAuthenticationMethodConfigurationRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftAuthenticatorAuthenticationMethodConfiguration
func (r *MicrosoftAuthenticatorAuthenticationMethodConfigurationRequest) Get(ctx context.Context) (resObj *MicrosoftAuthenticatorAuthenticationMethodConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftAuthenticatorAuthenticationMethodConfiguration
func (r *MicrosoftAuthenticatorAuthenticationMethodConfigurationRequest) Update(ctx context.Context, reqObj *MicrosoftAuthenticatorAuthenticationMethodConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftAuthenticatorAuthenticationMethodConfiguration
func (r *MicrosoftAuthenticatorAuthenticationMethodConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftAuthenticatorAuthenticationMethodTargetRequestBuilder is request builder for MicrosoftAuthenticatorAuthenticationMethodTarget
type MicrosoftAuthenticatorAuthenticationMethodTargetRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftAuthenticatorAuthenticationMethodTargetRequest
func (b *MicrosoftAuthenticatorAuthenticationMethodTargetRequestBuilder) Request() *MicrosoftAuthenticatorAuthenticationMethodTargetRequest {
	return &MicrosoftAuthenticatorAuthenticationMethodTargetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftAuthenticatorAuthenticationMethodTargetRequest is request for MicrosoftAuthenticatorAuthenticationMethodTarget
type MicrosoftAuthenticatorAuthenticationMethodTargetRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftAuthenticatorAuthenticationMethodTarget
func (r *MicrosoftAuthenticatorAuthenticationMethodTargetRequest) Get(ctx context.Context) (resObj *MicrosoftAuthenticatorAuthenticationMethodTarget, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftAuthenticatorAuthenticationMethodTarget
func (r *MicrosoftAuthenticatorAuthenticationMethodTargetRequest) Update(ctx context.Context, reqObj *MicrosoftAuthenticatorAuthenticationMethodTarget) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftAuthenticatorAuthenticationMethodTarget
func (r *MicrosoftAuthenticatorAuthenticationMethodTargetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftAuthenticatorFeatureSettingsRequestBuilder is request builder for MicrosoftAuthenticatorFeatureSettings
type MicrosoftAuthenticatorFeatureSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftAuthenticatorFeatureSettingsRequest
func (b *MicrosoftAuthenticatorFeatureSettingsRequestBuilder) Request() *MicrosoftAuthenticatorFeatureSettingsRequest {
	return &MicrosoftAuthenticatorFeatureSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftAuthenticatorFeatureSettingsRequest is request for MicrosoftAuthenticatorFeatureSettings
type MicrosoftAuthenticatorFeatureSettingsRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftAuthenticatorFeatureSettings
func (r *MicrosoftAuthenticatorFeatureSettingsRequest) Get(ctx context.Context) (resObj *MicrosoftAuthenticatorFeatureSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftAuthenticatorFeatureSettings
func (r *MicrosoftAuthenticatorFeatureSettingsRequest) Update(ctx context.Context, reqObj *MicrosoftAuthenticatorFeatureSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftAuthenticatorFeatureSettings
func (r *MicrosoftAuthenticatorFeatureSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftManagedDesktopRequestBuilder is request builder for MicrosoftManagedDesktop
type MicrosoftManagedDesktopRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftManagedDesktopRequest
func (b *MicrosoftManagedDesktopRequestBuilder) Request() *MicrosoftManagedDesktopRequest {
	return &MicrosoftManagedDesktopRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftManagedDesktopRequest is request for MicrosoftManagedDesktop
type MicrosoftManagedDesktopRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftManagedDesktop
func (r *MicrosoftManagedDesktopRequest) Get(ctx context.Context) (resObj *MicrosoftManagedDesktop, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftManagedDesktop
func (r *MicrosoftManagedDesktopRequest) Update(ctx context.Context, reqObj *MicrosoftManagedDesktop) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftManagedDesktop
func (r *MicrosoftManagedDesktopRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftStoreForBusinessAppRequestBuilder is request builder for MicrosoftStoreForBusinessApp
type MicrosoftStoreForBusinessAppRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftStoreForBusinessAppRequest
func (b *MicrosoftStoreForBusinessAppRequestBuilder) Request() *MicrosoftStoreForBusinessAppRequest {
	return &MicrosoftStoreForBusinessAppRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftStoreForBusinessAppRequest is request for MicrosoftStoreForBusinessApp
type MicrosoftStoreForBusinessAppRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftStoreForBusinessApp
func (r *MicrosoftStoreForBusinessAppRequest) Get(ctx context.Context) (resObj *MicrosoftStoreForBusinessApp, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftStoreForBusinessApp
func (r *MicrosoftStoreForBusinessAppRequest) Update(ctx context.Context, reqObj *MicrosoftStoreForBusinessApp) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftStoreForBusinessApp
func (r *MicrosoftStoreForBusinessAppRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftStoreForBusinessAppAssignmentSettingsRequestBuilder is request builder for MicrosoftStoreForBusinessAppAssignmentSettings
type MicrosoftStoreForBusinessAppAssignmentSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftStoreForBusinessAppAssignmentSettingsRequest
func (b *MicrosoftStoreForBusinessAppAssignmentSettingsRequestBuilder) Request() *MicrosoftStoreForBusinessAppAssignmentSettingsRequest {
	return &MicrosoftStoreForBusinessAppAssignmentSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftStoreForBusinessAppAssignmentSettingsRequest is request for MicrosoftStoreForBusinessAppAssignmentSettings
type MicrosoftStoreForBusinessAppAssignmentSettingsRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftStoreForBusinessAppAssignmentSettings
func (r *MicrosoftStoreForBusinessAppAssignmentSettingsRequest) Get(ctx context.Context) (resObj *MicrosoftStoreForBusinessAppAssignmentSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftStoreForBusinessAppAssignmentSettings
func (r *MicrosoftStoreForBusinessAppAssignmentSettingsRequest) Update(ctx context.Context, reqObj *MicrosoftStoreForBusinessAppAssignmentSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftStoreForBusinessAppAssignmentSettings
func (r *MicrosoftStoreForBusinessAppAssignmentSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftStoreForBusinessContainedAppRequestBuilder is request builder for MicrosoftStoreForBusinessContainedApp
type MicrosoftStoreForBusinessContainedAppRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftStoreForBusinessContainedAppRequest
func (b *MicrosoftStoreForBusinessContainedAppRequestBuilder) Request() *MicrosoftStoreForBusinessContainedAppRequest {
	return &MicrosoftStoreForBusinessContainedAppRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftStoreForBusinessContainedAppRequest is request for MicrosoftStoreForBusinessContainedApp
type MicrosoftStoreForBusinessContainedAppRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftStoreForBusinessContainedApp
func (r *MicrosoftStoreForBusinessContainedAppRequest) Get(ctx context.Context) (resObj *MicrosoftStoreForBusinessContainedApp, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftStoreForBusinessContainedApp
func (r *MicrosoftStoreForBusinessContainedAppRequest) Update(ctx context.Context, reqObj *MicrosoftStoreForBusinessContainedApp) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftStoreForBusinessContainedApp
func (r *MicrosoftStoreForBusinessContainedAppRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftTunnelConfigurationRequestBuilder is request builder for MicrosoftTunnelConfiguration
type MicrosoftTunnelConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftTunnelConfigurationRequest
func (b *MicrosoftTunnelConfigurationRequestBuilder) Request() *MicrosoftTunnelConfigurationRequest {
	return &MicrosoftTunnelConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftTunnelConfigurationRequest is request for MicrosoftTunnelConfiguration
type MicrosoftTunnelConfigurationRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftTunnelConfiguration
func (r *MicrosoftTunnelConfigurationRequest) Get(ctx context.Context) (resObj *MicrosoftTunnelConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftTunnelConfiguration
func (r *MicrosoftTunnelConfigurationRequest) Update(ctx context.Context, reqObj *MicrosoftTunnelConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftTunnelConfiguration
func (r *MicrosoftTunnelConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftTunnelHealthThresholdRequestBuilder is request builder for MicrosoftTunnelHealthThreshold
type MicrosoftTunnelHealthThresholdRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftTunnelHealthThresholdRequest
func (b *MicrosoftTunnelHealthThresholdRequestBuilder) Request() *MicrosoftTunnelHealthThresholdRequest {
	return &MicrosoftTunnelHealthThresholdRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftTunnelHealthThresholdRequest is request for MicrosoftTunnelHealthThreshold
type MicrosoftTunnelHealthThresholdRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftTunnelHealthThreshold
func (r *MicrosoftTunnelHealthThresholdRequest) Get(ctx context.Context) (resObj *MicrosoftTunnelHealthThreshold, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftTunnelHealthThreshold
func (r *MicrosoftTunnelHealthThresholdRequest) Update(ctx context.Context, reqObj *MicrosoftTunnelHealthThreshold) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftTunnelHealthThreshold
func (r *MicrosoftTunnelHealthThresholdRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftTunnelServerRequestBuilder is request builder for MicrosoftTunnelServer
type MicrosoftTunnelServerRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftTunnelServerRequest
func (b *MicrosoftTunnelServerRequestBuilder) Request() *MicrosoftTunnelServerRequest {
	return &MicrosoftTunnelServerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftTunnelServerRequest is request for MicrosoftTunnelServer
type MicrosoftTunnelServerRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftTunnelServer
func (r *MicrosoftTunnelServerRequest) Get(ctx context.Context) (resObj *MicrosoftTunnelServer, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftTunnelServer
func (r *MicrosoftTunnelServerRequest) Update(ctx context.Context, reqObj *MicrosoftTunnelServer) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftTunnelServer
func (r *MicrosoftTunnelServerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftTunnelServerLogCollectionResponseRequestBuilder is request builder for MicrosoftTunnelServerLogCollectionResponse
type MicrosoftTunnelServerLogCollectionResponseRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftTunnelServerLogCollectionResponseRequest
func (b *MicrosoftTunnelServerLogCollectionResponseRequestBuilder) Request() *MicrosoftTunnelServerLogCollectionResponseRequest {
	return &MicrosoftTunnelServerLogCollectionResponseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftTunnelServerLogCollectionResponseRequest is request for MicrosoftTunnelServerLogCollectionResponse
type MicrosoftTunnelServerLogCollectionResponseRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftTunnelServerLogCollectionResponse
func (r *MicrosoftTunnelServerLogCollectionResponseRequest) Get(ctx context.Context) (resObj *MicrosoftTunnelServerLogCollectionResponse, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftTunnelServerLogCollectionResponse
func (r *MicrosoftTunnelServerLogCollectionResponseRequest) Update(ctx context.Context, reqObj *MicrosoftTunnelServerLogCollectionResponse) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftTunnelServerLogCollectionResponse
func (r *MicrosoftTunnelServerLogCollectionResponseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MicrosoftTunnelSiteRequestBuilder is request builder for MicrosoftTunnelSite
type MicrosoftTunnelSiteRequestBuilder struct{ BaseRequestBuilder }

// Request returns MicrosoftTunnelSiteRequest
func (b *MicrosoftTunnelSiteRequestBuilder) Request() *MicrosoftTunnelSiteRequest {
	return &MicrosoftTunnelSiteRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MicrosoftTunnelSiteRequest is request for MicrosoftTunnelSite
type MicrosoftTunnelSiteRequest struct{ BaseRequest }

// Get performs GET request for MicrosoftTunnelSite
func (r *MicrosoftTunnelSiteRequest) Get(ctx context.Context) (resObj *MicrosoftTunnelSite, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MicrosoftTunnelSite
func (r *MicrosoftTunnelSiteRequest) Update(ctx context.Context, reqObj *MicrosoftTunnelSite) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MicrosoftTunnelSite
func (r *MicrosoftTunnelSiteRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type MicrosoftTunnelServerCreateServerLogCollectionRequestActionRequestBuilder struct{ BaseRequestBuilder }

// CreateServerLogCollectionRequestAction action undocumentedras
func (b *MicrosoftTunnelServerRequestBuilder) CreateServerLogCollectionRequestAction(reqObj *MicrosoftTunnelServerCreateServerLogCollectionRequestActionRequestParameter) *MicrosoftTunnelServerCreateServerLogCollectionRequestActionRequestBuilder {
	bb := &MicrosoftTunnelServerCreateServerLogCollectionRequestActionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/CreateServerLogCollectionRequest"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MicrosoftTunnelServerCreateServerLogCollectionRequestActionRequest struct{ BaseRequest }

func (b *MicrosoftTunnelServerCreateServerLogCollectionRequestActionRequestBuilder) Request() *MicrosoftTunnelServerCreateServerLogCollectionRequestActionRequest {
	return &MicrosoftTunnelServerCreateServerLogCollectionRequestActionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MicrosoftTunnelServerCreateServerLogCollectionRequestActionRequest) Post(ctx context.Context) (resObj *MicrosoftTunnelServerLogCollectionResponse, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type MicrosoftTunnelServerGenerateServerLogCollectionRequestActionRequestBuilder struct{ BaseRequestBuilder }

// GenerateServerLogCollectionRequestAction action undocumentedras
func (b *MicrosoftTunnelServerRequestBuilder) GenerateServerLogCollectionRequestAction(reqObj *MicrosoftTunnelServerGenerateServerLogCollectionRequestActionRequestParameter) *MicrosoftTunnelServerGenerateServerLogCollectionRequestActionRequestBuilder {
	bb := &MicrosoftTunnelServerGenerateServerLogCollectionRequestActionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/GenerateServerLogCollectionRequest"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MicrosoftTunnelServerGenerateServerLogCollectionRequestActionRequest struct{ BaseRequest }

func (b *MicrosoftTunnelServerGenerateServerLogCollectionRequestActionRequestBuilder) Request() *MicrosoftTunnelServerGenerateServerLogCollectionRequestActionRequest {
	return &MicrosoftTunnelServerGenerateServerLogCollectionRequestActionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MicrosoftTunnelServerGenerateServerLogCollectionRequestActionRequest) Post(ctx context.Context) (resObj *MicrosoftTunnelServerLogCollectionResponse, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type MicrosoftTunnelServerGetHealthMetricsRequestBuilder struct{ BaseRequestBuilder }

// GetHealthMetrics action undocumentedrac
func (b *MicrosoftTunnelServerRequestBuilder) GetHealthMetrics(reqObj *MicrosoftTunnelServerGetHealthMetricsRequestParameter) *MicrosoftTunnelServerGetHealthMetricsRequestBuilder {
	bb := &MicrosoftTunnelServerGetHealthMetricsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/GetHealthMetrics"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MicrosoftTunnelServerGetHealthMetricsRequest struct{ BaseRequest }

func (b *MicrosoftTunnelServerGetHealthMetricsRequestBuilder) Request() *MicrosoftTunnelServerGetHealthMetricsRequest {
	return &MicrosoftTunnelServerGetHealthMetricsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MicrosoftTunnelServerGetHealthMetricsRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]KeyLongValuePair, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []KeyLongValuePair
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []KeyLongValuePair
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, _ = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

func (r *MicrosoftTunnelServerGetHealthMetricsRequest) PostN(ctx context.Context, n int) ([]KeyLongValuePair, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, n)
}

func (r *MicrosoftTunnelServerGetHealthMetricsRequest) Post(ctx context.Context) ([]KeyLongValuePair, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, 0)
}

type MicrosoftTunnelServerGetHealthMetricTimeSeriesRequestBuilder struct{ BaseRequestBuilder }

// GetHealthMetricTimeSeries action undocumentedrac
func (b *MicrosoftTunnelServerRequestBuilder) GetHealthMetricTimeSeries(reqObj *MicrosoftTunnelServerGetHealthMetricTimeSeriesRequestParameter) *MicrosoftTunnelServerGetHealthMetricTimeSeriesRequestBuilder {
	bb := &MicrosoftTunnelServerGetHealthMetricTimeSeriesRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/GetHealthMetricTimeSeries"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MicrosoftTunnelServerGetHealthMetricTimeSeriesRequest struct{ BaseRequest }

func (b *MicrosoftTunnelServerGetHealthMetricTimeSeriesRequestBuilder) Request() *MicrosoftTunnelServerGetHealthMetricTimeSeriesRequest {
	return &MicrosoftTunnelServerGetHealthMetricTimeSeriesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MicrosoftTunnelServerGetHealthMetricTimeSeriesRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MetricTimeSeriesDataPoint, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MetricTimeSeriesDataPoint
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MetricTimeSeriesDataPoint
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, _ = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

func (r *MicrosoftTunnelServerGetHealthMetricTimeSeriesRequest) PostN(ctx context.Context, n int) ([]MetricTimeSeriesDataPoint, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, n)
}

func (r *MicrosoftTunnelServerGetHealthMetricTimeSeriesRequest) Post(ctx context.Context) ([]MetricTimeSeriesDataPoint, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, 0)
}

type MicrosoftTunnelServerLogCollectionResponseCreateDownloadURLRequestBuilder struct{ BaseRequestBuilder }

// CreateDownloadURL action undocumentedras
func (b *MicrosoftTunnelServerLogCollectionResponseRequestBuilder) CreateDownloadURL(reqObj *MicrosoftTunnelServerLogCollectionResponseCreateDownloadURLRequestParameter) *MicrosoftTunnelServerLogCollectionResponseCreateDownloadURLRequestBuilder {
	bb := &MicrosoftTunnelServerLogCollectionResponseCreateDownloadURLRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/CreateDownloadUrl"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MicrosoftTunnelServerLogCollectionResponseCreateDownloadURLRequest struct{ BaseRequest }

func (b *MicrosoftTunnelServerLogCollectionResponseCreateDownloadURLRequestBuilder) Request() *MicrosoftTunnelServerLogCollectionResponseCreateDownloadURLRequest {
	return &MicrosoftTunnelServerLogCollectionResponseCreateDownloadURLRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MicrosoftTunnelServerLogCollectionResponseCreateDownloadURLRequest) Post(ctx context.Context) (resObj *string, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type MicrosoftTunnelServerLogCollectionResponseGenerateDownloadURLRequestBuilder struct{ BaseRequestBuilder }

// GenerateDownloadURL action undocumentedras
func (b *MicrosoftTunnelServerLogCollectionResponseRequestBuilder) GenerateDownloadURL(reqObj *MicrosoftTunnelServerLogCollectionResponseGenerateDownloadURLRequestParameter) *MicrosoftTunnelServerLogCollectionResponseGenerateDownloadURLRequestBuilder {
	bb := &MicrosoftTunnelServerLogCollectionResponseGenerateDownloadURLRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/GenerateDownloadUrl"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MicrosoftTunnelServerLogCollectionResponseGenerateDownloadURLRequest struct{ BaseRequest }

func (b *MicrosoftTunnelServerLogCollectionResponseGenerateDownloadURLRequestBuilder) Request() *MicrosoftTunnelServerLogCollectionResponseGenerateDownloadURLRequest {
	return &MicrosoftTunnelServerLogCollectionResponseGenerateDownloadURLRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MicrosoftTunnelServerLogCollectionResponseGenerateDownloadURLRequest) Post(ctx context.Context) (resObj *string, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type MicrosoftTunnelSiteRequestUpgradeRequestBuilder struct{ BaseRequestBuilder }

// RequestUpgrade action undocumentedrav
func (b *MicrosoftTunnelSiteRequestBuilder) RequestUpgrade(reqObj *MicrosoftTunnelSiteRequestUpgradeRequestParameter) *MicrosoftTunnelSiteRequestUpgradeRequestBuilder {
	bb := &MicrosoftTunnelSiteRequestUpgradeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/RequestUpgrade"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MicrosoftTunnelSiteRequestUpgradeRequest struct{ BaseRequest }

func (b *MicrosoftTunnelSiteRequestUpgradeRequestBuilder) Request() *MicrosoftTunnelSiteRequestUpgradeRequest {
	return &MicrosoftTunnelSiteRequestUpgradeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MicrosoftTunnelSiteRequestUpgradeRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
