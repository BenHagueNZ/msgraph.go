// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// DocumentRequestBuilder is request builder for Document
type DocumentRequestBuilder struct{ BaseRequestBuilder }

// Request returns DocumentRequest
func (b *DocumentRequestBuilder) Request() *DocumentRequest {
	return &DocumentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DocumentRequest is request for Document
type DocumentRequest struct{ BaseRequest }

// Get performs GET request for Document
func (r *DocumentRequest) Get(ctx context.Context) (resObj *Document, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Document
func (r *DocumentRequest) Update(ctx context.Context, reqObj *Document) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Document
func (r *DocumentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DocumentCommentRequestBuilder is request builder for DocumentComment
type DocumentCommentRequestBuilder struct{ BaseRequestBuilder }

// Request returns DocumentCommentRequest
func (b *DocumentCommentRequestBuilder) Request() *DocumentCommentRequest {
	return &DocumentCommentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DocumentCommentRequest is request for DocumentComment
type DocumentCommentRequest struct{ BaseRequest }

// Get performs GET request for DocumentComment
func (r *DocumentCommentRequest) Get(ctx context.Context) (resObj *DocumentComment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DocumentComment
func (r *DocumentCommentRequest) Update(ctx context.Context, reqObj *DocumentComment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DocumentComment
func (r *DocumentCommentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DocumentCommentReplyRequestBuilder is request builder for DocumentCommentReply
type DocumentCommentReplyRequestBuilder struct{ BaseRequestBuilder }

// Request returns DocumentCommentReplyRequest
func (b *DocumentCommentReplyRequestBuilder) Request() *DocumentCommentReplyRequest {
	return &DocumentCommentReplyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DocumentCommentReplyRequest is request for DocumentCommentReply
type DocumentCommentReplyRequest struct{ BaseRequest }

// Get performs GET request for DocumentCommentReply
func (r *DocumentCommentReplyRequest) Get(ctx context.Context) (resObj *DocumentCommentReply, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DocumentCommentReply
func (r *DocumentCommentReplyRequest) Update(ctx context.Context, reqObj *DocumentCommentReply) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DocumentCommentReply
func (r *DocumentCommentReplyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DocumentSetRequestBuilder is request builder for DocumentSet
type DocumentSetRequestBuilder struct{ BaseRequestBuilder }

// Request returns DocumentSetRequest
func (b *DocumentSetRequestBuilder) Request() *DocumentSetRequest {
	return &DocumentSetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DocumentSetRequest is request for DocumentSet
type DocumentSetRequest struct{ BaseRequest }

// Get performs GET request for DocumentSet
func (r *DocumentSetRequest) Get(ctx context.Context) (resObj *DocumentSet, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DocumentSet
func (r *DocumentSetRequest) Update(ctx context.Context, reqObj *DocumentSet) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DocumentSet
func (r *DocumentSetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DocumentSetContentRequestBuilder is request builder for DocumentSetContent
type DocumentSetContentRequestBuilder struct{ BaseRequestBuilder }

// Request returns DocumentSetContentRequest
func (b *DocumentSetContentRequestBuilder) Request() *DocumentSetContentRequest {
	return &DocumentSetContentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DocumentSetContentRequest is request for DocumentSetContent
type DocumentSetContentRequest struct{ BaseRequest }

// Get performs GET request for DocumentSetContent
func (r *DocumentSetContentRequest) Get(ctx context.Context) (resObj *DocumentSetContent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DocumentSetContent
func (r *DocumentSetContentRequest) Update(ctx context.Context, reqObj *DocumentSetContent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DocumentSetContent
func (r *DocumentSetContentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DocumentSetVersionRequestBuilder is request builder for DocumentSetVersion
type DocumentSetVersionRequestBuilder struct{ BaseRequestBuilder }

// Request returns DocumentSetVersionRequest
func (b *DocumentSetVersionRequestBuilder) Request() *DocumentSetVersionRequest {
	return &DocumentSetVersionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DocumentSetVersionRequest is request for DocumentSetVersion
type DocumentSetVersionRequest struct{ BaseRequest }

// Get performs GET request for DocumentSetVersion
func (r *DocumentSetVersionRequest) Get(ctx context.Context) (resObj *DocumentSetVersion, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DocumentSetVersion
func (r *DocumentSetVersionRequest) Update(ctx context.Context, reqObj *DocumentSetVersion) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DocumentSetVersion
func (r *DocumentSetVersionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DocumentSetVersionItemRequestBuilder is request builder for DocumentSetVersionItem
type DocumentSetVersionItemRequestBuilder struct{ BaseRequestBuilder }

// Request returns DocumentSetVersionItemRequest
func (b *DocumentSetVersionItemRequestBuilder) Request() *DocumentSetVersionItemRequest {
	return &DocumentSetVersionItemRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DocumentSetVersionItemRequest is request for DocumentSetVersionItem
type DocumentSetVersionItemRequest struct{ BaseRequest }

// Get performs GET request for DocumentSetVersionItem
func (r *DocumentSetVersionItemRequest) Get(ctx context.Context) (resObj *DocumentSetVersionItem, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DocumentSetVersionItem
func (r *DocumentSetVersionItemRequest) Update(ctx context.Context, reqObj *DocumentSetVersionItem) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DocumentSetVersionItem
func (r *DocumentSetVersionItemRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type DocumentSetVersionRestoreRequestBuilder struct{ BaseRequestBuilder }

// Restore action undocumentedrav
func (b *DocumentSetVersionRequestBuilder) Restore(reqObj *DocumentSetVersionRestoreRequestParameter) *DocumentSetVersionRestoreRequestBuilder {
	bb := &DocumentSetVersionRestoreRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Restore"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type DocumentSetVersionRestoreRequest struct{ BaseRequest }

func (b *DocumentSetVersionRestoreRequestBuilder) Request() *DocumentSetVersionRestoreRequest {
	return &DocumentSetVersionRestoreRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *DocumentSetVersionRestoreRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
