// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// BrowserSharedCookieRequestBuilder is request builder for BrowserSharedCookie
type BrowserSharedCookieRequestBuilder struct{ BaseRequestBuilder }

// Request returns BrowserSharedCookieRequest
func (b *BrowserSharedCookieRequestBuilder) Request() *BrowserSharedCookieRequest {
	return &BrowserSharedCookieRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BrowserSharedCookieRequest is request for BrowserSharedCookie
type BrowserSharedCookieRequest struct{ BaseRequest }

// Get performs GET request for BrowserSharedCookie
func (r *BrowserSharedCookieRequest) Get(ctx context.Context) (resObj *BrowserSharedCookie, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BrowserSharedCookie
func (r *BrowserSharedCookieRequest) Update(ctx context.Context, reqObj *BrowserSharedCookie) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BrowserSharedCookie
func (r *BrowserSharedCookieRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BrowserSharedCookieHistoryRequestBuilder is request builder for BrowserSharedCookieHistory
type BrowserSharedCookieHistoryRequestBuilder struct{ BaseRequestBuilder }

// Request returns BrowserSharedCookieHistoryRequest
func (b *BrowserSharedCookieHistoryRequestBuilder) Request() *BrowserSharedCookieHistoryRequest {
	return &BrowserSharedCookieHistoryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BrowserSharedCookieHistoryRequest is request for BrowserSharedCookieHistory
type BrowserSharedCookieHistoryRequest struct{ BaseRequest }

// Get performs GET request for BrowserSharedCookieHistory
func (r *BrowserSharedCookieHistoryRequest) Get(ctx context.Context) (resObj *BrowserSharedCookieHistory, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BrowserSharedCookieHistory
func (r *BrowserSharedCookieHistoryRequest) Update(ctx context.Context, reqObj *BrowserSharedCookieHistory) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BrowserSharedCookieHistory
func (r *BrowserSharedCookieHistoryRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BrowserSiteRequestBuilder is request builder for BrowserSite
type BrowserSiteRequestBuilder struct{ BaseRequestBuilder }

// Request returns BrowserSiteRequest
func (b *BrowserSiteRequestBuilder) Request() *BrowserSiteRequest {
	return &BrowserSiteRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BrowserSiteRequest is request for BrowserSite
type BrowserSiteRequest struct{ BaseRequest }

// Get performs GET request for BrowserSite
func (r *BrowserSiteRequest) Get(ctx context.Context) (resObj *BrowserSite, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BrowserSite
func (r *BrowserSiteRequest) Update(ctx context.Context, reqObj *BrowserSite) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BrowserSite
func (r *BrowserSiteRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BrowserSiteHistoryRequestBuilder is request builder for BrowserSiteHistory
type BrowserSiteHistoryRequestBuilder struct{ BaseRequestBuilder }

// Request returns BrowserSiteHistoryRequest
func (b *BrowserSiteHistoryRequestBuilder) Request() *BrowserSiteHistoryRequest {
	return &BrowserSiteHistoryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BrowserSiteHistoryRequest is request for BrowserSiteHistory
type BrowserSiteHistoryRequest struct{ BaseRequest }

// Get performs GET request for BrowserSiteHistory
func (r *BrowserSiteHistoryRequest) Get(ctx context.Context) (resObj *BrowserSiteHistory, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BrowserSiteHistory
func (r *BrowserSiteHistoryRequest) Update(ctx context.Context, reqObj *BrowserSiteHistory) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BrowserSiteHistory
func (r *BrowserSiteHistoryRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BrowserSiteListRequestBuilder is request builder for BrowserSiteList
type BrowserSiteListRequestBuilder struct{ BaseRequestBuilder }

// Request returns BrowserSiteListRequest
func (b *BrowserSiteListRequestBuilder) Request() *BrowserSiteListRequest {
	return &BrowserSiteListRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BrowserSiteListRequest is request for BrowserSiteList
type BrowserSiteListRequest struct{ BaseRequest }

// Get performs GET request for BrowserSiteList
func (r *BrowserSiteListRequest) Get(ctx context.Context) (resObj *BrowserSiteList, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BrowserSiteList
func (r *BrowserSiteListRequest) Update(ctx context.Context, reqObj *BrowserSiteList) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BrowserSiteList
func (r *BrowserSiteListRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type BrowserSiteListPublishRequestBuilder struct{ BaseRequestBuilder }

// Publish action undocumentedras
func (b *BrowserSiteListRequestBuilder) Publish(reqObj *BrowserSiteListPublishRequestParameter) *BrowserSiteListPublishRequestBuilder {
	bb := &BrowserSiteListPublishRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Publish"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type BrowserSiteListPublishRequest struct{ BaseRequest }

func (b *BrowserSiteListPublishRequestBuilder) Request() *BrowserSiteListPublishRequest {
	return &BrowserSiteListPublishRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *BrowserSiteListPublishRequest) Post(ctx context.Context) (resObj *BrowserSiteList, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}
