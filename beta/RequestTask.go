// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// TaskRequestBuilder is request builder for Task
type TaskRequestBuilder struct{ BaseRequestBuilder }

// Request returns TaskRequest
func (b *TaskRequestBuilder) Request() *TaskRequest {
	return &TaskRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TaskRequest is request for Task
type TaskRequest struct{ BaseRequest }

// Get performs GET request for Task
func (r *TaskRequest) Get(ctx context.Context) (resObj *Task, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Task
func (r *TaskRequest) Update(ctx context.Context, reqObj *Task) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Task
func (r *TaskRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TaskProcessingResultRequestBuilder is request builder for TaskProcessingResult
type TaskProcessingResultRequestBuilder struct{ BaseRequestBuilder }

// Request returns TaskProcessingResultRequest
func (b *TaskProcessingResultRequestBuilder) Request() *TaskProcessingResultRequest {
	return &TaskProcessingResultRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TaskProcessingResultRequest is request for TaskProcessingResult
type TaskProcessingResultRequest struct{ BaseRequest }

// Get performs GET request for TaskProcessingResult
func (r *TaskProcessingResultRequest) Get(ctx context.Context) (resObj *TaskProcessingResult, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TaskProcessingResult
func (r *TaskProcessingResultRequest) Update(ctx context.Context, reqObj *TaskProcessingResult) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TaskProcessingResult
func (r *TaskProcessingResultRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TaskReportRequestBuilder is request builder for TaskReport
type TaskReportRequestBuilder struct{ BaseRequestBuilder }

// Request returns TaskReportRequest
func (b *TaskReportRequestBuilder) Request() *TaskReportRequest {
	return &TaskReportRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TaskReportRequest is request for TaskReport
type TaskReportRequest struct{ BaseRequest }

// Get performs GET request for TaskReport
func (r *TaskReportRequest) Get(ctx context.Context) (resObj *TaskReport, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TaskReport
func (r *TaskReportRequest) Update(ctx context.Context, reqObj *TaskReport) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TaskReport
func (r *TaskReportRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
