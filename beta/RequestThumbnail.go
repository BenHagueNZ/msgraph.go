// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// ThumbnailRequestBuilder is request builder for Thumbnail
type ThumbnailRequestBuilder struct{ BaseRequestBuilder }

// Request returns ThumbnailRequest
func (b *ThumbnailRequestBuilder) Request() *ThumbnailRequest {
	return &ThumbnailRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ThumbnailRequest is request for Thumbnail
type ThumbnailRequest struct{ BaseRequest }

// Get performs GET request for Thumbnail
func (r *ThumbnailRequest) Get(ctx context.Context) (resObj *Thumbnail, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Thumbnail
func (r *ThumbnailRequest) Update(ctx context.Context, reqObj *Thumbnail) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Thumbnail
func (r *ThumbnailRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ThumbnailColumnRequestBuilder is request builder for ThumbnailColumn
type ThumbnailColumnRequestBuilder struct{ BaseRequestBuilder }

// Request returns ThumbnailColumnRequest
func (b *ThumbnailColumnRequestBuilder) Request() *ThumbnailColumnRequest {
	return &ThumbnailColumnRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ThumbnailColumnRequest is request for ThumbnailColumn
type ThumbnailColumnRequest struct{ BaseRequest }

// Get performs GET request for ThumbnailColumn
func (r *ThumbnailColumnRequest) Get(ctx context.Context) (resObj *ThumbnailColumn, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ThumbnailColumn
func (r *ThumbnailColumnRequest) Update(ctx context.Context, reqObj *ThumbnailColumn) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ThumbnailColumn
func (r *ThumbnailColumnRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ThumbnailSetRequestBuilder is request builder for ThumbnailSet
type ThumbnailSetRequestBuilder struct{ BaseRequestBuilder }

// Request returns ThumbnailSetRequest
func (b *ThumbnailSetRequestBuilder) Request() *ThumbnailSetRequest {
	return &ThumbnailSetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ThumbnailSetRequest is request for ThumbnailSet
type ThumbnailSetRequest struct{ BaseRequest }

// Get performs GET request for ThumbnailSet
func (r *ThumbnailSetRequest) Get(ctx context.Context) (resObj *ThumbnailSet, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ThumbnailSet
func (r *ThumbnailSetRequest) Update(ctx context.Context, reqObj *ThumbnailSet) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ThumbnailSet
func (r *ThumbnailSetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
