// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// PolicySetCollectionGetPolicySetsRequestParameter undocumented
type PolicySetCollectionGetPolicySetsRequestParameter struct {
	// PolicySetIDs undocumented
	PolicySetIDs []string `json:"policySetIds,omitempty"`
}

// PolicySetUpdateRequestParameter undocumented
type PolicySetUpdateRequestParameter struct {
	// AddedPolicySetItems undocumented
	AddedPolicySetItems []PolicySetItem `json:"addedPolicySetItems,omitempty"`
	// UpdatedPolicySetItems undocumented
	UpdatedPolicySetItems []PolicySetItem `json:"updatedPolicySetItems,omitempty"`
	// DeletedPolicySetItems undocumented
	DeletedPolicySetItems []string `json:"deletedPolicySetItems,omitempty"`
	// Assignments undocumented
	Assignments []PolicySetAssignment `json:"assignments,omitempty"`
}

// AccessReviewPolicy is navigation property rn
func (b *PolicyRootRequestBuilder) AccessReviewPolicy() *AccessReviewPolicyRequestBuilder {
	bb := &AccessReviewPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/accessReviewPolicy"
	return bb
}

// ActivityBasedTimeoutPolicies returns request builder for ActivityBasedTimeoutPolicy collection
func (b *PolicyRootRequestBuilder) ActivityBasedTimeoutPolicies() *PolicyRootActivityBasedTimeoutPoliciesCollectionRequestBuilder {
	bb := &PolicyRootActivityBasedTimeoutPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/activityBasedTimeoutPolicies"
	return bb
}

// PolicyRootActivityBasedTimeoutPoliciesCollectionRequestBuilder is request builder for ActivityBasedTimeoutPolicy collection rcn
type PolicyRootActivityBasedTimeoutPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ActivityBasedTimeoutPolicy collection
func (b *PolicyRootActivityBasedTimeoutPoliciesCollectionRequestBuilder) Request() *PolicyRootActivityBasedTimeoutPoliciesCollectionRequest {
	return &PolicyRootActivityBasedTimeoutPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ActivityBasedTimeoutPolicy item
func (b *PolicyRootActivityBasedTimeoutPoliciesCollectionRequestBuilder) ID(id string) *ActivityBasedTimeoutPolicyRequestBuilder {
	bb := &ActivityBasedTimeoutPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootActivityBasedTimeoutPoliciesCollectionRequest is request for ActivityBasedTimeoutPolicy collection
type PolicyRootActivityBasedTimeoutPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ActivityBasedTimeoutPolicy collection
func (r *PolicyRootActivityBasedTimeoutPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ActivityBasedTimeoutPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ActivityBasedTimeoutPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ActivityBasedTimeoutPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ActivityBasedTimeoutPolicy collection, max N pages
func (r *PolicyRootActivityBasedTimeoutPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]ActivityBasedTimeoutPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ActivityBasedTimeoutPolicy collection
func (r *PolicyRootActivityBasedTimeoutPoliciesCollectionRequest) Get(ctx context.Context) ([]ActivityBasedTimeoutPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ActivityBasedTimeoutPolicy collection
func (r *PolicyRootActivityBasedTimeoutPoliciesCollectionRequest) Add(ctx context.Context, reqObj *ActivityBasedTimeoutPolicy) (resObj *ActivityBasedTimeoutPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AdminConsentRequestPolicy is navigation property rn
func (b *PolicyRootRequestBuilder) AdminConsentRequestPolicy() *AdminConsentRequestPolicyRequestBuilder {
	bb := &AdminConsentRequestPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/adminConsentRequestPolicy"
	return bb
}

// AppManagementPolicies returns request builder for AppManagementPolicy collection
func (b *PolicyRootRequestBuilder) AppManagementPolicies() *PolicyRootAppManagementPoliciesCollectionRequestBuilder {
	bb := &PolicyRootAppManagementPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appManagementPolicies"
	return bb
}

// PolicyRootAppManagementPoliciesCollectionRequestBuilder is request builder for AppManagementPolicy collection rcn
type PolicyRootAppManagementPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AppManagementPolicy collection
func (b *PolicyRootAppManagementPoliciesCollectionRequestBuilder) Request() *PolicyRootAppManagementPoliciesCollectionRequest {
	return &PolicyRootAppManagementPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AppManagementPolicy item
func (b *PolicyRootAppManagementPoliciesCollectionRequestBuilder) ID(id string) *AppManagementPolicyRequestBuilder {
	bb := &AppManagementPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootAppManagementPoliciesCollectionRequest is request for AppManagementPolicy collection
type PolicyRootAppManagementPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AppManagementPolicy collection
func (r *PolicyRootAppManagementPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AppManagementPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AppManagementPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AppManagementPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AppManagementPolicy collection, max N pages
func (r *PolicyRootAppManagementPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]AppManagementPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AppManagementPolicy collection
func (r *PolicyRootAppManagementPoliciesCollectionRequest) Get(ctx context.Context) ([]AppManagementPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AppManagementPolicy collection
func (r *PolicyRootAppManagementPoliciesCollectionRequest) Add(ctx context.Context, reqObj *AppManagementPolicy) (resObj *AppManagementPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AuthenticationFlowsPolicy is navigation property rn
func (b *PolicyRootRequestBuilder) AuthenticationFlowsPolicy() *AuthenticationFlowsPolicyRequestBuilder {
	bb := &AuthenticationFlowsPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/authenticationFlowsPolicy"
	return bb
}

// AuthenticationMethodsPolicy is navigation property rn
func (b *PolicyRootRequestBuilder) AuthenticationMethodsPolicy() *AuthenticationMethodsPolicyRequestBuilder {
	bb := &AuthenticationMethodsPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/authenticationMethodsPolicy"
	return bb
}

// AuthenticationStrengthPolicies returns request builder for AuthenticationStrengthPolicy collection
func (b *PolicyRootRequestBuilder) AuthenticationStrengthPolicies() *PolicyRootAuthenticationStrengthPoliciesCollectionRequestBuilder {
	bb := &PolicyRootAuthenticationStrengthPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/authenticationStrengthPolicies"
	return bb
}

// PolicyRootAuthenticationStrengthPoliciesCollectionRequestBuilder is request builder for AuthenticationStrengthPolicy collection rcn
type PolicyRootAuthenticationStrengthPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationStrengthPolicy collection
func (b *PolicyRootAuthenticationStrengthPoliciesCollectionRequestBuilder) Request() *PolicyRootAuthenticationStrengthPoliciesCollectionRequest {
	return &PolicyRootAuthenticationStrengthPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationStrengthPolicy item
func (b *PolicyRootAuthenticationStrengthPoliciesCollectionRequestBuilder) ID(id string) *AuthenticationStrengthPolicyRequestBuilder {
	bb := &AuthenticationStrengthPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootAuthenticationStrengthPoliciesCollectionRequest is request for AuthenticationStrengthPolicy collection
type PolicyRootAuthenticationStrengthPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationStrengthPolicy collection
func (r *PolicyRootAuthenticationStrengthPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationStrengthPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationStrengthPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationStrengthPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationStrengthPolicy collection, max N pages
func (r *PolicyRootAuthenticationStrengthPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationStrengthPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationStrengthPolicy collection
func (r *PolicyRootAuthenticationStrengthPoliciesCollectionRequest) Get(ctx context.Context) ([]AuthenticationStrengthPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationStrengthPolicy collection
func (r *PolicyRootAuthenticationStrengthPoliciesCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationStrengthPolicy) (resObj *AuthenticationStrengthPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AuthorizationPolicy returns request builder for AuthorizationPolicy collection
func (b *PolicyRootRequestBuilder) AuthorizationPolicy() *PolicyRootAuthorizationPolicyCollectionRequestBuilder {
	bb := &PolicyRootAuthorizationPolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/authorizationPolicy"
	return bb
}

// PolicyRootAuthorizationPolicyCollectionRequestBuilder is request builder for AuthorizationPolicy collection rcn
type PolicyRootAuthorizationPolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthorizationPolicy collection
func (b *PolicyRootAuthorizationPolicyCollectionRequestBuilder) Request() *PolicyRootAuthorizationPolicyCollectionRequest {
	return &PolicyRootAuthorizationPolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthorizationPolicy item
func (b *PolicyRootAuthorizationPolicyCollectionRequestBuilder) ID(id string) *AuthorizationPolicyRequestBuilder {
	bb := &AuthorizationPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootAuthorizationPolicyCollectionRequest is request for AuthorizationPolicy collection
type PolicyRootAuthorizationPolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthorizationPolicy collection
func (r *PolicyRootAuthorizationPolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthorizationPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthorizationPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthorizationPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthorizationPolicy collection, max N pages
func (r *PolicyRootAuthorizationPolicyCollectionRequest) GetN(ctx context.Context, n int) ([]AuthorizationPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthorizationPolicy collection
func (r *PolicyRootAuthorizationPolicyCollectionRequest) Get(ctx context.Context) ([]AuthorizationPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthorizationPolicy collection
func (r *PolicyRootAuthorizationPolicyCollectionRequest) Add(ctx context.Context, reqObj *AuthorizationPolicy) (resObj *AuthorizationPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// B2cAuthenticationMethodsPolicy is navigation property rn
func (b *PolicyRootRequestBuilder) B2cAuthenticationMethodsPolicy() *B2cAuthenticationMethodsPolicyRequestBuilder {
	bb := &B2cAuthenticationMethodsPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/b2cAuthenticationMethodsPolicy"
	return bb
}

// ClaimsMappingPolicies returns request builder for ClaimsMappingPolicy collection
func (b *PolicyRootRequestBuilder) ClaimsMappingPolicies() *PolicyRootClaimsMappingPoliciesCollectionRequestBuilder {
	bb := &PolicyRootClaimsMappingPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/claimsMappingPolicies"
	return bb
}

// PolicyRootClaimsMappingPoliciesCollectionRequestBuilder is request builder for ClaimsMappingPolicy collection rcn
type PolicyRootClaimsMappingPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ClaimsMappingPolicy collection
func (b *PolicyRootClaimsMappingPoliciesCollectionRequestBuilder) Request() *PolicyRootClaimsMappingPoliciesCollectionRequest {
	return &PolicyRootClaimsMappingPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ClaimsMappingPolicy item
func (b *PolicyRootClaimsMappingPoliciesCollectionRequestBuilder) ID(id string) *ClaimsMappingPolicyRequestBuilder {
	bb := &ClaimsMappingPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootClaimsMappingPoliciesCollectionRequest is request for ClaimsMappingPolicy collection
type PolicyRootClaimsMappingPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ClaimsMappingPolicy collection
func (r *PolicyRootClaimsMappingPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ClaimsMappingPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ClaimsMappingPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ClaimsMappingPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ClaimsMappingPolicy collection, max N pages
func (r *PolicyRootClaimsMappingPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]ClaimsMappingPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ClaimsMappingPolicy collection
func (r *PolicyRootClaimsMappingPoliciesCollectionRequest) Get(ctx context.Context) ([]ClaimsMappingPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ClaimsMappingPolicy collection
func (r *PolicyRootClaimsMappingPoliciesCollectionRequest) Add(ctx context.Context, reqObj *ClaimsMappingPolicy) (resObj *ClaimsMappingPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ConditionalAccessPolicies returns request builder for ConditionalAccessPolicy collection
func (b *PolicyRootRequestBuilder) ConditionalAccessPolicies() *PolicyRootConditionalAccessPoliciesCollectionRequestBuilder {
	bb := &PolicyRootConditionalAccessPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/conditionalAccessPolicies"
	return bb
}

// PolicyRootConditionalAccessPoliciesCollectionRequestBuilder is request builder for ConditionalAccessPolicy collection rcn
type PolicyRootConditionalAccessPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ConditionalAccessPolicy collection
func (b *PolicyRootConditionalAccessPoliciesCollectionRequestBuilder) Request() *PolicyRootConditionalAccessPoliciesCollectionRequest {
	return &PolicyRootConditionalAccessPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ConditionalAccessPolicy item
func (b *PolicyRootConditionalAccessPoliciesCollectionRequestBuilder) ID(id string) *ConditionalAccessPolicyRequestBuilder {
	bb := &ConditionalAccessPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootConditionalAccessPoliciesCollectionRequest is request for ConditionalAccessPolicy collection
type PolicyRootConditionalAccessPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ConditionalAccessPolicy collection
func (r *PolicyRootConditionalAccessPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ConditionalAccessPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ConditionalAccessPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ConditionalAccessPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ConditionalAccessPolicy collection, max N pages
func (r *PolicyRootConditionalAccessPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]ConditionalAccessPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ConditionalAccessPolicy collection
func (r *PolicyRootConditionalAccessPoliciesCollectionRequest) Get(ctx context.Context) ([]ConditionalAccessPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ConditionalAccessPolicy collection
func (r *PolicyRootConditionalAccessPoliciesCollectionRequest) Add(ctx context.Context, reqObj *ConditionalAccessPolicy) (resObj *ConditionalAccessPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CrossTenantAccessPolicy is navigation property rn
func (b *PolicyRootRequestBuilder) CrossTenantAccessPolicy() *CrossTenantAccessPolicyRequestBuilder {
	bb := &CrossTenantAccessPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/crossTenantAccessPolicy"
	return bb
}

// DefaultAppManagementPolicy is navigation property rn
func (b *PolicyRootRequestBuilder) DefaultAppManagementPolicy() *TenantAppManagementPolicyRequestBuilder {
	bb := &TenantAppManagementPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/defaultAppManagementPolicy"
	return bb
}

// DeviceRegistrationPolicy is navigation property rn
func (b *PolicyRootRequestBuilder) DeviceRegistrationPolicy() *DeviceRegistrationPolicyRequestBuilder {
	bb := &DeviceRegistrationPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceRegistrationPolicy"
	return bb
}

// DirectoryRoleAccessReviewPolicy is navigation property rn
func (b *PolicyRootRequestBuilder) DirectoryRoleAccessReviewPolicy() *DirectoryRoleAccessReviewPolicyRequestBuilder {
	bb := &DirectoryRoleAccessReviewPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/directoryRoleAccessReviewPolicy"
	return bb
}

// ExternalIdentitiesPolicy is navigation property rn
func (b *PolicyRootRequestBuilder) ExternalIdentitiesPolicy() *ExternalIdentitiesPolicyRequestBuilder {
	bb := &ExternalIdentitiesPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/externalIdentitiesPolicy"
	return bb
}

// FeatureRolloutPolicies returns request builder for FeatureRolloutPolicy collection
func (b *PolicyRootRequestBuilder) FeatureRolloutPolicies() *PolicyRootFeatureRolloutPoliciesCollectionRequestBuilder {
	bb := &PolicyRootFeatureRolloutPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/featureRolloutPolicies"
	return bb
}

// PolicyRootFeatureRolloutPoliciesCollectionRequestBuilder is request builder for FeatureRolloutPolicy collection rcn
type PolicyRootFeatureRolloutPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for FeatureRolloutPolicy collection
func (b *PolicyRootFeatureRolloutPoliciesCollectionRequestBuilder) Request() *PolicyRootFeatureRolloutPoliciesCollectionRequest {
	return &PolicyRootFeatureRolloutPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for FeatureRolloutPolicy item
func (b *PolicyRootFeatureRolloutPoliciesCollectionRequestBuilder) ID(id string) *FeatureRolloutPolicyRequestBuilder {
	bb := &FeatureRolloutPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootFeatureRolloutPoliciesCollectionRequest is request for FeatureRolloutPolicy collection
type PolicyRootFeatureRolloutPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for FeatureRolloutPolicy collection
func (r *PolicyRootFeatureRolloutPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]FeatureRolloutPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []FeatureRolloutPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []FeatureRolloutPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for FeatureRolloutPolicy collection, max N pages
func (r *PolicyRootFeatureRolloutPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]FeatureRolloutPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for FeatureRolloutPolicy collection
func (r *PolicyRootFeatureRolloutPoliciesCollectionRequest) Get(ctx context.Context) ([]FeatureRolloutPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for FeatureRolloutPolicy collection
func (r *PolicyRootFeatureRolloutPoliciesCollectionRequest) Add(ctx context.Context, reqObj *FeatureRolloutPolicy) (resObj *FeatureRolloutPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// HomeRealmDiscoveryPolicies returns request builder for HomeRealmDiscoveryPolicy collection
func (b *PolicyRootRequestBuilder) HomeRealmDiscoveryPolicies() *PolicyRootHomeRealmDiscoveryPoliciesCollectionRequestBuilder {
	bb := &PolicyRootHomeRealmDiscoveryPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/homeRealmDiscoveryPolicies"
	return bb
}

// PolicyRootHomeRealmDiscoveryPoliciesCollectionRequestBuilder is request builder for HomeRealmDiscoveryPolicy collection rcn
type PolicyRootHomeRealmDiscoveryPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for HomeRealmDiscoveryPolicy collection
func (b *PolicyRootHomeRealmDiscoveryPoliciesCollectionRequestBuilder) Request() *PolicyRootHomeRealmDiscoveryPoliciesCollectionRequest {
	return &PolicyRootHomeRealmDiscoveryPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for HomeRealmDiscoveryPolicy item
func (b *PolicyRootHomeRealmDiscoveryPoliciesCollectionRequestBuilder) ID(id string) *HomeRealmDiscoveryPolicyRequestBuilder {
	bb := &HomeRealmDiscoveryPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootHomeRealmDiscoveryPoliciesCollectionRequest is request for HomeRealmDiscoveryPolicy collection
type PolicyRootHomeRealmDiscoveryPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for HomeRealmDiscoveryPolicy collection
func (r *PolicyRootHomeRealmDiscoveryPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]HomeRealmDiscoveryPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []HomeRealmDiscoveryPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []HomeRealmDiscoveryPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for HomeRealmDiscoveryPolicy collection, max N pages
func (r *PolicyRootHomeRealmDiscoveryPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]HomeRealmDiscoveryPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for HomeRealmDiscoveryPolicy collection
func (r *PolicyRootHomeRealmDiscoveryPoliciesCollectionRequest) Get(ctx context.Context) ([]HomeRealmDiscoveryPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for HomeRealmDiscoveryPolicy collection
func (r *PolicyRootHomeRealmDiscoveryPoliciesCollectionRequest) Add(ctx context.Context, reqObj *HomeRealmDiscoveryPolicy) (resObj *HomeRealmDiscoveryPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IdentitySecurityDefaultsEnforcementPolicy is navigation property rn
func (b *PolicyRootRequestBuilder) IdentitySecurityDefaultsEnforcementPolicy() *IdentitySecurityDefaultsEnforcementPolicyRequestBuilder {
	bb := &IdentitySecurityDefaultsEnforcementPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identitySecurityDefaultsEnforcementPolicy"
	return bb
}

// MobileAppManagementPolicies returns request builder for MobilityManagementPolicy collection
func (b *PolicyRootRequestBuilder) MobileAppManagementPolicies() *PolicyRootMobileAppManagementPoliciesCollectionRequestBuilder {
	bb := &PolicyRootMobileAppManagementPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/mobileAppManagementPolicies"
	return bb
}

// PolicyRootMobileAppManagementPoliciesCollectionRequestBuilder is request builder for MobilityManagementPolicy collection rcn
type PolicyRootMobileAppManagementPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MobilityManagementPolicy collection
func (b *PolicyRootMobileAppManagementPoliciesCollectionRequestBuilder) Request() *PolicyRootMobileAppManagementPoliciesCollectionRequest {
	return &PolicyRootMobileAppManagementPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MobilityManagementPolicy item
func (b *PolicyRootMobileAppManagementPoliciesCollectionRequestBuilder) ID(id string) *MobilityManagementPolicyRequestBuilder {
	bb := &MobilityManagementPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootMobileAppManagementPoliciesCollectionRequest is request for MobilityManagementPolicy collection
type PolicyRootMobileAppManagementPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MobilityManagementPolicy collection
func (r *PolicyRootMobileAppManagementPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MobilityManagementPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MobilityManagementPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MobilityManagementPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MobilityManagementPolicy collection, max N pages
func (r *PolicyRootMobileAppManagementPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]MobilityManagementPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MobilityManagementPolicy collection
func (r *PolicyRootMobileAppManagementPoliciesCollectionRequest) Get(ctx context.Context) ([]MobilityManagementPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MobilityManagementPolicy collection
func (r *PolicyRootMobileAppManagementPoliciesCollectionRequest) Add(ctx context.Context, reqObj *MobilityManagementPolicy) (resObj *MobilityManagementPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MobileDeviceManagementPolicies returns request builder for MobilityManagementPolicy collection
func (b *PolicyRootRequestBuilder) MobileDeviceManagementPolicies() *PolicyRootMobileDeviceManagementPoliciesCollectionRequestBuilder {
	bb := &PolicyRootMobileDeviceManagementPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/mobileDeviceManagementPolicies"
	return bb
}

// PolicyRootMobileDeviceManagementPoliciesCollectionRequestBuilder is request builder for MobilityManagementPolicy collection rcn
type PolicyRootMobileDeviceManagementPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MobilityManagementPolicy collection
func (b *PolicyRootMobileDeviceManagementPoliciesCollectionRequestBuilder) Request() *PolicyRootMobileDeviceManagementPoliciesCollectionRequest {
	return &PolicyRootMobileDeviceManagementPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MobilityManagementPolicy item
func (b *PolicyRootMobileDeviceManagementPoliciesCollectionRequestBuilder) ID(id string) *MobilityManagementPolicyRequestBuilder {
	bb := &MobilityManagementPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootMobileDeviceManagementPoliciesCollectionRequest is request for MobilityManagementPolicy collection
type PolicyRootMobileDeviceManagementPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MobilityManagementPolicy collection
func (r *PolicyRootMobileDeviceManagementPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MobilityManagementPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MobilityManagementPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MobilityManagementPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MobilityManagementPolicy collection, max N pages
func (r *PolicyRootMobileDeviceManagementPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]MobilityManagementPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MobilityManagementPolicy collection
func (r *PolicyRootMobileDeviceManagementPoliciesCollectionRequest) Get(ctx context.Context) ([]MobilityManagementPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MobilityManagementPolicy collection
func (r *PolicyRootMobileDeviceManagementPoliciesCollectionRequest) Add(ctx context.Context, reqObj *MobilityManagementPolicy) (resObj *MobilityManagementPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// PermissionGrantPolicies returns request builder for PermissionGrantPolicy collection
func (b *PolicyRootRequestBuilder) PermissionGrantPolicies() *PolicyRootPermissionGrantPoliciesCollectionRequestBuilder {
	bb := &PolicyRootPermissionGrantPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/permissionGrantPolicies"
	return bb
}

// PolicyRootPermissionGrantPoliciesCollectionRequestBuilder is request builder for PermissionGrantPolicy collection rcn
type PolicyRootPermissionGrantPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PermissionGrantPolicy collection
func (b *PolicyRootPermissionGrantPoliciesCollectionRequestBuilder) Request() *PolicyRootPermissionGrantPoliciesCollectionRequest {
	return &PolicyRootPermissionGrantPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PermissionGrantPolicy item
func (b *PolicyRootPermissionGrantPoliciesCollectionRequestBuilder) ID(id string) *PermissionGrantPolicyRequestBuilder {
	bb := &PermissionGrantPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootPermissionGrantPoliciesCollectionRequest is request for PermissionGrantPolicy collection
type PolicyRootPermissionGrantPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PermissionGrantPolicy collection
func (r *PolicyRootPermissionGrantPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PermissionGrantPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PermissionGrantPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PermissionGrantPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PermissionGrantPolicy collection, max N pages
func (r *PolicyRootPermissionGrantPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]PermissionGrantPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PermissionGrantPolicy collection
func (r *PolicyRootPermissionGrantPoliciesCollectionRequest) Get(ctx context.Context) ([]PermissionGrantPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PermissionGrantPolicy collection
func (r *PolicyRootPermissionGrantPoliciesCollectionRequest) Add(ctx context.Context, reqObj *PermissionGrantPolicy) (resObj *PermissionGrantPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleManagementPolicies returns request builder for UnifiedRoleManagementPolicy collection
func (b *PolicyRootRequestBuilder) RoleManagementPolicies() *PolicyRootRoleManagementPoliciesCollectionRequestBuilder {
	bb := &PolicyRootRoleManagementPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleManagementPolicies"
	return bb
}

// PolicyRootRoleManagementPoliciesCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicy collection rcn
type PolicyRootRoleManagementPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicy collection
func (b *PolicyRootRoleManagementPoliciesCollectionRequestBuilder) Request() *PolicyRootRoleManagementPoliciesCollectionRequest {
	return &PolicyRootRoleManagementPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicy item
func (b *PolicyRootRoleManagementPoliciesCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyRequestBuilder {
	bb := &UnifiedRoleManagementPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootRoleManagementPoliciesCollectionRequest is request for UnifiedRoleManagementPolicy collection
type PolicyRootRoleManagementPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicy collection
func (r *PolicyRootRoleManagementPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicy collection, max N pages
func (r *PolicyRootRoleManagementPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicy collection
func (r *PolicyRootRoleManagementPoliciesCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicy collection
func (r *PolicyRootRoleManagementPoliciesCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicy) (resObj *UnifiedRoleManagementPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RoleManagementPolicyAssignments returns request builder for UnifiedRoleManagementPolicyAssignment collection
func (b *PolicyRootRequestBuilder) RoleManagementPolicyAssignments() *PolicyRootRoleManagementPolicyAssignmentsCollectionRequestBuilder {
	bb := &PolicyRootRoleManagementPolicyAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleManagementPolicyAssignments"
	return bb
}

// PolicyRootRoleManagementPolicyAssignmentsCollectionRequestBuilder is request builder for UnifiedRoleManagementPolicyAssignment collection rcn
type PolicyRootRoleManagementPolicyAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UnifiedRoleManagementPolicyAssignment collection
func (b *PolicyRootRoleManagementPolicyAssignmentsCollectionRequestBuilder) Request() *PolicyRootRoleManagementPolicyAssignmentsCollectionRequest {
	return &PolicyRootRoleManagementPolicyAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UnifiedRoleManagementPolicyAssignment item
func (b *PolicyRootRoleManagementPolicyAssignmentsCollectionRequestBuilder) ID(id string) *UnifiedRoleManagementPolicyAssignmentRequestBuilder {
	bb := &UnifiedRoleManagementPolicyAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootRoleManagementPolicyAssignmentsCollectionRequest is request for UnifiedRoleManagementPolicyAssignment collection
type PolicyRootRoleManagementPolicyAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UnifiedRoleManagementPolicyAssignment collection
func (r *PolicyRootRoleManagementPolicyAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UnifiedRoleManagementPolicyAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UnifiedRoleManagementPolicyAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UnifiedRoleManagementPolicyAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UnifiedRoleManagementPolicyAssignment collection, max N pages
func (r *PolicyRootRoleManagementPolicyAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]UnifiedRoleManagementPolicyAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UnifiedRoleManagementPolicyAssignment collection
func (r *PolicyRootRoleManagementPolicyAssignmentsCollectionRequest) Get(ctx context.Context) ([]UnifiedRoleManagementPolicyAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UnifiedRoleManagementPolicyAssignment collection
func (r *PolicyRootRoleManagementPolicyAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *UnifiedRoleManagementPolicyAssignment) (resObj *UnifiedRoleManagementPolicyAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ServicePrincipalCreationPolicies returns request builder for ServicePrincipalCreationPolicy collection
func (b *PolicyRootRequestBuilder) ServicePrincipalCreationPolicies() *PolicyRootServicePrincipalCreationPoliciesCollectionRequestBuilder {
	bb := &PolicyRootServicePrincipalCreationPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/servicePrincipalCreationPolicies"
	return bb
}

// PolicyRootServicePrincipalCreationPoliciesCollectionRequestBuilder is request builder for ServicePrincipalCreationPolicy collection rcn
type PolicyRootServicePrincipalCreationPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ServicePrincipalCreationPolicy collection
func (b *PolicyRootServicePrincipalCreationPoliciesCollectionRequestBuilder) Request() *PolicyRootServicePrincipalCreationPoliciesCollectionRequest {
	return &PolicyRootServicePrincipalCreationPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ServicePrincipalCreationPolicy item
func (b *PolicyRootServicePrincipalCreationPoliciesCollectionRequestBuilder) ID(id string) *ServicePrincipalCreationPolicyRequestBuilder {
	bb := &ServicePrincipalCreationPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootServicePrincipalCreationPoliciesCollectionRequest is request for ServicePrincipalCreationPolicy collection
type PolicyRootServicePrincipalCreationPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ServicePrincipalCreationPolicy collection
func (r *PolicyRootServicePrincipalCreationPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ServicePrincipalCreationPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ServicePrincipalCreationPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ServicePrincipalCreationPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ServicePrincipalCreationPolicy collection, max N pages
func (r *PolicyRootServicePrincipalCreationPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]ServicePrincipalCreationPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ServicePrincipalCreationPolicy collection
func (r *PolicyRootServicePrincipalCreationPoliciesCollectionRequest) Get(ctx context.Context) ([]ServicePrincipalCreationPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ServicePrincipalCreationPolicy collection
func (r *PolicyRootServicePrincipalCreationPoliciesCollectionRequest) Add(ctx context.Context, reqObj *ServicePrincipalCreationPolicy) (resObj *ServicePrincipalCreationPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TokenIssuancePolicies returns request builder for TokenIssuancePolicy collection
func (b *PolicyRootRequestBuilder) TokenIssuancePolicies() *PolicyRootTokenIssuancePoliciesCollectionRequestBuilder {
	bb := &PolicyRootTokenIssuancePoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tokenIssuancePolicies"
	return bb
}

// PolicyRootTokenIssuancePoliciesCollectionRequestBuilder is request builder for TokenIssuancePolicy collection rcn
type PolicyRootTokenIssuancePoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TokenIssuancePolicy collection
func (b *PolicyRootTokenIssuancePoliciesCollectionRequestBuilder) Request() *PolicyRootTokenIssuancePoliciesCollectionRequest {
	return &PolicyRootTokenIssuancePoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TokenIssuancePolicy item
func (b *PolicyRootTokenIssuancePoliciesCollectionRequestBuilder) ID(id string) *TokenIssuancePolicyRequestBuilder {
	bb := &TokenIssuancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootTokenIssuancePoliciesCollectionRequest is request for TokenIssuancePolicy collection
type PolicyRootTokenIssuancePoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TokenIssuancePolicy collection
func (r *PolicyRootTokenIssuancePoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TokenIssuancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TokenIssuancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TokenIssuancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TokenIssuancePolicy collection, max N pages
func (r *PolicyRootTokenIssuancePoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]TokenIssuancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TokenIssuancePolicy collection
func (r *PolicyRootTokenIssuancePoliciesCollectionRequest) Get(ctx context.Context) ([]TokenIssuancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TokenIssuancePolicy collection
func (r *PolicyRootTokenIssuancePoliciesCollectionRequest) Add(ctx context.Context, reqObj *TokenIssuancePolicy) (resObj *TokenIssuancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TokenLifetimePolicies returns request builder for TokenLifetimePolicy collection
func (b *PolicyRootRequestBuilder) TokenLifetimePolicies() *PolicyRootTokenLifetimePoliciesCollectionRequestBuilder {
	bb := &PolicyRootTokenLifetimePoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tokenLifetimePolicies"
	return bb
}

// PolicyRootTokenLifetimePoliciesCollectionRequestBuilder is request builder for TokenLifetimePolicy collection rcn
type PolicyRootTokenLifetimePoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TokenLifetimePolicy collection
func (b *PolicyRootTokenLifetimePoliciesCollectionRequestBuilder) Request() *PolicyRootTokenLifetimePoliciesCollectionRequest {
	return &PolicyRootTokenLifetimePoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TokenLifetimePolicy item
func (b *PolicyRootTokenLifetimePoliciesCollectionRequestBuilder) ID(id string) *TokenLifetimePolicyRequestBuilder {
	bb := &TokenLifetimePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicyRootTokenLifetimePoliciesCollectionRequest is request for TokenLifetimePolicy collection
type PolicyRootTokenLifetimePoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for TokenLifetimePolicy collection
func (r *PolicyRootTokenLifetimePoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]TokenLifetimePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TokenLifetimePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TokenLifetimePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for TokenLifetimePolicy collection, max N pages
func (r *PolicyRootTokenLifetimePoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]TokenLifetimePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for TokenLifetimePolicy collection
func (r *PolicyRootTokenLifetimePoliciesCollectionRequest) Get(ctx context.Context) ([]TokenLifetimePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for TokenLifetimePolicy collection
func (r *PolicyRootTokenLifetimePoliciesCollectionRequest) Add(ctx context.Context, reqObj *TokenLifetimePolicy) (resObj *TokenLifetimePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Assignments returns request builder for PolicySetAssignment collection
func (b *PolicySetRequestBuilder) Assignments() *PolicySetAssignmentsCollectionRequestBuilder {
	bb := &PolicySetAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// PolicySetAssignmentsCollectionRequestBuilder is request builder for PolicySetAssignment collection rcn
type PolicySetAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PolicySetAssignment collection
func (b *PolicySetAssignmentsCollectionRequestBuilder) Request() *PolicySetAssignmentsCollectionRequest {
	return &PolicySetAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PolicySetAssignment item
func (b *PolicySetAssignmentsCollectionRequestBuilder) ID(id string) *PolicySetAssignmentRequestBuilder {
	bb := &PolicySetAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetAssignmentsCollectionRequest is request for PolicySetAssignment collection
type PolicySetAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PolicySetAssignment collection
func (r *PolicySetAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PolicySetAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PolicySetAssignment
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PolicySetAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PolicySetAssignment collection, max N pages
func (r *PolicySetAssignmentsCollectionRequest) GetN(ctx context.Context, n int) ([]PolicySetAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PolicySetAssignment collection
func (r *PolicySetAssignmentsCollectionRequest) Get(ctx context.Context) ([]PolicySetAssignment, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PolicySetAssignment collection
func (r *PolicySetAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *PolicySetAssignment) (resObj *PolicySetAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Items returns request builder for PolicySetItem collection
func (b *PolicySetRequestBuilder) Items() *PolicySetItemsCollectionRequestBuilder {
	bb := &PolicySetItemsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/items"
	return bb
}

// PolicySetItemsCollectionRequestBuilder is request builder for PolicySetItem collection rcn
type PolicySetItemsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PolicySetItem collection
func (b *PolicySetItemsCollectionRequestBuilder) Request() *PolicySetItemsCollectionRequest {
	return &PolicySetItemsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PolicySetItem item
func (b *PolicySetItemsCollectionRequestBuilder) ID(id string) *PolicySetItemRequestBuilder {
	bb := &PolicySetItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetItemsCollectionRequest is request for PolicySetItem collection
type PolicySetItemsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PolicySetItem collection
func (r *PolicySetItemsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PolicySetItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PolicySetItem
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PolicySetItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PolicySetItem collection, max N pages
func (r *PolicySetItemsCollectionRequest) GetN(ctx context.Context, n int) ([]PolicySetItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PolicySetItem collection
func (r *PolicySetItemsCollectionRequest) Get(ctx context.Context) ([]PolicySetItem, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PolicySetItem collection
func (r *PolicySetItemsCollectionRequest) Add(ctx context.Context, reqObj *PolicySetItem) (resObj *PolicySetItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// PolicyBase returns request builder for PolicyBase collection
func (b *AdministrativeUnitMembersCollectionRequestBuilder) PolicyBase() *AdministrativeUnitMembersCollectionPolicyBaseCollectionRequestBuilder {
	bb := &AdministrativeUnitMembersCollectionPolicyBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AdministrativeUnitMembersCollectionPolicyBaseCollectionRequestBuilder is request builder for PolicyBase collection rcn
type AdministrativeUnitMembersCollectionPolicyBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PolicyBase collection
func (b *AdministrativeUnitMembersCollectionPolicyBaseCollectionRequestBuilder) Request() *AdministrativeUnitMembersCollectionPolicyBaseCollectionRequest {
	return &AdministrativeUnitMembersCollectionPolicyBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PolicyBase item
func (b *AdministrativeUnitMembersCollectionPolicyBaseCollectionRequestBuilder) ID(id string) *PolicyBaseRequestBuilder {
	bb := &PolicyBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdministrativeUnitMembersCollectionPolicyBaseCollectionRequest is request for PolicyBase collection
type AdministrativeUnitMembersCollectionPolicyBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PolicyBase collection
func (r *AdministrativeUnitMembersCollectionPolicyBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PolicyBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PolicyBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PolicyBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PolicyBase collection, max N pages
func (r *AdministrativeUnitMembersCollectionPolicyBaseCollectionRequest) GetN(ctx context.Context, n int) ([]PolicyBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PolicyBase collection
func (r *AdministrativeUnitMembersCollectionPolicyBaseCollectionRequest) Get(ctx context.Context) ([]PolicyBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PolicyBase collection
func (r *AdministrativeUnitMembersCollectionPolicyBaseCollectionRequest) Add(ctx context.Context, reqObj *PolicyBase) (resObj *PolicyBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *PolicySetRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *PolicySetAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
