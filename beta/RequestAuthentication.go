// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// AuthenticationRequestBuilder is request builder for Authentication
type AuthenticationRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationRequest
func (b *AuthenticationRequestBuilder) Request() *AuthenticationRequest {
	return &AuthenticationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationRequest is request for Authentication
type AuthenticationRequest struct{ BaseRequest }

// Get performs GET request for Authentication
func (r *AuthenticationRequest) Get(ctx context.Context) (resObj *Authentication, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Authentication
func (r *AuthenticationRequest) Update(ctx context.Context, reqObj *Authentication) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Authentication
func (r *AuthenticationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationAppDeviceDetailsRequestBuilder is request builder for AuthenticationAppDeviceDetails
type AuthenticationAppDeviceDetailsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationAppDeviceDetailsRequest
func (b *AuthenticationAppDeviceDetailsRequestBuilder) Request() *AuthenticationAppDeviceDetailsRequest {
	return &AuthenticationAppDeviceDetailsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationAppDeviceDetailsRequest is request for AuthenticationAppDeviceDetails
type AuthenticationAppDeviceDetailsRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationAppDeviceDetails
func (r *AuthenticationAppDeviceDetailsRequest) Get(ctx context.Context) (resObj *AuthenticationAppDeviceDetails, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationAppDeviceDetails
func (r *AuthenticationAppDeviceDetailsRequest) Update(ctx context.Context, reqObj *AuthenticationAppDeviceDetails) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationAppDeviceDetails
func (r *AuthenticationAppDeviceDetailsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationAppPolicyDetailsRequestBuilder is request builder for AuthenticationAppPolicyDetails
type AuthenticationAppPolicyDetailsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationAppPolicyDetailsRequest
func (b *AuthenticationAppPolicyDetailsRequestBuilder) Request() *AuthenticationAppPolicyDetailsRequest {
	return &AuthenticationAppPolicyDetailsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationAppPolicyDetailsRequest is request for AuthenticationAppPolicyDetails
type AuthenticationAppPolicyDetailsRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationAppPolicyDetails
func (r *AuthenticationAppPolicyDetailsRequest) Get(ctx context.Context) (resObj *AuthenticationAppPolicyDetails, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationAppPolicyDetails
func (r *AuthenticationAppPolicyDetailsRequest) Update(ctx context.Context, reqObj *AuthenticationAppPolicyDetails) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationAppPolicyDetails
func (r *AuthenticationAppPolicyDetailsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationCombinationConfigurationRequestBuilder is request builder for AuthenticationCombinationConfiguration
type AuthenticationCombinationConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationCombinationConfigurationRequest
func (b *AuthenticationCombinationConfigurationRequestBuilder) Request() *AuthenticationCombinationConfigurationRequest {
	return &AuthenticationCombinationConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationCombinationConfigurationRequest is request for AuthenticationCombinationConfiguration
type AuthenticationCombinationConfigurationRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationCombinationConfiguration
func (r *AuthenticationCombinationConfigurationRequest) Get(ctx context.Context) (resObj *AuthenticationCombinationConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationCombinationConfiguration
func (r *AuthenticationCombinationConfigurationRequest) Update(ctx context.Context, reqObj *AuthenticationCombinationConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationCombinationConfiguration
func (r *AuthenticationCombinationConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationConditionApplicationRequestBuilder is request builder for AuthenticationConditionApplication
type AuthenticationConditionApplicationRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationConditionApplicationRequest
func (b *AuthenticationConditionApplicationRequestBuilder) Request() *AuthenticationConditionApplicationRequest {
	return &AuthenticationConditionApplicationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationConditionApplicationRequest is request for AuthenticationConditionApplication
type AuthenticationConditionApplicationRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationConditionApplication
func (r *AuthenticationConditionApplicationRequest) Get(ctx context.Context) (resObj *AuthenticationConditionApplication, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationConditionApplication
func (r *AuthenticationConditionApplicationRequest) Update(ctx context.Context, reqObj *AuthenticationConditionApplication) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationConditionApplication
func (r *AuthenticationConditionApplicationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationConditionsRequestBuilder is request builder for AuthenticationConditions
type AuthenticationConditionsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationConditionsRequest
func (b *AuthenticationConditionsRequestBuilder) Request() *AuthenticationConditionsRequest {
	return &AuthenticationConditionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationConditionsRequest is request for AuthenticationConditions
type AuthenticationConditionsRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationConditions
func (r *AuthenticationConditionsRequest) Get(ctx context.Context) (resObj *AuthenticationConditions, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationConditions
func (r *AuthenticationConditionsRequest) Update(ctx context.Context, reqObj *AuthenticationConditions) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationConditions
func (r *AuthenticationConditionsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationConditionsApplicationsRequestBuilder is request builder for AuthenticationConditionsApplications
type AuthenticationConditionsApplicationsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationConditionsApplicationsRequest
func (b *AuthenticationConditionsApplicationsRequestBuilder) Request() *AuthenticationConditionsApplicationsRequest {
	return &AuthenticationConditionsApplicationsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationConditionsApplicationsRequest is request for AuthenticationConditionsApplications
type AuthenticationConditionsApplicationsRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationConditionsApplications
func (r *AuthenticationConditionsApplicationsRequest) Get(ctx context.Context) (resObj *AuthenticationConditionsApplications, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationConditionsApplications
func (r *AuthenticationConditionsApplicationsRequest) Update(ctx context.Context, reqObj *AuthenticationConditionsApplications) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationConditionsApplications
func (r *AuthenticationConditionsApplicationsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationConfigurationValidationRequestBuilder is request builder for AuthenticationConfigurationValidation
type AuthenticationConfigurationValidationRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationConfigurationValidationRequest
func (b *AuthenticationConfigurationValidationRequestBuilder) Request() *AuthenticationConfigurationValidationRequest {
	return &AuthenticationConfigurationValidationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationConfigurationValidationRequest is request for AuthenticationConfigurationValidation
type AuthenticationConfigurationValidationRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationConfigurationValidation
func (r *AuthenticationConfigurationValidationRequest) Get(ctx context.Context) (resObj *AuthenticationConfigurationValidation, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationConfigurationValidation
func (r *AuthenticationConfigurationValidationRequest) Update(ctx context.Context, reqObj *AuthenticationConfigurationValidation) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationConfigurationValidation
func (r *AuthenticationConfigurationValidationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationContextRequestBuilder is request builder for AuthenticationContext
type AuthenticationContextRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationContextRequest
func (b *AuthenticationContextRequestBuilder) Request() *AuthenticationContextRequest {
	return &AuthenticationContextRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationContextRequest is request for AuthenticationContext
type AuthenticationContextRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationContext
func (r *AuthenticationContextRequest) Get(ctx context.Context) (resObj *AuthenticationContext, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationContext
func (r *AuthenticationContextRequest) Update(ctx context.Context, reqObj *AuthenticationContext) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationContext
func (r *AuthenticationContextRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationContextClassReferenceRequestBuilder is request builder for AuthenticationContextClassReference
type AuthenticationContextClassReferenceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationContextClassReferenceRequest
func (b *AuthenticationContextClassReferenceRequestBuilder) Request() *AuthenticationContextClassReferenceRequest {
	return &AuthenticationContextClassReferenceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationContextClassReferenceRequest is request for AuthenticationContextClassReference
type AuthenticationContextClassReferenceRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationContextClassReference
func (r *AuthenticationContextClassReferenceRequest) Get(ctx context.Context) (resObj *AuthenticationContextClassReference, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationContextClassReference
func (r *AuthenticationContextClassReferenceRequest) Update(ctx context.Context, reqObj *AuthenticationContextClassReference) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationContextClassReference
func (r *AuthenticationContextClassReferenceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationDetailRequestBuilder is request builder for AuthenticationDetail
type AuthenticationDetailRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationDetailRequest
func (b *AuthenticationDetailRequestBuilder) Request() *AuthenticationDetailRequest {
	return &AuthenticationDetailRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationDetailRequest is request for AuthenticationDetail
type AuthenticationDetailRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationDetail
func (r *AuthenticationDetailRequest) Get(ctx context.Context) (resObj *AuthenticationDetail, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationDetail
func (r *AuthenticationDetailRequest) Update(ctx context.Context, reqObj *AuthenticationDetail) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationDetail
func (r *AuthenticationDetailRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationEventHandlerResultRequestBuilder is request builder for AuthenticationEventHandlerResult
type AuthenticationEventHandlerResultRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationEventHandlerResultRequest
func (b *AuthenticationEventHandlerResultRequestBuilder) Request() *AuthenticationEventHandlerResultRequest {
	return &AuthenticationEventHandlerResultRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationEventHandlerResultRequest is request for AuthenticationEventHandlerResult
type AuthenticationEventHandlerResultRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationEventHandlerResult
func (r *AuthenticationEventHandlerResultRequest) Get(ctx context.Context) (resObj *AuthenticationEventHandlerResult, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationEventHandlerResult
func (r *AuthenticationEventHandlerResultRequest) Update(ctx context.Context, reqObj *AuthenticationEventHandlerResult) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationEventHandlerResult
func (r *AuthenticationEventHandlerResultRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationEventListenerRequestBuilder is request builder for AuthenticationEventListener
type AuthenticationEventListenerRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationEventListenerRequest
func (b *AuthenticationEventListenerRequestBuilder) Request() *AuthenticationEventListenerRequest {
	return &AuthenticationEventListenerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationEventListenerRequest is request for AuthenticationEventListener
type AuthenticationEventListenerRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationEventListener
func (r *AuthenticationEventListenerRequest) Get(ctx context.Context) (resObj *AuthenticationEventListener, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationEventListener
func (r *AuthenticationEventListenerRequest) Update(ctx context.Context, reqObj *AuthenticationEventListener) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationEventListener
func (r *AuthenticationEventListenerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationEventsPolicyRequestBuilder is request builder for AuthenticationEventsPolicy
type AuthenticationEventsPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationEventsPolicyRequest
func (b *AuthenticationEventsPolicyRequestBuilder) Request() *AuthenticationEventsPolicyRequest {
	return &AuthenticationEventsPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationEventsPolicyRequest is request for AuthenticationEventsPolicy
type AuthenticationEventsPolicyRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationEventsPolicy
func (r *AuthenticationEventsPolicyRequest) Get(ctx context.Context) (resObj *AuthenticationEventsPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationEventsPolicy
func (r *AuthenticationEventsPolicyRequest) Update(ctx context.Context, reqObj *AuthenticationEventsPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationEventsPolicy
func (r *AuthenticationEventsPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationFlowsPolicyRequestBuilder is request builder for AuthenticationFlowsPolicy
type AuthenticationFlowsPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationFlowsPolicyRequest
func (b *AuthenticationFlowsPolicyRequestBuilder) Request() *AuthenticationFlowsPolicyRequest {
	return &AuthenticationFlowsPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationFlowsPolicyRequest is request for AuthenticationFlowsPolicy
type AuthenticationFlowsPolicyRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationFlowsPolicy
func (r *AuthenticationFlowsPolicyRequest) Get(ctx context.Context) (resObj *AuthenticationFlowsPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationFlowsPolicy
func (r *AuthenticationFlowsPolicyRequest) Update(ctx context.Context, reqObj *AuthenticationFlowsPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationFlowsPolicy
func (r *AuthenticationFlowsPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationListenerRequestBuilder is request builder for AuthenticationListener
type AuthenticationListenerRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationListenerRequest
func (b *AuthenticationListenerRequestBuilder) Request() *AuthenticationListenerRequest {
	return &AuthenticationListenerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationListenerRequest is request for AuthenticationListener
type AuthenticationListenerRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationListener
func (r *AuthenticationListenerRequest) Get(ctx context.Context) (resObj *AuthenticationListener, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationListener
func (r *AuthenticationListenerRequest) Update(ctx context.Context, reqObj *AuthenticationListener) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationListener
func (r *AuthenticationListenerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationMethodRequestBuilder is request builder for AuthenticationMethod
type AuthenticationMethodRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationMethodRequest
func (b *AuthenticationMethodRequestBuilder) Request() *AuthenticationMethodRequest {
	return &AuthenticationMethodRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationMethodRequest is request for AuthenticationMethod
type AuthenticationMethodRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationMethod
func (r *AuthenticationMethodRequest) Get(ctx context.Context) (resObj *AuthenticationMethod, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationMethod
func (r *AuthenticationMethodRequest) Update(ctx context.Context, reqObj *AuthenticationMethod) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationMethod
func (r *AuthenticationMethodRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationMethodConfigurationRequestBuilder is request builder for AuthenticationMethodConfiguration
type AuthenticationMethodConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationMethodConfigurationRequest
func (b *AuthenticationMethodConfigurationRequestBuilder) Request() *AuthenticationMethodConfigurationRequest {
	return &AuthenticationMethodConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationMethodConfigurationRequest is request for AuthenticationMethodConfiguration
type AuthenticationMethodConfigurationRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationMethodConfiguration
func (r *AuthenticationMethodConfigurationRequest) Get(ctx context.Context) (resObj *AuthenticationMethodConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationMethodConfiguration
func (r *AuthenticationMethodConfigurationRequest) Update(ctx context.Context, reqObj *AuthenticationMethodConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationMethodConfiguration
func (r *AuthenticationMethodConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationMethodFeatureConfigurationRequestBuilder is request builder for AuthenticationMethodFeatureConfiguration
type AuthenticationMethodFeatureConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationMethodFeatureConfigurationRequest
func (b *AuthenticationMethodFeatureConfigurationRequestBuilder) Request() *AuthenticationMethodFeatureConfigurationRequest {
	return &AuthenticationMethodFeatureConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationMethodFeatureConfigurationRequest is request for AuthenticationMethodFeatureConfiguration
type AuthenticationMethodFeatureConfigurationRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationMethodFeatureConfiguration
func (r *AuthenticationMethodFeatureConfigurationRequest) Get(ctx context.Context) (resObj *AuthenticationMethodFeatureConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationMethodFeatureConfiguration
func (r *AuthenticationMethodFeatureConfigurationRequest) Update(ctx context.Context, reqObj *AuthenticationMethodFeatureConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationMethodFeatureConfiguration
func (r *AuthenticationMethodFeatureConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationMethodModeDetailRequestBuilder is request builder for AuthenticationMethodModeDetail
type AuthenticationMethodModeDetailRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationMethodModeDetailRequest
func (b *AuthenticationMethodModeDetailRequestBuilder) Request() *AuthenticationMethodModeDetailRequest {
	return &AuthenticationMethodModeDetailRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationMethodModeDetailRequest is request for AuthenticationMethodModeDetail
type AuthenticationMethodModeDetailRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationMethodModeDetail
func (r *AuthenticationMethodModeDetailRequest) Get(ctx context.Context) (resObj *AuthenticationMethodModeDetail, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationMethodModeDetail
func (r *AuthenticationMethodModeDetailRequest) Update(ctx context.Context, reqObj *AuthenticationMethodModeDetail) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationMethodModeDetail
func (r *AuthenticationMethodModeDetailRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationMethodTargetRequestBuilder is request builder for AuthenticationMethodTarget
type AuthenticationMethodTargetRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationMethodTargetRequest
func (b *AuthenticationMethodTargetRequestBuilder) Request() *AuthenticationMethodTargetRequest {
	return &AuthenticationMethodTargetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationMethodTargetRequest is request for AuthenticationMethodTarget
type AuthenticationMethodTargetRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationMethodTarget
func (r *AuthenticationMethodTargetRequest) Get(ctx context.Context) (resObj *AuthenticationMethodTarget, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationMethodTarget
func (r *AuthenticationMethodTargetRequest) Update(ctx context.Context, reqObj *AuthenticationMethodTarget) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationMethodTarget
func (r *AuthenticationMethodTargetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationMethodsPolicyRequestBuilder is request builder for AuthenticationMethodsPolicy
type AuthenticationMethodsPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationMethodsPolicyRequest
func (b *AuthenticationMethodsPolicyRequestBuilder) Request() *AuthenticationMethodsPolicyRequest {
	return &AuthenticationMethodsPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationMethodsPolicyRequest is request for AuthenticationMethodsPolicy
type AuthenticationMethodsPolicyRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationMethodsPolicy
func (r *AuthenticationMethodsPolicyRequest) Get(ctx context.Context) (resObj *AuthenticationMethodsPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationMethodsPolicy
func (r *AuthenticationMethodsPolicyRequest) Update(ctx context.Context, reqObj *AuthenticationMethodsPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationMethodsPolicy
func (r *AuthenticationMethodsPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationMethodsRegistrationCampaignRequestBuilder is request builder for AuthenticationMethodsRegistrationCampaign
type AuthenticationMethodsRegistrationCampaignRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationMethodsRegistrationCampaignRequest
func (b *AuthenticationMethodsRegistrationCampaignRequestBuilder) Request() *AuthenticationMethodsRegistrationCampaignRequest {
	return &AuthenticationMethodsRegistrationCampaignRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationMethodsRegistrationCampaignRequest is request for AuthenticationMethodsRegistrationCampaign
type AuthenticationMethodsRegistrationCampaignRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationMethodsRegistrationCampaign
func (r *AuthenticationMethodsRegistrationCampaignRequest) Get(ctx context.Context) (resObj *AuthenticationMethodsRegistrationCampaign, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationMethodsRegistrationCampaign
func (r *AuthenticationMethodsRegistrationCampaignRequest) Update(ctx context.Context, reqObj *AuthenticationMethodsRegistrationCampaign) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationMethodsRegistrationCampaign
func (r *AuthenticationMethodsRegistrationCampaignRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationMethodsRegistrationCampaignIncludeTargetRequestBuilder is request builder for AuthenticationMethodsRegistrationCampaignIncludeTarget
type AuthenticationMethodsRegistrationCampaignIncludeTargetRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationMethodsRegistrationCampaignIncludeTargetRequest
func (b *AuthenticationMethodsRegistrationCampaignIncludeTargetRequestBuilder) Request() *AuthenticationMethodsRegistrationCampaignIncludeTargetRequest {
	return &AuthenticationMethodsRegistrationCampaignIncludeTargetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationMethodsRegistrationCampaignIncludeTargetRequest is request for AuthenticationMethodsRegistrationCampaignIncludeTarget
type AuthenticationMethodsRegistrationCampaignIncludeTargetRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationMethodsRegistrationCampaignIncludeTarget
func (r *AuthenticationMethodsRegistrationCampaignIncludeTargetRequest) Get(ctx context.Context) (resObj *AuthenticationMethodsRegistrationCampaignIncludeTarget, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationMethodsRegistrationCampaignIncludeTarget
func (r *AuthenticationMethodsRegistrationCampaignIncludeTargetRequest) Update(ctx context.Context, reqObj *AuthenticationMethodsRegistrationCampaignIncludeTarget) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationMethodsRegistrationCampaignIncludeTarget
func (r *AuthenticationMethodsRegistrationCampaignIncludeTargetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationMethodsRootRequestBuilder is request builder for AuthenticationMethodsRoot
type AuthenticationMethodsRootRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationMethodsRootRequest
func (b *AuthenticationMethodsRootRequestBuilder) Request() *AuthenticationMethodsRootRequest {
	return &AuthenticationMethodsRootRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationMethodsRootRequest is request for AuthenticationMethodsRoot
type AuthenticationMethodsRootRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationMethodsRoot
func (r *AuthenticationMethodsRootRequest) Get(ctx context.Context) (resObj *AuthenticationMethodsRoot, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationMethodsRoot
func (r *AuthenticationMethodsRootRequest) Update(ctx context.Context, reqObj *AuthenticationMethodsRoot) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationMethodsRoot
func (r *AuthenticationMethodsRootRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationRequirementPolicyRequestBuilder is request builder for AuthenticationRequirementPolicy
type AuthenticationRequirementPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationRequirementPolicyRequest
func (b *AuthenticationRequirementPolicyRequestBuilder) Request() *AuthenticationRequirementPolicyRequest {
	return &AuthenticationRequirementPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationRequirementPolicyRequest is request for AuthenticationRequirementPolicy
type AuthenticationRequirementPolicyRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationRequirementPolicy
func (r *AuthenticationRequirementPolicyRequest) Get(ctx context.Context) (resObj *AuthenticationRequirementPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationRequirementPolicy
func (r *AuthenticationRequirementPolicyRequest) Update(ctx context.Context, reqObj *AuthenticationRequirementPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationRequirementPolicy
func (r *AuthenticationRequirementPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationSourceFilterRequestBuilder is request builder for AuthenticationSourceFilter
type AuthenticationSourceFilterRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationSourceFilterRequest
func (b *AuthenticationSourceFilterRequestBuilder) Request() *AuthenticationSourceFilterRequest {
	return &AuthenticationSourceFilterRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationSourceFilterRequest is request for AuthenticationSourceFilter
type AuthenticationSourceFilterRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationSourceFilter
func (r *AuthenticationSourceFilterRequest) Get(ctx context.Context) (resObj *AuthenticationSourceFilter, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationSourceFilter
func (r *AuthenticationSourceFilterRequest) Update(ctx context.Context, reqObj *AuthenticationSourceFilter) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationSourceFilter
func (r *AuthenticationSourceFilterRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationStrengthRequestBuilder is request builder for AuthenticationStrength
type AuthenticationStrengthRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationStrengthRequest
func (b *AuthenticationStrengthRequestBuilder) Request() *AuthenticationStrengthRequest {
	return &AuthenticationStrengthRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationStrengthRequest is request for AuthenticationStrength
type AuthenticationStrengthRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationStrength
func (r *AuthenticationStrengthRequest) Get(ctx context.Context) (resObj *AuthenticationStrength, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationStrength
func (r *AuthenticationStrengthRequest) Update(ctx context.Context, reqObj *AuthenticationStrength) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationStrength
func (r *AuthenticationStrengthRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationStrengthPolicyRequestBuilder is request builder for AuthenticationStrengthPolicy
type AuthenticationStrengthPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationStrengthPolicyRequest
func (b *AuthenticationStrengthPolicyRequestBuilder) Request() *AuthenticationStrengthPolicyRequest {
	return &AuthenticationStrengthPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationStrengthPolicyRequest is request for AuthenticationStrengthPolicy
type AuthenticationStrengthPolicyRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationStrengthPolicy
func (r *AuthenticationStrengthPolicyRequest) Get(ctx context.Context) (resObj *AuthenticationStrengthPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationStrengthPolicy
func (r *AuthenticationStrengthPolicyRequest) Update(ctx context.Context, reqObj *AuthenticationStrengthPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationStrengthPolicy
func (r *AuthenticationStrengthPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationStrengthRootRequestBuilder is request builder for AuthenticationStrengthRoot
type AuthenticationStrengthRootRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationStrengthRootRequest
func (b *AuthenticationStrengthRootRequestBuilder) Request() *AuthenticationStrengthRootRequest {
	return &AuthenticationStrengthRootRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationStrengthRootRequest is request for AuthenticationStrengthRoot
type AuthenticationStrengthRootRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationStrengthRoot
func (r *AuthenticationStrengthRootRequest) Get(ctx context.Context) (resObj *AuthenticationStrengthRoot, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationStrengthRoot
func (r *AuthenticationStrengthRootRequest) Update(ctx context.Context, reqObj *AuthenticationStrengthRoot) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationStrengthRoot
func (r *AuthenticationStrengthRootRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AuthenticationStrengthUsageRequestBuilder is request builder for AuthenticationStrengthUsage
type AuthenticationStrengthUsageRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuthenticationStrengthUsageRequest
func (b *AuthenticationStrengthUsageRequestBuilder) Request() *AuthenticationStrengthUsageRequest {
	return &AuthenticationStrengthUsageRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuthenticationStrengthUsageRequest is request for AuthenticationStrengthUsage
type AuthenticationStrengthUsageRequest struct{ BaseRequest }

// Get performs GET request for AuthenticationStrengthUsage
func (r *AuthenticationStrengthUsageRequest) Get(ctx context.Context) (resObj *AuthenticationStrengthUsage, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuthenticationStrengthUsage
func (r *AuthenticationStrengthUsageRequest) Update(ctx context.Context, reqObj *AuthenticationStrengthUsage) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuthenticationStrengthUsage
func (r *AuthenticationStrengthUsageRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type AuthenticationMethodDisableSmsSignInRequestBuilder struct{ BaseRequestBuilder }

// DisableSmsSignIn action undocumentedrav
func (b *AuthenticationMethodRequestBuilder) DisableSmsSignIn(reqObj *AuthenticationMethodDisableSmsSignInRequestParameter) *AuthenticationMethodDisableSmsSignInRequestBuilder {
	bb := &AuthenticationMethodDisableSmsSignInRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/DisableSmsSignIn"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AuthenticationMethodDisableSmsSignInRequest struct{ BaseRequest }

func (b *AuthenticationMethodDisableSmsSignInRequestBuilder) Request() *AuthenticationMethodDisableSmsSignInRequest {
	return &AuthenticationMethodDisableSmsSignInRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AuthenticationMethodDisableSmsSignInRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AuthenticationMethodEnableSmsSignInRequestBuilder struct{ BaseRequestBuilder }

// EnableSmsSignIn action undocumentedrav
func (b *AuthenticationMethodRequestBuilder) EnableSmsSignIn(reqObj *AuthenticationMethodEnableSmsSignInRequestParameter) *AuthenticationMethodEnableSmsSignInRequestBuilder {
	bb := &AuthenticationMethodEnableSmsSignInRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/EnableSmsSignIn"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AuthenticationMethodEnableSmsSignInRequest struct{ BaseRequest }

func (b *AuthenticationMethodEnableSmsSignInRequestBuilder) Request() *AuthenticationMethodEnableSmsSignInRequest {
	return &AuthenticationMethodEnableSmsSignInRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AuthenticationMethodEnableSmsSignInRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AuthenticationMethodResetPasswordRequestBuilder struct{ BaseRequestBuilder }

// ResetPassword action undocumentedras
func (b *AuthenticationMethodRequestBuilder) ResetPassword(reqObj *AuthenticationMethodResetPasswordRequestParameter) *AuthenticationMethodResetPasswordRequestBuilder {
	bb := &AuthenticationMethodResetPasswordRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/ResetPassword"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AuthenticationMethodResetPasswordRequest struct{ BaseRequest }

func (b *AuthenticationMethodResetPasswordRequestBuilder) Request() *AuthenticationMethodResetPasswordRequest {
	return &AuthenticationMethodResetPasswordRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AuthenticationMethodResetPasswordRequest) Post(ctx context.Context) (resObj *PasswordResetResponse, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type AuthenticationStrengthPolicyUpdateAllowedCombinationsRequestBuilder struct{ BaseRequestBuilder }

// UpdateAllowedCombinations action undocumentedras
func (b *AuthenticationStrengthPolicyRequestBuilder) UpdateAllowedCombinations(reqObj *AuthenticationStrengthPolicyUpdateAllowedCombinationsRequestParameter) *AuthenticationStrengthPolicyUpdateAllowedCombinationsRequestBuilder {
	bb := &AuthenticationStrengthPolicyUpdateAllowedCombinationsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/UpdateAllowedCombinations"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AuthenticationStrengthPolicyUpdateAllowedCombinationsRequest struct{ BaseRequest }

func (b *AuthenticationStrengthPolicyUpdateAllowedCombinationsRequestBuilder) Request() *AuthenticationStrengthPolicyUpdateAllowedCombinationsRequest {
	return &AuthenticationStrengthPolicyUpdateAllowedCombinationsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AuthenticationStrengthPolicyUpdateAllowedCombinationsRequest) Post(ctx context.Context) (resObj *UpdateAllowedCombinationsResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}
