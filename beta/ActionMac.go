// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// SingleSignOnExtensionPkinitCertificate is navigation property rn
func (b *MacOSDeviceFeaturesConfigurationRequestBuilder) SingleSignOnExtensionPkinitCertificate() *MacOSCertificateProfileBaseRequestBuilder {
	bb := &MacOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/singleSignOnExtensionPkinitCertificate"
	return bb
}

// IdentityCertificateForClientAuthentication is navigation property rn
func (b *MacOSEnterpriseWiFiConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *MacOSCertificateProfileBaseRequestBuilder {
	bb := &MacOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// RootCertificateForServerValidation is navigation property rn
func (b *MacOSEnterpriseWiFiConfigurationRequestBuilder) RootCertificateForServerValidation() *MacOSTrustedRootCertificateRequestBuilder {
	bb := &MacOSTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificateForServerValidation"
	return bb
}

// RootCertificatesForServerValidation returns request builder for MacOSTrustedRootCertificate collection
func (b *MacOSEnterpriseWiFiConfigurationRequestBuilder) RootCertificatesForServerValidation() *MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder {
	bb := &MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificatesForServerValidation"
	return bb
}

// MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder is request builder for MacOSTrustedRootCertificate collection rcn
type MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSTrustedRootCertificate collection
func (b *MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder) Request() *MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest {
	return &MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSTrustedRootCertificate item
func (b *MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequestBuilder) ID(id string) *MacOSTrustedRootCertificateRequestBuilder {
	bb := &MacOSTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest is request for MacOSTrustedRootCertificate collection
type MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSTrustedRootCertificate collection
func (r *MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSTrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSTrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSTrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSTrustedRootCertificate collection, max N pages
func (r *MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSTrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSTrustedRootCertificate collection
func (r *MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest) Get(ctx context.Context) ([]MacOSTrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSTrustedRootCertificate collection
func (r *MacOSEnterpriseWiFiConfigurationRootCertificatesForServerValidationCollectionRequest) Add(ctx context.Context, reqObj *MacOSTrustedRootCertificate) (resObj *MacOSTrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *MacOSImportedPFXCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *MacOSImportedPFXCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *MacOSPkcsCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *MacOSPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *MacOSScepCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *MacOSScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RootCertificate is navigation property rn
func (b *MacOSScepCertificateProfileRequestBuilder) RootCertificate() *MacOSTrustedRootCertificateRequestBuilder {
	bb := &MacOSTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificate"
	return bb
}

// CategorySummaries returns request builder for MacOSSoftwareUpdateCategorySummary collection
func (b *MacOSSoftwareUpdateAccountSummaryRequestBuilder) CategorySummaries() *MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequestBuilder {
	bb := &MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/categorySummaries"
	return bb
}

// MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequestBuilder is request builder for MacOSSoftwareUpdateCategorySummary collection rcn
type MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSSoftwareUpdateCategorySummary collection
func (b *MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequestBuilder) Request() *MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequest {
	return &MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSSoftwareUpdateCategorySummary item
func (b *MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequestBuilder) ID(id string) *MacOSSoftwareUpdateCategorySummaryRequestBuilder {
	bb := &MacOSSoftwareUpdateCategorySummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequest is request for MacOSSoftwareUpdateCategorySummary collection
type MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSSoftwareUpdateCategorySummary collection
func (r *MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSSoftwareUpdateCategorySummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSSoftwareUpdateCategorySummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSSoftwareUpdateCategorySummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSSoftwareUpdateCategorySummary collection, max N pages
func (r *MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSSoftwareUpdateCategorySummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSSoftwareUpdateCategorySummary collection
func (r *MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequest) Get(ctx context.Context) ([]MacOSSoftwareUpdateCategorySummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSSoftwareUpdateCategorySummary collection
func (r *MacOSSoftwareUpdateAccountSummaryCategorySummariesCollectionRequest) Add(ctx context.Context, reqObj *MacOSSoftwareUpdateCategorySummary) (resObj *MacOSSoftwareUpdateCategorySummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UpdateStateSummaries returns request builder for MacOSSoftwareUpdateStateSummary collection
func (b *MacOSSoftwareUpdateCategorySummaryRequestBuilder) UpdateStateSummaries() *MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequestBuilder {
	bb := &MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/updateStateSummaries"
	return bb
}

// MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequestBuilder is request builder for MacOSSoftwareUpdateStateSummary collection rcn
type MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSSoftwareUpdateStateSummary collection
func (b *MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequestBuilder) Request() *MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequest {
	return &MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSSoftwareUpdateStateSummary item
func (b *MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequestBuilder) ID(id string) *MacOSSoftwareUpdateStateSummaryRequestBuilder {
	bb := &MacOSSoftwareUpdateStateSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequest is request for MacOSSoftwareUpdateStateSummary collection
type MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSSoftwareUpdateStateSummary collection
func (r *MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSSoftwareUpdateStateSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSSoftwareUpdateStateSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSSoftwareUpdateStateSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSSoftwareUpdateStateSummary collection, max N pages
func (r *MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSSoftwareUpdateStateSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSSoftwareUpdateStateSummary collection
func (r *MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequest) Get(ctx context.Context) ([]MacOSSoftwareUpdateStateSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSSoftwareUpdateStateSummary collection
func (r *MacOSSoftwareUpdateCategorySummaryUpdateStateSummariesCollectionRequest) Add(ctx context.Context, reqObj *MacOSSoftwareUpdateStateSummary) (resObj *MacOSSoftwareUpdateStateSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IdentityCertificate is navigation property rn
func (b *MacOSVpnConfigurationRequestBuilder) IdentityCertificate() *MacOSCertificateProfileBaseRequestBuilder {
	bb := &MacOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}

// IdentityCertificateForClientAuthentication is navigation property rn
func (b *MacOSWiredNetworkConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *MacOSCertificateProfileBaseRequestBuilder {
	bb := &MacOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// RootCertificateForServerValidation is navigation property rn
func (b *MacOSWiredNetworkConfigurationRequestBuilder) RootCertificateForServerValidation() *MacOSTrustedRootCertificateRequestBuilder {
	bb := &MacOSTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificateForServerValidation"
	return bb
}

// AssignedLicenses returns request builder for MacOsVPPAppAssignedLicense collection
func (b *MacOsVPPAppRequestBuilder) AssignedLicenses() *MacOsVPPAppAssignedLicensesCollectionRequestBuilder {
	bb := &MacOsVPPAppAssignedLicensesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignedLicenses"
	return bb
}

// MacOsVPPAppAssignedLicensesCollectionRequestBuilder is request builder for MacOsVPPAppAssignedLicense collection rcn
type MacOsVPPAppAssignedLicensesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOsVPPAppAssignedLicense collection
func (b *MacOsVPPAppAssignedLicensesCollectionRequestBuilder) Request() *MacOsVPPAppAssignedLicensesCollectionRequest {
	return &MacOsVPPAppAssignedLicensesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOsVPPAppAssignedLicense item
func (b *MacOsVPPAppAssignedLicensesCollectionRequestBuilder) ID(id string) *MacOsVPPAppAssignedLicenseRequestBuilder {
	bb := &MacOsVPPAppAssignedLicenseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MacOsVPPAppAssignedLicensesCollectionRequest is request for MacOsVPPAppAssignedLicense collection
type MacOsVPPAppAssignedLicensesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOsVPPAppAssignedLicense collection
func (r *MacOsVPPAppAssignedLicensesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOsVPPAppAssignedLicense, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOsVPPAppAssignedLicense
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOsVPPAppAssignedLicense
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOsVPPAppAssignedLicense collection, max N pages
func (r *MacOsVPPAppAssignedLicensesCollectionRequest) GetN(ctx context.Context, n int) ([]MacOsVPPAppAssignedLicense, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOsVPPAppAssignedLicense collection
func (r *MacOsVPPAppAssignedLicensesCollectionRequest) Get(ctx context.Context) ([]MacOsVPPAppAssignedLicense, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOsVPPAppAssignedLicense collection
func (r *MacOsVPPAppAssignedLicensesCollectionRequest) Add(ctx context.Context, reqObj *MacOsVPPAppAssignedLicense) (resObj *MacOsVPPAppAssignedLicense, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSCertificateProfileBase returns request builder for MacOSCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) MacOSCertificateProfileBase() *DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequestBuilder is request builder for MacOSCertificateProfileBase collection rcn
type DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSCertificateProfileBase item
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequestBuilder) ID(id string) *MacOSCertificateProfileBaseRequestBuilder {
	bb := &MacOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequest is request for MacOSCertificateProfileBase collection
type DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSCertificateProfileBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSCertificateProfileBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSCertificateProfileBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSCertificateProfileBase collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSCertificateProfileBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequest) Get(ctx context.Context) ([]MacOSCertificateProfileBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCertificateProfileBaseCollectionRequest) Add(ctx context.Context, reqObj *MacOSCertificateProfileBase) (resObj *MacOSCertificateProfileBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSCompliancePolicy returns request builder for MacOSCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) MacOSCompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequestBuilder is request builder for MacOSCompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSCompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequestBuilder) ID(id string) *MacOSCompliancePolicyRequestBuilder {
	bb := &MacOSCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequest is request for MacOSCompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSCompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]MacOSCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionMacOSCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *MacOSCompliancePolicy) (resObj *MacOSCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSCustomAppConfiguration returns request builder for MacOSCustomAppConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) MacOSCustomAppConfiguration() *DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequestBuilder is request builder for MacOSCustomAppConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSCustomAppConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSCustomAppConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequestBuilder) ID(id string) *MacOSCustomAppConfigurationRequestBuilder {
	bb := &MacOSCustomAppConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequest is request for MacOSCustomAppConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSCustomAppConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSCustomAppConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSCustomAppConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSCustomAppConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSCustomAppConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSCustomAppConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSCustomAppConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequest) Get(ctx context.Context) ([]MacOSCustomAppConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSCustomAppConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCustomAppConfigurationCollectionRequest) Add(ctx context.Context, reqObj *MacOSCustomAppConfiguration) (resObj *MacOSCustomAppConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSCustomConfiguration returns request builder for MacOSCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) MacOSCustomConfiguration() *DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequestBuilder is request builder for MacOSCustomConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSCustomConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSCustomConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequestBuilder) ID(id string) *MacOSCustomConfigurationRequestBuilder {
	bb := &MacOSCustomConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequest is request for MacOSCustomConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSCustomConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSCustomConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSCustomConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSCustomConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSCustomConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequest) Get(ctx context.Context) ([]MacOSCustomConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSCustomConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSCustomConfigurationCollectionRequest) Add(ctx context.Context, reqObj *MacOSCustomConfiguration) (resObj *MacOSCustomConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSEndpointProtectionConfiguration returns request builder for MacOSEndpointProtectionConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) MacOSEndpointProtectionConfiguration() *DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequestBuilder is request builder for MacOSEndpointProtectionConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSEndpointProtectionConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSEndpointProtectionConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequestBuilder) ID(id string) *MacOSEndpointProtectionConfigurationRequestBuilder {
	bb := &MacOSEndpointProtectionConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequest is request for MacOSEndpointProtectionConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSEndpointProtectionConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSEndpointProtectionConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSEndpointProtectionConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSEndpointProtectionConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSEndpointProtectionConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSEndpointProtectionConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSEndpointProtectionConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequest) Get(ctx context.Context) ([]MacOSEndpointProtectionConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSEndpointProtectionConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSEndpointProtectionConfigurationCollectionRequest) Add(ctx context.Context, reqObj *MacOSEndpointProtectionConfiguration) (resObj *MacOSEndpointProtectionConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSExtensionsConfiguration returns request builder for MacOSExtensionsConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) MacOSExtensionsConfiguration() *DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequestBuilder is request builder for MacOSExtensionsConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSExtensionsConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSExtensionsConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequestBuilder) ID(id string) *MacOSExtensionsConfigurationRequestBuilder {
	bb := &MacOSExtensionsConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequest is request for MacOSExtensionsConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSExtensionsConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSExtensionsConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSExtensionsConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSExtensionsConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSExtensionsConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSExtensionsConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSExtensionsConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequest) Get(ctx context.Context) ([]MacOSExtensionsConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSExtensionsConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSExtensionsConfigurationCollectionRequest) Add(ctx context.Context, reqObj *MacOSExtensionsConfiguration) (resObj *MacOSExtensionsConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSGeneralDeviceConfiguration returns request builder for MacOSGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) MacOSGeneralDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequestBuilder is request builder for MacOSGeneralDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSGeneralDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSGeneralDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequestBuilder) ID(id string) *MacOSGeneralDeviceConfigurationRequestBuilder {
	bb := &MacOSGeneralDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequest is request for MacOSGeneralDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSGeneralDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSGeneralDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSGeneralDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSGeneralDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSGeneralDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]MacOSGeneralDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSGeneralDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSGeneralDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *MacOSGeneralDeviceConfiguration) (resObj *MacOSGeneralDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSCertificateProfileBase is navigation property rn
func (b *MacOSImportedPFXCertificateProfileRequestBuilder) MacOSCertificateProfileBase() *MacOSCertificateProfileBaseRequestBuilder {
	bb := &MacOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// MacOSMdatpApp returns request builder for MacOSMdatpApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) MacOSMdatpApp() *DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequestBuilder is request builder for MacOSMdatpApp collection rcn
type DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSMdatpApp collection
func (b *DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSMdatpApp item
func (b *DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequestBuilder) ID(id string) *MacOSMdatpAppRequestBuilder {
	bb := &MacOSMdatpAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequest is request for MacOSMdatpApp collection
type DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSMdatpApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSMdatpApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSMdatpApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSMdatpApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSMdatpApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSMdatpApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSMdatpApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequest) Get(ctx context.Context) ([]MacOSMdatpApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSMdatpApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSMdatpAppCollectionRequest) Add(ctx context.Context, reqObj *MacOSMdatpApp) (resObj *MacOSMdatpApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSMicrosoftDefenderApp returns request builder for MacOSMicrosoftDefenderApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) MacOSMicrosoftDefenderApp() *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequestBuilder is request builder for MacOSMicrosoftDefenderApp collection rcn
type DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSMicrosoftDefenderApp collection
func (b *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSMicrosoftDefenderApp item
func (b *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequestBuilder) ID(id string) *MacOSMicrosoftDefenderAppRequestBuilder {
	bb := &MacOSMicrosoftDefenderAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequest is request for MacOSMicrosoftDefenderApp collection
type DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSMicrosoftDefenderApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSMicrosoftDefenderApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSMicrosoftDefenderApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSMicrosoftDefenderApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSMicrosoftDefenderApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSMicrosoftDefenderApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSMicrosoftDefenderApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequest) Get(ctx context.Context) ([]MacOSMicrosoftDefenderApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSMicrosoftDefenderApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftDefenderAppCollectionRequest) Add(ctx context.Context, reqObj *MacOSMicrosoftDefenderApp) (resObj *MacOSMicrosoftDefenderApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSMicrosoftEdgeApp returns request builder for MacOSMicrosoftEdgeApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) MacOSMicrosoftEdgeApp() *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequestBuilder is request builder for MacOSMicrosoftEdgeApp collection rcn
type DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSMicrosoftEdgeApp collection
func (b *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSMicrosoftEdgeApp item
func (b *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequestBuilder) ID(id string) *MacOSMicrosoftEdgeAppRequestBuilder {
	bb := &MacOSMicrosoftEdgeAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequest is request for MacOSMicrosoftEdgeApp collection
type DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSMicrosoftEdgeApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSMicrosoftEdgeApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSMicrosoftEdgeApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSMicrosoftEdgeApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSMicrosoftEdgeApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSMicrosoftEdgeApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSMicrosoftEdgeApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequest) Get(ctx context.Context) ([]MacOSMicrosoftEdgeApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSMicrosoftEdgeApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSMicrosoftEdgeAppCollectionRequest) Add(ctx context.Context, reqObj *MacOSMicrosoftEdgeApp) (resObj *MacOSMicrosoftEdgeApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSOfficeSuiteApp returns request builder for MacOSOfficeSuiteApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) MacOSOfficeSuiteApp() *DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequestBuilder is request builder for MacOSOfficeSuiteApp collection rcn
type DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSOfficeSuiteApp collection
func (b *DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSOfficeSuiteApp item
func (b *DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequestBuilder) ID(id string) *MacOSOfficeSuiteAppRequestBuilder {
	bb := &MacOSOfficeSuiteAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequest is request for MacOSOfficeSuiteApp collection
type DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSOfficeSuiteApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSOfficeSuiteApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSOfficeSuiteApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSOfficeSuiteApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSOfficeSuiteApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSOfficeSuiteApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSOfficeSuiteApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequest) Get(ctx context.Context) ([]MacOSOfficeSuiteApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSOfficeSuiteApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOSOfficeSuiteAppCollectionRequest) Add(ctx context.Context, reqObj *MacOSOfficeSuiteApp) (resObj *MacOSOfficeSuiteApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSCertificateProfileBase is navigation property rn
func (b *MacOSPkcsCertificateProfileRequestBuilder) MacOSCertificateProfileBase() *MacOSCertificateProfileBaseRequestBuilder {
	bb := &MacOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// MacOSCertificateProfileBase is navigation property rn
func (b *MacOSScepCertificateProfileRequestBuilder) MacOSCertificateProfileBase() *MacOSCertificateProfileBaseRequestBuilder {
	bb := &MacOSCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// Entity is navigation property rn
func (b *MacOSSoftwareUpdateAccountSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *MacOSSoftwareUpdateCategorySummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// MacOSSoftwareUpdateConfiguration returns request builder for MacOSSoftwareUpdateConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) MacOSSoftwareUpdateConfiguration() *DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequestBuilder is request builder for MacOSSoftwareUpdateConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSSoftwareUpdateConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSSoftwareUpdateConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequestBuilder) ID(id string) *MacOSSoftwareUpdateConfigurationRequestBuilder {
	bb := &MacOSSoftwareUpdateConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequest is request for MacOSSoftwareUpdateConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSSoftwareUpdateConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSSoftwareUpdateConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSSoftwareUpdateConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSSoftwareUpdateConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSSoftwareUpdateConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSSoftwareUpdateConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSSoftwareUpdateConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequest) Get(ctx context.Context) ([]MacOSSoftwareUpdateConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSSoftwareUpdateConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSSoftwareUpdateConfigurationCollectionRequest) Add(ctx context.Context, reqObj *MacOSSoftwareUpdateConfiguration) (resObj *MacOSSoftwareUpdateConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *MacOSSoftwareUpdateStateSummaryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// MacOSTrustedRootCertificate returns request builder for MacOSTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) MacOSTrustedRootCertificate() *DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequestBuilder is request builder for MacOSTrustedRootCertificate collection rcn
type DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSTrustedRootCertificate item
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequestBuilder) ID(id string) *MacOSTrustedRootCertificateRequestBuilder {
	bb := &MacOSTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequest is request for MacOSTrustedRootCertificate collection
type DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSTrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSTrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSTrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSTrustedRootCertificate collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSTrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequest) Get(ctx context.Context) ([]MacOSTrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSTrustedRootCertificateCollectionRequest) Add(ctx context.Context, reqObj *MacOSTrustedRootCertificate) (resObj *MacOSTrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSWiFiConfiguration returns request builder for MacOSWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) MacOSWiFiConfiguration() *DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequestBuilder is request builder for MacOSWiFiConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSWiFiConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequestBuilder) ID(id string) *MacOSWiFiConfigurationRequestBuilder {
	bb := &MacOSWiFiConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequest is request for MacOSWiFiConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSWiFiConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSWiFiConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSWiFiConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSWiFiConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSWiFiConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequest) Get(ctx context.Context) ([]MacOSWiFiConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSWiFiConfigurationCollectionRequest) Add(ctx context.Context, reqObj *MacOSWiFiConfiguration) (resObj *MacOSWiFiConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOSWiredNetworkConfiguration returns request builder for MacOSWiredNetworkConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) MacOSWiredNetworkConfiguration() *DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequestBuilder is request builder for MacOSWiredNetworkConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOSWiredNetworkConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOSWiredNetworkConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequestBuilder) ID(id string) *MacOSWiredNetworkConfigurationRequestBuilder {
	bb := &MacOSWiredNetworkConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequest is request for MacOSWiredNetworkConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOSWiredNetworkConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOSWiredNetworkConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOSWiredNetworkConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOSWiredNetworkConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOSWiredNetworkConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]MacOSWiredNetworkConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOSWiredNetworkConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequest) Get(ctx context.Context) ([]MacOSWiredNetworkConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOSWiredNetworkConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionMacOSWiredNetworkConfigurationCollectionRequest) Add(ctx context.Context, reqObj *MacOSWiredNetworkConfiguration) (resObj *MacOSWiredNetworkConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MacOsVPPApp returns request builder for MacOsVPPApp collection
func (b *DeviceAppManagementMobileAppsCollectionRequestBuilder) MacOsVPPApp() *DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequestBuilder {
	bb := &DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequestBuilder is request builder for MacOsVPPApp collection rcn
type DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOsVPPApp collection
func (b *DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequestBuilder) Request() *DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequest {
	return &DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOsVPPApp item
func (b *DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequestBuilder) ID(id string) *MacOsVPPAppRequestBuilder {
	bb := &MacOsVPPAppRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequest is request for MacOsVPPApp collection
type DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for MacOsVPPApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]MacOsVPPApp, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOsVPPApp
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []MacOsVPPApp
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for MacOsVPPApp collection, max N pages
func (r *DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequest) GetN(ctx context.Context, n int) ([]MacOsVPPApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for MacOsVPPApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequest) Get(ctx context.Context) ([]MacOsVPPApp, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for MacOsVPPApp collection
func (r *DeviceAppManagementMobileAppsCollectionMacOsVPPAppCollectionRequest) Add(ctx context.Context, reqObj *MacOsVPPApp) (resObj *MacOsVPPApp, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *MacOsVPPAppAssignedLicenseRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
