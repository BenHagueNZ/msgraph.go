// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// ApplicationSignInDetailedSummary returns request builder for ApplicationSignInDetailedSummary collection
func (b *ReportRootRequestBuilder) ApplicationSignInDetailedSummary() *ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder {
	bb := &ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/applicationSignInDetailedSummary"
	return bb
}

// ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder is request builder for ApplicationSignInDetailedSummary collection rcn
type ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ApplicationSignInDetailedSummary collection
func (b *ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder) Request() *ReportRootApplicationSignInDetailedSummaryCollectionRequest {
	return &ReportRootApplicationSignInDetailedSummaryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ApplicationSignInDetailedSummary item
func (b *ReportRootApplicationSignInDetailedSummaryCollectionRequestBuilder) ID(id string) *ApplicationSignInDetailedSummaryRequestBuilder {
	bb := &ApplicationSignInDetailedSummaryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootApplicationSignInDetailedSummaryCollectionRequest is request for ApplicationSignInDetailedSummary collection
type ReportRootApplicationSignInDetailedSummaryCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ApplicationSignInDetailedSummary collection
func (r *ReportRootApplicationSignInDetailedSummaryCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ApplicationSignInDetailedSummary, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ApplicationSignInDetailedSummary
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ApplicationSignInDetailedSummary
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ApplicationSignInDetailedSummary collection, max N pages
func (r *ReportRootApplicationSignInDetailedSummaryCollectionRequest) GetN(ctx context.Context, n int) ([]ApplicationSignInDetailedSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ApplicationSignInDetailedSummary collection
func (r *ReportRootApplicationSignInDetailedSummaryCollectionRequest) Get(ctx context.Context) ([]ApplicationSignInDetailedSummary, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ApplicationSignInDetailedSummary collection
func (r *ReportRootApplicationSignInDetailedSummaryCollectionRequest) Add(ctx context.Context, reqObj *ApplicationSignInDetailedSummary) (resObj *ApplicationSignInDetailedSummary, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AuthenticationMethods is navigation property rn
func (b *ReportRootRequestBuilder) AuthenticationMethods() *AuthenticationMethodsRootRequestBuilder {
	bb := &AuthenticationMethodsRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/authenticationMethods"
	return bb
}

// CredentialUserRegistrationDetails returns request builder for CredentialUserRegistrationDetails collection
func (b *ReportRootRequestBuilder) CredentialUserRegistrationDetails() *ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder {
	bb := &ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/credentialUserRegistrationDetails"
	return bb
}

// ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder is request builder for CredentialUserRegistrationDetails collection rcn
type ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CredentialUserRegistrationDetails collection
func (b *ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder) Request() *ReportRootCredentialUserRegistrationDetailsCollectionRequest {
	return &ReportRootCredentialUserRegistrationDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CredentialUserRegistrationDetails item
func (b *ReportRootCredentialUserRegistrationDetailsCollectionRequestBuilder) ID(id string) *CredentialUserRegistrationDetailsRequestBuilder {
	bb := &CredentialUserRegistrationDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootCredentialUserRegistrationDetailsCollectionRequest is request for CredentialUserRegistrationDetails collection
type ReportRootCredentialUserRegistrationDetailsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CredentialUserRegistrationDetails collection
func (r *ReportRootCredentialUserRegistrationDetailsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CredentialUserRegistrationDetails, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CredentialUserRegistrationDetails
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CredentialUserRegistrationDetails
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CredentialUserRegistrationDetails collection, max N pages
func (r *ReportRootCredentialUserRegistrationDetailsCollectionRequest) GetN(ctx context.Context, n int) ([]CredentialUserRegistrationDetails, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CredentialUserRegistrationDetails collection
func (r *ReportRootCredentialUserRegistrationDetailsCollectionRequest) Get(ctx context.Context) ([]CredentialUserRegistrationDetails, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CredentialUserRegistrationDetails collection
func (r *ReportRootCredentialUserRegistrationDetailsCollectionRequest) Add(ctx context.Context, reqObj *CredentialUserRegistrationDetails) (resObj *CredentialUserRegistrationDetails, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DailyPrintUsage returns request builder for PrintUsage collection
func (b *ReportRootRequestBuilder) DailyPrintUsage() *ReportRootDailyPrintUsageCollectionRequestBuilder {
	bb := &ReportRootDailyPrintUsageCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dailyPrintUsage"
	return bb
}

// ReportRootDailyPrintUsageCollectionRequestBuilder is request builder for PrintUsage collection rcn
type ReportRootDailyPrintUsageCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintUsage collection
func (b *ReportRootDailyPrintUsageCollectionRequestBuilder) Request() *ReportRootDailyPrintUsageCollectionRequest {
	return &ReportRootDailyPrintUsageCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintUsage item
func (b *ReportRootDailyPrintUsageCollectionRequestBuilder) ID(id string) *PrintUsageRequestBuilder {
	bb := &PrintUsageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootDailyPrintUsageCollectionRequest is request for PrintUsage collection
type ReportRootDailyPrintUsageCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintUsage collection
func (r *ReportRootDailyPrintUsageCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintUsage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintUsage
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintUsage
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintUsage collection, max N pages
func (r *ReportRootDailyPrintUsageCollectionRequest) GetN(ctx context.Context, n int) ([]PrintUsage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintUsage collection
func (r *ReportRootDailyPrintUsageCollectionRequest) Get(ctx context.Context) ([]PrintUsage, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintUsage collection
func (r *ReportRootDailyPrintUsageCollectionRequest) Add(ctx context.Context, reqObj *PrintUsage) (resObj *PrintUsage, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DailyPrintUsageByPrinter returns request builder for PrintUsageByPrinter collection
func (b *ReportRootRequestBuilder) DailyPrintUsageByPrinter() *ReportRootDailyPrintUsageByPrinterCollectionRequestBuilder {
	bb := &ReportRootDailyPrintUsageByPrinterCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dailyPrintUsageByPrinter"
	return bb
}

// ReportRootDailyPrintUsageByPrinterCollectionRequestBuilder is request builder for PrintUsageByPrinter collection rcn
type ReportRootDailyPrintUsageByPrinterCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintUsageByPrinter collection
func (b *ReportRootDailyPrintUsageByPrinterCollectionRequestBuilder) Request() *ReportRootDailyPrintUsageByPrinterCollectionRequest {
	return &ReportRootDailyPrintUsageByPrinterCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintUsageByPrinter item
func (b *ReportRootDailyPrintUsageByPrinterCollectionRequestBuilder) ID(id string) *PrintUsageByPrinterRequestBuilder {
	bb := &PrintUsageByPrinterRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootDailyPrintUsageByPrinterCollectionRequest is request for PrintUsageByPrinter collection
type ReportRootDailyPrintUsageByPrinterCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintUsageByPrinter collection
func (r *ReportRootDailyPrintUsageByPrinterCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintUsageByPrinter, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintUsageByPrinter
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintUsageByPrinter
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintUsageByPrinter collection, max N pages
func (r *ReportRootDailyPrintUsageByPrinterCollectionRequest) GetN(ctx context.Context, n int) ([]PrintUsageByPrinter, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintUsageByPrinter collection
func (r *ReportRootDailyPrintUsageByPrinterCollectionRequest) Get(ctx context.Context) ([]PrintUsageByPrinter, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintUsageByPrinter collection
func (r *ReportRootDailyPrintUsageByPrinterCollectionRequest) Add(ctx context.Context, reqObj *PrintUsageByPrinter) (resObj *PrintUsageByPrinter, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DailyPrintUsageByUser returns request builder for PrintUsageByUser collection
func (b *ReportRootRequestBuilder) DailyPrintUsageByUser() *ReportRootDailyPrintUsageByUserCollectionRequestBuilder {
	bb := &ReportRootDailyPrintUsageByUserCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dailyPrintUsageByUser"
	return bb
}

// ReportRootDailyPrintUsageByUserCollectionRequestBuilder is request builder for PrintUsageByUser collection rcn
type ReportRootDailyPrintUsageByUserCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintUsageByUser collection
func (b *ReportRootDailyPrintUsageByUserCollectionRequestBuilder) Request() *ReportRootDailyPrintUsageByUserCollectionRequest {
	return &ReportRootDailyPrintUsageByUserCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintUsageByUser item
func (b *ReportRootDailyPrintUsageByUserCollectionRequestBuilder) ID(id string) *PrintUsageByUserRequestBuilder {
	bb := &PrintUsageByUserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootDailyPrintUsageByUserCollectionRequest is request for PrintUsageByUser collection
type ReportRootDailyPrintUsageByUserCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintUsageByUser collection
func (r *ReportRootDailyPrintUsageByUserCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintUsageByUser, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintUsageByUser
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintUsageByUser
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintUsageByUser collection, max N pages
func (r *ReportRootDailyPrintUsageByUserCollectionRequest) GetN(ctx context.Context, n int) ([]PrintUsageByUser, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintUsageByUser collection
func (r *ReportRootDailyPrintUsageByUserCollectionRequest) Get(ctx context.Context) ([]PrintUsageByUser, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintUsageByUser collection
func (r *ReportRootDailyPrintUsageByUserCollectionRequest) Add(ctx context.Context, reqObj *PrintUsageByUser) (resObj *PrintUsageByUser, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DailyPrintUsageSummariesByPrinter returns request builder for PrintUsageByPrinter collection
func (b *ReportRootRequestBuilder) DailyPrintUsageSummariesByPrinter() *ReportRootDailyPrintUsageSummariesByPrinterCollectionRequestBuilder {
	bb := &ReportRootDailyPrintUsageSummariesByPrinterCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dailyPrintUsageSummariesByPrinter"
	return bb
}

// ReportRootDailyPrintUsageSummariesByPrinterCollectionRequestBuilder is request builder for PrintUsageByPrinter collection rcn
type ReportRootDailyPrintUsageSummariesByPrinterCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintUsageByPrinter collection
func (b *ReportRootDailyPrintUsageSummariesByPrinterCollectionRequestBuilder) Request() *ReportRootDailyPrintUsageSummariesByPrinterCollectionRequest {
	return &ReportRootDailyPrintUsageSummariesByPrinterCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintUsageByPrinter item
func (b *ReportRootDailyPrintUsageSummariesByPrinterCollectionRequestBuilder) ID(id string) *PrintUsageByPrinterRequestBuilder {
	bb := &PrintUsageByPrinterRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootDailyPrintUsageSummariesByPrinterCollectionRequest is request for PrintUsageByPrinter collection
type ReportRootDailyPrintUsageSummariesByPrinterCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintUsageByPrinter collection
func (r *ReportRootDailyPrintUsageSummariesByPrinterCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintUsageByPrinter, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintUsageByPrinter
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintUsageByPrinter
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintUsageByPrinter collection, max N pages
func (r *ReportRootDailyPrintUsageSummariesByPrinterCollectionRequest) GetN(ctx context.Context, n int) ([]PrintUsageByPrinter, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintUsageByPrinter collection
func (r *ReportRootDailyPrintUsageSummariesByPrinterCollectionRequest) Get(ctx context.Context) ([]PrintUsageByPrinter, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintUsageByPrinter collection
func (r *ReportRootDailyPrintUsageSummariesByPrinterCollectionRequest) Add(ctx context.Context, reqObj *PrintUsageByPrinter) (resObj *PrintUsageByPrinter, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DailyPrintUsageSummariesByUser returns request builder for PrintUsageByUser collection
func (b *ReportRootRequestBuilder) DailyPrintUsageSummariesByUser() *ReportRootDailyPrintUsageSummariesByUserCollectionRequestBuilder {
	bb := &ReportRootDailyPrintUsageSummariesByUserCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dailyPrintUsageSummariesByUser"
	return bb
}

// ReportRootDailyPrintUsageSummariesByUserCollectionRequestBuilder is request builder for PrintUsageByUser collection rcn
type ReportRootDailyPrintUsageSummariesByUserCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintUsageByUser collection
func (b *ReportRootDailyPrintUsageSummariesByUserCollectionRequestBuilder) Request() *ReportRootDailyPrintUsageSummariesByUserCollectionRequest {
	return &ReportRootDailyPrintUsageSummariesByUserCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintUsageByUser item
func (b *ReportRootDailyPrintUsageSummariesByUserCollectionRequestBuilder) ID(id string) *PrintUsageByUserRequestBuilder {
	bb := &PrintUsageByUserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootDailyPrintUsageSummariesByUserCollectionRequest is request for PrintUsageByUser collection
type ReportRootDailyPrintUsageSummariesByUserCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintUsageByUser collection
func (r *ReportRootDailyPrintUsageSummariesByUserCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintUsageByUser, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintUsageByUser
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintUsageByUser
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintUsageByUser collection, max N pages
func (r *ReportRootDailyPrintUsageSummariesByUserCollectionRequest) GetN(ctx context.Context, n int) ([]PrintUsageByUser, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintUsageByUser collection
func (r *ReportRootDailyPrintUsageSummariesByUserCollectionRequest) Get(ctx context.Context) ([]PrintUsageByUser, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintUsageByUser collection
func (r *ReportRootDailyPrintUsageSummariesByUserCollectionRequest) Add(ctx context.Context, reqObj *PrintUsageByUser) (resObj *PrintUsageByUser, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MonthlyPrintUsageByPrinter returns request builder for PrintUsageByPrinter collection
func (b *ReportRootRequestBuilder) MonthlyPrintUsageByPrinter() *ReportRootMonthlyPrintUsageByPrinterCollectionRequestBuilder {
	bb := &ReportRootMonthlyPrintUsageByPrinterCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/monthlyPrintUsageByPrinter"
	return bb
}

// ReportRootMonthlyPrintUsageByPrinterCollectionRequestBuilder is request builder for PrintUsageByPrinter collection rcn
type ReportRootMonthlyPrintUsageByPrinterCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintUsageByPrinter collection
func (b *ReportRootMonthlyPrintUsageByPrinterCollectionRequestBuilder) Request() *ReportRootMonthlyPrintUsageByPrinterCollectionRequest {
	return &ReportRootMonthlyPrintUsageByPrinterCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintUsageByPrinter item
func (b *ReportRootMonthlyPrintUsageByPrinterCollectionRequestBuilder) ID(id string) *PrintUsageByPrinterRequestBuilder {
	bb := &PrintUsageByPrinterRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootMonthlyPrintUsageByPrinterCollectionRequest is request for PrintUsageByPrinter collection
type ReportRootMonthlyPrintUsageByPrinterCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintUsageByPrinter collection
func (r *ReportRootMonthlyPrintUsageByPrinterCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintUsageByPrinter, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintUsageByPrinter
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintUsageByPrinter
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintUsageByPrinter collection, max N pages
func (r *ReportRootMonthlyPrintUsageByPrinterCollectionRequest) GetN(ctx context.Context, n int) ([]PrintUsageByPrinter, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintUsageByPrinter collection
func (r *ReportRootMonthlyPrintUsageByPrinterCollectionRequest) Get(ctx context.Context) ([]PrintUsageByPrinter, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintUsageByPrinter collection
func (r *ReportRootMonthlyPrintUsageByPrinterCollectionRequest) Add(ctx context.Context, reqObj *PrintUsageByPrinter) (resObj *PrintUsageByPrinter, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MonthlyPrintUsageByUser returns request builder for PrintUsageByUser collection
func (b *ReportRootRequestBuilder) MonthlyPrintUsageByUser() *ReportRootMonthlyPrintUsageByUserCollectionRequestBuilder {
	bb := &ReportRootMonthlyPrintUsageByUserCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/monthlyPrintUsageByUser"
	return bb
}

// ReportRootMonthlyPrintUsageByUserCollectionRequestBuilder is request builder for PrintUsageByUser collection rcn
type ReportRootMonthlyPrintUsageByUserCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintUsageByUser collection
func (b *ReportRootMonthlyPrintUsageByUserCollectionRequestBuilder) Request() *ReportRootMonthlyPrintUsageByUserCollectionRequest {
	return &ReportRootMonthlyPrintUsageByUserCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintUsageByUser item
func (b *ReportRootMonthlyPrintUsageByUserCollectionRequestBuilder) ID(id string) *PrintUsageByUserRequestBuilder {
	bb := &PrintUsageByUserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootMonthlyPrintUsageByUserCollectionRequest is request for PrintUsageByUser collection
type ReportRootMonthlyPrintUsageByUserCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintUsageByUser collection
func (r *ReportRootMonthlyPrintUsageByUserCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintUsageByUser, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintUsageByUser
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintUsageByUser
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintUsageByUser collection, max N pages
func (r *ReportRootMonthlyPrintUsageByUserCollectionRequest) GetN(ctx context.Context, n int) ([]PrintUsageByUser, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintUsageByUser collection
func (r *ReportRootMonthlyPrintUsageByUserCollectionRequest) Get(ctx context.Context) ([]PrintUsageByUser, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintUsageByUser collection
func (r *ReportRootMonthlyPrintUsageByUserCollectionRequest) Add(ctx context.Context, reqObj *PrintUsageByUser) (resObj *PrintUsageByUser, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MonthlyPrintUsageSummariesByPrinter returns request builder for PrintUsageByPrinter collection
func (b *ReportRootRequestBuilder) MonthlyPrintUsageSummariesByPrinter() *ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequestBuilder {
	bb := &ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/monthlyPrintUsageSummariesByPrinter"
	return bb
}

// ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequestBuilder is request builder for PrintUsageByPrinter collection rcn
type ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintUsageByPrinter collection
func (b *ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequestBuilder) Request() *ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequest {
	return &ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintUsageByPrinter item
func (b *ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequestBuilder) ID(id string) *PrintUsageByPrinterRequestBuilder {
	bb := &PrintUsageByPrinterRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequest is request for PrintUsageByPrinter collection
type ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintUsageByPrinter collection
func (r *ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintUsageByPrinter, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintUsageByPrinter
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintUsageByPrinter
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintUsageByPrinter collection, max N pages
func (r *ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequest) GetN(ctx context.Context, n int) ([]PrintUsageByPrinter, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintUsageByPrinter collection
func (r *ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequest) Get(ctx context.Context) ([]PrintUsageByPrinter, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintUsageByPrinter collection
func (r *ReportRootMonthlyPrintUsageSummariesByPrinterCollectionRequest) Add(ctx context.Context, reqObj *PrintUsageByPrinter) (resObj *PrintUsageByPrinter, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MonthlyPrintUsageSummariesByUser returns request builder for PrintUsageByUser collection
func (b *ReportRootRequestBuilder) MonthlyPrintUsageSummariesByUser() *ReportRootMonthlyPrintUsageSummariesByUserCollectionRequestBuilder {
	bb := &ReportRootMonthlyPrintUsageSummariesByUserCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/monthlyPrintUsageSummariesByUser"
	return bb
}

// ReportRootMonthlyPrintUsageSummariesByUserCollectionRequestBuilder is request builder for PrintUsageByUser collection rcn
type ReportRootMonthlyPrintUsageSummariesByUserCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PrintUsageByUser collection
func (b *ReportRootMonthlyPrintUsageSummariesByUserCollectionRequestBuilder) Request() *ReportRootMonthlyPrintUsageSummariesByUserCollectionRequest {
	return &ReportRootMonthlyPrintUsageSummariesByUserCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PrintUsageByUser item
func (b *ReportRootMonthlyPrintUsageSummariesByUserCollectionRequestBuilder) ID(id string) *PrintUsageByUserRequestBuilder {
	bb := &PrintUsageByUserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootMonthlyPrintUsageSummariesByUserCollectionRequest is request for PrintUsageByUser collection
type ReportRootMonthlyPrintUsageSummariesByUserCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PrintUsageByUser collection
func (r *ReportRootMonthlyPrintUsageSummariesByUserCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]PrintUsageByUser, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PrintUsageByUser
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PrintUsageByUser
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for PrintUsageByUser collection, max N pages
func (r *ReportRootMonthlyPrintUsageSummariesByUserCollectionRequest) GetN(ctx context.Context, n int) ([]PrintUsageByUser, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for PrintUsageByUser collection
func (r *ReportRootMonthlyPrintUsageSummariesByUserCollectionRequest) Get(ctx context.Context) ([]PrintUsageByUser, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for PrintUsageByUser collection
func (r *ReportRootMonthlyPrintUsageSummariesByUserCollectionRequest) Add(ctx context.Context, reqObj *PrintUsageByUser) (resObj *PrintUsageByUser, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Security is navigation property rn
func (b *ReportRootRequestBuilder) Security() *SecurityReportsRootRequestBuilder {
	bb := &SecurityReportsRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/security"
	return bb
}

// UserCredentialUsageDetails returns request builder for UserCredentialUsageDetails collection
func (b *ReportRootRequestBuilder) UserCredentialUsageDetails() *ReportRootUserCredentialUsageDetailsCollectionRequestBuilder {
	bb := &ReportRootUserCredentialUsageDetailsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userCredentialUsageDetails"
	return bb
}

// ReportRootUserCredentialUsageDetailsCollectionRequestBuilder is request builder for UserCredentialUsageDetails collection rcn
type ReportRootUserCredentialUsageDetailsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for UserCredentialUsageDetails collection
func (b *ReportRootUserCredentialUsageDetailsCollectionRequestBuilder) Request() *ReportRootUserCredentialUsageDetailsCollectionRequest {
	return &ReportRootUserCredentialUsageDetailsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for UserCredentialUsageDetails item
func (b *ReportRootUserCredentialUsageDetailsCollectionRequestBuilder) ID(id string) *UserCredentialUsageDetailsRequestBuilder {
	bb := &UserCredentialUsageDetailsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ReportRootUserCredentialUsageDetailsCollectionRequest is request for UserCredentialUsageDetails collection
type ReportRootUserCredentialUsageDetailsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for UserCredentialUsageDetails collection
func (r *ReportRootUserCredentialUsageDetailsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]UserCredentialUsageDetails, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []UserCredentialUsageDetails
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []UserCredentialUsageDetails
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for UserCredentialUsageDetails collection, max N pages
func (r *ReportRootUserCredentialUsageDetailsCollectionRequest) GetN(ctx context.Context, n int) ([]UserCredentialUsageDetails, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for UserCredentialUsageDetails collection
func (r *ReportRootUserCredentialUsageDetailsCollectionRequest) Get(ctx context.Context) ([]UserCredentialUsageDetails, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for UserCredentialUsageDetails collection
func (r *ReportRootUserCredentialUsageDetailsCollectionRequest) Add(ctx context.Context, reqObj *UserCredentialUsageDetails) (resObj *UserCredentialUsageDetails, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ReportRootRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
