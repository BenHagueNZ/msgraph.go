// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// IncludeTargets returns request builder for SmsAuthenticationMethodTarget collection
func (b *SmsAuthenticationMethodConfigurationRequestBuilder) IncludeTargets() *SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder {
	bb := &SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/includeTargets"
	return bb
}

// SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder is request builder for SmsAuthenticationMethodTarget collection rcn
type SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SmsAuthenticationMethodTarget collection
func (b *SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder) Request() *SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequest {
	return &SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SmsAuthenticationMethodTarget item
func (b *SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder) ID(id string) *SmsAuthenticationMethodTargetRequestBuilder {
	bb := &SmsAuthenticationMethodTargetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequest is request for SmsAuthenticationMethodTarget collection
type SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SmsAuthenticationMethodTarget collection
func (r *SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SmsAuthenticationMethodTarget, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SmsAuthenticationMethodTarget
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SmsAuthenticationMethodTarget
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SmsAuthenticationMethodTarget collection, max N pages
func (r *SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) GetN(ctx context.Context, n int) ([]SmsAuthenticationMethodTarget, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SmsAuthenticationMethodTarget collection
func (r *SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Get(ctx context.Context) ([]SmsAuthenticationMethodTarget, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SmsAuthenticationMethodTarget collection
func (r *SmsAuthenticationMethodConfigurationIncludeTargetsCollectionRequest) Add(ctx context.Context, reqObj *SmsAuthenticationMethodTarget) (resObj *SmsAuthenticationMethodTarget, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SmsAuthenticationMethodConfiguration returns request builder for SmsAuthenticationMethodConfiguration collection
func (b *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionRequestBuilder) SmsAuthenticationMethodConfiguration() *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequestBuilder {
	bb := &AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequestBuilder is request builder for SmsAuthenticationMethodConfiguration collection rcn
type AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SmsAuthenticationMethodConfiguration collection
func (b *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequestBuilder) Request() *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequest {
	return &AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SmsAuthenticationMethodConfiguration item
func (b *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequestBuilder) ID(id string) *SmsAuthenticationMethodConfigurationRequestBuilder {
	bb := &SmsAuthenticationMethodConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequest is request for SmsAuthenticationMethodConfiguration collection
type AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SmsAuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SmsAuthenticationMethodConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SmsAuthenticationMethodConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SmsAuthenticationMethodConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SmsAuthenticationMethodConfiguration collection, max N pages
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]SmsAuthenticationMethodConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SmsAuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequest) Get(ctx context.Context) ([]SmsAuthenticationMethodConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SmsAuthenticationMethodConfiguration collection
func (r *AuthenticationMethodsPolicyAuthenticationMethodConfigurationsCollectionSmsAuthenticationMethodConfigurationCollectionRequest) Add(ctx context.Context, reqObj *SmsAuthenticationMethodConfiguration) (resObj *SmsAuthenticationMethodConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SmsAuthenticationMethodTarget returns request builder for SmsAuthenticationMethodTarget collection
func (b *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionRequestBuilder) SmsAuthenticationMethodTarget() *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequestBuilder {
	bb := &EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequestBuilder is request builder for SmsAuthenticationMethodTarget collection rcn
type EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SmsAuthenticationMethodTarget collection
func (b *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequestBuilder) Request() *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequest {
	return &EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SmsAuthenticationMethodTarget item
func (b *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequestBuilder) ID(id string) *SmsAuthenticationMethodTargetRequestBuilder {
	bb := &SmsAuthenticationMethodTargetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequest is request for SmsAuthenticationMethodTarget collection
type EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SmsAuthenticationMethodTarget collection
func (r *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SmsAuthenticationMethodTarget, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SmsAuthenticationMethodTarget
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SmsAuthenticationMethodTarget
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SmsAuthenticationMethodTarget collection, max N pages
func (r *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequest) GetN(ctx context.Context, n int) ([]SmsAuthenticationMethodTarget, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SmsAuthenticationMethodTarget collection
func (r *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequest) Get(ctx context.Context) ([]SmsAuthenticationMethodTarget, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SmsAuthenticationMethodTarget collection
func (r *EmailAuthenticationMethodConfigurationIncludeTargetsCollectionSmsAuthenticationMethodTargetCollectionRequest) Add(ctx context.Context, reqObj *SmsAuthenticationMethodTarget) (resObj *SmsAuthenticationMethodTarget, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
