// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// AppCatalogsRequestBuilder is request builder for AppCatalogs
type AppCatalogsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppCatalogsRequest
func (b *AppCatalogsRequestBuilder) Request() *AppCatalogsRequest {
	return &AppCatalogsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppCatalogsRequest is request for AppCatalogs
type AppCatalogsRequest struct{ BaseRequest }

// Get performs GET request for AppCatalogs
func (r *AppCatalogsRequest) Get(ctx context.Context) (resObj *AppCatalogs, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppCatalogs
func (r *AppCatalogsRequest) Update(ctx context.Context, reqObj *AppCatalogs) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppCatalogs
func (r *AppCatalogsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppConfigurationSettingItemRequestBuilder is request builder for AppConfigurationSettingItem
type AppConfigurationSettingItemRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppConfigurationSettingItemRequest
func (b *AppConfigurationSettingItemRequestBuilder) Request() *AppConfigurationSettingItemRequest {
	return &AppConfigurationSettingItemRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppConfigurationSettingItemRequest is request for AppConfigurationSettingItem
type AppConfigurationSettingItemRequest struct{ BaseRequest }

// Get performs GET request for AppConfigurationSettingItem
func (r *AppConfigurationSettingItemRequest) Get(ctx context.Context) (resObj *AppConfigurationSettingItem, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppConfigurationSettingItem
func (r *AppConfigurationSettingItemRequest) Update(ctx context.Context, reqObj *AppConfigurationSettingItem) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppConfigurationSettingItem
func (r *AppConfigurationSettingItemRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppConsentApprovalRouteRequestBuilder is request builder for AppConsentApprovalRoute
type AppConsentApprovalRouteRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppConsentApprovalRouteRequest
func (b *AppConsentApprovalRouteRequestBuilder) Request() *AppConsentApprovalRouteRequest {
	return &AppConsentApprovalRouteRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppConsentApprovalRouteRequest is request for AppConsentApprovalRoute
type AppConsentApprovalRouteRequest struct{ BaseRequest }

// Get performs GET request for AppConsentApprovalRoute
func (r *AppConsentApprovalRouteRequest) Get(ctx context.Context) (resObj *AppConsentApprovalRoute, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppConsentApprovalRoute
func (r *AppConsentApprovalRouteRequest) Update(ctx context.Context, reqObj *AppConsentApprovalRoute) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppConsentApprovalRoute
func (r *AppConsentApprovalRouteRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppConsentRequestObjectRequestBuilder is request builder for AppConsentRequestObject
type AppConsentRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppConsentRequestObjectRequest
func (b *AppConsentRequestObjectRequestBuilder) Request() *AppConsentRequestObjectRequest {
	return &AppConsentRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppConsentRequestObjectRequest is request for AppConsentRequestObject
type AppConsentRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for AppConsentRequestObject
func (r *AppConsentRequestObjectRequest) Get(ctx context.Context) (resObj *AppConsentRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppConsentRequestObject
func (r *AppConsentRequestObjectRequest) Update(ctx context.Context, reqObj *AppConsentRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppConsentRequestObject
func (r *AppConsentRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppConsentRequestScopeRequestBuilder is request builder for AppConsentRequestScope
type AppConsentRequestScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppConsentRequestScopeRequest
func (b *AppConsentRequestScopeRequestBuilder) Request() *AppConsentRequestScopeRequest {
	return &AppConsentRequestScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppConsentRequestScopeRequest is request for AppConsentRequestScope
type AppConsentRequestScopeRequest struct{ BaseRequest }

// Get performs GET request for AppConsentRequestScope
func (r *AppConsentRequestScopeRequest) Get(ctx context.Context) (resObj *AppConsentRequestScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppConsentRequestScope
func (r *AppConsentRequestScopeRequest) Update(ctx context.Context, reqObj *AppConsentRequestScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppConsentRequestScope
func (r *AppConsentRequestScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppHostedMediaConfigRequestBuilder is request builder for AppHostedMediaConfig
type AppHostedMediaConfigRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppHostedMediaConfigRequest
func (b *AppHostedMediaConfigRequestBuilder) Request() *AppHostedMediaConfigRequest {
	return &AppHostedMediaConfigRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppHostedMediaConfigRequest is request for AppHostedMediaConfig
type AppHostedMediaConfigRequest struct{ BaseRequest }

// Get performs GET request for AppHostedMediaConfig
func (r *AppHostedMediaConfigRequest) Get(ctx context.Context) (resObj *AppHostedMediaConfig, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppHostedMediaConfig
func (r *AppHostedMediaConfigRequest) Update(ctx context.Context, reqObj *AppHostedMediaConfig) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppHostedMediaConfig
func (r *AppHostedMediaConfigRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppIdentityRequestBuilder is request builder for AppIdentity
type AppIdentityRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppIdentityRequest
func (b *AppIdentityRequestBuilder) Request() *AppIdentityRequest {
	return &AppIdentityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppIdentityRequest is request for AppIdentity
type AppIdentityRequest struct{ BaseRequest }

// Get performs GET request for AppIdentity
func (r *AppIdentityRequest) Get(ctx context.Context) (resObj *AppIdentity, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppIdentity
func (r *AppIdentityRequest) Update(ctx context.Context, reqObj *AppIdentity) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppIdentity
func (r *AppIdentityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppListItemRequestBuilder is request builder for AppListItem
type AppListItemRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppListItemRequest
func (b *AppListItemRequestBuilder) Request() *AppListItemRequest {
	return &AppListItemRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppListItemRequest is request for AppListItem
type AppListItemRequest struct{ BaseRequest }

// Get performs GET request for AppListItem
func (r *AppListItemRequest) Get(ctx context.Context) (resObj *AppListItem, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppListItem
func (r *AppListItemRequest) Update(ctx context.Context, reqObj *AppListItem) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppListItem
func (r *AppListItemRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppLogCollectionDownloadDetailsRequestBuilder is request builder for AppLogCollectionDownloadDetails
type AppLogCollectionDownloadDetailsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppLogCollectionDownloadDetailsRequest
func (b *AppLogCollectionDownloadDetailsRequestBuilder) Request() *AppLogCollectionDownloadDetailsRequest {
	return &AppLogCollectionDownloadDetailsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppLogCollectionDownloadDetailsRequest is request for AppLogCollectionDownloadDetails
type AppLogCollectionDownloadDetailsRequest struct{ BaseRequest }

// Get performs GET request for AppLogCollectionDownloadDetails
func (r *AppLogCollectionDownloadDetailsRequest) Get(ctx context.Context) (resObj *AppLogCollectionDownloadDetails, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppLogCollectionDownloadDetails
func (r *AppLogCollectionDownloadDetailsRequest) Update(ctx context.Context, reqObj *AppLogCollectionDownloadDetails) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppLogCollectionDownloadDetails
func (r *AppLogCollectionDownloadDetailsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppLogCollectionRequestObjectRequestBuilder is request builder for AppLogCollectionRequestObject
type AppLogCollectionRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppLogCollectionRequestObjectRequest
func (b *AppLogCollectionRequestObjectRequestBuilder) Request() *AppLogCollectionRequestObjectRequest {
	return &AppLogCollectionRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppLogCollectionRequestObjectRequest is request for AppLogCollectionRequestObject
type AppLogCollectionRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for AppLogCollectionRequestObject
func (r *AppLogCollectionRequestObjectRequest) Get(ctx context.Context) (resObj *AppLogCollectionRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppLogCollectionRequestObject
func (r *AppLogCollectionRequestObjectRequest) Update(ctx context.Context, reqObj *AppLogCollectionRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppLogCollectionRequestObject
func (r *AppLogCollectionRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppManagementConfigurationRequestBuilder is request builder for AppManagementConfiguration
type AppManagementConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppManagementConfigurationRequest
func (b *AppManagementConfigurationRequestBuilder) Request() *AppManagementConfigurationRequest {
	return &AppManagementConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppManagementConfigurationRequest is request for AppManagementConfiguration
type AppManagementConfigurationRequest struct{ BaseRequest }

// Get performs GET request for AppManagementConfiguration
func (r *AppManagementConfigurationRequest) Get(ctx context.Context) (resObj *AppManagementConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppManagementConfiguration
func (r *AppManagementConfigurationRequest) Update(ctx context.Context, reqObj *AppManagementConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppManagementConfiguration
func (r *AppManagementConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppManagementPolicyRequestBuilder is request builder for AppManagementPolicy
type AppManagementPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppManagementPolicyRequest
func (b *AppManagementPolicyRequestBuilder) Request() *AppManagementPolicyRequest {
	return &AppManagementPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppManagementPolicyRequest is request for AppManagementPolicy
type AppManagementPolicyRequest struct{ BaseRequest }

// Get performs GET request for AppManagementPolicy
func (r *AppManagementPolicyRequest) Get(ctx context.Context) (resObj *AppManagementPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppManagementPolicy
func (r *AppManagementPolicyRequest) Update(ctx context.Context, reqObj *AppManagementPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppManagementPolicy
func (r *AppManagementPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppMetadataRequestBuilder is request builder for AppMetadata
type AppMetadataRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppMetadataRequest
func (b *AppMetadataRequestBuilder) Request() *AppMetadataRequest {
	return &AppMetadataRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppMetadataRequest is request for AppMetadata
type AppMetadataRequest struct{ BaseRequest }

// Get performs GET request for AppMetadata
func (r *AppMetadataRequest) Get(ctx context.Context) (resObj *AppMetadata, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppMetadata
func (r *AppMetadataRequest) Update(ctx context.Context, reqObj *AppMetadata) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppMetadata
func (r *AppMetadataRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppMetadataEntryRequestBuilder is request builder for AppMetadataEntry
type AppMetadataEntryRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppMetadataEntryRequest
func (b *AppMetadataEntryRequestBuilder) Request() *AppMetadataEntryRequest {
	return &AppMetadataEntryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppMetadataEntryRequest is request for AppMetadataEntry
type AppMetadataEntryRequest struct{ BaseRequest }

// Get performs GET request for AppMetadataEntry
func (r *AppMetadataEntryRequest) Get(ctx context.Context) (resObj *AppMetadataEntry, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppMetadataEntry
func (r *AppMetadataEntryRequest) Update(ctx context.Context, reqObj *AppMetadataEntry) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppMetadataEntry
func (r *AppMetadataEntryRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppRoleRequestBuilder is request builder for AppRole
type AppRoleRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppRoleRequest
func (b *AppRoleRequestBuilder) Request() *AppRoleRequest {
	return &AppRoleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppRoleRequest is request for AppRole
type AppRoleRequest struct{ BaseRequest }

// Get performs GET request for AppRole
func (r *AppRoleRequest) Get(ctx context.Context) (resObj *AppRole, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppRole
func (r *AppRoleRequest) Update(ctx context.Context, reqObj *AppRole) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppRole
func (r *AppRoleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppRoleAssignmentRequestBuilder is request builder for AppRoleAssignment
type AppRoleAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppRoleAssignmentRequest
func (b *AppRoleAssignmentRequestBuilder) Request() *AppRoleAssignmentRequest {
	return &AppRoleAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppRoleAssignmentRequest is request for AppRoleAssignment
type AppRoleAssignmentRequest struct{ BaseRequest }

// Get performs GET request for AppRoleAssignment
func (r *AppRoleAssignmentRequest) Get(ctx context.Context) (resObj *AppRoleAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppRoleAssignment
func (r *AppRoleAssignmentRequest) Update(ctx context.Context, reqObj *AppRoleAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppRoleAssignment
func (r *AppRoleAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppScopeRequestBuilder is request builder for AppScope
type AppScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppScopeRequest
func (b *AppScopeRequestBuilder) Request() *AppScopeRequest {
	return &AppScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppScopeRequest is request for AppScope
type AppScopeRequest struct{ BaseRequest }

// Get performs GET request for AppScope
func (r *AppScopeRequest) Get(ctx context.Context) (resObj *AppScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppScope
func (r *AppScopeRequest) Update(ctx context.Context, reqObj *AppScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppScope
func (r *AppScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppVulnerabilityManagedDeviceRequestBuilder is request builder for AppVulnerabilityManagedDevice
type AppVulnerabilityManagedDeviceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppVulnerabilityManagedDeviceRequest
func (b *AppVulnerabilityManagedDeviceRequestBuilder) Request() *AppVulnerabilityManagedDeviceRequest {
	return &AppVulnerabilityManagedDeviceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppVulnerabilityManagedDeviceRequest is request for AppVulnerabilityManagedDevice
type AppVulnerabilityManagedDeviceRequest struct{ BaseRequest }

// Get performs GET request for AppVulnerabilityManagedDevice
func (r *AppVulnerabilityManagedDeviceRequest) Get(ctx context.Context) (resObj *AppVulnerabilityManagedDevice, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppVulnerabilityManagedDevice
func (r *AppVulnerabilityManagedDeviceRequest) Update(ctx context.Context, reqObj *AppVulnerabilityManagedDevice) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppVulnerabilityManagedDevice
func (r *AppVulnerabilityManagedDeviceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppVulnerabilityMobileAppRequestBuilder is request builder for AppVulnerabilityMobileApp
type AppVulnerabilityMobileAppRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppVulnerabilityMobileAppRequest
func (b *AppVulnerabilityMobileAppRequestBuilder) Request() *AppVulnerabilityMobileAppRequest {
	return &AppVulnerabilityMobileAppRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppVulnerabilityMobileAppRequest is request for AppVulnerabilityMobileApp
type AppVulnerabilityMobileAppRequest struct{ BaseRequest }

// Get performs GET request for AppVulnerabilityMobileApp
func (r *AppVulnerabilityMobileAppRequest) Get(ctx context.Context) (resObj *AppVulnerabilityMobileApp, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppVulnerabilityMobileApp
func (r *AppVulnerabilityMobileAppRequest) Update(ctx context.Context, reqObj *AppVulnerabilityMobileApp) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppVulnerabilityMobileApp
func (r *AppVulnerabilityMobileAppRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AppVulnerabilityTaskRequestBuilder is request builder for AppVulnerabilityTask
type AppVulnerabilityTaskRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppVulnerabilityTaskRequest
func (b *AppVulnerabilityTaskRequestBuilder) Request() *AppVulnerabilityTaskRequest {
	return &AppVulnerabilityTaskRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppVulnerabilityTaskRequest is request for AppVulnerabilityTask
type AppVulnerabilityTaskRequest struct{ BaseRequest }

// Get performs GET request for AppVulnerabilityTask
func (r *AppVulnerabilityTaskRequest) Get(ctx context.Context) (resObj *AppVulnerabilityTask, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppVulnerabilityTask
func (r *AppVulnerabilityTaskRequest) Update(ctx context.Context, reqObj *AppVulnerabilityTask) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppVulnerabilityTask
func (r *AppVulnerabilityTaskRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type AppLogCollectionRequestObjectCreateDownloadURLRequestBuilder struct{ BaseRequestBuilder }

// CreateDownloadURL action undocumentedras
func (b *AppLogCollectionRequestObjectRequestBuilder) CreateDownloadURL(reqObj *AppLogCollectionRequestObjectCreateDownloadURLRequestParameter) *AppLogCollectionRequestObjectCreateDownloadURLRequestBuilder {
	bb := &AppLogCollectionRequestObjectCreateDownloadURLRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/CreateDownloadUrl"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AppLogCollectionRequestObjectCreateDownloadURLRequest struct{ BaseRequest }

func (b *AppLogCollectionRequestObjectCreateDownloadURLRequestBuilder) Request() *AppLogCollectionRequestObjectCreateDownloadURLRequest {
	return &AppLogCollectionRequestObjectCreateDownloadURLRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AppLogCollectionRequestObjectCreateDownloadURLRequest) Post(ctx context.Context) (resObj *AppLogCollectionDownloadDetails, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}
