// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// DomainRequestBuilder is request builder for Domain
type DomainRequestBuilder struct{ BaseRequestBuilder }

// Request returns DomainRequest
func (b *DomainRequestBuilder) Request() *DomainRequest {
	return &DomainRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DomainRequest is request for Domain
type DomainRequest struct{ BaseRequest }

// Get performs GET request for Domain
func (r *DomainRequest) Get(ctx context.Context) (resObj *Domain, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Domain
func (r *DomainRequest) Update(ctx context.Context, reqObj *Domain) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Domain
func (r *DomainRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DomainDnsCnameRecordRequestBuilder is request builder for DomainDnsCnameRecord
type DomainDnsCnameRecordRequestBuilder struct{ BaseRequestBuilder }

// Request returns DomainDnsCnameRecordRequest
func (b *DomainDnsCnameRecordRequestBuilder) Request() *DomainDnsCnameRecordRequest {
	return &DomainDnsCnameRecordRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DomainDnsCnameRecordRequest is request for DomainDnsCnameRecord
type DomainDnsCnameRecordRequest struct{ BaseRequest }

// Get performs GET request for DomainDnsCnameRecord
func (r *DomainDnsCnameRecordRequest) Get(ctx context.Context) (resObj *DomainDnsCnameRecord, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DomainDnsCnameRecord
func (r *DomainDnsCnameRecordRequest) Update(ctx context.Context, reqObj *DomainDnsCnameRecord) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DomainDnsCnameRecord
func (r *DomainDnsCnameRecordRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DomainDnsMxRecordRequestBuilder is request builder for DomainDnsMxRecord
type DomainDnsMxRecordRequestBuilder struct{ BaseRequestBuilder }

// Request returns DomainDnsMxRecordRequest
func (b *DomainDnsMxRecordRequestBuilder) Request() *DomainDnsMxRecordRequest {
	return &DomainDnsMxRecordRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DomainDnsMxRecordRequest is request for DomainDnsMxRecord
type DomainDnsMxRecordRequest struct{ BaseRequest }

// Get performs GET request for DomainDnsMxRecord
func (r *DomainDnsMxRecordRequest) Get(ctx context.Context) (resObj *DomainDnsMxRecord, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DomainDnsMxRecord
func (r *DomainDnsMxRecordRequest) Update(ctx context.Context, reqObj *DomainDnsMxRecord) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DomainDnsMxRecord
func (r *DomainDnsMxRecordRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DomainDnsRecordRequestBuilder is request builder for DomainDnsRecord
type DomainDnsRecordRequestBuilder struct{ BaseRequestBuilder }

// Request returns DomainDnsRecordRequest
func (b *DomainDnsRecordRequestBuilder) Request() *DomainDnsRecordRequest {
	return &DomainDnsRecordRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DomainDnsRecordRequest is request for DomainDnsRecord
type DomainDnsRecordRequest struct{ BaseRequest }

// Get performs GET request for DomainDnsRecord
func (r *DomainDnsRecordRequest) Get(ctx context.Context) (resObj *DomainDnsRecord, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DomainDnsRecord
func (r *DomainDnsRecordRequest) Update(ctx context.Context, reqObj *DomainDnsRecord) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DomainDnsRecord
func (r *DomainDnsRecordRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DomainDnsSrvRecordRequestBuilder is request builder for DomainDnsSrvRecord
type DomainDnsSrvRecordRequestBuilder struct{ BaseRequestBuilder }

// Request returns DomainDnsSrvRecordRequest
func (b *DomainDnsSrvRecordRequestBuilder) Request() *DomainDnsSrvRecordRequest {
	return &DomainDnsSrvRecordRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DomainDnsSrvRecordRequest is request for DomainDnsSrvRecord
type DomainDnsSrvRecordRequest struct{ BaseRequest }

// Get performs GET request for DomainDnsSrvRecord
func (r *DomainDnsSrvRecordRequest) Get(ctx context.Context) (resObj *DomainDnsSrvRecord, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DomainDnsSrvRecord
func (r *DomainDnsSrvRecordRequest) Update(ctx context.Context, reqObj *DomainDnsSrvRecord) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DomainDnsSrvRecord
func (r *DomainDnsSrvRecordRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DomainDnsTxtRecordRequestBuilder is request builder for DomainDnsTxtRecord
type DomainDnsTxtRecordRequestBuilder struct{ BaseRequestBuilder }

// Request returns DomainDnsTxtRecordRequest
func (b *DomainDnsTxtRecordRequestBuilder) Request() *DomainDnsTxtRecordRequest {
	return &DomainDnsTxtRecordRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DomainDnsTxtRecordRequest is request for DomainDnsTxtRecord
type DomainDnsTxtRecordRequest struct{ BaseRequest }

// Get performs GET request for DomainDnsTxtRecord
func (r *DomainDnsTxtRecordRequest) Get(ctx context.Context) (resObj *DomainDnsTxtRecord, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DomainDnsTxtRecord
func (r *DomainDnsTxtRecordRequest) Update(ctx context.Context, reqObj *DomainDnsTxtRecord) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DomainDnsTxtRecord
func (r *DomainDnsTxtRecordRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DomainDnsUnavailableRecordRequestBuilder is request builder for DomainDnsUnavailableRecord
type DomainDnsUnavailableRecordRequestBuilder struct{ BaseRequestBuilder }

// Request returns DomainDnsUnavailableRecordRequest
func (b *DomainDnsUnavailableRecordRequestBuilder) Request() *DomainDnsUnavailableRecordRequest {
	return &DomainDnsUnavailableRecordRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DomainDnsUnavailableRecordRequest is request for DomainDnsUnavailableRecord
type DomainDnsUnavailableRecordRequest struct{ BaseRequest }

// Get performs GET request for DomainDnsUnavailableRecord
func (r *DomainDnsUnavailableRecordRequest) Get(ctx context.Context) (resObj *DomainDnsUnavailableRecord, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DomainDnsUnavailableRecord
func (r *DomainDnsUnavailableRecordRequest) Update(ctx context.Context, reqObj *DomainDnsUnavailableRecord) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DomainDnsUnavailableRecord
func (r *DomainDnsUnavailableRecordRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DomainIdentitySourceRequestBuilder is request builder for DomainIdentitySource
type DomainIdentitySourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns DomainIdentitySourceRequest
func (b *DomainIdentitySourceRequestBuilder) Request() *DomainIdentitySourceRequest {
	return &DomainIdentitySourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DomainIdentitySourceRequest is request for DomainIdentitySource
type DomainIdentitySourceRequest struct{ BaseRequest }

// Get performs GET request for DomainIdentitySource
func (r *DomainIdentitySourceRequest) Get(ctx context.Context) (resObj *DomainIdentitySource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DomainIdentitySource
func (r *DomainIdentitySourceRequest) Update(ctx context.Context, reqObj *DomainIdentitySource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DomainIdentitySource
func (r *DomainIdentitySourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DomainRegistrantRequestBuilder is request builder for DomainRegistrant
type DomainRegistrantRequestBuilder struct{ BaseRequestBuilder }

// Request returns DomainRegistrantRequest
func (b *DomainRegistrantRequestBuilder) Request() *DomainRegistrantRequest {
	return &DomainRegistrantRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DomainRegistrantRequest is request for DomainRegistrant
type DomainRegistrantRequest struct{ BaseRequest }

// Get performs GET request for DomainRegistrant
func (r *DomainRegistrantRequest) Get(ctx context.Context) (resObj *DomainRegistrant, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DomainRegistrant
func (r *DomainRegistrantRequest) Update(ctx context.Context, reqObj *DomainRegistrant) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DomainRegistrant
func (r *DomainRegistrantRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DomainSecurityProfileRequestBuilder is request builder for DomainSecurityProfile
type DomainSecurityProfileRequestBuilder struct{ BaseRequestBuilder }

// Request returns DomainSecurityProfileRequest
func (b *DomainSecurityProfileRequestBuilder) Request() *DomainSecurityProfileRequest {
	return &DomainSecurityProfileRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DomainSecurityProfileRequest is request for DomainSecurityProfile
type DomainSecurityProfileRequest struct{ BaseRequest }

// Get performs GET request for DomainSecurityProfile
func (r *DomainSecurityProfileRequest) Get(ctx context.Context) (resObj *DomainSecurityProfile, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DomainSecurityProfile
func (r *DomainSecurityProfileRequest) Update(ctx context.Context, reqObj *DomainSecurityProfile) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DomainSecurityProfile
func (r *DomainSecurityProfileRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DomainStateRequestBuilder is request builder for DomainState
type DomainStateRequestBuilder struct{ BaseRequestBuilder }

// Request returns DomainStateRequest
func (b *DomainStateRequestBuilder) Request() *DomainStateRequest {
	return &DomainStateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DomainStateRequest is request for DomainState
type DomainStateRequest struct{ BaseRequest }

// Get performs GET request for DomainState
func (r *DomainStateRequest) Get(ctx context.Context) (resObj *DomainState, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DomainState
func (r *DomainStateRequest) Update(ctx context.Context, reqObj *DomainState) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DomainState
func (r *DomainStateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type DomainForceDeleteRequestBuilder struct{ BaseRequestBuilder }

// ForceDelete action undocumentedrav
func (b *DomainRequestBuilder) ForceDelete(reqObj *DomainForceDeleteRequestParameter) *DomainForceDeleteRequestBuilder {
	bb := &DomainForceDeleteRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/ForceDelete"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type DomainForceDeleteRequest struct{ BaseRequest }

func (b *DomainForceDeleteRequestBuilder) Request() *DomainForceDeleteRequest {
	return &DomainForceDeleteRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *DomainForceDeleteRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type DomainPromoteRequestBuilder struct{ BaseRequestBuilder }

// Promote action undocumentedras
func (b *DomainRequestBuilder) Promote(reqObj *DomainPromoteRequestParameter) *DomainPromoteRequestBuilder {
	bb := &DomainPromoteRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Promote"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type DomainPromoteRequest struct{ BaseRequest }

func (b *DomainPromoteRequestBuilder) Request() *DomainPromoteRequest {
	return &DomainPromoteRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *DomainPromoteRequest) Post(ctx context.Context) (resObj *bool, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type DomainVerifyRequestBuilder struct{ BaseRequestBuilder }

// Verify action undocumentedras
func (b *DomainRequestBuilder) Verify(reqObj *DomainVerifyRequestParameter) *DomainVerifyRequestBuilder {
	bb := &DomainVerifyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Verify"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type DomainVerifyRequest struct{ BaseRequest }

func (b *DomainVerifyRequestBuilder) Request() *DomainVerifyRequest {
	return &DomainVerifyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *DomainVerifyRequest) Post(ctx context.Context) (resObj *Domain, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}
