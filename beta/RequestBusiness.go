// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// BusinessFlowRequestBuilder is request builder for BusinessFlow
type BusinessFlowRequestBuilder struct{ BaseRequestBuilder }

// Request returns BusinessFlowRequest
func (b *BusinessFlowRequestBuilder) Request() *BusinessFlowRequest {
	return &BusinessFlowRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BusinessFlowRequest is request for BusinessFlow
type BusinessFlowRequest struct{ BaseRequest }

// Get performs GET request for BusinessFlow
func (r *BusinessFlowRequest) Get(ctx context.Context) (resObj *BusinessFlow, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BusinessFlow
func (r *BusinessFlowRequest) Update(ctx context.Context, reqObj *BusinessFlow) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BusinessFlow
func (r *BusinessFlowRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BusinessFlowSettingsRequestBuilder is request builder for BusinessFlowSettings
type BusinessFlowSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns BusinessFlowSettingsRequest
func (b *BusinessFlowSettingsRequestBuilder) Request() *BusinessFlowSettingsRequest {
	return &BusinessFlowSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BusinessFlowSettingsRequest is request for BusinessFlowSettings
type BusinessFlowSettingsRequest struct{ BaseRequest }

// Get performs GET request for BusinessFlowSettings
func (r *BusinessFlowSettingsRequest) Get(ctx context.Context) (resObj *BusinessFlowSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BusinessFlowSettings
func (r *BusinessFlowSettingsRequest) Update(ctx context.Context, reqObj *BusinessFlowSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BusinessFlowSettings
func (r *BusinessFlowSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BusinessFlowTemplateRequestBuilder is request builder for BusinessFlowTemplate
type BusinessFlowTemplateRequestBuilder struct{ BaseRequestBuilder }

// Request returns BusinessFlowTemplateRequest
func (b *BusinessFlowTemplateRequestBuilder) Request() *BusinessFlowTemplateRequest {
	return &BusinessFlowTemplateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BusinessFlowTemplateRequest is request for BusinessFlowTemplate
type BusinessFlowTemplateRequest struct{ BaseRequest }

// Get performs GET request for BusinessFlowTemplate
func (r *BusinessFlowTemplateRequest) Get(ctx context.Context) (resObj *BusinessFlowTemplate, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BusinessFlowTemplate
func (r *BusinessFlowTemplateRequest) Update(ctx context.Context, reqObj *BusinessFlowTemplate) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BusinessFlowTemplate
func (r *BusinessFlowTemplateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BusinessScenarioRequestBuilder is request builder for BusinessScenario
type BusinessScenarioRequestBuilder struct{ BaseRequestBuilder }

// Request returns BusinessScenarioRequest
func (b *BusinessScenarioRequestBuilder) Request() *BusinessScenarioRequest {
	return &BusinessScenarioRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BusinessScenarioRequest is request for BusinessScenario
type BusinessScenarioRequest struct{ BaseRequest }

// Get performs GET request for BusinessScenario
func (r *BusinessScenarioRequest) Get(ctx context.Context) (resObj *BusinessScenario, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BusinessScenario
func (r *BusinessScenarioRequest) Update(ctx context.Context, reqObj *BusinessScenario) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BusinessScenario
func (r *BusinessScenarioRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BusinessScenarioGroupTargetRequestBuilder is request builder for BusinessScenarioGroupTarget
type BusinessScenarioGroupTargetRequestBuilder struct{ BaseRequestBuilder }

// Request returns BusinessScenarioGroupTargetRequest
func (b *BusinessScenarioGroupTargetRequestBuilder) Request() *BusinessScenarioGroupTargetRequest {
	return &BusinessScenarioGroupTargetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BusinessScenarioGroupTargetRequest is request for BusinessScenarioGroupTarget
type BusinessScenarioGroupTargetRequest struct{ BaseRequest }

// Get performs GET request for BusinessScenarioGroupTarget
func (r *BusinessScenarioGroupTargetRequest) Get(ctx context.Context) (resObj *BusinessScenarioGroupTarget, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BusinessScenarioGroupTarget
func (r *BusinessScenarioGroupTargetRequest) Update(ctx context.Context, reqObj *BusinessScenarioGroupTarget) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BusinessScenarioGroupTarget
func (r *BusinessScenarioGroupTargetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BusinessScenarioPlanReferenceRequestBuilder is request builder for BusinessScenarioPlanReference
type BusinessScenarioPlanReferenceRequestBuilder struct{ BaseRequestBuilder }

// Request returns BusinessScenarioPlanReferenceRequest
func (b *BusinessScenarioPlanReferenceRequestBuilder) Request() *BusinessScenarioPlanReferenceRequest {
	return &BusinessScenarioPlanReferenceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BusinessScenarioPlanReferenceRequest is request for BusinessScenarioPlanReference
type BusinessScenarioPlanReferenceRequest struct{ BaseRequest }

// Get performs GET request for BusinessScenarioPlanReference
func (r *BusinessScenarioPlanReferenceRequest) Get(ctx context.Context) (resObj *BusinessScenarioPlanReference, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BusinessScenarioPlanReference
func (r *BusinessScenarioPlanReferenceRequest) Update(ctx context.Context, reqObj *BusinessScenarioPlanReference) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BusinessScenarioPlanReference
func (r *BusinessScenarioPlanReferenceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BusinessScenarioPlannerRequestBuilder is request builder for BusinessScenarioPlanner
type BusinessScenarioPlannerRequestBuilder struct{ BaseRequestBuilder }

// Request returns BusinessScenarioPlannerRequest
func (b *BusinessScenarioPlannerRequestBuilder) Request() *BusinessScenarioPlannerRequest {
	return &BusinessScenarioPlannerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BusinessScenarioPlannerRequest is request for BusinessScenarioPlanner
type BusinessScenarioPlannerRequest struct{ BaseRequest }

// Get performs GET request for BusinessScenarioPlanner
func (r *BusinessScenarioPlannerRequest) Get(ctx context.Context) (resObj *BusinessScenarioPlanner, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BusinessScenarioPlanner
func (r *BusinessScenarioPlannerRequest) Update(ctx context.Context, reqObj *BusinessScenarioPlanner) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BusinessScenarioPlanner
func (r *BusinessScenarioPlannerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BusinessScenarioPropertiesRequestBuilder is request builder for BusinessScenarioProperties
type BusinessScenarioPropertiesRequestBuilder struct{ BaseRequestBuilder }

// Request returns BusinessScenarioPropertiesRequest
func (b *BusinessScenarioPropertiesRequestBuilder) Request() *BusinessScenarioPropertiesRequest {
	return &BusinessScenarioPropertiesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BusinessScenarioPropertiesRequest is request for BusinessScenarioProperties
type BusinessScenarioPropertiesRequest struct{ BaseRequest }

// Get performs GET request for BusinessScenarioProperties
func (r *BusinessScenarioPropertiesRequest) Get(ctx context.Context) (resObj *BusinessScenarioProperties, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BusinessScenarioProperties
func (r *BusinessScenarioPropertiesRequest) Update(ctx context.Context, reqObj *BusinessScenarioProperties) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BusinessScenarioProperties
func (r *BusinessScenarioPropertiesRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BusinessScenarioTaskRequestBuilder is request builder for BusinessScenarioTask
type BusinessScenarioTaskRequestBuilder struct{ BaseRequestBuilder }

// Request returns BusinessScenarioTaskRequest
func (b *BusinessScenarioTaskRequestBuilder) Request() *BusinessScenarioTaskRequest {
	return &BusinessScenarioTaskRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BusinessScenarioTaskRequest is request for BusinessScenarioTask
type BusinessScenarioTaskRequest struct{ BaseRequest }

// Get performs GET request for BusinessScenarioTask
func (r *BusinessScenarioTaskRequest) Get(ctx context.Context) (resObj *BusinessScenarioTask, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BusinessScenarioTask
func (r *BusinessScenarioTaskRequest) Update(ctx context.Context, reqObj *BusinessScenarioTask) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BusinessScenarioTask
func (r *BusinessScenarioTaskRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// BusinessScenarioTaskTargetBaseRequestBuilder is request builder for BusinessScenarioTaskTargetBase
type BusinessScenarioTaskTargetBaseRequestBuilder struct{ BaseRequestBuilder }

// Request returns BusinessScenarioTaskTargetBaseRequest
func (b *BusinessScenarioTaskTargetBaseRequestBuilder) Request() *BusinessScenarioTaskTargetBaseRequest {
	return &BusinessScenarioTaskTargetBaseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BusinessScenarioTaskTargetBaseRequest is request for BusinessScenarioTaskTargetBase
type BusinessScenarioTaskTargetBaseRequest struct{ BaseRequest }

// Get performs GET request for BusinessScenarioTaskTargetBase
func (r *BusinessScenarioTaskTargetBaseRequest) Get(ctx context.Context) (resObj *BusinessScenarioTaskTargetBase, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BusinessScenarioTaskTargetBase
func (r *BusinessScenarioTaskTargetBaseRequest) Update(ctx context.Context, reqObj *BusinessScenarioTaskTargetBase) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BusinessScenarioTaskTargetBase
func (r *BusinessScenarioTaskTargetBaseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type BusinessFlowRecordDecisionsRequestBuilder struct{ BaseRequestBuilder }

// RecordDecisions action undocumentedrav
func (b *BusinessFlowRequestBuilder) RecordDecisions(reqObj *BusinessFlowRecordDecisionsRequestParameter) *BusinessFlowRecordDecisionsRequestBuilder {
	bb := &BusinessFlowRecordDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/RecordDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type BusinessFlowRecordDecisionsRequest struct{ BaseRequest }

func (b *BusinessFlowRecordDecisionsRequestBuilder) Request() *BusinessFlowRecordDecisionsRequest {
	return &BusinessFlowRecordDecisionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *BusinessFlowRecordDecisionsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type BusinessScenarioPlannerGetPlanRequestBuilder struct{ BaseRequestBuilder }

// GetPlan action undocumentedras
func (b *BusinessScenarioPlannerRequestBuilder) GetPlan(reqObj *BusinessScenarioPlannerGetPlanRequestParameter) *BusinessScenarioPlannerGetPlanRequestBuilder {
	bb := &BusinessScenarioPlannerGetPlanRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/GetPlan"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type BusinessScenarioPlannerGetPlanRequest struct{ BaseRequest }

func (b *BusinessScenarioPlannerGetPlanRequestBuilder) Request() *BusinessScenarioPlannerGetPlanRequest {
	return &BusinessScenarioPlannerGetPlanRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *BusinessScenarioPlannerGetPlanRequest) Post(ctx context.Context) (resObj *BusinessScenarioPlanReference, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}
