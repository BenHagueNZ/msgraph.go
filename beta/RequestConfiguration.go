// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// ConfigurationRequestBuilder is request builder for Configuration
type ConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns ConfigurationRequest
func (b *ConfigurationRequestBuilder) Request() *ConfigurationRequest {
	return &ConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ConfigurationRequest is request for Configuration
type ConfigurationRequest struct{ BaseRequest }

// Get performs GET request for Configuration
func (r *ConfigurationRequest) Get(ctx context.Context) (resObj *Configuration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Configuration
func (r *ConfigurationRequest) Update(ctx context.Context, reqObj *Configuration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Configuration
func (r *ConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ConfigurationManagerActionRequestBuilder is request builder for ConfigurationManagerAction
type ConfigurationManagerActionRequestBuilder struct{ BaseRequestBuilder }

// Request returns ConfigurationManagerActionRequest
func (b *ConfigurationManagerActionRequestBuilder) Request() *ConfigurationManagerActionRequest {
	return &ConfigurationManagerActionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ConfigurationManagerActionRequest is request for ConfigurationManagerAction
type ConfigurationManagerActionRequest struct{ BaseRequest }

// Get performs GET request for ConfigurationManagerAction
func (r *ConfigurationManagerActionRequest) Get(ctx context.Context) (resObj *ConfigurationManagerAction, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ConfigurationManagerAction
func (r *ConfigurationManagerActionRequest) Update(ctx context.Context, reqObj *ConfigurationManagerAction) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ConfigurationManagerAction
func (r *ConfigurationManagerActionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ConfigurationManagerActionResultRequestBuilder is request builder for ConfigurationManagerActionResult
type ConfigurationManagerActionResultRequestBuilder struct{ BaseRequestBuilder }

// Request returns ConfigurationManagerActionResultRequest
func (b *ConfigurationManagerActionResultRequestBuilder) Request() *ConfigurationManagerActionResultRequest {
	return &ConfigurationManagerActionResultRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ConfigurationManagerActionResultRequest is request for ConfigurationManagerActionResult
type ConfigurationManagerActionResultRequest struct{ BaseRequest }

// Get performs GET request for ConfigurationManagerActionResult
func (r *ConfigurationManagerActionResultRequest) Get(ctx context.Context) (resObj *ConfigurationManagerActionResult, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ConfigurationManagerActionResult
func (r *ConfigurationManagerActionResultRequest) Update(ctx context.Context, reqObj *ConfigurationManagerActionResult) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ConfigurationManagerActionResult
func (r *ConfigurationManagerActionResultRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ConfigurationManagerClientEnabledFeaturesRequestBuilder is request builder for ConfigurationManagerClientEnabledFeatures
type ConfigurationManagerClientEnabledFeaturesRequestBuilder struct{ BaseRequestBuilder }

// Request returns ConfigurationManagerClientEnabledFeaturesRequest
func (b *ConfigurationManagerClientEnabledFeaturesRequestBuilder) Request() *ConfigurationManagerClientEnabledFeaturesRequest {
	return &ConfigurationManagerClientEnabledFeaturesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ConfigurationManagerClientEnabledFeaturesRequest is request for ConfigurationManagerClientEnabledFeatures
type ConfigurationManagerClientEnabledFeaturesRequest struct{ BaseRequest }

// Get performs GET request for ConfigurationManagerClientEnabledFeatures
func (r *ConfigurationManagerClientEnabledFeaturesRequest) Get(ctx context.Context) (resObj *ConfigurationManagerClientEnabledFeatures, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ConfigurationManagerClientEnabledFeatures
func (r *ConfigurationManagerClientEnabledFeaturesRequest) Update(ctx context.Context, reqObj *ConfigurationManagerClientEnabledFeatures) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ConfigurationManagerClientEnabledFeatures
func (r *ConfigurationManagerClientEnabledFeaturesRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ConfigurationManagerClientHealthStateRequestBuilder is request builder for ConfigurationManagerClientHealthState
type ConfigurationManagerClientHealthStateRequestBuilder struct{ BaseRequestBuilder }

// Request returns ConfigurationManagerClientHealthStateRequest
func (b *ConfigurationManagerClientHealthStateRequestBuilder) Request() *ConfigurationManagerClientHealthStateRequest {
	return &ConfigurationManagerClientHealthStateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ConfigurationManagerClientHealthStateRequest is request for ConfigurationManagerClientHealthState
type ConfigurationManagerClientHealthStateRequest struct{ BaseRequest }

// Get performs GET request for ConfigurationManagerClientHealthState
func (r *ConfigurationManagerClientHealthStateRequest) Get(ctx context.Context) (resObj *ConfigurationManagerClientHealthState, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ConfigurationManagerClientHealthState
func (r *ConfigurationManagerClientHealthStateRequest) Update(ctx context.Context, reqObj *ConfigurationManagerClientHealthState) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ConfigurationManagerClientHealthState
func (r *ConfigurationManagerClientHealthStateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ConfigurationManagerClientInformationRequestBuilder is request builder for ConfigurationManagerClientInformation
type ConfigurationManagerClientInformationRequestBuilder struct{ BaseRequestBuilder }

// Request returns ConfigurationManagerClientInformationRequest
func (b *ConfigurationManagerClientInformationRequestBuilder) Request() *ConfigurationManagerClientInformationRequest {
	return &ConfigurationManagerClientInformationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ConfigurationManagerClientInformationRequest is request for ConfigurationManagerClientInformation
type ConfigurationManagerClientInformationRequest struct{ BaseRequest }

// Get performs GET request for ConfigurationManagerClientInformation
func (r *ConfigurationManagerClientInformationRequest) Get(ctx context.Context) (resObj *ConfigurationManagerClientInformation, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ConfigurationManagerClientInformation
func (r *ConfigurationManagerClientInformationRequest) Update(ctx context.Context, reqObj *ConfigurationManagerClientInformation) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ConfigurationManagerClientInformation
func (r *ConfigurationManagerClientInformationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ConfigurationManagerCollectionAssignmentTargetRequestBuilder is request builder for ConfigurationManagerCollectionAssignmentTarget
type ConfigurationManagerCollectionAssignmentTargetRequestBuilder struct{ BaseRequestBuilder }

// Request returns ConfigurationManagerCollectionAssignmentTargetRequest
func (b *ConfigurationManagerCollectionAssignmentTargetRequestBuilder) Request() *ConfigurationManagerCollectionAssignmentTargetRequest {
	return &ConfigurationManagerCollectionAssignmentTargetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ConfigurationManagerCollectionAssignmentTargetRequest is request for ConfigurationManagerCollectionAssignmentTarget
type ConfigurationManagerCollectionAssignmentTargetRequest struct{ BaseRequest }

// Get performs GET request for ConfigurationManagerCollectionAssignmentTarget
func (r *ConfigurationManagerCollectionAssignmentTargetRequest) Get(ctx context.Context) (resObj *ConfigurationManagerCollectionAssignmentTarget, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ConfigurationManagerCollectionAssignmentTarget
func (r *ConfigurationManagerCollectionAssignmentTargetRequest) Update(ctx context.Context, reqObj *ConfigurationManagerCollectionAssignmentTarget) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ConfigurationManagerCollectionAssignmentTarget
func (r *ConfigurationManagerCollectionAssignmentTargetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
