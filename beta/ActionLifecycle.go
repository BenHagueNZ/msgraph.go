// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// CustomTaskExtensions returns request builder for IdentityGovernance_customTaskExtension collection
func (b *LifecycleWorkflowsContainerRequestBuilder) CustomTaskExtensions() *LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder {
	bb := &LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/customTaskExtensions"
	return bb
}

// LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder is request builder for IdentityGovernance_customTaskExtension collection
type LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernance_customTaskExtension collection
func (b *LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder) Request() *LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest {
	return &LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernance_customTaskExtension item
func (b *LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder) ID(id string) *IdentityGovernance_customTaskExtensionRequestBuilder {
	bb := &IdentityGovernance_customTaskExtensionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest is request for IdentityGovernance_customTaskExtension collection
type LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernance_customTaskExtension collection
func (r *LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernance_customTaskExtension, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernance_customTaskExtension
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernance_customTaskExtension
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernance_customTaskExtension collection, max N pages
func (r *LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernance_customTaskExtension, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernance_customTaskExtension collection
func (r *LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernance_customTaskExtension, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernance_customTaskExtension collection
func (r *LifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernance_customTaskExtension) (resObj *IdentityGovernance_customTaskExtension, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeletedItems is navigation property
func (b *LifecycleWorkflowsContainerRequestBuilder) DeletedItems() *DeletedItemContainerRequestBuilder {
	bb := &DeletedItemContainerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deletedItems"
	return bb
}

// Settings is navigation property
func (b *LifecycleWorkflowsContainerRequestBuilder) Settings() *IdentityGovernance_lifecycleManagementSettingsRequestBuilder {
	bb := &IdentityGovernance_lifecycleManagementSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// TaskDefinitions returns request builder for IdentityGovernance_taskDefinition collection
func (b *LifecycleWorkflowsContainerRequestBuilder) TaskDefinitions() *LifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder {
	bb := &LifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskDefinitions"
	return bb
}

// LifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder is request builder for IdentityGovernance_taskDefinition collection
type LifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernance_taskDefinition collection
func (b *LifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder) Request() *LifecycleWorkflowsContainerTaskDefinitionsCollectionRequest {
	return &LifecycleWorkflowsContainerTaskDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernance_taskDefinition item
func (b *LifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder) ID(id string) *IdentityGovernance_taskDefinitionRequestBuilder {
	bb := &IdentityGovernance_taskDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// LifecycleWorkflowsContainerTaskDefinitionsCollectionRequest is request for IdentityGovernance_taskDefinition collection
type LifecycleWorkflowsContainerTaskDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernance_taskDefinition collection
func (r *LifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernance_taskDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernance_taskDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernance_taskDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernance_taskDefinition collection, max N pages
func (r *LifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernance_taskDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernance_taskDefinition collection
func (r *LifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernance_taskDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernance_taskDefinition collection
func (r *LifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernance_taskDefinition) (resObj *IdentityGovernance_taskDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WorkflowTemplates returns request builder for IdentityGovernance_workflowTemplate collection
func (b *LifecycleWorkflowsContainerRequestBuilder) WorkflowTemplates() *LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder {
	bb := &LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/workflowTemplates"
	return bb
}

// LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder is request builder for IdentityGovernance_workflowTemplate collection
type LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernance_workflowTemplate collection
func (b *LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder) Request() *LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest {
	return &LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernance_workflowTemplate item
func (b *LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder) ID(id string) *IdentityGovernance_workflowTemplateRequestBuilder {
	bb := &IdentityGovernance_workflowTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest is request for IdentityGovernance_workflowTemplate collection
type LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernance_workflowTemplate collection
func (r *LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernance_workflowTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernance_workflowTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernance_workflowTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernance_workflowTemplate collection, max N pages
func (r *LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernance_workflowTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernance_workflowTemplate collection
func (r *LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) Get(ctx context.Context) ([]IdentityGovernance_workflowTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernance_workflowTemplate collection
func (r *LifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernance_workflowTemplate) (resObj *IdentityGovernance_workflowTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Workflows returns request builder for IdentityGovernance_workflow collection
func (b *LifecycleWorkflowsContainerRequestBuilder) Workflows() *LifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder {
	bb := &LifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/workflows"
	return bb
}

// LifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder is request builder for IdentityGovernance_workflow collection
type LifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernance_workflow collection
func (b *LifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder) Request() *LifecycleWorkflowsContainerWorkflowsCollectionRequest {
	return &LifecycleWorkflowsContainerWorkflowsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernance_workflow item
func (b *LifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder) ID(id string) *IdentityGovernance_workflowRequestBuilder {
	bb := &IdentityGovernance_workflowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// LifecycleWorkflowsContainerWorkflowsCollectionRequest is request for IdentityGovernance_workflow collection
type LifecycleWorkflowsContainerWorkflowsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernance_workflow collection
func (r *LifecycleWorkflowsContainerWorkflowsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernance_workflow, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernance_workflow
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernance_workflow
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernance_workflow collection, max N pages
func (r *LifecycleWorkflowsContainerWorkflowsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernance_workflow, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernance_workflow collection
func (r *LifecycleWorkflowsContainerWorkflowsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernance_workflow, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernance_workflow collection
func (r *LifecycleWorkflowsContainerWorkflowsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernance_workflow) (resObj *IdentityGovernance_workflow, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
