// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// OpenIDConnectIdentityProviderRequestBuilder is request builder for OpenIDConnectIdentityProvider
type OpenIDConnectIdentityProviderRequestBuilder struct{ BaseRequestBuilder }

// Request returns OpenIDConnectIdentityProviderRequest
func (b *OpenIDConnectIdentityProviderRequestBuilder) Request() *OpenIDConnectIdentityProviderRequest {
	return &OpenIDConnectIdentityProviderRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// OpenIDConnectIdentityProviderRequest is request for OpenIDConnectIdentityProvider
type OpenIDConnectIdentityProviderRequest struct{ BaseRequest }

// Get performs GET request for OpenIDConnectIdentityProvider
func (r *OpenIDConnectIdentityProviderRequest) Get(ctx context.Context) (resObj *OpenIDConnectIdentityProvider, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for OpenIDConnectIdentityProvider
func (r *OpenIDConnectIdentityProviderRequest) Update(ctx context.Context, reqObj *OpenIDConnectIdentityProvider) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for OpenIDConnectIdentityProvider
func (r *OpenIDConnectIdentityProviderRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// OpenIDConnectProviderRequestBuilder is request builder for OpenIDConnectProvider
type OpenIDConnectProviderRequestBuilder struct{ BaseRequestBuilder }

// Request returns OpenIDConnectProviderRequest
func (b *OpenIDConnectProviderRequestBuilder) Request() *OpenIDConnectProviderRequest {
	return &OpenIDConnectProviderRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// OpenIDConnectProviderRequest is request for OpenIDConnectProvider
type OpenIDConnectProviderRequest struct{ BaseRequest }

// Get performs GET request for OpenIDConnectProvider
func (r *OpenIDConnectProviderRequest) Get(ctx context.Context) (resObj *OpenIDConnectProvider, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for OpenIDConnectProvider
func (r *OpenIDConnectProviderRequest) Update(ctx context.Context, reqObj *OpenIDConnectProvider) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for OpenIDConnectProvider
func (r *OpenIDConnectProviderRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// OpenShiftRequestBuilder is request builder for OpenShift
type OpenShiftRequestBuilder struct{ BaseRequestBuilder }

// Request returns OpenShiftRequest
func (b *OpenShiftRequestBuilder) Request() *OpenShiftRequest {
	return &OpenShiftRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// OpenShiftRequest is request for OpenShift
type OpenShiftRequest struct{ BaseRequest }

// Get performs GET request for OpenShift
func (r *OpenShiftRequest) Get(ctx context.Context) (resObj *OpenShift, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for OpenShift
func (r *OpenShiftRequest) Update(ctx context.Context, reqObj *OpenShift) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for OpenShift
func (r *OpenShiftRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// OpenShiftChangeRequestObjectRequestBuilder is request builder for OpenShiftChangeRequestObject
type OpenShiftChangeRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns OpenShiftChangeRequestObjectRequest
func (b *OpenShiftChangeRequestObjectRequestBuilder) Request() *OpenShiftChangeRequestObjectRequest {
	return &OpenShiftChangeRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// OpenShiftChangeRequestObjectRequest is request for OpenShiftChangeRequestObject
type OpenShiftChangeRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for OpenShiftChangeRequestObject
func (r *OpenShiftChangeRequestObjectRequest) Get(ctx context.Context) (resObj *OpenShiftChangeRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for OpenShiftChangeRequestObject
func (r *OpenShiftChangeRequestObjectRequest) Update(ctx context.Context, reqObj *OpenShiftChangeRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for OpenShiftChangeRequestObject
func (r *OpenShiftChangeRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// OpenShiftItemRequestBuilder is request builder for OpenShiftItem
type OpenShiftItemRequestBuilder struct{ BaseRequestBuilder }

// Request returns OpenShiftItemRequest
func (b *OpenShiftItemRequestBuilder) Request() *OpenShiftItemRequest {
	return &OpenShiftItemRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// OpenShiftItemRequest is request for OpenShiftItem
type OpenShiftItemRequest struct{ BaseRequest }

// Get performs GET request for OpenShiftItem
func (r *OpenShiftItemRequest) Get(ctx context.Context) (resObj *OpenShiftItem, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for OpenShiftItem
func (r *OpenShiftItemRequest) Update(ctx context.Context, reqObj *OpenShiftItem) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for OpenShiftItem
func (r *OpenShiftItemRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// OpenTypeExtensionRequestBuilder is request builder for OpenTypeExtension
type OpenTypeExtensionRequestBuilder struct{ BaseRequestBuilder }

// Request returns OpenTypeExtensionRequest
func (b *OpenTypeExtensionRequestBuilder) Request() *OpenTypeExtensionRequest {
	return &OpenTypeExtensionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// OpenTypeExtensionRequest is request for OpenTypeExtension
type OpenTypeExtensionRequest struct{ BaseRequest }

// Get performs GET request for OpenTypeExtension
func (r *OpenTypeExtensionRequest) Get(ctx context.Context) (resObj *OpenTypeExtension, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for OpenTypeExtension
func (r *OpenTypeExtensionRequest) Update(ctx context.Context, reqObj *OpenTypeExtension) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for OpenTypeExtension
func (r *OpenTypeExtensionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
