// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// GovernanceCriteriaRequestBuilder is request builder for GovernanceCriteria
type GovernanceCriteriaRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceCriteriaRequest
func (b *GovernanceCriteriaRequestBuilder) Request() *GovernanceCriteriaRequest {
	return &GovernanceCriteriaRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceCriteriaRequest is request for GovernanceCriteria
type GovernanceCriteriaRequest struct{ BaseRequest }

// Get performs GET request for GovernanceCriteria
func (r *GovernanceCriteriaRequest) Get(ctx context.Context) (resObj *GovernanceCriteria, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceCriteria
func (r *GovernanceCriteriaRequest) Update(ctx context.Context, reqObj *GovernanceCriteria) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceCriteria
func (r *GovernanceCriteriaRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceInsightRequestBuilder is request builder for GovernanceInsight
type GovernanceInsightRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceInsightRequest
func (b *GovernanceInsightRequestBuilder) Request() *GovernanceInsightRequest {
	return &GovernanceInsightRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceInsightRequest is request for GovernanceInsight
type GovernanceInsightRequest struct{ BaseRequest }

// Get performs GET request for GovernanceInsight
func (r *GovernanceInsightRequest) Get(ctx context.Context) (resObj *GovernanceInsight, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceInsight
func (r *GovernanceInsightRequest) Update(ctx context.Context, reqObj *GovernanceInsight) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceInsight
func (r *GovernanceInsightRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceNotificationPolicyRequestBuilder is request builder for GovernanceNotificationPolicy
type GovernanceNotificationPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceNotificationPolicyRequest
func (b *GovernanceNotificationPolicyRequestBuilder) Request() *GovernanceNotificationPolicyRequest {
	return &GovernanceNotificationPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceNotificationPolicyRequest is request for GovernanceNotificationPolicy
type GovernanceNotificationPolicyRequest struct{ BaseRequest }

// Get performs GET request for GovernanceNotificationPolicy
func (r *GovernanceNotificationPolicyRequest) Get(ctx context.Context) (resObj *GovernanceNotificationPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceNotificationPolicy
func (r *GovernanceNotificationPolicyRequest) Update(ctx context.Context, reqObj *GovernanceNotificationPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceNotificationPolicy
func (r *GovernanceNotificationPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceNotificationTemplateRequestBuilder is request builder for GovernanceNotificationTemplate
type GovernanceNotificationTemplateRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceNotificationTemplateRequest
func (b *GovernanceNotificationTemplateRequestBuilder) Request() *GovernanceNotificationTemplateRequest {
	return &GovernanceNotificationTemplateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceNotificationTemplateRequest is request for GovernanceNotificationTemplate
type GovernanceNotificationTemplateRequest struct{ BaseRequest }

// Get performs GET request for GovernanceNotificationTemplate
func (r *GovernanceNotificationTemplateRequest) Get(ctx context.Context) (resObj *GovernanceNotificationTemplate, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceNotificationTemplate
func (r *GovernanceNotificationTemplateRequest) Update(ctx context.Context, reqObj *GovernanceNotificationTemplate) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceNotificationTemplate
func (r *GovernanceNotificationTemplateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernancePermissionRequestBuilder is request builder for GovernancePermission
type GovernancePermissionRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernancePermissionRequest
func (b *GovernancePermissionRequestBuilder) Request() *GovernancePermissionRequest {
	return &GovernancePermissionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernancePermissionRequest is request for GovernancePermission
type GovernancePermissionRequest struct{ BaseRequest }

// Get performs GET request for GovernancePermission
func (r *GovernancePermissionRequest) Get(ctx context.Context) (resObj *GovernancePermission, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernancePermission
func (r *GovernancePermissionRequest) Update(ctx context.Context, reqObj *GovernancePermission) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernancePermission
func (r *GovernancePermissionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernancePolicyRequestBuilder is request builder for GovernancePolicy
type GovernancePolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernancePolicyRequest
func (b *GovernancePolicyRequestBuilder) Request() *GovernancePolicyRequest {
	return &GovernancePolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernancePolicyRequest is request for GovernancePolicy
type GovernancePolicyRequest struct{ BaseRequest }

// Get performs GET request for GovernancePolicy
func (r *GovernancePolicyRequest) Get(ctx context.Context) (resObj *GovernancePolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernancePolicy
func (r *GovernancePolicyRequest) Update(ctx context.Context, reqObj *GovernancePolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernancePolicy
func (r *GovernancePolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernancePolicyTemplateRequestBuilder is request builder for GovernancePolicyTemplate
type GovernancePolicyTemplateRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernancePolicyTemplateRequest
func (b *GovernancePolicyTemplateRequestBuilder) Request() *GovernancePolicyTemplateRequest {
	return &GovernancePolicyTemplateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernancePolicyTemplateRequest is request for GovernancePolicyTemplate
type GovernancePolicyTemplateRequest struct{ BaseRequest }

// Get performs GET request for GovernancePolicyTemplate
func (r *GovernancePolicyTemplateRequest) Get(ctx context.Context) (resObj *GovernancePolicyTemplate, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernancePolicyTemplate
func (r *GovernancePolicyTemplateRequest) Update(ctx context.Context, reqObj *GovernancePolicyTemplate) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernancePolicyTemplate
func (r *GovernancePolicyTemplateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceResourceRequestBuilder is request builder for GovernanceResource
type GovernanceResourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceResourceRequest
func (b *GovernanceResourceRequestBuilder) Request() *GovernanceResourceRequest {
	return &GovernanceResourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceResourceRequest is request for GovernanceResource
type GovernanceResourceRequest struct{ BaseRequest }

// Get performs GET request for GovernanceResource
func (r *GovernanceResourceRequest) Get(ctx context.Context) (resObj *GovernanceResource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceResource
func (r *GovernanceResourceRequest) Update(ctx context.Context, reqObj *GovernanceResource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceResource
func (r *GovernanceResourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceRoleAssignmentRequestBuilder is request builder for GovernanceRoleAssignment
type GovernanceRoleAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceRoleAssignmentRequest
func (b *GovernanceRoleAssignmentRequestBuilder) Request() *GovernanceRoleAssignmentRequest {
	return &GovernanceRoleAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceRoleAssignmentRequest is request for GovernanceRoleAssignment
type GovernanceRoleAssignmentRequest struct{ BaseRequest }

// Get performs GET request for GovernanceRoleAssignment
func (r *GovernanceRoleAssignmentRequest) Get(ctx context.Context) (resObj *GovernanceRoleAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceRoleAssignment
func (r *GovernanceRoleAssignmentRequest) Update(ctx context.Context, reqObj *GovernanceRoleAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceRoleAssignment
func (r *GovernanceRoleAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceRoleAssignmentRequestRequestBuilder is request builder for GovernanceRoleAssignmentRequest
type GovernanceRoleAssignmentRequestRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceRoleAssignmentRequestRequest
func (b *GovernanceRoleAssignmentRequestRequestBuilder) Request() *GovernanceRoleAssignmentRequestRequest {
	return &GovernanceRoleAssignmentRequestRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceRoleAssignmentRequestRequest is request for GovernanceRoleAssignmentRequest
type GovernanceRoleAssignmentRequestRequest struct{ BaseRequest }

// Get performs GET request for GovernanceRoleAssignmentRequest
func (r *GovernanceRoleAssignmentRequestRequest) Get(ctx context.Context) (resObj *GovernanceRoleAssignmentRequest, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceRoleAssignmentRequest
func (r *GovernanceRoleAssignmentRequestRequest) Update(ctx context.Context, reqObj *GovernanceRoleAssignmentRequest) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceRoleAssignmentRequest
func (r *GovernanceRoleAssignmentRequestRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceRoleAssignmentRequestObjectRequestBuilder is request builder for GovernanceRoleAssignmentRequestObject
type GovernanceRoleAssignmentRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceRoleAssignmentRequestObjectRequest
func (b *GovernanceRoleAssignmentRequestObjectRequestBuilder) Request() *GovernanceRoleAssignmentRequestObjectRequest {
	return &GovernanceRoleAssignmentRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceRoleAssignmentRequestObjectRequest is request for GovernanceRoleAssignmentRequestObject
type GovernanceRoleAssignmentRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for GovernanceRoleAssignmentRequestObject
func (r *GovernanceRoleAssignmentRequestObjectRequest) Get(ctx context.Context) (resObj *GovernanceRoleAssignmentRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceRoleAssignmentRequestObject
func (r *GovernanceRoleAssignmentRequestObjectRequest) Update(ctx context.Context, reqObj *GovernanceRoleAssignmentRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceRoleAssignmentRequestObject
func (r *GovernanceRoleAssignmentRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceRoleAssignmentRequestStatusRequestBuilder is request builder for GovernanceRoleAssignmentRequestStatus
type GovernanceRoleAssignmentRequestStatusRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceRoleAssignmentRequestStatusRequest
func (b *GovernanceRoleAssignmentRequestStatusRequestBuilder) Request() *GovernanceRoleAssignmentRequestStatusRequest {
	return &GovernanceRoleAssignmentRequestStatusRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceRoleAssignmentRequestStatusRequest is request for GovernanceRoleAssignmentRequestStatus
type GovernanceRoleAssignmentRequestStatusRequest struct{ BaseRequest }

// Get performs GET request for GovernanceRoleAssignmentRequestStatus
func (r *GovernanceRoleAssignmentRequestStatusRequest) Get(ctx context.Context) (resObj *GovernanceRoleAssignmentRequestStatus, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceRoleAssignmentRequestStatus
func (r *GovernanceRoleAssignmentRequestStatusRequest) Update(ctx context.Context, reqObj *GovernanceRoleAssignmentRequestStatus) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceRoleAssignmentRequestStatus
func (r *GovernanceRoleAssignmentRequestStatusRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceRoleDefinitionRequestBuilder is request builder for GovernanceRoleDefinition
type GovernanceRoleDefinitionRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceRoleDefinitionRequest
func (b *GovernanceRoleDefinitionRequestBuilder) Request() *GovernanceRoleDefinitionRequest {
	return &GovernanceRoleDefinitionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceRoleDefinitionRequest is request for GovernanceRoleDefinition
type GovernanceRoleDefinitionRequest struct{ BaseRequest }

// Get performs GET request for GovernanceRoleDefinition
func (r *GovernanceRoleDefinitionRequest) Get(ctx context.Context) (resObj *GovernanceRoleDefinition, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceRoleDefinition
func (r *GovernanceRoleDefinitionRequest) Update(ctx context.Context, reqObj *GovernanceRoleDefinition) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceRoleDefinition
func (r *GovernanceRoleDefinitionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceRoleSettingRequestBuilder is request builder for GovernanceRoleSetting
type GovernanceRoleSettingRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceRoleSettingRequest
func (b *GovernanceRoleSettingRequestBuilder) Request() *GovernanceRoleSettingRequest {
	return &GovernanceRoleSettingRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceRoleSettingRequest is request for GovernanceRoleSetting
type GovernanceRoleSettingRequest struct{ BaseRequest }

// Get performs GET request for GovernanceRoleSetting
func (r *GovernanceRoleSettingRequest) Get(ctx context.Context) (resObj *GovernanceRoleSetting, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceRoleSetting
func (r *GovernanceRoleSettingRequest) Update(ctx context.Context, reqObj *GovernanceRoleSetting) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceRoleSetting
func (r *GovernanceRoleSettingRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceRuleSettingRequestBuilder is request builder for GovernanceRuleSetting
type GovernanceRuleSettingRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceRuleSettingRequest
func (b *GovernanceRuleSettingRequestBuilder) Request() *GovernanceRuleSettingRequest {
	return &GovernanceRuleSettingRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceRuleSettingRequest is request for GovernanceRuleSetting
type GovernanceRuleSettingRequest struct{ BaseRequest }

// Get performs GET request for GovernanceRuleSetting
func (r *GovernanceRuleSettingRequest) Get(ctx context.Context) (resObj *GovernanceRuleSetting, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceRuleSetting
func (r *GovernanceRuleSettingRequest) Update(ctx context.Context, reqObj *GovernanceRuleSetting) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceRuleSetting
func (r *GovernanceRuleSettingRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceScheduleRequestBuilder is request builder for GovernanceSchedule
type GovernanceScheduleRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceScheduleRequest
func (b *GovernanceScheduleRequestBuilder) Request() *GovernanceScheduleRequest {
	return &GovernanceScheduleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceScheduleRequest is request for GovernanceSchedule
type GovernanceScheduleRequest struct{ BaseRequest }

// Get performs GET request for GovernanceSchedule
func (r *GovernanceScheduleRequest) Get(ctx context.Context) (resObj *GovernanceSchedule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceSchedule
func (r *GovernanceScheduleRequest) Update(ctx context.Context, reqObj *GovernanceSchedule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceSchedule
func (r *GovernanceScheduleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// GovernanceSubjectRequestBuilder is request builder for GovernanceSubject
type GovernanceSubjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceSubjectRequest
func (b *GovernanceSubjectRequestBuilder) Request() *GovernanceSubjectRequest {
	return &GovernanceSubjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceSubjectRequest is request for GovernanceSubject
type GovernanceSubjectRequest struct{ BaseRequest }

// Get performs GET request for GovernanceSubject
func (r *GovernanceSubjectRequest) Get(ctx context.Context) (resObj *GovernanceSubject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceSubject
func (r *GovernanceSubjectRequest) Update(ctx context.Context, reqObj *GovernanceSubject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceSubject
func (r *GovernanceSubjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type GovernanceResourceCollectionRegisterRequestBuilder struct{ BaseRequestBuilder }

// Register action undocumentedrav
func (b *PrivilegedAccessResourcesCollectionRequestBuilder) Register(reqObj *GovernanceResourceCollectionRegisterRequestParameter) *GovernanceResourceCollectionRegisterRequestBuilder {
	bb := &GovernanceResourceCollectionRegisterRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Register"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type GovernanceResourceCollectionRegisterRequest struct{ BaseRequest }

func (b *GovernanceResourceCollectionRegisterRequestBuilder) Request() *GovernanceResourceCollectionRegisterRequest {
	return &GovernanceResourceCollectionRegisterRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *GovernanceResourceCollectionRegisterRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type GovernanceRoleAssignmentRequestObjectCancelRequestBuilder struct{ BaseRequestBuilder }

// Cancel action undocumentedrav
func (b *GovernanceRoleAssignmentRequestObjectRequestBuilder) Cancel(reqObj *GovernanceRoleAssignmentRequestObjectCancelRequestParameter) *GovernanceRoleAssignmentRequestObjectCancelRequestBuilder {
	bb := &GovernanceRoleAssignmentRequestObjectCancelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Cancel"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type GovernanceRoleAssignmentRequestObjectCancelRequest struct{ BaseRequest }

func (b *GovernanceRoleAssignmentRequestObjectCancelRequestBuilder) Request() *GovernanceRoleAssignmentRequestObjectCancelRequest {
	return &GovernanceRoleAssignmentRequestObjectCancelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *GovernanceRoleAssignmentRequestObjectCancelRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type GovernanceRoleAssignmentRequestObjectUpdateRequestActionRequestBuilder struct{ BaseRequestBuilder }

// UpdateRequestAction action undocumentedras
func (b *GovernanceRoleAssignmentRequestObjectRequestBuilder) UpdateRequestAction(reqObj *GovernanceRoleAssignmentRequestObjectUpdateRequestActionRequestParameter) *GovernanceRoleAssignmentRequestObjectUpdateRequestActionRequestBuilder {
	bb := &GovernanceRoleAssignmentRequestObjectUpdateRequestActionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/UpdateRequest"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type GovernanceRoleAssignmentRequestObjectUpdateRequestActionRequest struct{ BaseRequest }

func (b *GovernanceRoleAssignmentRequestObjectUpdateRequestActionRequestBuilder) Request() *GovernanceRoleAssignmentRequestObjectUpdateRequestActionRequest {
	return &GovernanceRoleAssignmentRequestObjectUpdateRequestActionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *GovernanceRoleAssignmentRequestObjectUpdateRequestActionRequest) Post(ctx context.Context) (resObj *GovernanceRoleAssignmentRequest, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}
