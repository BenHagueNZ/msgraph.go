// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequestParameter undocumented
type ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequestParameter struct {
	// ImportedAppleDeviceIdentities undocumented
	ImportedAppleDeviceIdentities []ImportedAppleDeviceIdentity `json:"importedAppleDeviceIdentities,omitempty"`
	// OverwriteImportedDeviceIdentities undocumented
	OverwriteImportedDeviceIdentities *bool `json:"overwriteImportedDeviceIdentities,omitempty"`
}

// ImportedDeviceIdentityCollectionImportDeviceIdentityListRequestParameter undocumented
type ImportedDeviceIdentityCollectionImportDeviceIdentityListRequestParameter struct {
	// ImportedDeviceIdentities undocumented
	ImportedDeviceIdentities []ImportedDeviceIdentity `json:"importedDeviceIdentities,omitempty"`
	// OverwriteImportedDeviceIdentities undocumented
	OverwriteImportedDeviceIdentities *bool `json:"overwriteImportedDeviceIdentities,omitempty"`
}

// ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequestParameter undocumented
type ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequestParameter struct {
	// ImportedDeviceIdentities undocumented
	ImportedDeviceIdentities []ImportedDeviceIdentity `json:"importedDeviceIdentities,omitempty"`
}

// ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestParameter undocumented
type ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestParameter struct {
	// ImportedWindowsAutopilotDeviceIdentities undocumented
	ImportedWindowsAutopilotDeviceIdentities []ImportedWindowsAutopilotDeviceIdentity `json:"importedWindowsAutopilotDeviceIdentities,omitempty"`
}

// DeviceIdentities returns request builder for ImportedWindowsAutopilotDeviceIdentity collection
func (b *ImportedWindowsAutopilotDeviceIdentityUploadRequestBuilder) DeviceIdentities() *ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequestBuilder {
	bb := &ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceIdentities"
	return bb
}

// ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequestBuilder is request builder for ImportedWindowsAutopilotDeviceIdentity collection rcn
type ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ImportedWindowsAutopilotDeviceIdentity collection
func (b *ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequestBuilder) Request() *ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequest {
	return &ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ImportedWindowsAutopilotDeviceIdentity item
func (b *ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequestBuilder) ID(id string) *ImportedWindowsAutopilotDeviceIdentityRequestBuilder {
	bb := &ImportedWindowsAutopilotDeviceIdentityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequest is request for ImportedWindowsAutopilotDeviceIdentity collection
type ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ImportedWindowsAutopilotDeviceIdentity collection
func (r *ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ImportedWindowsAutopilotDeviceIdentity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ImportedWindowsAutopilotDeviceIdentity
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ImportedWindowsAutopilotDeviceIdentity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ImportedWindowsAutopilotDeviceIdentity collection, max N pages
func (r *ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequest) GetN(ctx context.Context, n int) ([]ImportedWindowsAutopilotDeviceIdentity, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ImportedWindowsAutopilotDeviceIdentity collection
func (r *ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequest) Get(ctx context.Context) ([]ImportedWindowsAutopilotDeviceIdentity, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ImportedWindowsAutopilotDeviceIdentity collection
func (r *ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequest) Add(ctx context.Context, reqObj *ImportedWindowsAutopilotDeviceIdentity) (resObj *ImportedWindowsAutopilotDeviceIdentity, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ImportedAppleDeviceIdentityRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// ImportedAppleDeviceIdentityResult returns request builder for ImportedAppleDeviceIdentityResult collection
func (b *DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionRequestBuilder) ImportedAppleDeviceIdentityResult() *DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequestBuilder {
	bb := &DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequestBuilder is request builder for ImportedAppleDeviceIdentityResult collection rcn
type DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ImportedAppleDeviceIdentityResult collection
func (b *DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequestBuilder) Request() *DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequest {
	return &DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ImportedAppleDeviceIdentityResult item
func (b *DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequestBuilder) ID(id string) *ImportedAppleDeviceIdentityResultRequestBuilder {
	bb := &ImportedAppleDeviceIdentityResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequest is request for ImportedAppleDeviceIdentityResult collection
type DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ImportedAppleDeviceIdentityResult collection
func (r *DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ImportedAppleDeviceIdentityResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ImportedAppleDeviceIdentityResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ImportedAppleDeviceIdentityResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ImportedAppleDeviceIdentityResult collection, max N pages
func (r *DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequest) GetN(ctx context.Context, n int) ([]ImportedAppleDeviceIdentityResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ImportedAppleDeviceIdentityResult collection
func (r *DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequest) Get(ctx context.Context) ([]ImportedAppleDeviceIdentityResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ImportedAppleDeviceIdentityResult collection
func (r *DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionImportedAppleDeviceIdentityResultCollectionRequest) Add(ctx context.Context, reqObj *ImportedAppleDeviceIdentityResult) (resObj *ImportedAppleDeviceIdentityResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ImportedDeviceIdentityRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// ImportedDeviceIdentityResult returns request builder for ImportedDeviceIdentityResult collection
func (b *DeviceManagementImportedDeviceIdentitiesCollectionRequestBuilder) ImportedDeviceIdentityResult() *DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequestBuilder {
	bb := &DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequestBuilder is request builder for ImportedDeviceIdentityResult collection rcn
type DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ImportedDeviceIdentityResult collection
func (b *DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequestBuilder) Request() *DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequest {
	return &DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ImportedDeviceIdentityResult item
func (b *DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequestBuilder) ID(id string) *ImportedDeviceIdentityResultRequestBuilder {
	bb := &ImportedDeviceIdentityResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequest is request for ImportedDeviceIdentityResult collection
type DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ImportedDeviceIdentityResult collection
func (r *DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ImportedDeviceIdentityResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ImportedDeviceIdentityResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ImportedDeviceIdentityResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ImportedDeviceIdentityResult collection, max N pages
func (r *DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequest) GetN(ctx context.Context, n int) ([]ImportedDeviceIdentityResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ImportedDeviceIdentityResult collection
func (r *DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequest) Get(ctx context.Context) ([]ImportedDeviceIdentityResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ImportedDeviceIdentityResult collection
func (r *DeviceManagementImportedDeviceIdentitiesCollectionImportedDeviceIdentityResultCollectionRequest) Add(ctx context.Context, reqObj *ImportedDeviceIdentityResult) (resObj *ImportedDeviceIdentityResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *ImportedWindowsAutopilotDeviceIdentityRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *ImportedWindowsAutopilotDeviceIdentityUploadRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
