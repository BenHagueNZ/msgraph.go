// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// AccessActionRequestBuilder is request builder for AccessAction
type AccessActionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessActionRequest
func (b *AccessActionRequestBuilder) Request() *AccessActionRequest {
	return &AccessActionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessActionRequest is request for AccessAction
type AccessActionRequest struct{ BaseRequest }

// Get performs GET request for AccessAction
func (r *AccessActionRequest) Get(ctx context.Context) (resObj *AccessAction, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessAction
func (r *AccessActionRequest) Update(ctx context.Context, reqObj *AccessAction) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessAction
func (r *AccessActionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageRequestBuilder is request builder for AccessPackage
type AccessPackageRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageRequest
func (b *AccessPackageRequestBuilder) Request() *AccessPackageRequest {
	return &AccessPackageRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageRequest is request for AccessPackage
type AccessPackageRequest struct{ BaseRequest }

// Get performs GET request for AccessPackage
func (r *AccessPackageRequest) Get(ctx context.Context) (resObj *AccessPackage, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackage
func (r *AccessPackageRequest) Update(ctx context.Context, reqObj *AccessPackage) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackage
func (r *AccessPackageRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAnswerRequestBuilder is request builder for AccessPackageAnswer
type AccessPackageAnswerRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAnswerRequest
func (b *AccessPackageAnswerRequestBuilder) Request() *AccessPackageAnswerRequest {
	return &AccessPackageAnswerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAnswerRequest is request for AccessPackageAnswer
type AccessPackageAnswerRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAnswer
func (r *AccessPackageAnswerRequest) Get(ctx context.Context) (resObj *AccessPackageAnswer, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAnswer
func (r *AccessPackageAnswerRequest) Update(ctx context.Context, reqObj *AccessPackageAnswer) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAnswer
func (r *AccessPackageAnswerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAnswerChoiceRequestBuilder is request builder for AccessPackageAnswerChoice
type AccessPackageAnswerChoiceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAnswerChoiceRequest
func (b *AccessPackageAnswerChoiceRequestBuilder) Request() *AccessPackageAnswerChoiceRequest {
	return &AccessPackageAnswerChoiceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAnswerChoiceRequest is request for AccessPackageAnswerChoice
type AccessPackageAnswerChoiceRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAnswerChoice
func (r *AccessPackageAnswerChoiceRequest) Get(ctx context.Context) (resObj *AccessPackageAnswerChoice, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAnswerChoice
func (r *AccessPackageAnswerChoiceRequest) Update(ctx context.Context, reqObj *AccessPackageAnswerChoice) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAnswerChoice
func (r *AccessPackageAnswerChoiceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAnswerStringRequestBuilder is request builder for AccessPackageAnswerString
type AccessPackageAnswerStringRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAnswerStringRequest
func (b *AccessPackageAnswerStringRequestBuilder) Request() *AccessPackageAnswerStringRequest {
	return &AccessPackageAnswerStringRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAnswerStringRequest is request for AccessPackageAnswerString
type AccessPackageAnswerStringRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAnswerString
func (r *AccessPackageAnswerStringRequest) Get(ctx context.Context) (resObj *AccessPackageAnswerString, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAnswerString
func (r *AccessPackageAnswerStringRequest) Update(ctx context.Context, reqObj *AccessPackageAnswerString) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAnswerString
func (r *AccessPackageAnswerStringRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentRequestBuilder is request builder for AccessPackageAssignment
type AccessPackageAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentRequest
func (b *AccessPackageAssignmentRequestBuilder) Request() *AccessPackageAssignmentRequest {
	return &AccessPackageAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentRequest is request for AccessPackageAssignment
type AccessPackageAssignmentRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignment
func (r *AccessPackageAssignmentRequest) Get(ctx context.Context) (resObj *AccessPackageAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignment
func (r *AccessPackageAssignmentRequest) Update(ctx context.Context, reqObj *AccessPackageAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignment
func (r *AccessPackageAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentPolicyRequestBuilder is request builder for AccessPackageAssignmentPolicy
type AccessPackageAssignmentPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentPolicyRequest
func (b *AccessPackageAssignmentPolicyRequestBuilder) Request() *AccessPackageAssignmentPolicyRequest {
	return &AccessPackageAssignmentPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentPolicyRequest is request for AccessPackageAssignmentPolicy
type AccessPackageAssignmentPolicyRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignmentPolicy
func (r *AccessPackageAssignmentPolicyRequest) Get(ctx context.Context) (resObj *AccessPackageAssignmentPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignmentPolicy
func (r *AccessPackageAssignmentPolicyRequest) Update(ctx context.Context, reqObj *AccessPackageAssignmentPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignmentPolicy
func (r *AccessPackageAssignmentPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentRequestCallbackDataRequestBuilder is request builder for AccessPackageAssignmentRequestCallbackData
type AccessPackageAssignmentRequestCallbackDataRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentRequestCallbackDataRequest
func (b *AccessPackageAssignmentRequestCallbackDataRequestBuilder) Request() *AccessPackageAssignmentRequestCallbackDataRequest {
	return &AccessPackageAssignmentRequestCallbackDataRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentRequestCallbackDataRequest is request for AccessPackageAssignmentRequestCallbackData
type AccessPackageAssignmentRequestCallbackDataRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignmentRequestCallbackData
func (r *AccessPackageAssignmentRequestCallbackDataRequest) Get(ctx context.Context) (resObj *AccessPackageAssignmentRequestCallbackData, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignmentRequestCallbackData
func (r *AccessPackageAssignmentRequestCallbackDataRequest) Update(ctx context.Context, reqObj *AccessPackageAssignmentRequestCallbackData) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignmentRequestCallbackData
func (r *AccessPackageAssignmentRequestCallbackDataRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentRequestObjectRequestBuilder is request builder for AccessPackageAssignmentRequestObject
type AccessPackageAssignmentRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentRequestObjectRequest
func (b *AccessPackageAssignmentRequestObjectRequestBuilder) Request() *AccessPackageAssignmentRequestObjectRequest {
	return &AccessPackageAssignmentRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentRequestObjectRequest is request for AccessPackageAssignmentRequestObject
type AccessPackageAssignmentRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignmentRequestObject
func (r *AccessPackageAssignmentRequestObjectRequest) Get(ctx context.Context) (resObj *AccessPackageAssignmentRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignmentRequestObject
func (r *AccessPackageAssignmentRequestObjectRequest) Update(ctx context.Context, reqObj *AccessPackageAssignmentRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignmentRequestObject
func (r *AccessPackageAssignmentRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentRequestRequirementsRequestBuilder is request builder for AccessPackageAssignmentRequestRequirements
type AccessPackageAssignmentRequestRequirementsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentRequestRequirementsRequest
func (b *AccessPackageAssignmentRequestRequirementsRequestBuilder) Request() *AccessPackageAssignmentRequestRequirementsRequest {
	return &AccessPackageAssignmentRequestRequirementsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentRequestRequirementsRequest is request for AccessPackageAssignmentRequestRequirements
type AccessPackageAssignmentRequestRequirementsRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignmentRequestRequirements
func (r *AccessPackageAssignmentRequestRequirementsRequest) Get(ctx context.Context) (resObj *AccessPackageAssignmentRequestRequirements, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignmentRequestRequirements
func (r *AccessPackageAssignmentRequestRequirementsRequest) Update(ctx context.Context, reqObj *AccessPackageAssignmentRequestRequirements) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignmentRequestRequirements
func (r *AccessPackageAssignmentRequestRequirementsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentRequestWorkflowExtensionRequestBuilder is request builder for AccessPackageAssignmentRequestWorkflowExtension
type AccessPackageAssignmentRequestWorkflowExtensionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentRequestWorkflowExtensionRequest
func (b *AccessPackageAssignmentRequestWorkflowExtensionRequestBuilder) Request() *AccessPackageAssignmentRequestWorkflowExtensionRequest {
	return &AccessPackageAssignmentRequestWorkflowExtensionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentRequestWorkflowExtensionRequest is request for AccessPackageAssignmentRequestWorkflowExtension
type AccessPackageAssignmentRequestWorkflowExtensionRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignmentRequestWorkflowExtension
func (r *AccessPackageAssignmentRequestWorkflowExtensionRequest) Get(ctx context.Context) (resObj *AccessPackageAssignmentRequestWorkflowExtension, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignmentRequestWorkflowExtension
func (r *AccessPackageAssignmentRequestWorkflowExtensionRequest) Update(ctx context.Context, reqObj *AccessPackageAssignmentRequestWorkflowExtension) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignmentRequestWorkflowExtension
func (r *AccessPackageAssignmentRequestWorkflowExtensionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentResourceRoleRequestBuilder is request builder for AccessPackageAssignmentResourceRole
type AccessPackageAssignmentResourceRoleRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentResourceRoleRequest
func (b *AccessPackageAssignmentResourceRoleRequestBuilder) Request() *AccessPackageAssignmentResourceRoleRequest {
	return &AccessPackageAssignmentResourceRoleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentResourceRoleRequest is request for AccessPackageAssignmentResourceRole
type AccessPackageAssignmentResourceRoleRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignmentResourceRole
func (r *AccessPackageAssignmentResourceRoleRequest) Get(ctx context.Context) (resObj *AccessPackageAssignmentResourceRole, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignmentResourceRole
func (r *AccessPackageAssignmentResourceRoleRequest) Update(ctx context.Context, reqObj *AccessPackageAssignmentResourceRole) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignmentResourceRole
func (r *AccessPackageAssignmentResourceRoleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageAssignmentWorkflowExtensionRequestBuilder is request builder for AccessPackageAssignmentWorkflowExtension
type AccessPackageAssignmentWorkflowExtensionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentWorkflowExtensionRequest
func (b *AccessPackageAssignmentWorkflowExtensionRequestBuilder) Request() *AccessPackageAssignmentWorkflowExtensionRequest {
	return &AccessPackageAssignmentWorkflowExtensionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentWorkflowExtensionRequest is request for AccessPackageAssignmentWorkflowExtension
type AccessPackageAssignmentWorkflowExtensionRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignmentWorkflowExtension
func (r *AccessPackageAssignmentWorkflowExtensionRequest) Get(ctx context.Context) (resObj *AccessPackageAssignmentWorkflowExtension, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignmentWorkflowExtension
func (r *AccessPackageAssignmentWorkflowExtensionRequest) Update(ctx context.Context, reqObj *AccessPackageAssignmentWorkflowExtension) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignmentWorkflowExtension
func (r *AccessPackageAssignmentWorkflowExtensionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageCatalogRequestBuilder is request builder for AccessPackageCatalog
type AccessPackageCatalogRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageCatalogRequest
func (b *AccessPackageCatalogRequestBuilder) Request() *AccessPackageCatalogRequest {
	return &AccessPackageCatalogRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageCatalogRequest is request for AccessPackageCatalog
type AccessPackageCatalogRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageCatalog
func (r *AccessPackageCatalogRequest) Get(ctx context.Context) (resObj *AccessPackageCatalog, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageCatalog
func (r *AccessPackageCatalogRequest) Update(ctx context.Context, reqObj *AccessPackageCatalog) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageCatalog
func (r *AccessPackageCatalogRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageLocalizedContentRequestBuilder is request builder for AccessPackageLocalizedContent
type AccessPackageLocalizedContentRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageLocalizedContentRequest
func (b *AccessPackageLocalizedContentRequestBuilder) Request() *AccessPackageLocalizedContentRequest {
	return &AccessPackageLocalizedContentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageLocalizedContentRequest is request for AccessPackageLocalizedContent
type AccessPackageLocalizedContentRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageLocalizedContent
func (r *AccessPackageLocalizedContentRequest) Get(ctx context.Context) (resObj *AccessPackageLocalizedContent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageLocalizedContent
func (r *AccessPackageLocalizedContentRequest) Update(ctx context.Context, reqObj *AccessPackageLocalizedContent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageLocalizedContent
func (r *AccessPackageLocalizedContentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageLocalizedTextRequestBuilder is request builder for AccessPackageLocalizedText
type AccessPackageLocalizedTextRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageLocalizedTextRequest
func (b *AccessPackageLocalizedTextRequestBuilder) Request() *AccessPackageLocalizedTextRequest {
	return &AccessPackageLocalizedTextRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageLocalizedTextRequest is request for AccessPackageLocalizedText
type AccessPackageLocalizedTextRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageLocalizedText
func (r *AccessPackageLocalizedTextRequest) Get(ctx context.Context) (resObj *AccessPackageLocalizedText, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageLocalizedText
func (r *AccessPackageLocalizedTextRequest) Update(ctx context.Context, reqObj *AccessPackageLocalizedText) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageLocalizedText
func (r *AccessPackageLocalizedTextRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageMultipleChoiceQuestionRequestBuilder is request builder for AccessPackageMultipleChoiceQuestion
type AccessPackageMultipleChoiceQuestionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageMultipleChoiceQuestionRequest
func (b *AccessPackageMultipleChoiceQuestionRequestBuilder) Request() *AccessPackageMultipleChoiceQuestionRequest {
	return &AccessPackageMultipleChoiceQuestionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageMultipleChoiceQuestionRequest is request for AccessPackageMultipleChoiceQuestion
type AccessPackageMultipleChoiceQuestionRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageMultipleChoiceQuestion
func (r *AccessPackageMultipleChoiceQuestionRequest) Get(ctx context.Context) (resObj *AccessPackageMultipleChoiceQuestion, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageMultipleChoiceQuestion
func (r *AccessPackageMultipleChoiceQuestionRequest) Update(ctx context.Context, reqObj *AccessPackageMultipleChoiceQuestion) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageMultipleChoiceQuestion
func (r *AccessPackageMultipleChoiceQuestionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageQuestionRequestBuilder is request builder for AccessPackageQuestion
type AccessPackageQuestionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageQuestionRequest
func (b *AccessPackageQuestionRequestBuilder) Request() *AccessPackageQuestionRequest {
	return &AccessPackageQuestionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageQuestionRequest is request for AccessPackageQuestion
type AccessPackageQuestionRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageQuestion
func (r *AccessPackageQuestionRequest) Get(ctx context.Context) (resObj *AccessPackageQuestion, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageQuestion
func (r *AccessPackageQuestionRequest) Update(ctx context.Context, reqObj *AccessPackageQuestion) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageQuestion
func (r *AccessPackageQuestionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceRequestBuilder is request builder for AccessPackageResource
type AccessPackageResourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceRequest
func (b *AccessPackageResourceRequestBuilder) Request() *AccessPackageResourceRequest {
	return &AccessPackageResourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceRequest is request for AccessPackageResource
type AccessPackageResourceRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResource
func (r *AccessPackageResourceRequest) Get(ctx context.Context) (resObj *AccessPackageResource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResource
func (r *AccessPackageResourceRequest) Update(ctx context.Context, reqObj *AccessPackageResource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResource
func (r *AccessPackageResourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceAttributeRequestBuilder is request builder for AccessPackageResourceAttribute
type AccessPackageResourceAttributeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceAttributeRequest
func (b *AccessPackageResourceAttributeRequestBuilder) Request() *AccessPackageResourceAttributeRequest {
	return &AccessPackageResourceAttributeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceAttributeRequest is request for AccessPackageResourceAttribute
type AccessPackageResourceAttributeRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceAttribute
func (r *AccessPackageResourceAttributeRequest) Get(ctx context.Context) (resObj *AccessPackageResourceAttribute, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceAttribute
func (r *AccessPackageResourceAttributeRequest) Update(ctx context.Context, reqObj *AccessPackageResourceAttribute) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceAttribute
func (r *AccessPackageResourceAttributeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceAttributeDestinationRequestBuilder is request builder for AccessPackageResourceAttributeDestination
type AccessPackageResourceAttributeDestinationRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceAttributeDestinationRequest
func (b *AccessPackageResourceAttributeDestinationRequestBuilder) Request() *AccessPackageResourceAttributeDestinationRequest {
	return &AccessPackageResourceAttributeDestinationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceAttributeDestinationRequest is request for AccessPackageResourceAttributeDestination
type AccessPackageResourceAttributeDestinationRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceAttributeDestination
func (r *AccessPackageResourceAttributeDestinationRequest) Get(ctx context.Context) (resObj *AccessPackageResourceAttributeDestination, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceAttributeDestination
func (r *AccessPackageResourceAttributeDestinationRequest) Update(ctx context.Context, reqObj *AccessPackageResourceAttributeDestination) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceAttributeDestination
func (r *AccessPackageResourceAttributeDestinationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceAttributeQuestionRequestBuilder is request builder for AccessPackageResourceAttributeQuestion
type AccessPackageResourceAttributeQuestionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceAttributeQuestionRequest
func (b *AccessPackageResourceAttributeQuestionRequestBuilder) Request() *AccessPackageResourceAttributeQuestionRequest {
	return &AccessPackageResourceAttributeQuestionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceAttributeQuestionRequest is request for AccessPackageResourceAttributeQuestion
type AccessPackageResourceAttributeQuestionRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceAttributeQuestion
func (r *AccessPackageResourceAttributeQuestionRequest) Get(ctx context.Context) (resObj *AccessPackageResourceAttributeQuestion, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceAttributeQuestion
func (r *AccessPackageResourceAttributeQuestionRequest) Update(ctx context.Context, reqObj *AccessPackageResourceAttributeQuestion) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceAttributeQuestion
func (r *AccessPackageResourceAttributeQuestionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceAttributeSourceRequestBuilder is request builder for AccessPackageResourceAttributeSource
type AccessPackageResourceAttributeSourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceAttributeSourceRequest
func (b *AccessPackageResourceAttributeSourceRequestBuilder) Request() *AccessPackageResourceAttributeSourceRequest {
	return &AccessPackageResourceAttributeSourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceAttributeSourceRequest is request for AccessPackageResourceAttributeSource
type AccessPackageResourceAttributeSourceRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceAttributeSource
func (r *AccessPackageResourceAttributeSourceRequest) Get(ctx context.Context) (resObj *AccessPackageResourceAttributeSource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceAttributeSource
func (r *AccessPackageResourceAttributeSourceRequest) Update(ctx context.Context, reqObj *AccessPackageResourceAttributeSource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceAttributeSource
func (r *AccessPackageResourceAttributeSourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceEnvironmentRequestBuilder is request builder for AccessPackageResourceEnvironment
type AccessPackageResourceEnvironmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceEnvironmentRequest
func (b *AccessPackageResourceEnvironmentRequestBuilder) Request() *AccessPackageResourceEnvironmentRequest {
	return &AccessPackageResourceEnvironmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceEnvironmentRequest is request for AccessPackageResourceEnvironment
type AccessPackageResourceEnvironmentRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceEnvironment
func (r *AccessPackageResourceEnvironmentRequest) Get(ctx context.Context) (resObj *AccessPackageResourceEnvironment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceEnvironment
func (r *AccessPackageResourceEnvironmentRequest) Update(ctx context.Context, reqObj *AccessPackageResourceEnvironment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceEnvironment
func (r *AccessPackageResourceEnvironmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceRequestObjectRequestBuilder is request builder for AccessPackageResourceRequestObject
type AccessPackageResourceRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceRequestObjectRequest
func (b *AccessPackageResourceRequestObjectRequestBuilder) Request() *AccessPackageResourceRequestObjectRequest {
	return &AccessPackageResourceRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceRequestObjectRequest is request for AccessPackageResourceRequestObject
type AccessPackageResourceRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceRequestObject
func (r *AccessPackageResourceRequestObjectRequest) Get(ctx context.Context) (resObj *AccessPackageResourceRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceRequestObject
func (r *AccessPackageResourceRequestObjectRequest) Update(ctx context.Context, reqObj *AccessPackageResourceRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceRequestObject
func (r *AccessPackageResourceRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceRoleRequestBuilder is request builder for AccessPackageResourceRole
type AccessPackageResourceRoleRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceRoleRequest
func (b *AccessPackageResourceRoleRequestBuilder) Request() *AccessPackageResourceRoleRequest {
	return &AccessPackageResourceRoleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceRoleRequest is request for AccessPackageResourceRole
type AccessPackageResourceRoleRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceRole
func (r *AccessPackageResourceRoleRequest) Get(ctx context.Context) (resObj *AccessPackageResourceRole, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceRole
func (r *AccessPackageResourceRoleRequest) Update(ctx context.Context, reqObj *AccessPackageResourceRole) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceRole
func (r *AccessPackageResourceRoleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceRoleScopeRequestBuilder is request builder for AccessPackageResourceRoleScope
type AccessPackageResourceRoleScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceRoleScopeRequest
func (b *AccessPackageResourceRoleScopeRequestBuilder) Request() *AccessPackageResourceRoleScopeRequest {
	return &AccessPackageResourceRoleScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceRoleScopeRequest is request for AccessPackageResourceRoleScope
type AccessPackageResourceRoleScopeRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceRoleScope
func (r *AccessPackageResourceRoleScopeRequest) Get(ctx context.Context) (resObj *AccessPackageResourceRoleScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceRoleScope
func (r *AccessPackageResourceRoleScopeRequest) Update(ctx context.Context, reqObj *AccessPackageResourceRoleScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceRoleScope
func (r *AccessPackageResourceRoleScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageResourceScopeRequestBuilder is request builder for AccessPackageResourceScope
type AccessPackageResourceScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageResourceScopeRequest
func (b *AccessPackageResourceScopeRequestBuilder) Request() *AccessPackageResourceScopeRequest {
	return &AccessPackageResourceScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageResourceScopeRequest is request for AccessPackageResourceScope
type AccessPackageResourceScopeRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageResourceScope
func (r *AccessPackageResourceScopeRequest) Get(ctx context.Context) (resObj *AccessPackageResourceScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageResourceScope
func (r *AccessPackageResourceScopeRequest) Update(ctx context.Context, reqObj *AccessPackageResourceScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageResourceScope
func (r *AccessPackageResourceScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageSubjectRequestBuilder is request builder for AccessPackageSubject
type AccessPackageSubjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageSubjectRequest
func (b *AccessPackageSubjectRequestBuilder) Request() *AccessPackageSubjectRequest {
	return &AccessPackageSubjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageSubjectRequest is request for AccessPackageSubject
type AccessPackageSubjectRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageSubject
func (r *AccessPackageSubjectRequest) Get(ctx context.Context) (resObj *AccessPackageSubject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageSubject
func (r *AccessPackageSubjectRequest) Update(ctx context.Context, reqObj *AccessPackageSubject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageSubject
func (r *AccessPackageSubjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageTextInputQuestionRequestBuilder is request builder for AccessPackageTextInputQuestion
type AccessPackageTextInputQuestionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageTextInputQuestionRequest
func (b *AccessPackageTextInputQuestionRequestBuilder) Request() *AccessPackageTextInputQuestionRequest {
	return &AccessPackageTextInputQuestionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageTextInputQuestionRequest is request for AccessPackageTextInputQuestion
type AccessPackageTextInputQuestionRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageTextInputQuestion
func (r *AccessPackageTextInputQuestionRequest) Get(ctx context.Context) (resObj *AccessPackageTextInputQuestion, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageTextInputQuestion
func (r *AccessPackageTextInputQuestionRequest) Update(ctx context.Context, reqObj *AccessPackageTextInputQuestion) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageTextInputQuestion
func (r *AccessPackageTextInputQuestionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessPackageUserDirectoryAttributeStoreRequestBuilder is request builder for AccessPackageUserDirectoryAttributeStore
type AccessPackageUserDirectoryAttributeStoreRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageUserDirectoryAttributeStoreRequest
func (b *AccessPackageUserDirectoryAttributeStoreRequestBuilder) Request() *AccessPackageUserDirectoryAttributeStoreRequest {
	return &AccessPackageUserDirectoryAttributeStoreRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageUserDirectoryAttributeStoreRequest is request for AccessPackageUserDirectoryAttributeStore
type AccessPackageUserDirectoryAttributeStoreRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageUserDirectoryAttributeStore
func (r *AccessPackageUserDirectoryAttributeStoreRequest) Get(ctx context.Context) (resObj *AccessPackageUserDirectoryAttributeStore, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageUserDirectoryAttributeStore
func (r *AccessPackageUserDirectoryAttributeStoreRequest) Update(ctx context.Context, reqObj *AccessPackageUserDirectoryAttributeStore) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageUserDirectoryAttributeStore
func (r *AccessPackageUserDirectoryAttributeStoreRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewRequestBuilder is request builder for AccessReview
type AccessReviewRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewRequest
func (b *AccessReviewRequestBuilder) Request() *AccessReviewRequest {
	return &AccessReviewRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewRequest is request for AccessReview
type AccessReviewRequest struct{ BaseRequest }

// Get performs GET request for AccessReview
func (r *AccessReviewRequest) Get(ctx context.Context) (resObj *AccessReview, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReview
func (r *AccessReviewRequest) Update(ctx context.Context, reqObj *AccessReview) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReview
func (r *AccessReviewRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewApplyActionRequestBuilder is request builder for AccessReviewApplyAction
type AccessReviewApplyActionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewApplyActionRequest
func (b *AccessReviewApplyActionRequestBuilder) Request() *AccessReviewApplyActionRequest {
	return &AccessReviewApplyActionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewApplyActionRequest is request for AccessReviewApplyAction
type AccessReviewApplyActionRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewApplyAction
func (r *AccessReviewApplyActionRequest) Get(ctx context.Context) (resObj *AccessReviewApplyAction, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewApplyAction
func (r *AccessReviewApplyActionRequest) Update(ctx context.Context, reqObj *AccessReviewApplyAction) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewApplyAction
func (r *AccessReviewApplyActionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewDecisionRequestBuilder is request builder for AccessReviewDecision
type AccessReviewDecisionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewDecisionRequest
func (b *AccessReviewDecisionRequestBuilder) Request() *AccessReviewDecisionRequest {
	return &AccessReviewDecisionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewDecisionRequest is request for AccessReviewDecision
type AccessReviewDecisionRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewDecision
func (r *AccessReviewDecisionRequest) Get(ctx context.Context) (resObj *AccessReviewDecision, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewDecision
func (r *AccessReviewDecisionRequest) Update(ctx context.Context, reqObj *AccessReviewDecision) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewDecision
func (r *AccessReviewDecisionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewErrorRequestBuilder is request builder for AccessReviewError
type AccessReviewErrorRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewErrorRequest
func (b *AccessReviewErrorRequestBuilder) Request() *AccessReviewErrorRequest {
	return &AccessReviewErrorRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewErrorRequest is request for AccessReviewError
type AccessReviewErrorRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewError
func (r *AccessReviewErrorRequest) Get(ctx context.Context) (resObj *AccessReviewError, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewError
func (r *AccessReviewErrorRequest) Update(ctx context.Context, reqObj *AccessReviewError) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewError
func (r *AccessReviewErrorRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewHistoryDefinitionRequestBuilder is request builder for AccessReviewHistoryDefinition
type AccessReviewHistoryDefinitionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewHistoryDefinitionRequest
func (b *AccessReviewHistoryDefinitionRequestBuilder) Request() *AccessReviewHistoryDefinitionRequest {
	return &AccessReviewHistoryDefinitionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewHistoryDefinitionRequest is request for AccessReviewHistoryDefinition
type AccessReviewHistoryDefinitionRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewHistoryDefinition
func (r *AccessReviewHistoryDefinitionRequest) Get(ctx context.Context) (resObj *AccessReviewHistoryDefinition, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewHistoryDefinition
func (r *AccessReviewHistoryDefinitionRequest) Update(ctx context.Context, reqObj *AccessReviewHistoryDefinition) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewHistoryDefinition
func (r *AccessReviewHistoryDefinitionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewHistoryInstanceRequestBuilder is request builder for AccessReviewHistoryInstance
type AccessReviewHistoryInstanceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewHistoryInstanceRequest
func (b *AccessReviewHistoryInstanceRequestBuilder) Request() *AccessReviewHistoryInstanceRequest {
	return &AccessReviewHistoryInstanceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewHistoryInstanceRequest is request for AccessReviewHistoryInstance
type AccessReviewHistoryInstanceRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewHistoryInstance
func (r *AccessReviewHistoryInstanceRequest) Get(ctx context.Context) (resObj *AccessReviewHistoryInstance, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewHistoryInstance
func (r *AccessReviewHistoryInstanceRequest) Update(ctx context.Context, reqObj *AccessReviewHistoryInstance) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewHistoryInstance
func (r *AccessReviewHistoryInstanceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewHistoryScheduleSettingsRequestBuilder is request builder for AccessReviewHistoryScheduleSettings
type AccessReviewHistoryScheduleSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewHistoryScheduleSettingsRequest
func (b *AccessReviewHistoryScheduleSettingsRequestBuilder) Request() *AccessReviewHistoryScheduleSettingsRequest {
	return &AccessReviewHistoryScheduleSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewHistoryScheduleSettingsRequest is request for AccessReviewHistoryScheduleSettings
type AccessReviewHistoryScheduleSettingsRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewHistoryScheduleSettings
func (r *AccessReviewHistoryScheduleSettingsRequest) Get(ctx context.Context) (resObj *AccessReviewHistoryScheduleSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewHistoryScheduleSettings
func (r *AccessReviewHistoryScheduleSettingsRequest) Update(ctx context.Context, reqObj *AccessReviewHistoryScheduleSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewHistoryScheduleSettings
func (r *AccessReviewHistoryScheduleSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInactiveUsersQueryScopeRequestBuilder is request builder for AccessReviewInactiveUsersQueryScope
type AccessReviewInactiveUsersQueryScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInactiveUsersQueryScopeRequest
func (b *AccessReviewInactiveUsersQueryScopeRequestBuilder) Request() *AccessReviewInactiveUsersQueryScopeRequest {
	return &AccessReviewInactiveUsersQueryScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInactiveUsersQueryScopeRequest is request for AccessReviewInactiveUsersQueryScope
type AccessReviewInactiveUsersQueryScopeRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInactiveUsersQueryScope
func (r *AccessReviewInactiveUsersQueryScopeRequest) Get(ctx context.Context) (resObj *AccessReviewInactiveUsersQueryScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInactiveUsersQueryScope
func (r *AccessReviewInactiveUsersQueryScopeRequest) Update(ctx context.Context, reqObj *AccessReviewInactiveUsersQueryScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInactiveUsersQueryScope
func (r *AccessReviewInactiveUsersQueryScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInstanceRequestBuilder is request builder for AccessReviewInstance
type AccessReviewInstanceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInstanceRequest
func (b *AccessReviewInstanceRequestBuilder) Request() *AccessReviewInstanceRequest {
	return &AccessReviewInstanceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInstanceRequest is request for AccessReviewInstance
type AccessReviewInstanceRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInstance
func (r *AccessReviewInstanceRequest) Get(ctx context.Context) (resObj *AccessReviewInstance, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInstance
func (r *AccessReviewInstanceRequest) Update(ctx context.Context, reqObj *AccessReviewInstance) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInstance
func (r *AccessReviewInstanceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInstanceDecisionItemRequestBuilder is request builder for AccessReviewInstanceDecisionItem
type AccessReviewInstanceDecisionItemRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInstanceDecisionItemRequest
func (b *AccessReviewInstanceDecisionItemRequestBuilder) Request() *AccessReviewInstanceDecisionItemRequest {
	return &AccessReviewInstanceDecisionItemRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInstanceDecisionItemRequest is request for AccessReviewInstanceDecisionItem
type AccessReviewInstanceDecisionItemRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInstanceDecisionItem
func (r *AccessReviewInstanceDecisionItemRequest) Get(ctx context.Context) (resObj *AccessReviewInstanceDecisionItem, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInstanceDecisionItem
func (r *AccessReviewInstanceDecisionItemRequest) Update(ctx context.Context, reqObj *AccessReviewInstanceDecisionItem) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInstanceDecisionItem
func (r *AccessReviewInstanceDecisionItemRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResourceRequestBuilder is request builder for AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource
type AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResourceRequest
func (b *AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResourceRequestBuilder) Request() *AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResourceRequest {
	return &AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResourceRequest is request for AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource
type AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResourceRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource
func (r *AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResourceRequest) Get(ctx context.Context) (resObj *AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource
func (r *AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResourceRequest) Update(ctx context.Context, reqObj *AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResource
func (r *AccessReviewInstanceDecisionItemAccessPackageAssignmentPolicyResourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInstanceDecisionItemAzureRoleResourceRequestBuilder is request builder for AccessReviewInstanceDecisionItemAzureRoleResource
type AccessReviewInstanceDecisionItemAzureRoleResourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInstanceDecisionItemAzureRoleResourceRequest
func (b *AccessReviewInstanceDecisionItemAzureRoleResourceRequestBuilder) Request() *AccessReviewInstanceDecisionItemAzureRoleResourceRequest {
	return &AccessReviewInstanceDecisionItemAzureRoleResourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInstanceDecisionItemAzureRoleResourceRequest is request for AccessReviewInstanceDecisionItemAzureRoleResource
type AccessReviewInstanceDecisionItemAzureRoleResourceRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInstanceDecisionItemAzureRoleResource
func (r *AccessReviewInstanceDecisionItemAzureRoleResourceRequest) Get(ctx context.Context) (resObj *AccessReviewInstanceDecisionItemAzureRoleResource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInstanceDecisionItemAzureRoleResource
func (r *AccessReviewInstanceDecisionItemAzureRoleResourceRequest) Update(ctx context.Context, reqObj *AccessReviewInstanceDecisionItemAzureRoleResource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInstanceDecisionItemAzureRoleResource
func (r *AccessReviewInstanceDecisionItemAzureRoleResourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInstanceDecisionItemResourceRequestBuilder is request builder for AccessReviewInstanceDecisionItemResource
type AccessReviewInstanceDecisionItemResourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInstanceDecisionItemResourceRequest
func (b *AccessReviewInstanceDecisionItemResourceRequestBuilder) Request() *AccessReviewInstanceDecisionItemResourceRequest {
	return &AccessReviewInstanceDecisionItemResourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInstanceDecisionItemResourceRequest is request for AccessReviewInstanceDecisionItemResource
type AccessReviewInstanceDecisionItemResourceRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInstanceDecisionItemResource
func (r *AccessReviewInstanceDecisionItemResourceRequest) Get(ctx context.Context) (resObj *AccessReviewInstanceDecisionItemResource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInstanceDecisionItemResource
func (r *AccessReviewInstanceDecisionItemResourceRequest) Update(ctx context.Context, reqObj *AccessReviewInstanceDecisionItemResource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInstanceDecisionItemResource
func (r *AccessReviewInstanceDecisionItemResourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInstanceDecisionItemServicePrincipalResourceRequestBuilder is request builder for AccessReviewInstanceDecisionItemServicePrincipalResource
type AccessReviewInstanceDecisionItemServicePrincipalResourceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInstanceDecisionItemServicePrincipalResourceRequest
func (b *AccessReviewInstanceDecisionItemServicePrincipalResourceRequestBuilder) Request() *AccessReviewInstanceDecisionItemServicePrincipalResourceRequest {
	return &AccessReviewInstanceDecisionItemServicePrincipalResourceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInstanceDecisionItemServicePrincipalResourceRequest is request for AccessReviewInstanceDecisionItemServicePrincipalResource
type AccessReviewInstanceDecisionItemServicePrincipalResourceRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInstanceDecisionItemServicePrincipalResource
func (r *AccessReviewInstanceDecisionItemServicePrincipalResourceRequest) Get(ctx context.Context) (resObj *AccessReviewInstanceDecisionItemServicePrincipalResource, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInstanceDecisionItemServicePrincipalResource
func (r *AccessReviewInstanceDecisionItemServicePrincipalResourceRequest) Update(ctx context.Context, reqObj *AccessReviewInstanceDecisionItemServicePrincipalResource) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInstanceDecisionItemServicePrincipalResource
func (r *AccessReviewInstanceDecisionItemServicePrincipalResourceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInstanceDecisionItemServicePrincipalTargetRequestBuilder is request builder for AccessReviewInstanceDecisionItemServicePrincipalTarget
type AccessReviewInstanceDecisionItemServicePrincipalTargetRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInstanceDecisionItemServicePrincipalTargetRequest
func (b *AccessReviewInstanceDecisionItemServicePrincipalTargetRequestBuilder) Request() *AccessReviewInstanceDecisionItemServicePrincipalTargetRequest {
	return &AccessReviewInstanceDecisionItemServicePrincipalTargetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInstanceDecisionItemServicePrincipalTargetRequest is request for AccessReviewInstanceDecisionItemServicePrincipalTarget
type AccessReviewInstanceDecisionItemServicePrincipalTargetRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInstanceDecisionItemServicePrincipalTarget
func (r *AccessReviewInstanceDecisionItemServicePrincipalTargetRequest) Get(ctx context.Context) (resObj *AccessReviewInstanceDecisionItemServicePrincipalTarget, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInstanceDecisionItemServicePrincipalTarget
func (r *AccessReviewInstanceDecisionItemServicePrincipalTargetRequest) Update(ctx context.Context, reqObj *AccessReviewInstanceDecisionItemServicePrincipalTarget) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInstanceDecisionItemServicePrincipalTarget
func (r *AccessReviewInstanceDecisionItemServicePrincipalTargetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInstanceDecisionItemTargetRequestBuilder is request builder for AccessReviewInstanceDecisionItemTarget
type AccessReviewInstanceDecisionItemTargetRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInstanceDecisionItemTargetRequest
func (b *AccessReviewInstanceDecisionItemTargetRequestBuilder) Request() *AccessReviewInstanceDecisionItemTargetRequest {
	return &AccessReviewInstanceDecisionItemTargetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInstanceDecisionItemTargetRequest is request for AccessReviewInstanceDecisionItemTarget
type AccessReviewInstanceDecisionItemTargetRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInstanceDecisionItemTarget
func (r *AccessReviewInstanceDecisionItemTargetRequest) Get(ctx context.Context) (resObj *AccessReviewInstanceDecisionItemTarget, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInstanceDecisionItemTarget
func (r *AccessReviewInstanceDecisionItemTargetRequest) Update(ctx context.Context, reqObj *AccessReviewInstanceDecisionItemTarget) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInstanceDecisionItemTarget
func (r *AccessReviewInstanceDecisionItemTargetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewInstanceDecisionItemUserTargetRequestBuilder is request builder for AccessReviewInstanceDecisionItemUserTarget
type AccessReviewInstanceDecisionItemUserTargetRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewInstanceDecisionItemUserTargetRequest
func (b *AccessReviewInstanceDecisionItemUserTargetRequestBuilder) Request() *AccessReviewInstanceDecisionItemUserTargetRequest {
	return &AccessReviewInstanceDecisionItemUserTargetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewInstanceDecisionItemUserTargetRequest is request for AccessReviewInstanceDecisionItemUserTarget
type AccessReviewInstanceDecisionItemUserTargetRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewInstanceDecisionItemUserTarget
func (r *AccessReviewInstanceDecisionItemUserTargetRequest) Get(ctx context.Context) (resObj *AccessReviewInstanceDecisionItemUserTarget, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewInstanceDecisionItemUserTarget
func (r *AccessReviewInstanceDecisionItemUserTargetRequest) Update(ctx context.Context, reqObj *AccessReviewInstanceDecisionItemUserTarget) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewInstanceDecisionItemUserTarget
func (r *AccessReviewInstanceDecisionItemUserTargetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewNotificationRecipientItemRequestBuilder is request builder for AccessReviewNotificationRecipientItem
type AccessReviewNotificationRecipientItemRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewNotificationRecipientItemRequest
func (b *AccessReviewNotificationRecipientItemRequestBuilder) Request() *AccessReviewNotificationRecipientItemRequest {
	return &AccessReviewNotificationRecipientItemRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewNotificationRecipientItemRequest is request for AccessReviewNotificationRecipientItem
type AccessReviewNotificationRecipientItemRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewNotificationRecipientItem
func (r *AccessReviewNotificationRecipientItemRequest) Get(ctx context.Context) (resObj *AccessReviewNotificationRecipientItem, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewNotificationRecipientItem
func (r *AccessReviewNotificationRecipientItemRequest) Update(ctx context.Context, reqObj *AccessReviewNotificationRecipientItem) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewNotificationRecipientItem
func (r *AccessReviewNotificationRecipientItemRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewNotificationRecipientQueryScopeRequestBuilder is request builder for AccessReviewNotificationRecipientQueryScope
type AccessReviewNotificationRecipientQueryScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewNotificationRecipientQueryScopeRequest
func (b *AccessReviewNotificationRecipientQueryScopeRequestBuilder) Request() *AccessReviewNotificationRecipientQueryScopeRequest {
	return &AccessReviewNotificationRecipientQueryScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewNotificationRecipientQueryScopeRequest is request for AccessReviewNotificationRecipientQueryScope
type AccessReviewNotificationRecipientQueryScopeRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewNotificationRecipientQueryScope
func (r *AccessReviewNotificationRecipientQueryScopeRequest) Get(ctx context.Context) (resObj *AccessReviewNotificationRecipientQueryScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewNotificationRecipientQueryScope
func (r *AccessReviewNotificationRecipientQueryScopeRequest) Update(ctx context.Context, reqObj *AccessReviewNotificationRecipientQueryScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewNotificationRecipientQueryScope
func (r *AccessReviewNotificationRecipientQueryScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewNotificationRecipientScopeRequestBuilder is request builder for AccessReviewNotificationRecipientScope
type AccessReviewNotificationRecipientScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewNotificationRecipientScopeRequest
func (b *AccessReviewNotificationRecipientScopeRequestBuilder) Request() *AccessReviewNotificationRecipientScopeRequest {
	return &AccessReviewNotificationRecipientScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewNotificationRecipientScopeRequest is request for AccessReviewNotificationRecipientScope
type AccessReviewNotificationRecipientScopeRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewNotificationRecipientScope
func (r *AccessReviewNotificationRecipientScopeRequest) Get(ctx context.Context) (resObj *AccessReviewNotificationRecipientScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewNotificationRecipientScope
func (r *AccessReviewNotificationRecipientScopeRequest) Update(ctx context.Context, reqObj *AccessReviewNotificationRecipientScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewNotificationRecipientScope
func (r *AccessReviewNotificationRecipientScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewPolicyRequestBuilder is request builder for AccessReviewPolicy
type AccessReviewPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewPolicyRequest
func (b *AccessReviewPolicyRequestBuilder) Request() *AccessReviewPolicyRequest {
	return &AccessReviewPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewPolicyRequest is request for AccessReviewPolicy
type AccessReviewPolicyRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewPolicy
func (r *AccessReviewPolicyRequest) Get(ctx context.Context) (resObj *AccessReviewPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewPolicy
func (r *AccessReviewPolicyRequest) Update(ctx context.Context, reqObj *AccessReviewPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewPolicy
func (r *AccessReviewPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewQueryScopeRequestBuilder is request builder for AccessReviewQueryScope
type AccessReviewQueryScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewQueryScopeRequest
func (b *AccessReviewQueryScopeRequestBuilder) Request() *AccessReviewQueryScopeRequest {
	return &AccessReviewQueryScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewQueryScopeRequest is request for AccessReviewQueryScope
type AccessReviewQueryScopeRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewQueryScope
func (r *AccessReviewQueryScopeRequest) Get(ctx context.Context) (resObj *AccessReviewQueryScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewQueryScope
func (r *AccessReviewQueryScopeRequest) Update(ctx context.Context, reqObj *AccessReviewQueryScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewQueryScope
func (r *AccessReviewQueryScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewRecommendationInsightSettingRequestBuilder is request builder for AccessReviewRecommendationInsightSetting
type AccessReviewRecommendationInsightSettingRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewRecommendationInsightSettingRequest
func (b *AccessReviewRecommendationInsightSettingRequestBuilder) Request() *AccessReviewRecommendationInsightSettingRequest {
	return &AccessReviewRecommendationInsightSettingRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewRecommendationInsightSettingRequest is request for AccessReviewRecommendationInsightSetting
type AccessReviewRecommendationInsightSettingRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewRecommendationInsightSetting
func (r *AccessReviewRecommendationInsightSettingRequest) Get(ctx context.Context) (resObj *AccessReviewRecommendationInsightSetting, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewRecommendationInsightSetting
func (r *AccessReviewRecommendationInsightSettingRequest) Update(ctx context.Context, reqObj *AccessReviewRecommendationInsightSetting) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewRecommendationInsightSetting
func (r *AccessReviewRecommendationInsightSettingRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewRecurrenceSettingsRequestBuilder is request builder for AccessReviewRecurrenceSettings
type AccessReviewRecurrenceSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewRecurrenceSettingsRequest
func (b *AccessReviewRecurrenceSettingsRequestBuilder) Request() *AccessReviewRecurrenceSettingsRequest {
	return &AccessReviewRecurrenceSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewRecurrenceSettingsRequest is request for AccessReviewRecurrenceSettings
type AccessReviewRecurrenceSettingsRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewRecurrenceSettings
func (r *AccessReviewRecurrenceSettingsRequest) Get(ctx context.Context) (resObj *AccessReviewRecurrenceSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewRecurrenceSettings
func (r *AccessReviewRecurrenceSettingsRequest) Update(ctx context.Context, reqObj *AccessReviewRecurrenceSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewRecurrenceSettings
func (r *AccessReviewRecurrenceSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewReviewerRequestBuilder is request builder for AccessReviewReviewer
type AccessReviewReviewerRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewReviewerRequest
func (b *AccessReviewReviewerRequestBuilder) Request() *AccessReviewReviewerRequest {
	return &AccessReviewReviewerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewReviewerRequest is request for AccessReviewReviewer
type AccessReviewReviewerRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewReviewer
func (r *AccessReviewReviewerRequest) Get(ctx context.Context) (resObj *AccessReviewReviewer, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewReviewer
func (r *AccessReviewReviewerRequest) Update(ctx context.Context, reqObj *AccessReviewReviewer) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewReviewer
func (r *AccessReviewReviewerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewReviewerScopeRequestBuilder is request builder for AccessReviewReviewerScope
type AccessReviewReviewerScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewReviewerScopeRequest
func (b *AccessReviewReviewerScopeRequestBuilder) Request() *AccessReviewReviewerScopeRequest {
	return &AccessReviewReviewerScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewReviewerScopeRequest is request for AccessReviewReviewerScope
type AccessReviewReviewerScopeRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewReviewerScope
func (r *AccessReviewReviewerScopeRequest) Get(ctx context.Context) (resObj *AccessReviewReviewerScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewReviewerScope
func (r *AccessReviewReviewerScopeRequest) Update(ctx context.Context, reqObj *AccessReviewReviewerScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewReviewerScope
func (r *AccessReviewReviewerScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewScheduleDefinitionRequestBuilder is request builder for AccessReviewScheduleDefinition
type AccessReviewScheduleDefinitionRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewScheduleDefinitionRequest
func (b *AccessReviewScheduleDefinitionRequestBuilder) Request() *AccessReviewScheduleDefinitionRequest {
	return &AccessReviewScheduleDefinitionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewScheduleDefinitionRequest is request for AccessReviewScheduleDefinition
type AccessReviewScheduleDefinitionRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewScheduleDefinition
func (r *AccessReviewScheduleDefinitionRequest) Get(ctx context.Context) (resObj *AccessReviewScheduleDefinition, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewScheduleDefinition
func (r *AccessReviewScheduleDefinitionRequest) Update(ctx context.Context, reqObj *AccessReviewScheduleDefinition) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewScheduleDefinition
func (r *AccessReviewScheduleDefinitionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewScheduleSettingsRequestBuilder is request builder for AccessReviewScheduleSettings
type AccessReviewScheduleSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewScheduleSettingsRequest
func (b *AccessReviewScheduleSettingsRequestBuilder) Request() *AccessReviewScheduleSettingsRequest {
	return &AccessReviewScheduleSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewScheduleSettingsRequest is request for AccessReviewScheduleSettings
type AccessReviewScheduleSettingsRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewScheduleSettings
func (r *AccessReviewScheduleSettingsRequest) Get(ctx context.Context) (resObj *AccessReviewScheduleSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewScheduleSettings
func (r *AccessReviewScheduleSettingsRequest) Update(ctx context.Context, reqObj *AccessReviewScheduleSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewScheduleSettings
func (r *AccessReviewScheduleSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewScopeRequestBuilder is request builder for AccessReviewScope
type AccessReviewScopeRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewScopeRequest
func (b *AccessReviewScopeRequestBuilder) Request() *AccessReviewScopeRequest {
	return &AccessReviewScopeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewScopeRequest is request for AccessReviewScope
type AccessReviewScopeRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewScope
func (r *AccessReviewScopeRequest) Get(ctx context.Context) (resObj *AccessReviewScope, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewScope
func (r *AccessReviewScopeRequest) Update(ctx context.Context, reqObj *AccessReviewScope) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewScope
func (r *AccessReviewScopeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewSetRequestBuilder is request builder for AccessReviewSet
type AccessReviewSetRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewSetRequest
func (b *AccessReviewSetRequestBuilder) Request() *AccessReviewSetRequest {
	return &AccessReviewSetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewSetRequest is request for AccessReviewSet
type AccessReviewSetRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewSet
func (r *AccessReviewSetRequest) Get(ctx context.Context) (resObj *AccessReviewSet, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewSet
func (r *AccessReviewSetRequest) Update(ctx context.Context, reqObj *AccessReviewSet) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewSet
func (r *AccessReviewSetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewSettingsRequestBuilder is request builder for AccessReviewSettings
type AccessReviewSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewSettingsRequest
func (b *AccessReviewSettingsRequestBuilder) Request() *AccessReviewSettingsRequest {
	return &AccessReviewSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewSettingsRequest is request for AccessReviewSettings
type AccessReviewSettingsRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewSettings
func (r *AccessReviewSettingsRequest) Get(ctx context.Context) (resObj *AccessReviewSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewSettings
func (r *AccessReviewSettingsRequest) Update(ctx context.Context, reqObj *AccessReviewSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewSettings
func (r *AccessReviewSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewStageRequestBuilder is request builder for AccessReviewStage
type AccessReviewStageRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewStageRequest
func (b *AccessReviewStageRequestBuilder) Request() *AccessReviewStageRequest {
	return &AccessReviewStageRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewStageRequest is request for AccessReviewStage
type AccessReviewStageRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewStage
func (r *AccessReviewStageRequest) Get(ctx context.Context) (resObj *AccessReviewStage, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewStage
func (r *AccessReviewStageRequest) Update(ctx context.Context, reqObj *AccessReviewStage) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewStage
func (r *AccessReviewStageRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AccessReviewStageSettingsRequestBuilder is request builder for AccessReviewStageSettings
type AccessReviewStageSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessReviewStageSettingsRequest
func (b *AccessReviewStageSettingsRequestBuilder) Request() *AccessReviewStageSettingsRequest {
	return &AccessReviewStageSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessReviewStageSettingsRequest is request for AccessReviewStageSettings
type AccessReviewStageSettingsRequest struct{ BaseRequest }

// Get performs GET request for AccessReviewStageSettings
func (r *AccessReviewStageSettingsRequest) Get(ctx context.Context) (resObj *AccessReviewStageSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessReviewStageSettings
func (r *AccessReviewStageSettingsRequest) Update(ctx context.Context, reqObj *AccessReviewStageSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessReviewStageSettings
func (r *AccessReviewStageSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequestBuilder struct{ BaseRequestBuilder }

// RecordAllDecisions action undocumentedrav
func (b *AccessReviewInstanceDecisionsCollectionRequestBuilder) RecordAllDecisions(reqObj *AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequestParameter) *AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequestBuilder {
	bb := &AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/RecordAllDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

// RecordAllDecisions action undocumentedrav
func (b *AccessReviewSetDecisionsCollectionRequestBuilder) RecordAllDecisions(reqObj *AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequestParameter) *AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequestBuilder {
	bb := &AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/RecordAllDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

// RecordAllDecisions action undocumentedrav
func (b *AccessReviewStageDecisionsCollectionRequestBuilder) RecordAllDecisions(reqObj *AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequestParameter) *AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequestBuilder {
	bb := &AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/RecordAllDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequest struct{ BaseRequest }

func (b *AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequestBuilder) Request() *AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequest {
	return &AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewInstanceDecisionItemCollectionRecordAllDecisionsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessPackageGetApplicablePolicyRequirementsRequestBuilder struct{ BaseRequestBuilder }

// GetApplicablePolicyRequirements action undocumentedrac
func (b *AccessPackageRequestBuilder) GetApplicablePolicyRequirements(reqObj *AccessPackageGetApplicablePolicyRequirementsRequestParameter) *AccessPackageGetApplicablePolicyRequirementsRequestBuilder {
	bb := &AccessPackageGetApplicablePolicyRequirementsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/GetApplicablePolicyRequirements"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessPackageGetApplicablePolicyRequirementsRequest struct{ BaseRequest }

func (b *AccessPackageGetApplicablePolicyRequirementsRequestBuilder) Request() *AccessPackageGetApplicablePolicyRequirementsRequest {
	return &AccessPackageGetApplicablePolicyRequirementsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessPackageGetApplicablePolicyRequirementsRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AccessPackageAssignmentRequestRequirements, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessPackageAssignmentRequestRequirements
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessPackageAssignmentRequestRequirements
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, _ = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

func (r *AccessPackageGetApplicablePolicyRequirementsRequest) PostN(ctx context.Context, n int) ([]AccessPackageAssignmentRequestRequirements, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, n)
}

func (r *AccessPackageGetApplicablePolicyRequirementsRequest) Post(ctx context.Context) ([]AccessPackageAssignmentRequestRequirements, error) {
	return r.Paging(ctx, "POST", "", r.requestObject, 0)
}

type AccessPackageMoveToCatalogRequestBuilder struct{ BaseRequestBuilder }

// MoveToCatalog action undocumentedrav
func (b *AccessPackageRequestBuilder) MoveToCatalog(reqObj *AccessPackageMoveToCatalogRequestParameter) *AccessPackageMoveToCatalogRequestBuilder {
	bb := &AccessPackageMoveToCatalogRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/MoveToCatalog"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessPackageMoveToCatalogRequest struct{ BaseRequest }

func (b *AccessPackageMoveToCatalogRequestBuilder) Request() *AccessPackageMoveToCatalogRequest {
	return &AccessPackageMoveToCatalogRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessPackageMoveToCatalogRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessPackageAssignmentReprocessRequestBuilder struct{ BaseRequestBuilder }

// Reprocess action undocumentedrav
func (b *AccessPackageAssignmentRequestBuilder) Reprocess(reqObj *AccessPackageAssignmentReprocessRequestParameter) *AccessPackageAssignmentReprocessRequestBuilder {
	bb := &AccessPackageAssignmentReprocessRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Reprocess"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessPackageAssignmentReprocessRequest struct{ BaseRequest }

func (b *AccessPackageAssignmentReprocessRequestBuilder) Request() *AccessPackageAssignmentReprocessRequest {
	return &AccessPackageAssignmentReprocessRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessPackageAssignmentReprocessRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessPackageAssignmentRequestObjectCancelRequestBuilder struct{ BaseRequestBuilder }

// Cancel action undocumentedrav
func (b *AccessPackageAssignmentRequestObjectRequestBuilder) Cancel(reqObj *AccessPackageAssignmentRequestObjectCancelRequestParameter) *AccessPackageAssignmentRequestObjectCancelRequestBuilder {
	bb := &AccessPackageAssignmentRequestObjectCancelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Cancel"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessPackageAssignmentRequestObjectCancelRequest struct{ BaseRequest }

func (b *AccessPackageAssignmentRequestObjectCancelRequestBuilder) Request() *AccessPackageAssignmentRequestObjectCancelRequest {
	return &AccessPackageAssignmentRequestObjectCancelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessPackageAssignmentRequestObjectCancelRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessPackageAssignmentRequestObjectResumeRequestBuilder struct{ BaseRequestBuilder }

// Resume action undocumentedrav
func (b *AccessPackageAssignmentRequestObjectRequestBuilder) Resume(reqObj *AccessPackageAssignmentRequestObjectResumeRequestParameter) *AccessPackageAssignmentRequestObjectResumeRequestBuilder {
	bb := &AccessPackageAssignmentRequestObjectResumeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Resume"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessPackageAssignmentRequestObjectResumeRequest struct{ BaseRequest }

func (b *AccessPackageAssignmentRequestObjectResumeRequestBuilder) Request() *AccessPackageAssignmentRequestObjectResumeRequest {
	return &AccessPackageAssignmentRequestObjectResumeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessPackageAssignmentRequestObjectResumeRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessPackageAssignmentRequestObjectReprocessRequestBuilder struct{ BaseRequestBuilder }

// Reprocess action undocumentedrav
func (b *AccessPackageAssignmentRequestObjectRequestBuilder) Reprocess(reqObj *AccessPackageAssignmentRequestObjectReprocessRequestParameter) *AccessPackageAssignmentRequestObjectReprocessRequestBuilder {
	bb := &AccessPackageAssignmentRequestObjectReprocessRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Reprocess"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessPackageAssignmentRequestObjectReprocessRequest struct{ BaseRequest }

func (b *AccessPackageAssignmentRequestObjectReprocessRequestBuilder) Request() *AccessPackageAssignmentRequestObjectReprocessRequest {
	return &AccessPackageAssignmentRequestObjectReprocessRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessPackageAssignmentRequestObjectReprocessRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewStopRequestBuilder struct{ BaseRequestBuilder }

// Stop action undocumentedrav
func (b *AccessReviewRequestBuilder) Stop(reqObj *AccessReviewStopRequestParameter) *AccessReviewStopRequestBuilder {
	bb := &AccessReviewStopRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Stop"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewStopRequest struct{ BaseRequest }

func (b *AccessReviewStopRequestBuilder) Request() *AccessReviewStopRequest {
	return &AccessReviewStopRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewStopRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewApplyDecisionsRequestBuilder struct{ BaseRequestBuilder }

// ApplyDecisions action undocumentedrav
func (b *AccessReviewRequestBuilder) ApplyDecisions(reqObj *AccessReviewApplyDecisionsRequestParameter) *AccessReviewApplyDecisionsRequestBuilder {
	bb := &AccessReviewApplyDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/ApplyDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewApplyDecisionsRequest struct{ BaseRequest }

func (b *AccessReviewApplyDecisionsRequestBuilder) Request() *AccessReviewApplyDecisionsRequest {
	return &AccessReviewApplyDecisionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewApplyDecisionsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewResetDecisionsRequestBuilder struct{ BaseRequestBuilder }

// ResetDecisions action undocumentedrav
func (b *AccessReviewRequestBuilder) ResetDecisions(reqObj *AccessReviewResetDecisionsRequestParameter) *AccessReviewResetDecisionsRequestBuilder {
	bb := &AccessReviewResetDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/ResetDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewResetDecisionsRequest struct{ BaseRequest }

func (b *AccessReviewResetDecisionsRequestBuilder) Request() *AccessReviewResetDecisionsRequest {
	return &AccessReviewResetDecisionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewResetDecisionsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewSendReminderRequestBuilder struct{ BaseRequestBuilder }

// SendReminder action undocumentedrav
func (b *AccessReviewRequestBuilder) SendReminder(reqObj *AccessReviewSendReminderRequestParameter) *AccessReviewSendReminderRequestBuilder {
	bb := &AccessReviewSendReminderRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/SendReminder"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewSendReminderRequest struct{ BaseRequest }

func (b *AccessReviewSendReminderRequestBuilder) Request() *AccessReviewSendReminderRequest {
	return &AccessReviewSendReminderRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewSendReminderRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewHistoryInstanceGenerateDownloadURIRequestBuilder struct{ BaseRequestBuilder }

// GenerateDownloadURI action undocumentedras
func (b *AccessReviewHistoryInstanceRequestBuilder) GenerateDownloadURI(reqObj *AccessReviewHistoryInstanceGenerateDownloadURIRequestParameter) *AccessReviewHistoryInstanceGenerateDownloadURIRequestBuilder {
	bb := &AccessReviewHistoryInstanceGenerateDownloadURIRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/GenerateDownloadUri"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewHistoryInstanceGenerateDownloadURIRequest struct{ BaseRequest }

func (b *AccessReviewHistoryInstanceGenerateDownloadURIRequestBuilder) Request() *AccessReviewHistoryInstanceGenerateDownloadURIRequest {
	return &AccessReviewHistoryInstanceGenerateDownloadURIRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewHistoryInstanceGenerateDownloadURIRequest) Post(ctx context.Context) (resObj *AccessReviewHistoryInstance, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type AccessReviewInstanceStopRequestBuilder struct{ BaseRequestBuilder }

// Stop action undocumentedrav
func (b *AccessReviewInstanceRequestBuilder) Stop(reqObj *AccessReviewInstanceStopRequestParameter) *AccessReviewInstanceStopRequestBuilder {
	bb := &AccessReviewInstanceStopRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Stop"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewInstanceStopRequest struct{ BaseRequest }

func (b *AccessReviewInstanceStopRequestBuilder) Request() *AccessReviewInstanceStopRequest {
	return &AccessReviewInstanceStopRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewInstanceStopRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewInstanceAcceptRecommendationsRequestBuilder struct{ BaseRequestBuilder }

// AcceptRecommendations action undocumentedrav
func (b *AccessReviewInstanceRequestBuilder) AcceptRecommendations(reqObj *AccessReviewInstanceAcceptRecommendationsRequestParameter) *AccessReviewInstanceAcceptRecommendationsRequestBuilder {
	bb := &AccessReviewInstanceAcceptRecommendationsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/AcceptRecommendations"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewInstanceAcceptRecommendationsRequest struct{ BaseRequest }

func (b *AccessReviewInstanceAcceptRecommendationsRequestBuilder) Request() *AccessReviewInstanceAcceptRecommendationsRequest {
	return &AccessReviewInstanceAcceptRecommendationsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewInstanceAcceptRecommendationsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewInstanceApplyDecisionsRequestBuilder struct{ BaseRequestBuilder }

// ApplyDecisions action undocumentedrav
func (b *AccessReviewInstanceRequestBuilder) ApplyDecisions(reqObj *AccessReviewInstanceApplyDecisionsRequestParameter) *AccessReviewInstanceApplyDecisionsRequestBuilder {
	bb := &AccessReviewInstanceApplyDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/ApplyDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewInstanceApplyDecisionsRequest struct{ BaseRequest }

func (b *AccessReviewInstanceApplyDecisionsRequestBuilder) Request() *AccessReviewInstanceApplyDecisionsRequest {
	return &AccessReviewInstanceApplyDecisionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewInstanceApplyDecisionsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewInstanceBatchRecordDecisionsRequestBuilder struct{ BaseRequestBuilder }

// BatchRecordDecisions action undocumentedrav
func (b *AccessReviewInstanceRequestBuilder) BatchRecordDecisions(reqObj *AccessReviewInstanceBatchRecordDecisionsRequestParameter) *AccessReviewInstanceBatchRecordDecisionsRequestBuilder {
	bb := &AccessReviewInstanceBatchRecordDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/BatchRecordDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewInstanceBatchRecordDecisionsRequest struct{ BaseRequest }

func (b *AccessReviewInstanceBatchRecordDecisionsRequestBuilder) Request() *AccessReviewInstanceBatchRecordDecisionsRequest {
	return &AccessReviewInstanceBatchRecordDecisionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewInstanceBatchRecordDecisionsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewInstanceResetDecisionsRequestBuilder struct{ BaseRequestBuilder }

// ResetDecisions action undocumentedrav
func (b *AccessReviewInstanceRequestBuilder) ResetDecisions(reqObj *AccessReviewInstanceResetDecisionsRequestParameter) *AccessReviewInstanceResetDecisionsRequestBuilder {
	bb := &AccessReviewInstanceResetDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/ResetDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewInstanceResetDecisionsRequest struct{ BaseRequest }

func (b *AccessReviewInstanceResetDecisionsRequestBuilder) Request() *AccessReviewInstanceResetDecisionsRequest {
	return &AccessReviewInstanceResetDecisionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewInstanceResetDecisionsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewInstanceSendReminderRequestBuilder struct{ BaseRequestBuilder }

// SendReminder action undocumentedrav
func (b *AccessReviewInstanceRequestBuilder) SendReminder(reqObj *AccessReviewInstanceSendReminderRequestParameter) *AccessReviewInstanceSendReminderRequestBuilder {
	bb := &AccessReviewInstanceSendReminderRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/SendReminder"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewInstanceSendReminderRequest struct{ BaseRequest }

func (b *AccessReviewInstanceSendReminderRequestBuilder) Request() *AccessReviewInstanceSendReminderRequest {
	return &AccessReviewInstanceSendReminderRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewInstanceSendReminderRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewScheduleDefinitionStopRequestBuilder struct{ BaseRequestBuilder }

// Stop action undocumentedrav
func (b *AccessReviewScheduleDefinitionRequestBuilder) Stop(reqObj *AccessReviewScheduleDefinitionStopRequestParameter) *AccessReviewScheduleDefinitionStopRequestBuilder {
	bb := &AccessReviewScheduleDefinitionStopRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Stop"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewScheduleDefinitionStopRequest struct{ BaseRequest }

func (b *AccessReviewScheduleDefinitionStopRequestBuilder) Request() *AccessReviewScheduleDefinitionStopRequest {
	return &AccessReviewScheduleDefinitionStopRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewScheduleDefinitionStopRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type AccessReviewStageStopRequestBuilder struct{ BaseRequestBuilder }

// Stop action undocumentedrav
func (b *AccessReviewStageRequestBuilder) Stop(reqObj *AccessReviewStageStopRequestParameter) *AccessReviewStageStopRequestBuilder {
	bb := &AccessReviewStageStopRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Stop"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type AccessReviewStageStopRequest struct{ BaseRequest }

func (b *AccessReviewStageStopRequestBuilder) Request() *AccessReviewStageStopRequest {
	return &AccessReviewStageStopRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *AccessReviewStageStopRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
