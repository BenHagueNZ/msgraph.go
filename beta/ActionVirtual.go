// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// AuditEvents returns request builder for CloudPcAuditEvent collection
func (b *VirtualEndpointRequestBuilder) AuditEvents() *VirtualEndpointAuditEventsCollectionRequestBuilder {
	bb := &VirtualEndpointAuditEventsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/auditEvents"
	return bb
}

// VirtualEndpointAuditEventsCollectionRequestBuilder is request builder for CloudPcAuditEvent collection rcn
type VirtualEndpointAuditEventsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPcAuditEvent collection
func (b *VirtualEndpointAuditEventsCollectionRequestBuilder) Request() *VirtualEndpointAuditEventsCollectionRequest {
	return &VirtualEndpointAuditEventsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPcAuditEvent item
func (b *VirtualEndpointAuditEventsCollectionRequestBuilder) ID(id string) *CloudPcAuditEventRequestBuilder {
	bb := &CloudPcAuditEventRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointAuditEventsCollectionRequest is request for CloudPcAuditEvent collection
type VirtualEndpointAuditEventsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPcAuditEvent collection
func (r *VirtualEndpointAuditEventsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPcAuditEvent, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPcAuditEvent
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPcAuditEvent
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPcAuditEvent collection, max N pages
func (r *VirtualEndpointAuditEventsCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPcAuditEvent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPcAuditEvent collection
func (r *VirtualEndpointAuditEventsCollectionRequest) Get(ctx context.Context) ([]CloudPcAuditEvent, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPcAuditEvent collection
func (r *VirtualEndpointAuditEventsCollectionRequest) Add(ctx context.Context, reqObj *CloudPcAuditEvent) (resObj *CloudPcAuditEvent, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CloudPCs returns request builder for CloudPC collection
func (b *VirtualEndpointRequestBuilder) CloudPCs() *VirtualEndpointCloudPCsCollectionRequestBuilder {
	bb := &VirtualEndpointCloudPCsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cloudPCs"
	return bb
}

// VirtualEndpointCloudPCsCollectionRequestBuilder is request builder for CloudPC collection rcn
type VirtualEndpointCloudPCsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPC collection
func (b *VirtualEndpointCloudPCsCollectionRequestBuilder) Request() *VirtualEndpointCloudPCsCollectionRequest {
	return &VirtualEndpointCloudPCsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPC item
func (b *VirtualEndpointCloudPCsCollectionRequestBuilder) ID(id string) *CloudPCRequestBuilder {
	bb := &CloudPCRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointCloudPCsCollectionRequest is request for CloudPC collection
type VirtualEndpointCloudPCsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPC collection
func (r *VirtualEndpointCloudPCsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPC, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPC
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPC
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPC collection, max N pages
func (r *VirtualEndpointCloudPCsCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPC, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPC collection
func (r *VirtualEndpointCloudPCsCollectionRequest) Get(ctx context.Context) ([]CloudPC, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPC collection
func (r *VirtualEndpointCloudPCsCollectionRequest) Add(ctx context.Context, reqObj *CloudPC) (resObj *CloudPC, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CrossCloudGovernmentOrganizationMapping is navigation property rn
func (b *VirtualEndpointRequestBuilder) CrossCloudGovernmentOrganizationMapping() *CloudPcCrossCloudGovernmentOrganizationMappingRequestBuilder {
	bb := &CloudPcCrossCloudGovernmentOrganizationMappingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/crossCloudGovernmentOrganizationMapping"
	return bb
}

// DeviceImages returns request builder for CloudPcDeviceImage collection
func (b *VirtualEndpointRequestBuilder) DeviceImages() *VirtualEndpointDeviceImagesCollectionRequestBuilder {
	bb := &VirtualEndpointDeviceImagesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceImages"
	return bb
}

// VirtualEndpointDeviceImagesCollectionRequestBuilder is request builder for CloudPcDeviceImage collection rcn
type VirtualEndpointDeviceImagesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPcDeviceImage collection
func (b *VirtualEndpointDeviceImagesCollectionRequestBuilder) Request() *VirtualEndpointDeviceImagesCollectionRequest {
	return &VirtualEndpointDeviceImagesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPcDeviceImage item
func (b *VirtualEndpointDeviceImagesCollectionRequestBuilder) ID(id string) *CloudPcDeviceImageRequestBuilder {
	bb := &CloudPcDeviceImageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointDeviceImagesCollectionRequest is request for CloudPcDeviceImage collection
type VirtualEndpointDeviceImagesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPcDeviceImage collection
func (r *VirtualEndpointDeviceImagesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPcDeviceImage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPcDeviceImage
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPcDeviceImage
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPcDeviceImage collection, max N pages
func (r *VirtualEndpointDeviceImagesCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPcDeviceImage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPcDeviceImage collection
func (r *VirtualEndpointDeviceImagesCollectionRequest) Get(ctx context.Context) ([]CloudPcDeviceImage, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPcDeviceImage collection
func (r *VirtualEndpointDeviceImagesCollectionRequest) Add(ctx context.Context, reqObj *CloudPcDeviceImage) (resObj *CloudPcDeviceImage, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ExternalPartnerSettings returns request builder for CloudPcExternalPartnerSetting collection
func (b *VirtualEndpointRequestBuilder) ExternalPartnerSettings() *VirtualEndpointExternalPartnerSettingsCollectionRequestBuilder {
	bb := &VirtualEndpointExternalPartnerSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/externalPartnerSettings"
	return bb
}

// VirtualEndpointExternalPartnerSettingsCollectionRequestBuilder is request builder for CloudPcExternalPartnerSetting collection rcn
type VirtualEndpointExternalPartnerSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPcExternalPartnerSetting collection
func (b *VirtualEndpointExternalPartnerSettingsCollectionRequestBuilder) Request() *VirtualEndpointExternalPartnerSettingsCollectionRequest {
	return &VirtualEndpointExternalPartnerSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPcExternalPartnerSetting item
func (b *VirtualEndpointExternalPartnerSettingsCollectionRequestBuilder) ID(id string) *CloudPcExternalPartnerSettingRequestBuilder {
	bb := &CloudPcExternalPartnerSettingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointExternalPartnerSettingsCollectionRequest is request for CloudPcExternalPartnerSetting collection
type VirtualEndpointExternalPartnerSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPcExternalPartnerSetting collection
func (r *VirtualEndpointExternalPartnerSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPcExternalPartnerSetting, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPcExternalPartnerSetting
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPcExternalPartnerSetting
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPcExternalPartnerSetting collection, max N pages
func (r *VirtualEndpointExternalPartnerSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPcExternalPartnerSetting, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPcExternalPartnerSetting collection
func (r *VirtualEndpointExternalPartnerSettingsCollectionRequest) Get(ctx context.Context) ([]CloudPcExternalPartnerSetting, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPcExternalPartnerSetting collection
func (r *VirtualEndpointExternalPartnerSettingsCollectionRequest) Add(ctx context.Context, reqObj *CloudPcExternalPartnerSetting) (resObj *CloudPcExternalPartnerSetting, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// GalleryImages returns request builder for CloudPcGalleryImage collection
func (b *VirtualEndpointRequestBuilder) GalleryImages() *VirtualEndpointGalleryImagesCollectionRequestBuilder {
	bb := &VirtualEndpointGalleryImagesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/galleryImages"
	return bb
}

// VirtualEndpointGalleryImagesCollectionRequestBuilder is request builder for CloudPcGalleryImage collection rcn
type VirtualEndpointGalleryImagesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPcGalleryImage collection
func (b *VirtualEndpointGalleryImagesCollectionRequestBuilder) Request() *VirtualEndpointGalleryImagesCollectionRequest {
	return &VirtualEndpointGalleryImagesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPcGalleryImage item
func (b *VirtualEndpointGalleryImagesCollectionRequestBuilder) ID(id string) *CloudPcGalleryImageRequestBuilder {
	bb := &CloudPcGalleryImageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointGalleryImagesCollectionRequest is request for CloudPcGalleryImage collection
type VirtualEndpointGalleryImagesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPcGalleryImage collection
func (r *VirtualEndpointGalleryImagesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPcGalleryImage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPcGalleryImage
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPcGalleryImage
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPcGalleryImage collection, max N pages
func (r *VirtualEndpointGalleryImagesCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPcGalleryImage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPcGalleryImage collection
func (r *VirtualEndpointGalleryImagesCollectionRequest) Get(ctx context.Context) ([]CloudPcGalleryImage, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPcGalleryImage collection
func (r *VirtualEndpointGalleryImagesCollectionRequest) Add(ctx context.Context, reqObj *CloudPcGalleryImage) (resObj *CloudPcGalleryImage, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// OnPremisesConnections returns request builder for CloudPcOnPremisesConnection collection
func (b *VirtualEndpointRequestBuilder) OnPremisesConnections() *VirtualEndpointOnPremisesConnectionsCollectionRequestBuilder {
	bb := &VirtualEndpointOnPremisesConnectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/onPremisesConnections"
	return bb
}

// VirtualEndpointOnPremisesConnectionsCollectionRequestBuilder is request builder for CloudPcOnPremisesConnection collection rcn
type VirtualEndpointOnPremisesConnectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPcOnPremisesConnection collection
func (b *VirtualEndpointOnPremisesConnectionsCollectionRequestBuilder) Request() *VirtualEndpointOnPremisesConnectionsCollectionRequest {
	return &VirtualEndpointOnPremisesConnectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPcOnPremisesConnection item
func (b *VirtualEndpointOnPremisesConnectionsCollectionRequestBuilder) ID(id string) *CloudPcOnPremisesConnectionRequestBuilder {
	bb := &CloudPcOnPremisesConnectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointOnPremisesConnectionsCollectionRequest is request for CloudPcOnPremisesConnection collection
type VirtualEndpointOnPremisesConnectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPcOnPremisesConnection collection
func (r *VirtualEndpointOnPremisesConnectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPcOnPremisesConnection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPcOnPremisesConnection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPcOnPremisesConnection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPcOnPremisesConnection collection, max N pages
func (r *VirtualEndpointOnPremisesConnectionsCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPcOnPremisesConnection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPcOnPremisesConnection collection
func (r *VirtualEndpointOnPremisesConnectionsCollectionRequest) Get(ctx context.Context) ([]CloudPcOnPremisesConnection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPcOnPremisesConnection collection
func (r *VirtualEndpointOnPremisesConnectionsCollectionRequest) Add(ctx context.Context, reqObj *CloudPcOnPremisesConnection) (resObj *CloudPcOnPremisesConnection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// OrganizationSettings is navigation property rn
func (b *VirtualEndpointRequestBuilder) OrganizationSettings() *CloudPcOrganizationSettingsRequestBuilder {
	bb := &CloudPcOrganizationSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/organizationSettings"
	return bb
}

// ProvisioningPolicies returns request builder for CloudPcProvisioningPolicy collection
func (b *VirtualEndpointRequestBuilder) ProvisioningPolicies() *VirtualEndpointProvisioningPoliciesCollectionRequestBuilder {
	bb := &VirtualEndpointProvisioningPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/provisioningPolicies"
	return bb
}

// VirtualEndpointProvisioningPoliciesCollectionRequestBuilder is request builder for CloudPcProvisioningPolicy collection rcn
type VirtualEndpointProvisioningPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPcProvisioningPolicy collection
func (b *VirtualEndpointProvisioningPoliciesCollectionRequestBuilder) Request() *VirtualEndpointProvisioningPoliciesCollectionRequest {
	return &VirtualEndpointProvisioningPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPcProvisioningPolicy item
func (b *VirtualEndpointProvisioningPoliciesCollectionRequestBuilder) ID(id string) *CloudPcProvisioningPolicyRequestBuilder {
	bb := &CloudPcProvisioningPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointProvisioningPoliciesCollectionRequest is request for CloudPcProvisioningPolicy collection
type VirtualEndpointProvisioningPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPcProvisioningPolicy collection
func (r *VirtualEndpointProvisioningPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPcProvisioningPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPcProvisioningPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPcProvisioningPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPcProvisioningPolicy collection, max N pages
func (r *VirtualEndpointProvisioningPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPcProvisioningPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPcProvisioningPolicy collection
func (r *VirtualEndpointProvisioningPoliciesCollectionRequest) Get(ctx context.Context) ([]CloudPcProvisioningPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPcProvisioningPolicy collection
func (r *VirtualEndpointProvisioningPoliciesCollectionRequest) Add(ctx context.Context, reqObj *CloudPcProvisioningPolicy) (resObj *CloudPcProvisioningPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Reports is navigation property rn
func (b *VirtualEndpointRequestBuilder) Reports() *CloudPcReportsRequestBuilder {
	bb := &CloudPcReportsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reports"
	return bb
}

// ServicePlans returns request builder for CloudPcServicePlan collection
func (b *VirtualEndpointRequestBuilder) ServicePlans() *VirtualEndpointServicePlansCollectionRequestBuilder {
	bb := &VirtualEndpointServicePlansCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/servicePlans"
	return bb
}

// VirtualEndpointServicePlansCollectionRequestBuilder is request builder for CloudPcServicePlan collection rcn
type VirtualEndpointServicePlansCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPcServicePlan collection
func (b *VirtualEndpointServicePlansCollectionRequestBuilder) Request() *VirtualEndpointServicePlansCollectionRequest {
	return &VirtualEndpointServicePlansCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPcServicePlan item
func (b *VirtualEndpointServicePlansCollectionRequestBuilder) ID(id string) *CloudPcServicePlanRequestBuilder {
	bb := &CloudPcServicePlanRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointServicePlansCollectionRequest is request for CloudPcServicePlan collection
type VirtualEndpointServicePlansCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPcServicePlan collection
func (r *VirtualEndpointServicePlansCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPcServicePlan, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPcServicePlan
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPcServicePlan
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPcServicePlan collection, max N pages
func (r *VirtualEndpointServicePlansCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPcServicePlan, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPcServicePlan collection
func (r *VirtualEndpointServicePlansCollectionRequest) Get(ctx context.Context) ([]CloudPcServicePlan, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPcServicePlan collection
func (r *VirtualEndpointServicePlansCollectionRequest) Add(ctx context.Context, reqObj *CloudPcServicePlan) (resObj *CloudPcServicePlan, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SharedUseServicePlans returns request builder for CloudPcSharedUseServicePlan collection
func (b *VirtualEndpointRequestBuilder) SharedUseServicePlans() *VirtualEndpointSharedUseServicePlansCollectionRequestBuilder {
	bb := &VirtualEndpointSharedUseServicePlansCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sharedUseServicePlans"
	return bb
}

// VirtualEndpointSharedUseServicePlansCollectionRequestBuilder is request builder for CloudPcSharedUseServicePlan collection rcn
type VirtualEndpointSharedUseServicePlansCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPcSharedUseServicePlan collection
func (b *VirtualEndpointSharedUseServicePlansCollectionRequestBuilder) Request() *VirtualEndpointSharedUseServicePlansCollectionRequest {
	return &VirtualEndpointSharedUseServicePlansCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPcSharedUseServicePlan item
func (b *VirtualEndpointSharedUseServicePlansCollectionRequestBuilder) ID(id string) *CloudPcSharedUseServicePlanRequestBuilder {
	bb := &CloudPcSharedUseServicePlanRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointSharedUseServicePlansCollectionRequest is request for CloudPcSharedUseServicePlan collection
type VirtualEndpointSharedUseServicePlansCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPcSharedUseServicePlan collection
func (r *VirtualEndpointSharedUseServicePlansCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPcSharedUseServicePlan, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPcSharedUseServicePlan
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPcSharedUseServicePlan
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPcSharedUseServicePlan collection, max N pages
func (r *VirtualEndpointSharedUseServicePlansCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPcSharedUseServicePlan, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPcSharedUseServicePlan collection
func (r *VirtualEndpointSharedUseServicePlansCollectionRequest) Get(ctx context.Context) ([]CloudPcSharedUseServicePlan, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPcSharedUseServicePlan collection
func (r *VirtualEndpointSharedUseServicePlansCollectionRequest) Add(ctx context.Context, reqObj *CloudPcSharedUseServicePlan) (resObj *CloudPcSharedUseServicePlan, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Snapshots returns request builder for CloudPcSnapshot collection
func (b *VirtualEndpointRequestBuilder) Snapshots() *VirtualEndpointSnapshotsCollectionRequestBuilder {
	bb := &VirtualEndpointSnapshotsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/snapshots"
	return bb
}

// VirtualEndpointSnapshotsCollectionRequestBuilder is request builder for CloudPcSnapshot collection rcn
type VirtualEndpointSnapshotsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPcSnapshot collection
func (b *VirtualEndpointSnapshotsCollectionRequestBuilder) Request() *VirtualEndpointSnapshotsCollectionRequest {
	return &VirtualEndpointSnapshotsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPcSnapshot item
func (b *VirtualEndpointSnapshotsCollectionRequestBuilder) ID(id string) *CloudPcSnapshotRequestBuilder {
	bb := &CloudPcSnapshotRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointSnapshotsCollectionRequest is request for CloudPcSnapshot collection
type VirtualEndpointSnapshotsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPcSnapshot collection
func (r *VirtualEndpointSnapshotsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPcSnapshot, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPcSnapshot
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPcSnapshot
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPcSnapshot collection, max N pages
func (r *VirtualEndpointSnapshotsCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPcSnapshot, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPcSnapshot collection
func (r *VirtualEndpointSnapshotsCollectionRequest) Get(ctx context.Context) ([]CloudPcSnapshot, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPcSnapshot collection
func (r *VirtualEndpointSnapshotsCollectionRequest) Add(ctx context.Context, reqObj *CloudPcSnapshot) (resObj *CloudPcSnapshot, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SupportedRegions returns request builder for CloudPcSupportedRegion collection
func (b *VirtualEndpointRequestBuilder) SupportedRegions() *VirtualEndpointSupportedRegionsCollectionRequestBuilder {
	bb := &VirtualEndpointSupportedRegionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/supportedRegions"
	return bb
}

// VirtualEndpointSupportedRegionsCollectionRequestBuilder is request builder for CloudPcSupportedRegion collection rcn
type VirtualEndpointSupportedRegionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPcSupportedRegion collection
func (b *VirtualEndpointSupportedRegionsCollectionRequestBuilder) Request() *VirtualEndpointSupportedRegionsCollectionRequest {
	return &VirtualEndpointSupportedRegionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPcSupportedRegion item
func (b *VirtualEndpointSupportedRegionsCollectionRequestBuilder) ID(id string) *CloudPcSupportedRegionRequestBuilder {
	bb := &CloudPcSupportedRegionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointSupportedRegionsCollectionRequest is request for CloudPcSupportedRegion collection
type VirtualEndpointSupportedRegionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPcSupportedRegion collection
func (r *VirtualEndpointSupportedRegionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPcSupportedRegion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPcSupportedRegion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPcSupportedRegion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPcSupportedRegion collection, max N pages
func (r *VirtualEndpointSupportedRegionsCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPcSupportedRegion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPcSupportedRegion collection
func (r *VirtualEndpointSupportedRegionsCollectionRequest) Get(ctx context.Context) ([]CloudPcSupportedRegion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPcSupportedRegion collection
func (r *VirtualEndpointSupportedRegionsCollectionRequest) Add(ctx context.Context, reqObj *CloudPcSupportedRegion) (resObj *CloudPcSupportedRegion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserSettings returns request builder for CloudPcUserSetting collection
func (b *VirtualEndpointRequestBuilder) UserSettings() *VirtualEndpointUserSettingsCollectionRequestBuilder {
	bb := &VirtualEndpointUserSettingsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userSettings"
	return bb
}

// VirtualEndpointUserSettingsCollectionRequestBuilder is request builder for CloudPcUserSetting collection rcn
type VirtualEndpointUserSettingsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CloudPcUserSetting collection
func (b *VirtualEndpointUserSettingsCollectionRequestBuilder) Request() *VirtualEndpointUserSettingsCollectionRequest {
	return &VirtualEndpointUserSettingsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CloudPcUserSetting item
func (b *VirtualEndpointUserSettingsCollectionRequestBuilder) ID(id string) *CloudPcUserSettingRequestBuilder {
	bb := &CloudPcUserSettingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// VirtualEndpointUserSettingsCollectionRequest is request for CloudPcUserSetting collection
type VirtualEndpointUserSettingsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CloudPcUserSetting collection
func (r *VirtualEndpointUserSettingsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CloudPcUserSetting, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CloudPcUserSetting
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CloudPcUserSetting
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CloudPcUserSetting collection, max N pages
func (r *VirtualEndpointUserSettingsCollectionRequest) GetN(ctx context.Context, n int) ([]CloudPcUserSetting, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CloudPcUserSetting collection
func (r *VirtualEndpointUserSettingsCollectionRequest) Get(ctx context.Context) ([]CloudPcUserSetting, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CloudPcUserSetting collection
func (r *VirtualEndpointUserSettingsCollectionRequest) Add(ctx context.Context, reqObj *CloudPcUserSetting) (resObj *CloudPcUserSetting, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *VirtualAppointmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *VirtualEndpointRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
