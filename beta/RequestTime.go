// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// TimeCardRequestBuilder is request builder for TimeCard
type TimeCardRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeCardRequest
func (b *TimeCardRequestBuilder) Request() *TimeCardRequest {
	return &TimeCardRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeCardRequest is request for TimeCard
type TimeCardRequest struct{ BaseRequest }

// Get performs GET request for TimeCard
func (r *TimeCardRequest) Get(ctx context.Context) (resObj *TimeCard, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeCard
func (r *TimeCardRequest) Update(ctx context.Context, reqObj *TimeCard) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeCard
func (r *TimeCardRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeCardBreakRequestBuilder is request builder for TimeCardBreak
type TimeCardBreakRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeCardBreakRequest
func (b *TimeCardBreakRequestBuilder) Request() *TimeCardBreakRequest {
	return &TimeCardBreakRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeCardBreakRequest is request for TimeCardBreak
type TimeCardBreakRequest struct{ BaseRequest }

// Get performs GET request for TimeCardBreak
func (r *TimeCardBreakRequest) Get(ctx context.Context) (resObj *TimeCardBreak, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeCardBreak
func (r *TimeCardBreakRequest) Update(ctx context.Context, reqObj *TimeCardBreak) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeCardBreak
func (r *TimeCardBreakRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeCardEntryRequestBuilder is request builder for TimeCardEntry
type TimeCardEntryRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeCardEntryRequest
func (b *TimeCardEntryRequestBuilder) Request() *TimeCardEntryRequest {
	return &TimeCardEntryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeCardEntryRequest is request for TimeCardEntry
type TimeCardEntryRequest struct{ BaseRequest }

// Get performs GET request for TimeCardEntry
func (r *TimeCardEntryRequest) Get(ctx context.Context) (resObj *TimeCardEntry, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeCardEntry
func (r *TimeCardEntryRequest) Update(ctx context.Context, reqObj *TimeCardEntry) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeCardEntry
func (r *TimeCardEntryRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeCardEventRequestBuilder is request builder for TimeCardEvent
type TimeCardEventRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeCardEventRequest
func (b *TimeCardEventRequestBuilder) Request() *TimeCardEventRequest {
	return &TimeCardEventRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeCardEventRequest is request for TimeCardEvent
type TimeCardEventRequest struct{ BaseRequest }

// Get performs GET request for TimeCardEvent
func (r *TimeCardEventRequest) Get(ctx context.Context) (resObj *TimeCardEvent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeCardEvent
func (r *TimeCardEventRequest) Update(ctx context.Context, reqObj *TimeCardEvent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeCardEvent
func (r *TimeCardEventRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeClockSettingsRequestBuilder is request builder for TimeClockSettings
type TimeClockSettingsRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeClockSettingsRequest
func (b *TimeClockSettingsRequestBuilder) Request() *TimeClockSettingsRequest {
	return &TimeClockSettingsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeClockSettingsRequest is request for TimeClockSettings
type TimeClockSettingsRequest struct{ BaseRequest }

// Get performs GET request for TimeClockSettings
func (r *TimeClockSettingsRequest) Get(ctx context.Context) (resObj *TimeClockSettings, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeClockSettings
func (r *TimeClockSettingsRequest) Update(ctx context.Context, reqObj *TimeClockSettings) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeClockSettings
func (r *TimeClockSettingsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeConstraintRequestBuilder is request builder for TimeConstraint
type TimeConstraintRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeConstraintRequest
func (b *TimeConstraintRequestBuilder) Request() *TimeConstraintRequest {
	return &TimeConstraintRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeConstraintRequest is request for TimeConstraint
type TimeConstraintRequest struct{ BaseRequest }

// Get performs GET request for TimeConstraint
func (r *TimeConstraintRequest) Get(ctx context.Context) (resObj *TimeConstraint, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeConstraint
func (r *TimeConstraintRequest) Update(ctx context.Context, reqObj *TimeConstraint) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeConstraint
func (r *TimeConstraintRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeOffRequestBuilder is request builder for TimeOff
type TimeOffRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeOffRequest
func (b *TimeOffRequestBuilder) Request() *TimeOffRequest {
	return &TimeOffRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeOffRequest is request for TimeOff
type TimeOffRequest struct{ BaseRequest }

// Get performs GET request for TimeOff
func (r *TimeOffRequest) Get(ctx context.Context) (resObj *TimeOff, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeOff
func (r *TimeOffRequest) Update(ctx context.Context, reqObj *TimeOff) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeOff
func (r *TimeOffRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeOffItemRequestBuilder is request builder for TimeOffItem
type TimeOffItemRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeOffItemRequest
func (b *TimeOffItemRequestBuilder) Request() *TimeOffItemRequest {
	return &TimeOffItemRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeOffItemRequest is request for TimeOffItem
type TimeOffItemRequest struct{ BaseRequest }

// Get performs GET request for TimeOffItem
func (r *TimeOffItemRequest) Get(ctx context.Context) (resObj *TimeOffItem, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeOffItem
func (r *TimeOffItemRequest) Update(ctx context.Context, reqObj *TimeOffItem) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeOffItem
func (r *TimeOffItemRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeOffReasonRequestBuilder is request builder for TimeOffReason
type TimeOffReasonRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeOffReasonRequest
func (b *TimeOffReasonRequestBuilder) Request() *TimeOffReasonRequest {
	return &TimeOffReasonRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeOffReasonRequest is request for TimeOffReason
type TimeOffReasonRequest struct{ BaseRequest }

// Get performs GET request for TimeOffReason
func (r *TimeOffReasonRequest) Get(ctx context.Context) (resObj *TimeOffReason, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeOffReason
func (r *TimeOffReasonRequest) Update(ctx context.Context, reqObj *TimeOffReason) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeOffReason
func (r *TimeOffReasonRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeOffRequestObjectRequestBuilder is request builder for TimeOffRequestObject
type TimeOffRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeOffRequestObjectRequest
func (b *TimeOffRequestObjectRequestBuilder) Request() *TimeOffRequestObjectRequest {
	return &TimeOffRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeOffRequestObjectRequest is request for TimeOffRequestObject
type TimeOffRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for TimeOffRequestObject
func (r *TimeOffRequestObjectRequest) Get(ctx context.Context) (resObj *TimeOffRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeOffRequestObject
func (r *TimeOffRequestObjectRequest) Update(ctx context.Context, reqObj *TimeOffRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeOffRequestObject
func (r *TimeOffRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeRangeRequestBuilder is request builder for TimeRange
type TimeRangeRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeRangeRequest
func (b *TimeRangeRequestBuilder) Request() *TimeRangeRequest {
	return &TimeRangeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeRangeRequest is request for TimeRange
type TimeRangeRequest struct{ BaseRequest }

// Get performs GET request for TimeRange
func (r *TimeRangeRequest) Get(ctx context.Context) (resObj *TimeRange, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeRange
func (r *TimeRangeRequest) Update(ctx context.Context, reqObj *TimeRange) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeRange
func (r *TimeRangeRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeSeriesParameterRequestBuilder is request builder for TimeSeriesParameter
type TimeSeriesParameterRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeSeriesParameterRequest
func (b *TimeSeriesParameterRequestBuilder) Request() *TimeSeriesParameterRequest {
	return &TimeSeriesParameterRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeSeriesParameterRequest is request for TimeSeriesParameter
type TimeSeriesParameterRequest struct{ BaseRequest }

// Get performs GET request for TimeSeriesParameter
func (r *TimeSeriesParameterRequest) Get(ctx context.Context) (resObj *TimeSeriesParameter, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeSeriesParameter
func (r *TimeSeriesParameterRequest) Update(ctx context.Context, reqObj *TimeSeriesParameter) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeSeriesParameter
func (r *TimeSeriesParameterRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeSlotRequestBuilder is request builder for TimeSlot
type TimeSlotRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeSlotRequest
func (b *TimeSlotRequestBuilder) Request() *TimeSlotRequest {
	return &TimeSlotRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeSlotRequest is request for TimeSlot
type TimeSlotRequest struct{ BaseRequest }

// Get performs GET request for TimeSlot
func (r *TimeSlotRequest) Get(ctx context.Context) (resObj *TimeSlot, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeSlot
func (r *TimeSlotRequest) Update(ctx context.Context, reqObj *TimeSlot) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeSlot
func (r *TimeSlotRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeZoneBaseRequestBuilder is request builder for TimeZoneBase
type TimeZoneBaseRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeZoneBaseRequest
func (b *TimeZoneBaseRequestBuilder) Request() *TimeZoneBaseRequest {
	return &TimeZoneBaseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeZoneBaseRequest is request for TimeZoneBase
type TimeZoneBaseRequest struct{ BaseRequest }

// Get performs GET request for TimeZoneBase
func (r *TimeZoneBaseRequest) Get(ctx context.Context) (resObj *TimeZoneBase, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeZoneBase
func (r *TimeZoneBaseRequest) Update(ctx context.Context, reqObj *TimeZoneBase) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeZoneBase
func (r *TimeZoneBaseRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// TimeZoneInformationRequestBuilder is request builder for TimeZoneInformation
type TimeZoneInformationRequestBuilder struct{ BaseRequestBuilder }

// Request returns TimeZoneInformationRequest
func (b *TimeZoneInformationRequestBuilder) Request() *TimeZoneInformationRequest {
	return &TimeZoneInformationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TimeZoneInformationRequest is request for TimeZoneInformation
type TimeZoneInformationRequest struct{ BaseRequest }

// Get performs GET request for TimeZoneInformation
func (r *TimeZoneInformationRequest) Get(ctx context.Context) (resObj *TimeZoneInformation, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TimeZoneInformation
func (r *TimeZoneInformationRequest) Update(ctx context.Context, reqObj *TimeZoneInformation) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TimeZoneInformation
func (r *TimeZoneInformationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type TimeCardCollectionClockInRequestBuilder struct{ BaseRequestBuilder }

// ClockIn action undocumentedras
func (b *ScheduleTimeCardsCollectionRequestBuilder) ClockIn(reqObj *TimeCardCollectionClockInRequestParameter) *TimeCardCollectionClockInRequestBuilder {
	bb := &TimeCardCollectionClockInRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/ClockIn"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type TimeCardCollectionClockInRequest struct{ BaseRequest }

func (b *TimeCardCollectionClockInRequestBuilder) Request() *TimeCardCollectionClockInRequest {
	return &TimeCardCollectionClockInRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *TimeCardCollectionClockInRequest) Post(ctx context.Context) (resObj *TimeCard, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type TimeCardClockOutRequestBuilder struct{ BaseRequestBuilder }

// ClockOut action undocumentedras
func (b *TimeCardRequestBuilder) ClockOut(reqObj *TimeCardClockOutRequestParameter) *TimeCardClockOutRequestBuilder {
	bb := &TimeCardClockOutRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/ClockOut"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type TimeCardClockOutRequest struct{ BaseRequest }

func (b *TimeCardClockOutRequestBuilder) Request() *TimeCardClockOutRequest {
	return &TimeCardClockOutRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *TimeCardClockOutRequest) Post(ctx context.Context) (resObj *TimeCard, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type TimeCardConfirmRequestBuilder struct{ BaseRequestBuilder }

// Confirm action undocumentedras
func (b *TimeCardRequestBuilder) Confirm(reqObj *TimeCardConfirmRequestParameter) *TimeCardConfirmRequestBuilder {
	bb := &TimeCardConfirmRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Confirm"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type TimeCardConfirmRequest struct{ BaseRequest }

func (b *TimeCardConfirmRequestBuilder) Request() *TimeCardConfirmRequest {
	return &TimeCardConfirmRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *TimeCardConfirmRequest) Post(ctx context.Context) (resObj *TimeCard, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type TimeCardEndBreakRequestBuilder struct{ BaseRequestBuilder }

// EndBreak action undocumentedras
func (b *TimeCardRequestBuilder) EndBreak(reqObj *TimeCardEndBreakRequestParameter) *TimeCardEndBreakRequestBuilder {
	bb := &TimeCardEndBreakRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/EndBreak"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type TimeCardEndBreakRequest struct{ BaseRequest }

func (b *TimeCardEndBreakRequestBuilder) Request() *TimeCardEndBreakRequest {
	return &TimeCardEndBreakRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *TimeCardEndBreakRequest) Post(ctx context.Context) (resObj *TimeCard, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type TimeCardStartBreakRequestBuilder struct{ BaseRequestBuilder }

// StartBreak action undocumentedras
func (b *TimeCardRequestBuilder) StartBreak(reqObj *TimeCardStartBreakRequestParameter) *TimeCardStartBreakRequestBuilder {
	bb := &TimeCardStartBreakRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/StartBreak"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type TimeCardStartBreakRequest struct{ BaseRequest }

func (b *TimeCardStartBreakRequestBuilder) Request() *TimeCardStartBreakRequest {
	return &TimeCardStartBreakRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *TimeCardStartBreakRequest) Post(ctx context.Context) (resObj *TimeCard, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}
