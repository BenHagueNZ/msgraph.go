// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// VPNConfigurationRequestBuilder is request builder for VPNConfiguration
type VPNConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns VPNConfigurationRequest
func (b *VPNConfigurationRequestBuilder) Request() *VPNConfigurationRequest {
	return &VPNConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VPNConfigurationRequest is request for VPNConfiguration
type VPNConfigurationRequest struct{ BaseRequest }

// Get performs GET request for VPNConfiguration
func (r *VPNConfigurationRequest) Get(ctx context.Context) (resObj *VPNConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VPNConfiguration
func (r *VPNConfigurationRequest) Update(ctx context.Context, reqObj *VPNConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VPNConfiguration
func (r *VPNConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// VPNDnsRuleRequestBuilder is request builder for VPNDnsRule
type VPNDnsRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns VPNDnsRuleRequest
func (b *VPNDnsRuleRequestBuilder) Request() *VPNDnsRuleRequest {
	return &VPNDnsRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VPNDnsRuleRequest is request for VPNDnsRule
type VPNDnsRuleRequest struct{ BaseRequest }

// Get performs GET request for VPNDnsRule
func (r *VPNDnsRuleRequest) Get(ctx context.Context) (resObj *VPNDnsRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VPNDnsRule
func (r *VPNDnsRuleRequest) Update(ctx context.Context, reqObj *VPNDnsRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VPNDnsRule
func (r *VPNDnsRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// VPNOnDemandRuleRequestBuilder is request builder for VPNOnDemandRule
type VPNOnDemandRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns VPNOnDemandRuleRequest
func (b *VPNOnDemandRuleRequestBuilder) Request() *VPNOnDemandRuleRequest {
	return &VPNOnDemandRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VPNOnDemandRuleRequest is request for VPNOnDemandRule
type VPNOnDemandRuleRequest struct{ BaseRequest }

// Get performs GET request for VPNOnDemandRule
func (r *VPNOnDemandRuleRequest) Get(ctx context.Context) (resObj *VPNOnDemandRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VPNOnDemandRule
func (r *VPNOnDemandRuleRequest) Update(ctx context.Context, reqObj *VPNOnDemandRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VPNOnDemandRule
func (r *VPNOnDemandRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// VPNProxyServerRequestBuilder is request builder for VPNProxyServer
type VPNProxyServerRequestBuilder struct{ BaseRequestBuilder }

// Request returns VPNProxyServerRequest
func (b *VPNProxyServerRequestBuilder) Request() *VPNProxyServerRequest {
	return &VPNProxyServerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VPNProxyServerRequest is request for VPNProxyServer
type VPNProxyServerRequest struct{ BaseRequest }

// Get performs GET request for VPNProxyServer
func (r *VPNProxyServerRequest) Get(ctx context.Context) (resObj *VPNProxyServer, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VPNProxyServer
func (r *VPNProxyServerRequest) Update(ctx context.Context, reqObj *VPNProxyServer) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VPNProxyServer
func (r *VPNProxyServerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// VPNRouteRequestBuilder is request builder for VPNRoute
type VPNRouteRequestBuilder struct{ BaseRequestBuilder }

// Request returns VPNRouteRequest
func (b *VPNRouteRequestBuilder) Request() *VPNRouteRequest {
	return &VPNRouteRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VPNRouteRequest is request for VPNRoute
type VPNRouteRequest struct{ BaseRequest }

// Get performs GET request for VPNRoute
func (r *VPNRouteRequest) Get(ctx context.Context) (resObj *VPNRoute, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VPNRoute
func (r *VPNRouteRequest) Update(ctx context.Context, reqObj *VPNRoute) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VPNRoute
func (r *VPNRouteRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// VPNServerRequestBuilder is request builder for VPNServer
type VPNServerRequestBuilder struct{ BaseRequestBuilder }

// Request returns VPNServerRequest
func (b *VPNServerRequestBuilder) Request() *VPNServerRequest {
	return &VPNServerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VPNServerRequest is request for VPNServer
type VPNServerRequest struct{ BaseRequest }

// Get performs GET request for VPNServer
func (r *VPNServerRequest) Get(ctx context.Context) (resObj *VPNServer, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VPNServer
func (r *VPNServerRequest) Update(ctx context.Context, reqObj *VPNServer) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VPNServer
func (r *VPNServerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// VPNTrafficRuleRequestBuilder is request builder for VPNTrafficRule
type VPNTrafficRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns VPNTrafficRuleRequest
func (b *VPNTrafficRuleRequestBuilder) Request() *VPNTrafficRuleRequest {
	return &VPNTrafficRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// VPNTrafficRuleRequest is request for VPNTrafficRule
type VPNTrafficRuleRequest struct{ BaseRequest }

// Get performs GET request for VPNTrafficRule
func (r *VPNTrafficRuleRequest) Get(ctx context.Context) (resObj *VPNTrafficRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for VPNTrafficRule
func (r *VPNTrafficRuleRequest) Update(ctx context.Context, reqObj *VPNTrafficRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for VPNTrafficRule
func (r *VPNTrafficRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
