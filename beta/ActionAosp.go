// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// RootCertificate is navigation property rn
func (b *AospDeviceOwnerCertificateProfileBaseRequestBuilder) RootCertificate() *AospDeviceOwnerTrustedRootCertificateRequestBuilder {
	bb := &AospDeviceOwnerTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificate"
	return bb
}

// IdentityCertificateForClientAuthentication is navigation property rn
func (b *AospDeviceOwnerEnterpriseWiFiConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *AospDeviceOwnerCertificateProfileBaseRequestBuilder {
	bb := &AospDeviceOwnerCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// RootCertificateForServerValidation is navigation property rn
func (b *AospDeviceOwnerEnterpriseWiFiConfigurationRequestBuilder) RootCertificateForServerValidation() *AospDeviceOwnerTrustedRootCertificateRequestBuilder {
	bb := &AospDeviceOwnerTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificateForServerValidation"
	return bb
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AospDeviceOwnerPkcsCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AospDeviceOwnerPkcsCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *AospDeviceOwnerScepCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *AospDeviceOwnerScepCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AospDeviceOwnerCertificateProfileBase returns request builder for AospDeviceOwnerCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AospDeviceOwnerCertificateProfileBase() *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequestBuilder is request builder for AospDeviceOwnerCertificateProfileBase collection rcn
type DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AospDeviceOwnerCertificateProfileBase collection
func (b *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AospDeviceOwnerCertificateProfileBase item
func (b *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequestBuilder) ID(id string) *AospDeviceOwnerCertificateProfileBaseRequestBuilder {
	bb := &AospDeviceOwnerCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequest is request for AospDeviceOwnerCertificateProfileBase collection
type DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AospDeviceOwnerCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AospDeviceOwnerCertificateProfileBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AospDeviceOwnerCertificateProfileBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AospDeviceOwnerCertificateProfileBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AospDeviceOwnerCertificateProfileBase collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequest) GetN(ctx context.Context, n int) ([]AospDeviceOwnerCertificateProfileBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AospDeviceOwnerCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequest) Get(ctx context.Context) ([]AospDeviceOwnerCertificateProfileBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AospDeviceOwnerCertificateProfileBase collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerCertificateProfileBaseCollectionRequest) Add(ctx context.Context, reqObj *AospDeviceOwnerCertificateProfileBase) (resObj *AospDeviceOwnerCertificateProfileBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AospDeviceOwnerCompliancePolicy returns request builder for AospDeviceOwnerCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) AospDeviceOwnerCompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequestBuilder is request builder for AospDeviceOwnerCompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AospDeviceOwnerCompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AospDeviceOwnerCompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequestBuilder) ID(id string) *AospDeviceOwnerCompliancePolicyRequestBuilder {
	bb := &AospDeviceOwnerCompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequest is request for AospDeviceOwnerCompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AospDeviceOwnerCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AospDeviceOwnerCompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AospDeviceOwnerCompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AospDeviceOwnerCompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AospDeviceOwnerCompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]AospDeviceOwnerCompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AospDeviceOwnerCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequest) Get(ctx context.Context) ([]AospDeviceOwnerCompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AospDeviceOwnerCompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionAospDeviceOwnerCompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *AospDeviceOwnerCompliancePolicy) (resObj *AospDeviceOwnerCompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AospDeviceOwnerDeviceConfiguration returns request builder for AospDeviceOwnerDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AospDeviceOwnerDeviceConfiguration() *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequestBuilder is request builder for AospDeviceOwnerDeviceConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AospDeviceOwnerDeviceConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AospDeviceOwnerDeviceConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequestBuilder) ID(id string) *AospDeviceOwnerDeviceConfigurationRequestBuilder {
	bb := &AospDeviceOwnerDeviceConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequest is request for AospDeviceOwnerDeviceConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AospDeviceOwnerDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AospDeviceOwnerDeviceConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AospDeviceOwnerDeviceConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AospDeviceOwnerDeviceConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AospDeviceOwnerDeviceConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AospDeviceOwnerDeviceConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AospDeviceOwnerDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequest) Get(ctx context.Context) ([]AospDeviceOwnerDeviceConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AospDeviceOwnerDeviceConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerDeviceConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AospDeviceOwnerDeviceConfiguration) (resObj *AospDeviceOwnerDeviceConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AospDeviceOwnerCertificateProfileBase is navigation property rn
func (b *AospDeviceOwnerPkcsCertificateProfileRequestBuilder) AospDeviceOwnerCertificateProfileBase() *AospDeviceOwnerCertificateProfileBaseRequestBuilder {
	bb := &AospDeviceOwnerCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AospDeviceOwnerCertificateProfileBase is navigation property rn
func (b *AospDeviceOwnerScepCertificateProfileRequestBuilder) AospDeviceOwnerCertificateProfileBase() *AospDeviceOwnerCertificateProfileBaseRequestBuilder {
	bb := &AospDeviceOwnerCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AospDeviceOwnerTrustedRootCertificate returns request builder for AospDeviceOwnerTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AospDeviceOwnerTrustedRootCertificate() *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequestBuilder is request builder for AospDeviceOwnerTrustedRootCertificate collection rcn
type DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AospDeviceOwnerTrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AospDeviceOwnerTrustedRootCertificate item
func (b *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequestBuilder) ID(id string) *AospDeviceOwnerTrustedRootCertificateRequestBuilder {
	bb := &AospDeviceOwnerTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequest is request for AospDeviceOwnerTrustedRootCertificate collection
type DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AospDeviceOwnerTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AospDeviceOwnerTrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AospDeviceOwnerTrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AospDeviceOwnerTrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AospDeviceOwnerTrustedRootCertificate collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequest) GetN(ctx context.Context, n int) ([]AospDeviceOwnerTrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AospDeviceOwnerTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequest) Get(ctx context.Context) ([]AospDeviceOwnerTrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AospDeviceOwnerTrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerTrustedRootCertificateCollectionRequest) Add(ctx context.Context, reqObj *AospDeviceOwnerTrustedRootCertificate) (resObj *AospDeviceOwnerTrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AospDeviceOwnerWiFiConfiguration returns request builder for AospDeviceOwnerWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) AospDeviceOwnerWiFiConfiguration() *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequestBuilder is request builder for AospDeviceOwnerWiFiConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AospDeviceOwnerWiFiConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AospDeviceOwnerWiFiConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequestBuilder) ID(id string) *AospDeviceOwnerWiFiConfigurationRequestBuilder {
	bb := &AospDeviceOwnerWiFiConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequest is request for AospDeviceOwnerWiFiConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AospDeviceOwnerWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AospDeviceOwnerWiFiConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AospDeviceOwnerWiFiConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AospDeviceOwnerWiFiConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AospDeviceOwnerWiFiConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]AospDeviceOwnerWiFiConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AospDeviceOwnerWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequest) Get(ctx context.Context) ([]AospDeviceOwnerWiFiConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AospDeviceOwnerWiFiConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionAospDeviceOwnerWiFiConfigurationCollectionRequest) Add(ctx context.Context, reqObj *AospDeviceOwnerWiFiConfiguration) (resObj *AospDeviceOwnerWiFiConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
