// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// IdentityGovernanceTaskProcessingResultIdentityGovernanceResumeRequestParameter undocumented
type IdentityGovernanceTaskProcessingResultIdentityGovernanceResumeRequestParameter struct {
	// Source undocumented
	Source *string `json:"source,omitempty"`
	// Type undocumented
	Type *string `json:"type,omitempty"`
	// Data undocumented
	Data *IdentityGovernanceCustomTaskExtensionCallbackData `json:"data,omitempty"`
}

// IdentityGovernanceWorkflowIdentityGovernanceActivateRequestParameter undocumented
type IdentityGovernanceWorkflowIdentityGovernanceActivateRequestParameter struct {
	// Subjects undocumented
	Subjects []User `json:"subjects,omitempty"`
}

// IdentityGovernanceWorkflowIdentityGovernanceCreateNewVersionRequestParameter undocumented
type IdentityGovernanceWorkflowIdentityGovernanceCreateNewVersionRequestParameter struct {
	// Workflow undocumented
	Workflow *IdentityGovernanceWorkflow `json:"workflow,omitempty"`
}

// IdentityGovernanceWorkflowIdentityGovernanceRestoreRequestParameter undocumented
type IdentityGovernanceWorkflowIdentityGovernanceRestoreRequestParameter struct {
}

// CreatedBy is navigation property rn
func (b *IdentityGovernanceCustomTaskExtensionRequestBuilder) CreatedBy() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/createdBy"
	return bb
}

// LastModifiedBy is navigation property rn
func (b *IdentityGovernanceCustomTaskExtensionRequestBuilder) LastModifiedBy() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastModifiedBy"
	return bb
}

// AuthorizedApps returns request builder for Application collection
func (b *IdentityGovernanceCustomTaskExtensionCallbackConfigurationRequestBuilder) AuthorizedApps() *IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequestBuilder {
	bb := &IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/authorizedApps"
	return bb
}

// IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequestBuilder is request builder for Application collection rcn
type IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Application collection
func (b *IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequestBuilder) Request() *IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequest {
	return &IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Application item
func (b *IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequestBuilder) ID(id string) *ApplicationRequestBuilder {
	bb := &ApplicationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequest is request for Application collection
type IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Application collection
func (r *IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Application, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Application
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Application
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Application collection, max N pages
func (r *IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequest) GetN(ctx context.Context, n int) ([]Application, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Application collection
func (r *IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequest) Get(ctx context.Context) ([]Application, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Application collection
func (r *IdentityGovernanceCustomTaskExtensionCallbackConfigurationAuthorizedAppsCollectionRequest) Add(ctx context.Context, reqObj *Application) (resObj *Application, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Subject is navigation property rn
func (b *IdentityGovernanceCustomTaskExtensionCalloutDataRequestBuilder) Subject() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/subject"
	return bb
}

// Task is navigation property rn
func (b *IdentityGovernanceCustomTaskExtensionCalloutDataRequestBuilder) Task() *IdentityGovernanceTaskRequestBuilder {
	bb := &IdentityGovernanceTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/task"
	return bb
}

// TaskProcessingresult is navigation property rn
func (b *IdentityGovernanceCustomTaskExtensionCalloutDataRequestBuilder) TaskProcessingresult() *IdentityGovernanceTaskProcessingResultRequestBuilder {
	bb := &IdentityGovernanceTaskProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskProcessingresult"
	return bb
}

// Workflow is navigation property rn
func (b *IdentityGovernanceCustomTaskExtensionCalloutDataRequestBuilder) Workflow() *IdentityGovernanceWorkflowRequestBuilder {
	bb := &IdentityGovernanceWorkflowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/workflow"
	return bb
}

// CustomTaskExtensions returns request builder for IdentityGovernanceCustomTaskExtension collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) CustomTaskExtensions() *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder {
	bb := &IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/customTaskExtensions"
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder is request builder for IdentityGovernanceCustomTaskExtension collection rcn
type IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceCustomTaskExtension collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder) Request() *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest {
	return &IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceCustomTaskExtension item
func (b *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder) ID(id string) *IdentityGovernanceCustomTaskExtensionRequestBuilder {
	bb := &IdentityGovernanceCustomTaskExtensionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest is request for IdentityGovernanceCustomTaskExtension collection
type IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceCustomTaskExtension collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceCustomTaskExtension, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceCustomTaskExtension
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceCustomTaskExtension
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceCustomTaskExtension collection, max N pages
func (r *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceCustomTaskExtension, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceCustomTaskExtension collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceCustomTaskExtension, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceCustomTaskExtension collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceCustomTaskExtension) (resObj *IdentityGovernanceCustomTaskExtension, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeletedItems is navigation property rn
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) DeletedItems() *DeletedItemContainerRequestBuilder {
	bb := &DeletedItemContainerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deletedItems"
	return bb
}

// Settings is navigation property rn
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) Settings() *IdentityGovernanceLifecycleManagementSettingsRequestBuilder {
	bb := &IdentityGovernanceLifecycleManagementSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// TaskDefinitions returns request builder for IdentityGovernanceTaskDefinition collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) TaskDefinitions() *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder {
	bb := &IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskDefinitions"
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder is request builder for IdentityGovernanceTaskDefinition collection rcn
type IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskDefinition collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder) Request() *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest {
	return &IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceTaskDefinition item
func (b *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskDefinitionRequestBuilder {
	bb := &IdentityGovernanceTaskDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest is request for IdentityGovernanceTaskDefinition collection
type IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskDefinition collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskDefinition collection, max N pages
func (r *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskDefinition collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskDefinition collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskDefinition) (resObj *IdentityGovernanceTaskDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WorkflowTemplates returns request builder for IdentityGovernanceWorkflowTemplate collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) WorkflowTemplates() *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder {
	bb := &IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/workflowTemplates"
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder is request builder for IdentityGovernanceWorkflowTemplate collection rcn
type IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceWorkflowTemplate collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder) Request() *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest {
	return &IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceWorkflowTemplate item
func (b *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder) ID(id string) *IdentityGovernanceWorkflowTemplateRequestBuilder {
	bb := &IdentityGovernanceWorkflowTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest is request for IdentityGovernanceWorkflowTemplate collection
type IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceWorkflowTemplate collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceWorkflowTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceWorkflowTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceWorkflowTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceWorkflowTemplate collection, max N pages
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceWorkflowTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceWorkflowTemplate collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceWorkflowTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceWorkflowTemplate collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceWorkflowTemplate) (resObj *IdentityGovernanceWorkflowTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Workflows returns request builder for IdentityGovernanceWorkflow collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) Workflows() *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder {
	bb := &IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/workflows"
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder is request builder for IdentityGovernanceWorkflow collection rcn
type IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceWorkflow collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder) Request() *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest {
	return &IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceWorkflow item
func (b *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder) ID(id string) *IdentityGovernanceWorkflowRequestBuilder {
	bb := &IdentityGovernanceWorkflowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest is request for IdentityGovernanceWorkflow collection
type IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceWorkflow collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceWorkflow, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceWorkflow
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceWorkflow
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceWorkflow collection, max N pages
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceWorkflow, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceWorkflow collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceWorkflow, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceWorkflow collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceWorkflow) (resObj *IdentityGovernanceWorkflow, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TaskProcessingResults returns request builder for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceRunRequestBuilder) TaskProcessingResults() *IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskProcessingResults"
	return bb
}

// IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceTaskProcessingResult collection rcn
type IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceRunTaskProcessingResultsCollectionRequest {
	return &IdentityGovernanceRunTaskProcessingResultsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceTaskProcessingResult item
func (b *IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskProcessingResultRequestBuilder {
	bb := &IdentityGovernanceTaskProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceRunTaskProcessingResultsCollectionRequest is request for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceRunTaskProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceRunTaskProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskProcessingResult collection, max N pages
func (r *IdentityGovernanceRunTaskProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceRunTaskProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceRunTaskProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskProcessingResult) (resObj *IdentityGovernanceTaskProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserProcessingResults returns request builder for IdentityGovernanceUserProcessingResult collection
func (b *IdentityGovernanceRunRequestBuilder) UserProcessingResults() *IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userProcessingResults"
	return bb
}

// IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceUserProcessingResult collection rcn
type IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceUserProcessingResult collection
func (b *IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceRunUserProcessingResultsCollectionRequest {
	return &IdentityGovernanceRunUserProcessingResultsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceUserProcessingResult item
func (b *IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceUserProcessingResultRequestBuilder {
	bb := &IdentityGovernanceUserProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceRunUserProcessingResultsCollectionRequest is request for IdentityGovernanceUserProcessingResult collection
type IdentityGovernanceRunUserProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceRunUserProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceUserProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceUserProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceUserProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceUserProcessingResult collection, max N pages
func (r *IdentityGovernanceRunUserProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceUserProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceRunUserProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceUserProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceRunUserProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceUserProcessingResult) (resObj *IdentityGovernanceUserProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TaskProcessingResults returns request builder for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceTaskRequestBuilder) TaskProcessingResults() *IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskProcessingResults"
	return bb
}

// IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceTaskProcessingResult collection rcn
type IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceTaskTaskProcessingResultsCollectionRequest {
	return &IdentityGovernanceTaskTaskProcessingResultsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceTaskProcessingResult item
func (b *IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskProcessingResultRequestBuilder {
	bb := &IdentityGovernanceTaskProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceTaskTaskProcessingResultsCollectionRequest is request for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceTaskTaskProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskTaskProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskProcessingResult collection, max N pages
func (r *IdentityGovernanceTaskTaskProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskTaskProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskTaskProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskProcessingResult) (resObj *IdentityGovernanceTaskProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Subject is navigation property rn
func (b *IdentityGovernanceTaskProcessingResultRequestBuilder) Subject() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/subject"
	return bb
}

// Task is navigation property rn
func (b *IdentityGovernanceTaskProcessingResultRequestBuilder) Task() *IdentityGovernanceTaskRequestBuilder {
	bb := &IdentityGovernanceTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/task"
	return bb
}

// Task is navigation property rn
func (b *IdentityGovernanceTaskReportRequestBuilder) Task() *IdentityGovernanceTaskRequestBuilder {
	bb := &IdentityGovernanceTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/task"
	return bb
}

// TaskDefinition is navigation property rn
func (b *IdentityGovernanceTaskReportRequestBuilder) TaskDefinition() *IdentityGovernanceTaskDefinitionRequestBuilder {
	bb := &IdentityGovernanceTaskDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskDefinition"
	return bb
}

// TaskProcessingResults returns request builder for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceTaskReportRequestBuilder) TaskProcessingResults() *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskProcessingResults"
	return bb
}

// IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceTaskProcessingResult collection rcn
type IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest {
	return &IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceTaskProcessingResult item
func (b *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskProcessingResultRequestBuilder {
	bb := &IdentityGovernanceTaskProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest is request for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskProcessingResult collection, max N pages
func (r *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskProcessingResult) (resObj *IdentityGovernanceTaskProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Subject is navigation property rn
func (b *IdentityGovernanceUserProcessingResultRequestBuilder) Subject() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/subject"
	return bb
}

// TaskProcessingResults returns request builder for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceUserProcessingResultRequestBuilder) TaskProcessingResults() *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskProcessingResults"
	return bb
}

// IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceTaskProcessingResult collection rcn
type IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest {
	return &IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceTaskProcessingResult item
func (b *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskProcessingResultRequestBuilder {
	bb := &IdentityGovernanceTaskProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest is request for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskProcessingResult collection, max N pages
func (r *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskProcessingResult) (resObj *IdentityGovernanceTaskProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ExecutionScope returns request builder for User collection
func (b *IdentityGovernanceWorkflowRequestBuilder) ExecutionScope() *IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/executionScope"
	return bb
}

// IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder is request builder for User collection rcn
type IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for User collection
func (b *IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowExecutionScopeCollectionRequest {
	return &IdentityGovernanceWorkflowExecutionScopeCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for User item
func (b *IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder) ID(id string) *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowExecutionScopeCollectionRequest is request for User collection
type IdentityGovernanceWorkflowExecutionScopeCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for User collection
func (r *IdentityGovernanceWorkflowExecutionScopeCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]User, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []User
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []User
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for User collection, max N pages
func (r *IdentityGovernanceWorkflowExecutionScopeCollectionRequest) GetN(ctx context.Context, n int) ([]User, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for User collection
func (r *IdentityGovernanceWorkflowExecutionScopeCollectionRequest) Get(ctx context.Context) ([]User, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for User collection
func (r *IdentityGovernanceWorkflowExecutionScopeCollectionRequest) Add(ctx context.Context, reqObj *User) (resObj *User, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Runs returns request builder for IdentityGovernanceRun collection
func (b *IdentityGovernanceWorkflowRequestBuilder) Runs() *IdentityGovernanceWorkflowRunsCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowRunsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/runs"
	return bb
}

// IdentityGovernanceWorkflowRunsCollectionRequestBuilder is request builder for IdentityGovernanceRun collection rcn
type IdentityGovernanceWorkflowRunsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceRun collection
func (b *IdentityGovernanceWorkflowRunsCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowRunsCollectionRequest {
	return &IdentityGovernanceWorkflowRunsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceRun item
func (b *IdentityGovernanceWorkflowRunsCollectionRequestBuilder) ID(id string) *IdentityGovernanceRunRequestBuilder {
	bb := &IdentityGovernanceRunRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowRunsCollectionRequest is request for IdentityGovernanceRun collection
type IdentityGovernanceWorkflowRunsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceRun collection
func (r *IdentityGovernanceWorkflowRunsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceRun, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceRun
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceRun
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceRun collection, max N pages
func (r *IdentityGovernanceWorkflowRunsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceRun, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceRun collection
func (r *IdentityGovernanceWorkflowRunsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceRun, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceRun collection
func (r *IdentityGovernanceWorkflowRunsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceRun) (resObj *IdentityGovernanceRun, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TaskReports returns request builder for IdentityGovernanceTaskReport collection
func (b *IdentityGovernanceWorkflowRequestBuilder) TaskReports() *IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskReports"
	return bb
}

// IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder is request builder for IdentityGovernanceTaskReport collection rcn
type IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskReport collection
func (b *IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowTaskReportsCollectionRequest {
	return &IdentityGovernanceWorkflowTaskReportsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceTaskReport item
func (b *IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskReportRequestBuilder {
	bb := &IdentityGovernanceTaskReportRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowTaskReportsCollectionRequest is request for IdentityGovernanceTaskReport collection
type IdentityGovernanceWorkflowTaskReportsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskReport collection
func (r *IdentityGovernanceWorkflowTaskReportsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskReport, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskReport
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskReport
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskReport collection, max N pages
func (r *IdentityGovernanceWorkflowTaskReportsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskReport, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskReport collection
func (r *IdentityGovernanceWorkflowTaskReportsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskReport, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskReport collection
func (r *IdentityGovernanceWorkflowTaskReportsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskReport) (resObj *IdentityGovernanceTaskReport, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserProcessingResults returns request builder for IdentityGovernanceUserProcessingResult collection
func (b *IdentityGovernanceWorkflowRequestBuilder) UserProcessingResults() *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userProcessingResults"
	return bb
}

// IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceUserProcessingResult collection rcn
type IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceUserProcessingResult collection
func (b *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest {
	return &IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceUserProcessingResult item
func (b *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceUserProcessingResultRequestBuilder {
	bb := &IdentityGovernanceUserProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest is request for IdentityGovernanceUserProcessingResult collection
type IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceUserProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceUserProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceUserProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceUserProcessingResult collection, max N pages
func (r *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceUserProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceUserProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceUserProcessingResult) (resObj *IdentityGovernanceUserProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Versions returns request builder for IdentityGovernanceWorkflowVersion collection
func (b *IdentityGovernanceWorkflowRequestBuilder) Versions() *IdentityGovernanceWorkflowVersionsCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowVersionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/versions"
	return bb
}

// IdentityGovernanceWorkflowVersionsCollectionRequestBuilder is request builder for IdentityGovernanceWorkflowVersion collection rcn
type IdentityGovernanceWorkflowVersionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceWorkflowVersion collection
func (b *IdentityGovernanceWorkflowVersionsCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowVersionsCollectionRequest {
	return &IdentityGovernanceWorkflowVersionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceWorkflowVersion item
func (b *IdentityGovernanceWorkflowVersionsCollectionRequestBuilder) ID(id string) *IdentityGovernanceWorkflowVersionRequestBuilder {
	bb := &IdentityGovernanceWorkflowVersionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowVersionsCollectionRequest is request for IdentityGovernanceWorkflowVersion collection
type IdentityGovernanceWorkflowVersionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceWorkflowVersion collection
func (r *IdentityGovernanceWorkflowVersionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceWorkflowVersion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceWorkflowVersion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceWorkflowVersion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceWorkflowVersion collection, max N pages
func (r *IdentityGovernanceWorkflowVersionsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceWorkflowVersion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceWorkflowVersion collection
func (r *IdentityGovernanceWorkflowVersionsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceWorkflowVersion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceWorkflowVersion collection
func (r *IdentityGovernanceWorkflowVersionsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceWorkflowVersion) (resObj *IdentityGovernanceWorkflowVersion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CreatedBy is navigation property rn
func (b *IdentityGovernanceWorkflowBaseRequestBuilder) CreatedBy() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/createdBy"
	return bb
}

// LastModifiedBy is navigation property rn
func (b *IdentityGovernanceWorkflowBaseRequestBuilder) LastModifiedBy() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastModifiedBy"
	return bb
}

// Tasks returns request builder for IdentityGovernanceTask collection
func (b *IdentityGovernanceWorkflowBaseRequestBuilder) Tasks() *IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tasks"
	return bb
}

// IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder is request builder for IdentityGovernanceTask collection rcn
type IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTask collection
func (b *IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowBaseTasksCollectionRequest {
	return &IdentityGovernanceWorkflowBaseTasksCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceTask item
func (b *IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskRequestBuilder {
	bb := &IdentityGovernanceTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowBaseTasksCollectionRequest is request for IdentityGovernanceTask collection
type IdentityGovernanceWorkflowBaseTasksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowBaseTasksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTask, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTask
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTask
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTask collection, max N pages
func (r *IdentityGovernanceWorkflowBaseTasksCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTask, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowBaseTasksCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTask, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowBaseTasksCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTask) (resObj *IdentityGovernanceTask, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Tasks returns request builder for IdentityGovernanceTask collection
func (b *IdentityGovernanceWorkflowTemplateRequestBuilder) Tasks() *IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tasks"
	return bb
}

// IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder is request builder for IdentityGovernanceTask collection rcn
type IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTask collection
func (b *IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowTemplateTasksCollectionRequest {
	return &IdentityGovernanceWorkflowTemplateTasksCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityGovernanceTask item
func (b *IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskRequestBuilder {
	bb := &IdentityGovernanceTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowTemplateTasksCollectionRequest is request for IdentityGovernanceTask collection
type IdentityGovernanceWorkflowTemplateTasksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowTemplateTasksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTask, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTask
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTask
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTask collection, max N pages
func (r *IdentityGovernanceWorkflowTemplateTasksCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTask, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowTemplateTasksCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTask, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowTemplateTasksCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTask) (resObj *IdentityGovernanceTask, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IdentityUserFlowAttributeAssignmentCollectionSetOrderRequestParameter undocumented
type IdentityUserFlowAttributeAssignmentCollectionSetOrderRequestParameter struct {
	// NewAssignmentOrder undocumented
	NewAssignmentOrder *AssignmentOrder `json:"newAssignmentOrder,omitempty"`
}

// IdentityAPIConnectorUploadClientCertificateRequestParameter undocumented
type IdentityAPIConnectorUploadClientCertificateRequestParameter struct {
	// Pkcs12Value undocumented
	Pkcs12Value *string `json:"pkcs12Value,omitempty"`
	// Password undocumented
	Password *string `json:"password,omitempty"`
}

// APIConnectors returns request builder for IdentityAPIConnector collection
func (b *IdentityContainerRequestBuilder) APIConnectors() *IdentityContainerAPIConnectorsCollectionRequestBuilder {
	bb := &IdentityContainerAPIConnectorsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/apiConnectors"
	return bb
}

// IdentityContainerAPIConnectorsCollectionRequestBuilder is request builder for IdentityAPIConnector collection rcn
type IdentityContainerAPIConnectorsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityAPIConnector collection
func (b *IdentityContainerAPIConnectorsCollectionRequestBuilder) Request() *IdentityContainerAPIConnectorsCollectionRequest {
	return &IdentityContainerAPIConnectorsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityAPIConnector item
func (b *IdentityContainerAPIConnectorsCollectionRequestBuilder) ID(id string) *IdentityAPIConnectorRequestBuilder {
	bb := &IdentityAPIConnectorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityContainerAPIConnectorsCollectionRequest is request for IdentityAPIConnector collection
type IdentityContainerAPIConnectorsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityAPIConnector collection
func (r *IdentityContainerAPIConnectorsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityAPIConnector, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityAPIConnector
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityAPIConnector
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityAPIConnector collection, max N pages
func (r *IdentityContainerAPIConnectorsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityAPIConnector, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityAPIConnector collection
func (r *IdentityContainerAPIConnectorsCollectionRequest) Get(ctx context.Context) ([]IdentityAPIConnector, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityAPIConnector collection
func (r *IdentityContainerAPIConnectorsCollectionRequest) Add(ctx context.Context, reqObj *IdentityAPIConnector) (resObj *IdentityAPIConnector, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AuthenticationEventListeners returns request builder for AuthenticationEventListener collection
func (b *IdentityContainerRequestBuilder) AuthenticationEventListeners() *IdentityContainerAuthenticationEventListenersCollectionRequestBuilder {
	bb := &IdentityContainerAuthenticationEventListenersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/authenticationEventListeners"
	return bb
}

// IdentityContainerAuthenticationEventListenersCollectionRequestBuilder is request builder for AuthenticationEventListener collection rcn
type IdentityContainerAuthenticationEventListenersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AuthenticationEventListener collection
func (b *IdentityContainerAuthenticationEventListenersCollectionRequestBuilder) Request() *IdentityContainerAuthenticationEventListenersCollectionRequest {
	return &IdentityContainerAuthenticationEventListenersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AuthenticationEventListener item
func (b *IdentityContainerAuthenticationEventListenersCollectionRequestBuilder) ID(id string) *AuthenticationEventListenerRequestBuilder {
	bb := &AuthenticationEventListenerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityContainerAuthenticationEventListenersCollectionRequest is request for AuthenticationEventListener collection
type IdentityContainerAuthenticationEventListenersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AuthenticationEventListener collection
func (r *IdentityContainerAuthenticationEventListenersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AuthenticationEventListener, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AuthenticationEventListener
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AuthenticationEventListener
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AuthenticationEventListener collection, max N pages
func (r *IdentityContainerAuthenticationEventListenersCollectionRequest) GetN(ctx context.Context, n int) ([]AuthenticationEventListener, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AuthenticationEventListener collection
func (r *IdentityContainerAuthenticationEventListenersCollectionRequest) Get(ctx context.Context) ([]AuthenticationEventListener, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AuthenticationEventListener collection
func (r *IdentityContainerAuthenticationEventListenersCollectionRequest) Add(ctx context.Context, reqObj *AuthenticationEventListener) (resObj *AuthenticationEventListener, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// B2cUserFlows returns request builder for B2cIdentityUserFlow collection
func (b *IdentityContainerRequestBuilder) B2cUserFlows() *IdentityContainerB2cUserFlowsCollectionRequestBuilder {
	bb := &IdentityContainerB2cUserFlowsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/b2cUserFlows"
	return bb
}

// IdentityContainerB2cUserFlowsCollectionRequestBuilder is request builder for B2cIdentityUserFlow collection rcn
type IdentityContainerB2cUserFlowsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for B2cIdentityUserFlow collection
func (b *IdentityContainerB2cUserFlowsCollectionRequestBuilder) Request() *IdentityContainerB2cUserFlowsCollectionRequest {
	return &IdentityContainerB2cUserFlowsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for B2cIdentityUserFlow item
func (b *IdentityContainerB2cUserFlowsCollectionRequestBuilder) ID(id string) *B2cIdentityUserFlowRequestBuilder {
	bb := &B2cIdentityUserFlowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityContainerB2cUserFlowsCollectionRequest is request for B2cIdentityUserFlow collection
type IdentityContainerB2cUserFlowsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for B2cIdentityUserFlow collection
func (r *IdentityContainerB2cUserFlowsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]B2cIdentityUserFlow, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []B2cIdentityUserFlow
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []B2cIdentityUserFlow
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for B2cIdentityUserFlow collection, max N pages
func (r *IdentityContainerB2cUserFlowsCollectionRequest) GetN(ctx context.Context, n int) ([]B2cIdentityUserFlow, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for B2cIdentityUserFlow collection
func (r *IdentityContainerB2cUserFlowsCollectionRequest) Get(ctx context.Context) ([]B2cIdentityUserFlow, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for B2cIdentityUserFlow collection
func (r *IdentityContainerB2cUserFlowsCollectionRequest) Add(ctx context.Context, reqObj *B2cIdentityUserFlow) (resObj *B2cIdentityUserFlow, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// B2xUserFlows returns request builder for B2xIdentityUserFlow collection
func (b *IdentityContainerRequestBuilder) B2xUserFlows() *IdentityContainerB2xUserFlowsCollectionRequestBuilder {
	bb := &IdentityContainerB2xUserFlowsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/b2xUserFlows"
	return bb
}

// IdentityContainerB2xUserFlowsCollectionRequestBuilder is request builder for B2xIdentityUserFlow collection rcn
type IdentityContainerB2xUserFlowsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for B2xIdentityUserFlow collection
func (b *IdentityContainerB2xUserFlowsCollectionRequestBuilder) Request() *IdentityContainerB2xUserFlowsCollectionRequest {
	return &IdentityContainerB2xUserFlowsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for B2xIdentityUserFlow item
func (b *IdentityContainerB2xUserFlowsCollectionRequestBuilder) ID(id string) *B2xIdentityUserFlowRequestBuilder {
	bb := &B2xIdentityUserFlowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityContainerB2xUserFlowsCollectionRequest is request for B2xIdentityUserFlow collection
type IdentityContainerB2xUserFlowsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for B2xIdentityUserFlow collection
func (r *IdentityContainerB2xUserFlowsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]B2xIdentityUserFlow, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []B2xIdentityUserFlow
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []B2xIdentityUserFlow
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for B2xIdentityUserFlow collection, max N pages
func (r *IdentityContainerB2xUserFlowsCollectionRequest) GetN(ctx context.Context, n int) ([]B2xIdentityUserFlow, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for B2xIdentityUserFlow collection
func (r *IdentityContainerB2xUserFlowsCollectionRequest) Get(ctx context.Context) ([]B2xIdentityUserFlow, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for B2xIdentityUserFlow collection
func (r *IdentityContainerB2xUserFlowsCollectionRequest) Add(ctx context.Context, reqObj *B2xIdentityUserFlow) (resObj *B2xIdentityUserFlow, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ConditionalAccess is navigation property rn
func (b *IdentityContainerRequestBuilder) ConditionalAccess() *ConditionalAccessRootRequestBuilder {
	bb := &ConditionalAccessRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/conditionalAccess"
	return bb
}

// ContinuousAccessEvaluationPolicy is navigation property rn
func (b *IdentityContainerRequestBuilder) ContinuousAccessEvaluationPolicy() *ContinuousAccessEvaluationPolicyRequestBuilder {
	bb := &ContinuousAccessEvaluationPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/continuousAccessEvaluationPolicy"
	return bb
}

// CustomAuthenticationExtensions returns request builder for CustomAuthenticationExtension collection
func (b *IdentityContainerRequestBuilder) CustomAuthenticationExtensions() *IdentityContainerCustomAuthenticationExtensionsCollectionRequestBuilder {
	bb := &IdentityContainerCustomAuthenticationExtensionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/customAuthenticationExtensions"
	return bb
}

// IdentityContainerCustomAuthenticationExtensionsCollectionRequestBuilder is request builder for CustomAuthenticationExtension collection rcn
type IdentityContainerCustomAuthenticationExtensionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CustomAuthenticationExtension collection
func (b *IdentityContainerCustomAuthenticationExtensionsCollectionRequestBuilder) Request() *IdentityContainerCustomAuthenticationExtensionsCollectionRequest {
	return &IdentityContainerCustomAuthenticationExtensionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CustomAuthenticationExtension item
func (b *IdentityContainerCustomAuthenticationExtensionsCollectionRequestBuilder) ID(id string) *CustomAuthenticationExtensionRequestBuilder {
	bb := &CustomAuthenticationExtensionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityContainerCustomAuthenticationExtensionsCollectionRequest is request for CustomAuthenticationExtension collection
type IdentityContainerCustomAuthenticationExtensionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CustomAuthenticationExtension collection
func (r *IdentityContainerCustomAuthenticationExtensionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CustomAuthenticationExtension, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CustomAuthenticationExtension
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CustomAuthenticationExtension
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CustomAuthenticationExtension collection, max N pages
func (r *IdentityContainerCustomAuthenticationExtensionsCollectionRequest) GetN(ctx context.Context, n int) ([]CustomAuthenticationExtension, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CustomAuthenticationExtension collection
func (r *IdentityContainerCustomAuthenticationExtensionsCollectionRequest) Get(ctx context.Context) ([]CustomAuthenticationExtension, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CustomAuthenticationExtension collection
func (r *IdentityContainerCustomAuthenticationExtensionsCollectionRequest) Add(ctx context.Context, reqObj *CustomAuthenticationExtension) (resObj *CustomAuthenticationExtension, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IdentityProviders returns request builder for IdentityProviderBase collection
func (b *IdentityContainerRequestBuilder) IdentityProviders() *IdentityContainerIdentityProvidersCollectionRequestBuilder {
	bb := &IdentityContainerIdentityProvidersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityProviders"
	return bb
}

// IdentityContainerIdentityProvidersCollectionRequestBuilder is request builder for IdentityProviderBase collection rcn
type IdentityContainerIdentityProvidersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityProviderBase collection
func (b *IdentityContainerIdentityProvidersCollectionRequestBuilder) Request() *IdentityContainerIdentityProvidersCollectionRequest {
	return &IdentityContainerIdentityProvidersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityProviderBase item
func (b *IdentityContainerIdentityProvidersCollectionRequestBuilder) ID(id string) *IdentityProviderBaseRequestBuilder {
	bb := &IdentityProviderBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityContainerIdentityProvidersCollectionRequest is request for IdentityProviderBase collection
type IdentityContainerIdentityProvidersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityProviderBase collection
func (r *IdentityContainerIdentityProvidersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityProviderBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityProviderBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityProviderBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityProviderBase collection, max N pages
func (r *IdentityContainerIdentityProvidersCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityProviderBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityProviderBase collection
func (r *IdentityContainerIdentityProvidersCollectionRequest) Get(ctx context.Context) ([]IdentityProviderBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityProviderBase collection
func (r *IdentityContainerIdentityProvidersCollectionRequest) Add(ctx context.Context, reqObj *IdentityProviderBase) (resObj *IdentityProviderBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserFlowAttributes returns request builder for IdentityUserFlowAttribute collection
func (b *IdentityContainerRequestBuilder) UserFlowAttributes() *IdentityContainerUserFlowAttributesCollectionRequestBuilder {
	bb := &IdentityContainerUserFlowAttributesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userFlowAttributes"
	return bb
}

// IdentityContainerUserFlowAttributesCollectionRequestBuilder is request builder for IdentityUserFlowAttribute collection rcn
type IdentityContainerUserFlowAttributesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityUserFlowAttribute collection
func (b *IdentityContainerUserFlowAttributesCollectionRequestBuilder) Request() *IdentityContainerUserFlowAttributesCollectionRequest {
	return &IdentityContainerUserFlowAttributesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityUserFlowAttribute item
func (b *IdentityContainerUserFlowAttributesCollectionRequestBuilder) ID(id string) *IdentityUserFlowAttributeRequestBuilder {
	bb := &IdentityUserFlowAttributeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityContainerUserFlowAttributesCollectionRequest is request for IdentityUserFlowAttribute collection
type IdentityContainerUserFlowAttributesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityUserFlowAttribute collection
func (r *IdentityContainerUserFlowAttributesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityUserFlowAttribute, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityUserFlowAttribute
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityUserFlowAttribute
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityUserFlowAttribute collection, max N pages
func (r *IdentityContainerUserFlowAttributesCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityUserFlowAttribute, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityUserFlowAttribute collection
func (r *IdentityContainerUserFlowAttributesCollectionRequest) Get(ctx context.Context) ([]IdentityUserFlowAttribute, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityUserFlowAttribute collection
func (r *IdentityContainerUserFlowAttributesCollectionRequest) Add(ctx context.Context, reqObj *IdentityUserFlowAttribute) (resObj *IdentityUserFlowAttribute, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserFlows returns request builder for IdentityUserFlow collection
func (b *IdentityContainerRequestBuilder) UserFlows() *IdentityContainerUserFlowsCollectionRequestBuilder {
	bb := &IdentityContainerUserFlowsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userFlows"
	return bb
}

// IdentityContainerUserFlowsCollectionRequestBuilder is request builder for IdentityUserFlow collection rcn
type IdentityContainerUserFlowsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityUserFlow collection
func (b *IdentityContainerUserFlowsCollectionRequestBuilder) Request() *IdentityContainerUserFlowsCollectionRequest {
	return &IdentityContainerUserFlowsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityUserFlow item
func (b *IdentityContainerUserFlowsCollectionRequestBuilder) ID(id string) *IdentityUserFlowRequestBuilder {
	bb := &IdentityUserFlowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityContainerUserFlowsCollectionRequest is request for IdentityUserFlow collection
type IdentityContainerUserFlowsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityUserFlow collection
func (r *IdentityContainerUserFlowsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityUserFlow, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityUserFlow
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityUserFlow
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityUserFlow collection, max N pages
func (r *IdentityContainerUserFlowsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityUserFlow, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityUserFlow collection
func (r *IdentityContainerUserFlowsCollectionRequest) Get(ctx context.Context) ([]IdentityUserFlow, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityUserFlow collection
func (r *IdentityContainerUserFlowsCollectionRequest) Add(ctx context.Context, reqObj *IdentityUserFlow) (resObj *IdentityUserFlow, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AccessReviews is navigation property rn
func (b *IdentityGovernanceRequestBuilder) AccessReviews() *AccessReviewSetRequestBuilder {
	bb := &AccessReviewSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/accessReviews"
	return bb
}

// AppConsent is navigation property rn
func (b *IdentityGovernanceRequestBuilder) AppConsent() *AppConsentApprovalRouteRequestBuilder {
	bb := &AppConsentApprovalRouteRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appConsent"
	return bb
}

// EntitlementManagement is navigation property rn
func (b *IdentityGovernanceRequestBuilder) EntitlementManagement() *EntitlementManagementRequestBuilder {
	bb := &EntitlementManagementRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/entitlementManagement"
	return bb
}

// LifecycleWorkflows is navigation property rn
func (b *IdentityGovernanceRequestBuilder) LifecycleWorkflows() *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder {
	bb := &IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lifecycleWorkflows"
	return bb
}

// PrivilegedAccess is navigation property rn
func (b *IdentityGovernanceRequestBuilder) PrivilegedAccess() *PrivilegedAccessRootRequestBuilder {
	bb := &PrivilegedAccessRootRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/privilegedAccess"
	return bb
}

// RoleManagementAlerts is navigation property rn
func (b *IdentityGovernanceRequestBuilder) RoleManagementAlerts() *RoleManagementAlertRequestBuilder {
	bb := &RoleManagementAlertRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleManagementAlerts"
	return bb
}

// TermsOfUse is navigation property rn
func (b *IdentityGovernanceRequestBuilder) TermsOfUse() *TermsOfUseContainerRequestBuilder {
	bb := &TermsOfUseContainerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/termsOfUse"
	return bb
}

// RiskDetections returns request builder for RiskDetection collection
func (b *IdentityProtectionRootRequestBuilder) RiskDetections() *IdentityProtectionRootRiskDetectionsCollectionRequestBuilder {
	bb := &IdentityProtectionRootRiskDetectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/riskDetections"
	return bb
}

// IdentityProtectionRootRiskDetectionsCollectionRequestBuilder is request builder for RiskDetection collection rcn
type IdentityProtectionRootRiskDetectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RiskDetection collection
func (b *IdentityProtectionRootRiskDetectionsCollectionRequestBuilder) Request() *IdentityProtectionRootRiskDetectionsCollectionRequest {
	return &IdentityProtectionRootRiskDetectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RiskDetection item
func (b *IdentityProtectionRootRiskDetectionsCollectionRequestBuilder) ID(id string) *RiskDetectionRequestBuilder {
	bb := &RiskDetectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityProtectionRootRiskDetectionsCollectionRequest is request for RiskDetection collection
type IdentityProtectionRootRiskDetectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for RiskDetection collection
func (r *IdentityProtectionRootRiskDetectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]RiskDetection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RiskDetection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []RiskDetection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for RiskDetection collection, max N pages
func (r *IdentityProtectionRootRiskDetectionsCollectionRequest) GetN(ctx context.Context, n int) ([]RiskDetection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for RiskDetection collection
func (r *IdentityProtectionRootRiskDetectionsCollectionRequest) Get(ctx context.Context) ([]RiskDetection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for RiskDetection collection
func (r *IdentityProtectionRootRiskDetectionsCollectionRequest) Add(ctx context.Context, reqObj *RiskDetection) (resObj *RiskDetection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RiskyServicePrincipals returns request builder for RiskyServicePrincipal collection
func (b *IdentityProtectionRootRequestBuilder) RiskyServicePrincipals() *IdentityProtectionRootRiskyServicePrincipalsCollectionRequestBuilder {
	bb := &IdentityProtectionRootRiskyServicePrincipalsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/riskyServicePrincipals"
	return bb
}

// IdentityProtectionRootRiskyServicePrincipalsCollectionRequestBuilder is request builder for RiskyServicePrincipal collection rcn
type IdentityProtectionRootRiskyServicePrincipalsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RiskyServicePrincipal collection
func (b *IdentityProtectionRootRiskyServicePrincipalsCollectionRequestBuilder) Request() *IdentityProtectionRootRiskyServicePrincipalsCollectionRequest {
	return &IdentityProtectionRootRiskyServicePrincipalsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RiskyServicePrincipal item
func (b *IdentityProtectionRootRiskyServicePrincipalsCollectionRequestBuilder) ID(id string) *RiskyServicePrincipalRequestBuilder {
	bb := &RiskyServicePrincipalRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityProtectionRootRiskyServicePrincipalsCollectionRequest is request for RiskyServicePrincipal collection
type IdentityProtectionRootRiskyServicePrincipalsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for RiskyServicePrincipal collection
func (r *IdentityProtectionRootRiskyServicePrincipalsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]RiskyServicePrincipal, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RiskyServicePrincipal
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []RiskyServicePrincipal
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for RiskyServicePrincipal collection, max N pages
func (r *IdentityProtectionRootRiskyServicePrincipalsCollectionRequest) GetN(ctx context.Context, n int) ([]RiskyServicePrincipal, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for RiskyServicePrincipal collection
func (r *IdentityProtectionRootRiskyServicePrincipalsCollectionRequest) Get(ctx context.Context) ([]RiskyServicePrincipal, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for RiskyServicePrincipal collection
func (r *IdentityProtectionRootRiskyServicePrincipalsCollectionRequest) Add(ctx context.Context, reqObj *RiskyServicePrincipal) (resObj *RiskyServicePrincipal, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RiskyUsers returns request builder for RiskyUser collection
func (b *IdentityProtectionRootRequestBuilder) RiskyUsers() *IdentityProtectionRootRiskyUsersCollectionRequestBuilder {
	bb := &IdentityProtectionRootRiskyUsersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/riskyUsers"
	return bb
}

// IdentityProtectionRootRiskyUsersCollectionRequestBuilder is request builder for RiskyUser collection rcn
type IdentityProtectionRootRiskyUsersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RiskyUser collection
func (b *IdentityProtectionRootRiskyUsersCollectionRequestBuilder) Request() *IdentityProtectionRootRiskyUsersCollectionRequest {
	return &IdentityProtectionRootRiskyUsersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RiskyUser item
func (b *IdentityProtectionRootRiskyUsersCollectionRequestBuilder) ID(id string) *RiskyUserRequestBuilder {
	bb := &RiskyUserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityProtectionRootRiskyUsersCollectionRequest is request for RiskyUser collection
type IdentityProtectionRootRiskyUsersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for RiskyUser collection
func (r *IdentityProtectionRootRiskyUsersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]RiskyUser, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RiskyUser
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []RiskyUser
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for RiskyUser collection, max N pages
func (r *IdentityProtectionRootRiskyUsersCollectionRequest) GetN(ctx context.Context, n int) ([]RiskyUser, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for RiskyUser collection
func (r *IdentityProtectionRootRiskyUsersCollectionRequest) Get(ctx context.Context) ([]RiskyUser, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for RiskyUser collection
func (r *IdentityProtectionRootRiskyUsersCollectionRequest) Add(ctx context.Context, reqObj *RiskyUser) (resObj *RiskyUser, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ServicePrincipalRiskDetections returns request builder for ServicePrincipalRiskDetection collection
func (b *IdentityProtectionRootRequestBuilder) ServicePrincipalRiskDetections() *IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequestBuilder {
	bb := &IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/servicePrincipalRiskDetections"
	return bb
}

// IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequestBuilder is request builder for ServicePrincipalRiskDetection collection rcn
type IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ServicePrincipalRiskDetection collection
func (b *IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequestBuilder) Request() *IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequest {
	return &IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ServicePrincipalRiskDetection item
func (b *IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequestBuilder) ID(id string) *ServicePrincipalRiskDetectionRequestBuilder {
	bb := &ServicePrincipalRiskDetectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequest is request for ServicePrincipalRiskDetection collection
type IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ServicePrincipalRiskDetection collection
func (r *IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ServicePrincipalRiskDetection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ServicePrincipalRiskDetection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ServicePrincipalRiskDetection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ServicePrincipalRiskDetection collection, max N pages
func (r *IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequest) GetN(ctx context.Context, n int) ([]ServicePrincipalRiskDetection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ServicePrincipalRiskDetection collection
func (r *IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequest) Get(ctx context.Context) ([]ServicePrincipalRiskDetection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ServicePrincipalRiskDetection collection
func (r *IdentityProtectionRootServicePrincipalRiskDetectionsCollectionRequest) Add(ctx context.Context, reqObj *ServicePrincipalRiskDetection) (resObj *ServicePrincipalRiskDetection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserAttribute is navigation property rn
func (b *IdentityUserFlowAttributeAssignmentRequestBuilder) UserAttribute() *IdentityUserFlowAttributeRequestBuilder {
	bb := &IdentityUserFlowAttributeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userAttribute"
	return bb
}

// Entity is navigation property rn
func (b *IdentityAPIConnectorRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// IdentityBuiltInUserFlowAttribute returns request builder for IdentityBuiltInUserFlowAttribute collection
func (b *IdentityContainerUserFlowAttributesCollectionRequestBuilder) IdentityBuiltInUserFlowAttribute() *IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequestBuilder {
	bb := &IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequestBuilder is request builder for IdentityBuiltInUserFlowAttribute collection rcn
type IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityBuiltInUserFlowAttribute collection
func (b *IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequestBuilder) Request() *IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequest {
	return &IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityBuiltInUserFlowAttribute item
func (b *IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequestBuilder) ID(id string) *IdentityBuiltInUserFlowAttributeRequestBuilder {
	bb := &IdentityBuiltInUserFlowAttributeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequest is request for IdentityBuiltInUserFlowAttribute collection
type IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityBuiltInUserFlowAttribute collection
func (r *IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityBuiltInUserFlowAttribute, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityBuiltInUserFlowAttribute
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityBuiltInUserFlowAttribute
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityBuiltInUserFlowAttribute collection, max N pages
func (r *IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityBuiltInUserFlowAttribute, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityBuiltInUserFlowAttribute collection
func (r *IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequest) Get(ctx context.Context) ([]IdentityBuiltInUserFlowAttribute, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityBuiltInUserFlowAttribute collection
func (r *IdentityContainerUserFlowAttributesCollectionIdentityBuiltInUserFlowAttributeCollectionRequest) Add(ctx context.Context, reqObj *IdentityBuiltInUserFlowAttribute) (resObj *IdentityBuiltInUserFlowAttribute, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// IdentityCustomUserFlowAttribute returns request builder for IdentityCustomUserFlowAttribute collection
func (b *IdentityContainerUserFlowAttributesCollectionRequestBuilder) IdentityCustomUserFlowAttribute() *IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequestBuilder {
	bb := &IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequestBuilder is request builder for IdentityCustomUserFlowAttribute collection rcn
type IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityCustomUserFlowAttribute collection
func (b *IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequestBuilder) Request() *IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequest {
	return &IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityCustomUserFlowAttribute item
func (b *IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequestBuilder) ID(id string) *IdentityCustomUserFlowAttributeRequestBuilder {
	bb := &IdentityCustomUserFlowAttributeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequest is request for IdentityCustomUserFlowAttribute collection
type IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityCustomUserFlowAttribute collection
func (r *IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityCustomUserFlowAttribute, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityCustomUserFlowAttribute
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityCustomUserFlowAttribute
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityCustomUserFlowAttribute collection, max N pages
func (r *IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityCustomUserFlowAttribute, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityCustomUserFlowAttribute collection
func (r *IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequest) Get(ctx context.Context) ([]IdentityCustomUserFlowAttribute, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityCustomUserFlowAttribute collection
func (r *IdentityContainerUserFlowAttributesCollectionIdentityCustomUserFlowAttributeCollectionRequest) Add(ctx context.Context, reqObj *IdentityCustomUserFlowAttribute) (resObj *IdentityCustomUserFlowAttribute, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *IdentityProviderRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// IdentitySecurityDefaultsEnforcementPolicy returns request builder for IdentitySecurityDefaultsEnforcementPolicy collection
func (b *AdministrativeUnitMembersCollectionRequestBuilder) IdentitySecurityDefaultsEnforcementPolicy() *AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequestBuilder {
	bb := &AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequestBuilder is request builder for IdentitySecurityDefaultsEnforcementPolicy collection rcn
type AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentitySecurityDefaultsEnforcementPolicy collection
func (b *AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequestBuilder) Request() *AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequest {
	return &AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentitySecurityDefaultsEnforcementPolicy item
func (b *AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequestBuilder) ID(id string) *IdentitySecurityDefaultsEnforcementPolicyRequestBuilder {
	bb := &IdentitySecurityDefaultsEnforcementPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequest is request for IdentitySecurityDefaultsEnforcementPolicy collection
type AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentitySecurityDefaultsEnforcementPolicy collection
func (r *AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentitySecurityDefaultsEnforcementPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentitySecurityDefaultsEnforcementPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentitySecurityDefaultsEnforcementPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentitySecurityDefaultsEnforcementPolicy collection, max N pages
func (r *AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequest) GetN(ctx context.Context, n int) ([]IdentitySecurityDefaultsEnforcementPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentitySecurityDefaultsEnforcementPolicy collection
func (r *AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequest) Get(ctx context.Context) ([]IdentitySecurityDefaultsEnforcementPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentitySecurityDefaultsEnforcementPolicy collection
func (r *AdministrativeUnitMembersCollectionIdentitySecurityDefaultsEnforcementPolicyCollectionRequest) Add(ctx context.Context, reqObj *IdentitySecurityDefaultsEnforcementPolicy) (resObj *IdentitySecurityDefaultsEnforcementPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *IdentityUserFlowAttributeAssignmentRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}
