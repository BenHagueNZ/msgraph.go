
// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph


// IdentityGovernanceTaskProcessingResultIdentityGovernanceResumeRequestParameter undocumented
type IdentityGovernanceTaskProcessingResultIdentityGovernanceResumeRequestParameter struct {
    // Source undocumented
    Source *string `json:"source,omitempty"`
    // Type undocumented
    Type *string `json:"type,omitempty"`
    // Data undocumented
    Data *IdentityGovernanceCustomTaskExtensionCallbackData `json:"data,omitempty"`
}

// IdentityGovernanceWorkflowIdentityGovernanceActivateRequestParameter undocumented
type IdentityGovernanceWorkflowIdentityGovernanceActivateRequestParameter struct {
    // Subjects undocumented
    Subjects []User `json:"subjects,omitempty"`
}

// IdentityGovernanceWorkflowIdentityGovernanceCreateNewVersionRequestParameter undocumented
type IdentityGovernanceWorkflowIdentityGovernanceCreateNewVersionRequestParameter struct {
    // Workflow undocumented
    Workflow *IdentityGovernanceWorkflow `json:"workflow,omitempty"`
}

// IdentityGovernanceWorkflowIdentityGovernanceRestoreRequestParameter undocumented
type IdentityGovernanceWorkflowIdentityGovernanceRestoreRequestParameter struct {
}

// CreatedBy is navigation property
func (b *IdentityGovernanceCustomTaskExtensionRequestBuilder) CreatedBy() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/createdBy"
	return bb
}

// LastModifiedBy is navigation property
func (b *IdentityGovernanceCustomTaskExtensionRequestBuilder) LastModifiedBy() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastModifiedBy"
	return bb
}

// Subject is navigation property
func (b *IdentityGovernanceCustomTaskExtensionCalloutDataRequestBuilder) Subject() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/subject"
	return bb
}

// Task is navigation property
func (b *IdentityGovernanceCustomTaskExtensionCalloutDataRequestBuilder) Task() *IdentityGovernanceTaskRequestBuilder {
	bb := &IdentityGovernanceTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/task"
	return bb
}

// TaskProcessingresult is navigation property
func (b *IdentityGovernanceCustomTaskExtensionCalloutDataRequestBuilder) TaskProcessingresult() *IdentityGovernanceTaskProcessingResultRequestBuilder {
	bb := &IdentityGovernanceTaskProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskProcessingresult"
	return bb
}

// Workflow is navigation property
func (b *IdentityGovernanceCustomTaskExtensionCalloutDataRequestBuilder) Workflow() *IdentityGovernanceWorkflowRequestBuilder {
	bb := &IdentityGovernanceWorkflowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/workflow"
	return bb
}

// CustomTaskExtensions returns request builder for IdentityGovernanceCustomTaskExtension collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) CustomTaskExtensions() *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder {
	bb := &IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/customTaskExtensions"
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder is request builder for IdentityGovernanceCustomTaskExtension collection
type IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceCustomTaskExtension collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder) Request() *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest {
    return &IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceCustomTaskExtension item
func (b *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequestBuilder) ID(id string) *IdentityGovernanceCustomTaskExtensionRequestBuilder {
	bb := &IdentityGovernanceCustomTaskExtensionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest is request for IdentityGovernanceCustomTaskExtension collection
type IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceCustomTaskExtension collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceCustomTaskExtension, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceCustomTaskExtension
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceCustomTaskExtension
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceCustomTaskExtension collection, max N pages
func (r *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceCustomTaskExtension, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceCustomTaskExtension collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceCustomTaskExtension, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceCustomTaskExtension collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerCustomTaskExtensionsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceCustomTaskExtension) (resObj *IdentityGovernanceCustomTaskExtension, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeletedItems is navigation property
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) DeletedItems() *DeletedItemContainerRequestBuilder {
	bb := &DeletedItemContainerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deletedItems"
	return bb
}

// Settings is navigation property
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) Settings() *IdentityGovernanceLifecycleManagementSettingsRequestBuilder {
	bb := &IdentityGovernanceLifecycleManagementSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// TaskDefinitions returns request builder for IdentityGovernanceTaskDefinition collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) TaskDefinitions() *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder {
	bb := &IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskDefinitions"
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder is request builder for IdentityGovernanceTaskDefinition collection
type IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskDefinition collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder) Request() *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest {
    return &IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceTaskDefinition item
func (b *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskDefinitionRequestBuilder {
	bb := &IdentityGovernanceTaskDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest is request for IdentityGovernanceTaskDefinition collection
type IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskDefinition collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskDefinition collection, max N pages
func (r *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskDefinition collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskDefinition collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerTaskDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskDefinition) (resObj *IdentityGovernanceTaskDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WorkflowTemplates returns request builder for IdentityGovernanceWorkflowTemplate collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) WorkflowTemplates() *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder {
	bb := &IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/workflowTemplates"
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder is request builder for IdentityGovernanceWorkflowTemplate collection
type IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceWorkflowTemplate collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder) Request() *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest {
    return &IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceWorkflowTemplate item
func (b *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequestBuilder) ID(id string) *IdentityGovernanceWorkflowTemplateRequestBuilder {
	bb := &IdentityGovernanceWorkflowTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest is request for IdentityGovernanceWorkflowTemplate collection
type IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceWorkflowTemplate collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceWorkflowTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceWorkflowTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceWorkflowTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceWorkflowTemplate collection, max N pages
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceWorkflowTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceWorkflowTemplate collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceWorkflowTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceWorkflowTemplate collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowTemplatesCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceWorkflowTemplate) (resObj *IdentityGovernanceWorkflowTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Workflows returns request builder for IdentityGovernanceWorkflow collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerRequestBuilder) Workflows() *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder {
	bb := &IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/workflows"
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder is request builder for IdentityGovernanceWorkflow collection
type IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceWorkflow collection
func (b *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder) Request() *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest {
    return &IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceWorkflow item
func (b *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequestBuilder) ID(id string) *IdentityGovernanceWorkflowRequestBuilder {
	bb := &IdentityGovernanceWorkflowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest is request for IdentityGovernanceWorkflow collection
type IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceWorkflow collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceWorkflow, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceWorkflow
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceWorkflow
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceWorkflow collection, max N pages
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceWorkflow, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceWorkflow collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceWorkflow, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceWorkflow collection
func (r *IdentityGovernanceLifecycleWorkflowsContainerWorkflowsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceWorkflow) (resObj *IdentityGovernanceWorkflow, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TaskProcessingResults returns request builder for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceRunRequestBuilder) TaskProcessingResults() *IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskProcessingResults"
	return bb
}

// IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceRunTaskProcessingResultsCollectionRequest {
    return &IdentityGovernanceRunTaskProcessingResultsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceTaskProcessingResult item
func (b *IdentityGovernanceRunTaskProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskProcessingResultRequestBuilder {
	bb := &IdentityGovernanceTaskProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceRunTaskProcessingResultsCollectionRequest is request for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceRunTaskProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceRunTaskProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskProcessingResult collection, max N pages
func (r *IdentityGovernanceRunTaskProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceRunTaskProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceRunTaskProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskProcessingResult) (resObj *IdentityGovernanceTaskProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserProcessingResults returns request builder for IdentityGovernanceUserProcessingResult collection
func (b *IdentityGovernanceRunRequestBuilder) UserProcessingResults() *IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userProcessingResults"
	return bb
}

// IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceUserProcessingResult collection
type IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceUserProcessingResult collection
func (b *IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceRunUserProcessingResultsCollectionRequest {
    return &IdentityGovernanceRunUserProcessingResultsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceUserProcessingResult item
func (b *IdentityGovernanceRunUserProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceUserProcessingResultRequestBuilder {
	bb := &IdentityGovernanceUserProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceRunUserProcessingResultsCollectionRequest is request for IdentityGovernanceUserProcessingResult collection
type IdentityGovernanceRunUserProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceRunUserProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceUserProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceUserProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceUserProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceUserProcessingResult collection, max N pages
func (r *IdentityGovernanceRunUserProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceUserProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceRunUserProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceUserProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceRunUserProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceUserProcessingResult) (resObj *IdentityGovernanceUserProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TaskProcessingResults returns request builder for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceTaskRequestBuilder) TaskProcessingResults() *IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskProcessingResults"
	return bb
}

// IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceTaskTaskProcessingResultsCollectionRequest {
    return &IdentityGovernanceTaskTaskProcessingResultsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceTaskProcessingResult item
func (b *IdentityGovernanceTaskTaskProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskProcessingResultRequestBuilder {
	bb := &IdentityGovernanceTaskProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceTaskTaskProcessingResultsCollectionRequest is request for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceTaskTaskProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskTaskProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskProcessingResult collection, max N pages
func (r *IdentityGovernanceTaskTaskProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskTaskProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskTaskProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskProcessingResult) (resObj *IdentityGovernanceTaskProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Subject is navigation property
func (b *IdentityGovernanceTaskProcessingResultRequestBuilder) Subject() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/subject"
	return bb
}

// Task is navigation property
func (b *IdentityGovernanceTaskProcessingResultRequestBuilder) Task() *IdentityGovernanceTaskRequestBuilder {
	bb := &IdentityGovernanceTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/task"
	return bb
}

// Task is navigation property
func (b *IdentityGovernanceTaskReportRequestBuilder) Task() *IdentityGovernanceTaskRequestBuilder {
	bb := &IdentityGovernanceTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/task"
	return bb
}

// TaskDefinition is navigation property
func (b *IdentityGovernanceTaskReportRequestBuilder) TaskDefinition() *IdentityGovernanceTaskDefinitionRequestBuilder {
	bb := &IdentityGovernanceTaskDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskDefinition"
	return bb
}

// TaskProcessingResults returns request builder for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceTaskReportRequestBuilder) TaskProcessingResults() *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskProcessingResults"
	return bb
}

// IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest {
    return &IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceTaskProcessingResult item
func (b *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskProcessingResultRequestBuilder {
	bb := &IdentityGovernanceTaskProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest is request for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskProcessingResult collection, max N pages
func (r *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceTaskReportTaskProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskProcessingResult) (resObj *IdentityGovernanceTaskProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Subject is navigation property
func (b *IdentityGovernanceUserProcessingResultRequestBuilder) Subject() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/subject"
	return bb
}

// TaskProcessingResults returns request builder for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceUserProcessingResultRequestBuilder) TaskProcessingResults() *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskProcessingResults"
	return bb
}

// IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskProcessingResult collection
func (b *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest {
    return &IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceTaskProcessingResult item
func (b *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskProcessingResultRequestBuilder {
	bb := &IdentityGovernanceTaskProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest is request for IdentityGovernanceTaskProcessingResult collection
type IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskProcessingResult collection, max N pages
func (r *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskProcessingResult collection
func (r *IdentityGovernanceUserProcessingResultTaskProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskProcessingResult) (resObj *IdentityGovernanceTaskProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ExecutionScope returns request builder for User collection
func (b *IdentityGovernanceWorkflowRequestBuilder) ExecutionScope() *IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/executionScope"
	return bb
}

// IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder is request builder for User collection
type IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for User collection
func (b *IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowExecutionScopeCollectionRequest {
    return &IdentityGovernanceWorkflowExecutionScopeCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for User item
func (b *IdentityGovernanceWorkflowExecutionScopeCollectionRequestBuilder) ID(id string) *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowExecutionScopeCollectionRequest is request for User collection
type IdentityGovernanceWorkflowExecutionScopeCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for User collection
func (r *IdentityGovernanceWorkflowExecutionScopeCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]User, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []User
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []User
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for User collection, max N pages
func (r *IdentityGovernanceWorkflowExecutionScopeCollectionRequest) GetN(ctx context.Context, n int) ([]User, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for User collection
func (r *IdentityGovernanceWorkflowExecutionScopeCollectionRequest) Get(ctx context.Context) ([]User, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for User collection
func (r *IdentityGovernanceWorkflowExecutionScopeCollectionRequest) Add(ctx context.Context, reqObj *User) (resObj *User, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Runs returns request builder for IdentityGovernanceRun collection
func (b *IdentityGovernanceWorkflowRequestBuilder) Runs() *IdentityGovernanceWorkflowRunsCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowRunsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/runs"
	return bb
}

// IdentityGovernanceWorkflowRunsCollectionRequestBuilder is request builder for IdentityGovernanceRun collection
type IdentityGovernanceWorkflowRunsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceRun collection
func (b *IdentityGovernanceWorkflowRunsCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowRunsCollectionRequest {
    return &IdentityGovernanceWorkflowRunsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceRun item
func (b *IdentityGovernanceWorkflowRunsCollectionRequestBuilder) ID(id string) *IdentityGovernanceRunRequestBuilder {
	bb := &IdentityGovernanceRunRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowRunsCollectionRequest is request for IdentityGovernanceRun collection
type IdentityGovernanceWorkflowRunsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceRun collection
func (r *IdentityGovernanceWorkflowRunsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceRun, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceRun
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceRun
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceRun collection, max N pages
func (r *IdentityGovernanceWorkflowRunsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceRun, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceRun collection
func (r *IdentityGovernanceWorkflowRunsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceRun, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceRun collection
func (r *IdentityGovernanceWorkflowRunsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceRun) (resObj *IdentityGovernanceRun, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// TaskReports returns request builder for IdentityGovernanceTaskReport collection
func (b *IdentityGovernanceWorkflowRequestBuilder) TaskReports() *IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/taskReports"
	return bb
}

// IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder is request builder for IdentityGovernanceTaskReport collection
type IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTaskReport collection
func (b *IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowTaskReportsCollectionRequest {
    return &IdentityGovernanceWorkflowTaskReportsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceTaskReport item
func (b *IdentityGovernanceWorkflowTaskReportsCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskReportRequestBuilder {
	bb := &IdentityGovernanceTaskReportRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowTaskReportsCollectionRequest is request for IdentityGovernanceTaskReport collection
type IdentityGovernanceWorkflowTaskReportsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTaskReport collection
func (r *IdentityGovernanceWorkflowTaskReportsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTaskReport, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTaskReport
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTaskReport
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTaskReport collection, max N pages
func (r *IdentityGovernanceWorkflowTaskReportsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTaskReport, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTaskReport collection
func (r *IdentityGovernanceWorkflowTaskReportsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTaskReport, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTaskReport collection
func (r *IdentityGovernanceWorkflowTaskReportsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTaskReport) (resObj *IdentityGovernanceTaskReport, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserProcessingResults returns request builder for IdentityGovernanceUserProcessingResult collection
func (b *IdentityGovernanceWorkflowRequestBuilder) UserProcessingResults() *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userProcessingResults"
	return bb
}

// IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder is request builder for IdentityGovernanceUserProcessingResult collection
type IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceUserProcessingResult collection
func (b *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest {
    return &IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceUserProcessingResult item
func (b *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequestBuilder) ID(id string) *IdentityGovernanceUserProcessingResultRequestBuilder {
	bb := &IdentityGovernanceUserProcessingResultRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest is request for IdentityGovernanceUserProcessingResult collection
type IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceUserProcessingResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceUserProcessingResult
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceUserProcessingResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceUserProcessingResult collection, max N pages
func (r *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceUserProcessingResult, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceUserProcessingResult, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceUserProcessingResult collection
func (r *IdentityGovernanceWorkflowUserProcessingResultsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceUserProcessingResult) (resObj *IdentityGovernanceUserProcessingResult, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Versions returns request builder for IdentityGovernanceWorkflowVersion collection
func (b *IdentityGovernanceWorkflowRequestBuilder) Versions() *IdentityGovernanceWorkflowVersionsCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowVersionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/versions"
	return bb
}

// IdentityGovernanceWorkflowVersionsCollectionRequestBuilder is request builder for IdentityGovernanceWorkflowVersion collection
type IdentityGovernanceWorkflowVersionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceWorkflowVersion collection
func (b *IdentityGovernanceWorkflowVersionsCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowVersionsCollectionRequest {
    return &IdentityGovernanceWorkflowVersionsCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceWorkflowVersion item
func (b *IdentityGovernanceWorkflowVersionsCollectionRequestBuilder) ID(id string) *IdentityGovernanceWorkflowVersionRequestBuilder {
	bb := &IdentityGovernanceWorkflowVersionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowVersionsCollectionRequest is request for IdentityGovernanceWorkflowVersion collection
type IdentityGovernanceWorkflowVersionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceWorkflowVersion collection
func (r *IdentityGovernanceWorkflowVersionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceWorkflowVersion, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceWorkflowVersion
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceWorkflowVersion
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceWorkflowVersion collection, max N pages
func (r *IdentityGovernanceWorkflowVersionsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceWorkflowVersion, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceWorkflowVersion collection
func (r *IdentityGovernanceWorkflowVersionsCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceWorkflowVersion, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceWorkflowVersion collection
func (r *IdentityGovernanceWorkflowVersionsCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceWorkflowVersion) (resObj *IdentityGovernanceWorkflowVersion, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CreatedBy is navigation property
func (b *IdentityGovernanceWorkflowBaseRequestBuilder) CreatedBy() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/createdBy"
	return bb
}

// LastModifiedBy is navigation property
func (b *IdentityGovernanceWorkflowBaseRequestBuilder) LastModifiedBy() *UserRequestBuilder {
	bb := &UserRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastModifiedBy"
	return bb
}

// Tasks returns request builder for IdentityGovernanceTask collection
func (b *IdentityGovernanceWorkflowBaseRequestBuilder) Tasks() *IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tasks"
	return bb
}

// IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder is request builder for IdentityGovernanceTask collection
type IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTask collection
func (b *IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowBaseTasksCollectionRequest {
    return &IdentityGovernanceWorkflowBaseTasksCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceTask item
func (b *IdentityGovernanceWorkflowBaseTasksCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskRequestBuilder {
	bb := &IdentityGovernanceTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowBaseTasksCollectionRequest is request for IdentityGovernanceTask collection
type IdentityGovernanceWorkflowBaseTasksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowBaseTasksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTask, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTask
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTask
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTask collection, max N pages
func (r *IdentityGovernanceWorkflowBaseTasksCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTask, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowBaseTasksCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTask, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowBaseTasksCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTask) (resObj *IdentityGovernanceTask, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Tasks returns request builder for IdentityGovernanceTask collection
func (b *IdentityGovernanceWorkflowTemplateRequestBuilder) Tasks() *IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder {
	bb := &IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tasks"
	return bb
}

// IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder is request builder for IdentityGovernanceTask collection
type IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityGovernanceTask collection
func (b *IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder) Request() *IdentityGovernanceWorkflowTemplateTasksCollectionRequest {
    return &IdentityGovernanceWorkflowTemplateTasksCollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for IdentityGovernanceTask item
func (b *IdentityGovernanceWorkflowTemplateTasksCollectionRequestBuilder) ID(id string) *IdentityGovernanceTaskRequestBuilder {
	bb := &IdentityGovernanceTaskRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IdentityGovernanceWorkflowTemplateTasksCollectionRequest is request for IdentityGovernanceTask collection
type IdentityGovernanceWorkflowTemplateTasksCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowTemplateTasksCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityGovernanceTask, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityGovernanceTask
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityGovernanceTask
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityGovernanceTask collection, max N pages
func (r *IdentityGovernanceWorkflowTemplateTasksCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityGovernanceTask, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowTemplateTasksCollectionRequest) Get(ctx context.Context) ([]IdentityGovernanceTask, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityGovernanceTask collection
func (r *IdentityGovernanceWorkflowTemplateTasksCollectionRequest) Add(ctx context.Context, reqObj *IdentityGovernanceTask) (resObj *IdentityGovernanceTask, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
