// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// EdiscoveryCustodianCollectionEdiscoveryApplyHoldRequestParameter undocumented
type EdiscoveryCustodianCollectionEdiscoveryApplyHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// EdiscoveryCustodianCollectionEdiscoveryRemoveHoldRequestParameter undocumented
type EdiscoveryCustodianCollectionEdiscoveryRemoveHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// EdiscoveryNoncustodialDataSourceCollectionEdiscoveryApplyHoldRequestParameter undocumented
type EdiscoveryNoncustodialDataSourceCollectionEdiscoveryApplyHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// EdiscoveryNoncustodialDataSourceCollectionEdiscoveryRemoveHoldRequestParameter undocumented
type EdiscoveryNoncustodialDataSourceCollectionEdiscoveryRemoveHoldRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// EdiscoveryCaseEdiscoveryCloseRequestParameter undocumented
type EdiscoveryCaseEdiscoveryCloseRequestParameter struct {
}

// EdiscoveryCaseEdiscoveryReopenRequestParameter undocumented
type EdiscoveryCaseEdiscoveryReopenRequestParameter struct {
}

// EdiscoveryCaseSettingsEdiscoveryResetToDefaultRequestParameter undocumented
type EdiscoveryCaseSettingsEdiscoveryResetToDefaultRequestParameter struct {
}

// EdiscoveryCustodianEdiscoveryActivateRequestParameter undocumented
type EdiscoveryCustodianEdiscoveryActivateRequestParameter struct {
}

// EdiscoveryCustodianEdiscoveryApplyHoldRequestParameter undocumented
type EdiscoveryCustodianEdiscoveryApplyHoldRequestParameter struct {
}

// EdiscoveryCustodianEdiscoveryReleaseRequestParameter undocumented
type EdiscoveryCustodianEdiscoveryReleaseRequestParameter struct {
}

// EdiscoveryCustodianEdiscoveryRemoveHoldRequestParameter undocumented
type EdiscoveryCustodianEdiscoveryRemoveHoldRequestParameter struct {
}

// EdiscoveryCustodianEdiscoveryUpdateIndexRequestParameter undocumented
type EdiscoveryCustodianEdiscoveryUpdateIndexRequestParameter struct {
}

// EdiscoveryNoncustodialDataSourceEdiscoveryApplyHoldRequestParameter undocumented
type EdiscoveryNoncustodialDataSourceEdiscoveryApplyHoldRequestParameter struct {
}

// EdiscoveryNoncustodialDataSourceEdiscoveryReleaseRequestParameter undocumented
type EdiscoveryNoncustodialDataSourceEdiscoveryReleaseRequestParameter struct {
}

// EdiscoveryNoncustodialDataSourceEdiscoveryRemoveHoldRequestParameter undocumented
type EdiscoveryNoncustodialDataSourceEdiscoveryRemoveHoldRequestParameter struct {
}

// EdiscoveryNoncustodialDataSourceEdiscoveryUpdateIndexRequestParameter undocumented
type EdiscoveryNoncustodialDataSourceEdiscoveryUpdateIndexRequestParameter struct {
}

// EdiscoveryReviewSetEdiscoveryAddToReviewSetRequestParameter undocumented
type EdiscoveryReviewSetEdiscoveryAddToReviewSetRequestParameter struct {
	// SourceCollection undocumented
	SourceCollection *EdiscoverySourceCollection `json:"sourceCollection,omitempty"`
	// AdditionalDataOptions undocumented
	AdditionalDataOptions *EdiscoveryAdditionalDataOptions `json:"additionalDataOptions,omitempty"`
}

// EdiscoveryReviewSetEdiscoveryExportRequestParameter undocumented
type EdiscoveryReviewSetEdiscoveryExportRequestParameter struct {
	// OutputName undocumented
	OutputName *string `json:"outputName,omitempty"`
	// Description undocumented
	Description *string `json:"description,omitempty"`
	// AzureBlobContainer undocumented
	AzureBlobContainer *string `json:"azureBlobContainer,omitempty"`
	// AzureBlobToken undocumented
	AzureBlobToken *string `json:"azureBlobToken,omitempty"`
	// ExportOptions undocumented
	ExportOptions *EdiscoveryExportOptions `json:"exportOptions,omitempty"`
	// ExportStructure undocumented
	ExportStructure *EdiscoveryExportFileStructure `json:"exportStructure,omitempty"`
}

// EdiscoveryReviewSetQueryEdiscoveryApplyTagsRequestParameter undocumented
type EdiscoveryReviewSetQueryEdiscoveryApplyTagsRequestParameter struct {
	// TagsToAdd undocumented
	TagsToAdd []EdiscoveryTag `json:"tagsToAdd,omitempty"`
	// TagsToRemove undocumented
	TagsToRemove []EdiscoveryTag `json:"tagsToRemove,omitempty"`
}

// EdiscoverySourceCollectionEdiscoveryEstimateStatisticsRequestParameter undocumented
type EdiscoverySourceCollectionEdiscoveryEstimateStatisticsRequestParameter struct {
}

// EdiscoverySourceCollectionEdiscoveryPurgeDataRequestParameter undocumented
type EdiscoverySourceCollectionEdiscoveryPurgeDataRequestParameter struct {
}

// ReviewSet is navigation property rn
func (b *EdiscoveryAddToReviewSetOperationRequestBuilder) ReviewSet() *EdiscoveryReviewSetRequestBuilder {
	bb := &EdiscoveryReviewSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reviewSet"
	return bb
}

// SourceCollection is navigation property rn
func (b *EdiscoveryAddToReviewSetOperationRequestBuilder) SourceCollection() *EdiscoverySourceCollectionRequestBuilder {
	bb := &EdiscoverySourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sourceCollection"
	return bb
}

// Custodians returns request builder for EdiscoveryCustodian collection
func (b *EdiscoveryCaseRequestBuilder) Custodians() *EdiscoveryCaseCustodiansCollectionRequestBuilder {
	bb := &EdiscoveryCaseCustodiansCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/custodians"
	return bb
}

// EdiscoveryCaseCustodiansCollectionRequestBuilder is request builder for EdiscoveryCustodian collection rcn
type EdiscoveryCaseCustodiansCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryCustodian collection
func (b *EdiscoveryCaseCustodiansCollectionRequestBuilder) Request() *EdiscoveryCaseCustodiansCollectionRequest {
	return &EdiscoveryCaseCustodiansCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryCustodian item
func (b *EdiscoveryCaseCustodiansCollectionRequestBuilder) ID(id string) *EdiscoveryCustodianRequestBuilder {
	bb := &EdiscoveryCustodianRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseCustodiansCollectionRequest is request for EdiscoveryCustodian collection
type EdiscoveryCaseCustodiansCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryCustodian collection
func (r *EdiscoveryCaseCustodiansCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryCustodian, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryCustodian
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryCustodian
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryCustodian collection, max N pages
func (r *EdiscoveryCaseCustodiansCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryCustodian, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryCustodian collection
func (r *EdiscoveryCaseCustodiansCollectionRequest) Get(ctx context.Context) ([]EdiscoveryCustodian, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryCustodian collection
func (r *EdiscoveryCaseCustodiansCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryCustodian) (resObj *EdiscoveryCustodian, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// LegalHolds returns request builder for EdiscoveryLegalHold collection
func (b *EdiscoveryCaseRequestBuilder) LegalHolds() *EdiscoveryCaseLegalHoldsCollectionRequestBuilder {
	bb := &EdiscoveryCaseLegalHoldsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/legalHolds"
	return bb
}

// EdiscoveryCaseLegalHoldsCollectionRequestBuilder is request builder for EdiscoveryLegalHold collection rcn
type EdiscoveryCaseLegalHoldsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryLegalHold collection
func (b *EdiscoveryCaseLegalHoldsCollectionRequestBuilder) Request() *EdiscoveryCaseLegalHoldsCollectionRequest {
	return &EdiscoveryCaseLegalHoldsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryLegalHold item
func (b *EdiscoveryCaseLegalHoldsCollectionRequestBuilder) ID(id string) *EdiscoveryLegalHoldRequestBuilder {
	bb := &EdiscoveryLegalHoldRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseLegalHoldsCollectionRequest is request for EdiscoveryLegalHold collection
type EdiscoveryCaseLegalHoldsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryLegalHold collection
func (r *EdiscoveryCaseLegalHoldsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryLegalHold, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryLegalHold
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryLegalHold
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryLegalHold collection, max N pages
func (r *EdiscoveryCaseLegalHoldsCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryLegalHold, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryLegalHold collection
func (r *EdiscoveryCaseLegalHoldsCollectionRequest) Get(ctx context.Context) ([]EdiscoveryLegalHold, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryLegalHold collection
func (r *EdiscoveryCaseLegalHoldsCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryLegalHold) (resObj *EdiscoveryLegalHold, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// NoncustodialDataSources returns request builder for EdiscoveryNoncustodialDataSource collection
func (b *EdiscoveryCaseRequestBuilder) NoncustodialDataSources() *EdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder {
	bb := &EdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/noncustodialDataSources"
	return bb
}

// EdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder is request builder for EdiscoveryNoncustodialDataSource collection rcn
type EdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryNoncustodialDataSource collection
func (b *EdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder) Request() *EdiscoveryCaseNoncustodialDataSourcesCollectionRequest {
	return &EdiscoveryCaseNoncustodialDataSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryNoncustodialDataSource item
func (b *EdiscoveryCaseNoncustodialDataSourcesCollectionRequestBuilder) ID(id string) *EdiscoveryNoncustodialDataSourceRequestBuilder {
	bb := &EdiscoveryNoncustodialDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseNoncustodialDataSourcesCollectionRequest is request for EdiscoveryNoncustodialDataSource collection
type EdiscoveryCaseNoncustodialDataSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryNoncustodialDataSource collection
func (r *EdiscoveryCaseNoncustodialDataSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryNoncustodialDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryNoncustodialDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryNoncustodialDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryNoncustodialDataSource collection, max N pages
func (r *EdiscoveryCaseNoncustodialDataSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryNoncustodialDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryNoncustodialDataSource collection
func (r *EdiscoveryCaseNoncustodialDataSourcesCollectionRequest) Get(ctx context.Context) ([]EdiscoveryNoncustodialDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryNoncustodialDataSource collection
func (r *EdiscoveryCaseNoncustodialDataSourcesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryNoncustodialDataSource) (resObj *EdiscoveryNoncustodialDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Operations returns request builder for EdiscoveryCaseOperation collection
func (b *EdiscoveryCaseRequestBuilder) Operations() *EdiscoveryCaseOperationsCollectionRequestBuilder {
	bb := &EdiscoveryCaseOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// EdiscoveryCaseOperationsCollectionRequestBuilder is request builder for EdiscoveryCaseOperation collection rcn
type EdiscoveryCaseOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryCaseOperation collection
func (b *EdiscoveryCaseOperationsCollectionRequestBuilder) Request() *EdiscoveryCaseOperationsCollectionRequest {
	return &EdiscoveryCaseOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryCaseOperation item
func (b *EdiscoveryCaseOperationsCollectionRequestBuilder) ID(id string) *EdiscoveryCaseOperationRequestBuilder {
	bb := &EdiscoveryCaseOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseOperationsCollectionRequest is request for EdiscoveryCaseOperation collection
type EdiscoveryCaseOperationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryCaseOperation collection
func (r *EdiscoveryCaseOperationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryCaseOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryCaseOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryCaseOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryCaseOperation collection, max N pages
func (r *EdiscoveryCaseOperationsCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryCaseOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryCaseOperation collection
func (r *EdiscoveryCaseOperationsCollectionRequest) Get(ctx context.Context) ([]EdiscoveryCaseOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryCaseOperation collection
func (r *EdiscoveryCaseOperationsCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryCaseOperation) (resObj *EdiscoveryCaseOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReviewSets returns request builder for EdiscoveryReviewSet collection
func (b *EdiscoveryCaseRequestBuilder) ReviewSets() *EdiscoveryCaseReviewSetsCollectionRequestBuilder {
	bb := &EdiscoveryCaseReviewSetsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reviewSets"
	return bb
}

// EdiscoveryCaseReviewSetsCollectionRequestBuilder is request builder for EdiscoveryReviewSet collection rcn
type EdiscoveryCaseReviewSetsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryReviewSet collection
func (b *EdiscoveryCaseReviewSetsCollectionRequestBuilder) Request() *EdiscoveryCaseReviewSetsCollectionRequest {
	return &EdiscoveryCaseReviewSetsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryReviewSet item
func (b *EdiscoveryCaseReviewSetsCollectionRequestBuilder) ID(id string) *EdiscoveryReviewSetRequestBuilder {
	bb := &EdiscoveryReviewSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseReviewSetsCollectionRequest is request for EdiscoveryReviewSet collection
type EdiscoveryCaseReviewSetsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryReviewSet collection
func (r *EdiscoveryCaseReviewSetsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryReviewSet, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryReviewSet
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryReviewSet
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryReviewSet collection, max N pages
func (r *EdiscoveryCaseReviewSetsCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryReviewSet, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryReviewSet collection
func (r *EdiscoveryCaseReviewSetsCollectionRequest) Get(ctx context.Context) ([]EdiscoveryReviewSet, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryReviewSet collection
func (r *EdiscoveryCaseReviewSetsCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryReviewSet) (resObj *EdiscoveryReviewSet, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Settings is navigation property rn
func (b *EdiscoveryCaseRequestBuilder) Settings() *EdiscoveryCaseSettingsRequestBuilder {
	bb := &EdiscoveryCaseSettingsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/settings"
	return bb
}

// SourceCollections returns request builder for EdiscoverySourceCollection collection
func (b *EdiscoveryCaseRequestBuilder) SourceCollections() *EdiscoveryCaseSourceCollectionsCollectionRequestBuilder {
	bb := &EdiscoveryCaseSourceCollectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sourceCollections"
	return bb
}

// EdiscoveryCaseSourceCollectionsCollectionRequestBuilder is request builder for EdiscoverySourceCollection collection rcn
type EdiscoveryCaseSourceCollectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoverySourceCollection collection
func (b *EdiscoveryCaseSourceCollectionsCollectionRequestBuilder) Request() *EdiscoveryCaseSourceCollectionsCollectionRequest {
	return &EdiscoveryCaseSourceCollectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoverySourceCollection item
func (b *EdiscoveryCaseSourceCollectionsCollectionRequestBuilder) ID(id string) *EdiscoverySourceCollectionRequestBuilder {
	bb := &EdiscoverySourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseSourceCollectionsCollectionRequest is request for EdiscoverySourceCollection collection
type EdiscoveryCaseSourceCollectionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoverySourceCollection collection
func (r *EdiscoveryCaseSourceCollectionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoverySourceCollection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoverySourceCollection
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoverySourceCollection
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoverySourceCollection collection, max N pages
func (r *EdiscoveryCaseSourceCollectionsCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoverySourceCollection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoverySourceCollection collection
func (r *EdiscoveryCaseSourceCollectionsCollectionRequest) Get(ctx context.Context) ([]EdiscoverySourceCollection, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoverySourceCollection collection
func (r *EdiscoveryCaseSourceCollectionsCollectionRequest) Add(ctx context.Context, reqObj *EdiscoverySourceCollection) (resObj *EdiscoverySourceCollection, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Tags returns request builder for EdiscoveryTag collection
func (b *EdiscoveryCaseRequestBuilder) Tags() *EdiscoveryCaseTagsCollectionRequestBuilder {
	bb := &EdiscoveryCaseTagsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tags"
	return bb
}

// EdiscoveryCaseTagsCollectionRequestBuilder is request builder for EdiscoveryTag collection rcn
type EdiscoveryCaseTagsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryTag collection
func (b *EdiscoveryCaseTagsCollectionRequestBuilder) Request() *EdiscoveryCaseTagsCollectionRequest {
	return &EdiscoveryCaseTagsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryTag item
func (b *EdiscoveryCaseTagsCollectionRequestBuilder) ID(id string) *EdiscoveryTagRequestBuilder {
	bb := &EdiscoveryTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseTagsCollectionRequest is request for EdiscoveryTag collection
type EdiscoveryCaseTagsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryTag collection
func (r *EdiscoveryCaseTagsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryTag, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryTag
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryTag
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryTag collection, max N pages
func (r *EdiscoveryCaseTagsCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryTag, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryTag collection
func (r *EdiscoveryCaseTagsCollectionRequest) Get(ctx context.Context) ([]EdiscoveryTag, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryTag collection
func (r *EdiscoveryCaseTagsCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryTag) (resObj *EdiscoveryTag, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ReviewSet is navigation property rn
func (b *EdiscoveryCaseExportOperationRequestBuilder) ReviewSet() *EdiscoveryReviewSetRequestBuilder {
	bb := &EdiscoveryReviewSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/reviewSet"
	return bb
}

// SiteSources returns request builder for EdiscoverySiteSource collection
func (b *EdiscoveryCustodianRequestBuilder) SiteSources() *EdiscoveryCustodianSiteSourcesCollectionRequestBuilder {
	bb := &EdiscoveryCustodianSiteSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/siteSources"
	return bb
}

// EdiscoveryCustodianSiteSourcesCollectionRequestBuilder is request builder for EdiscoverySiteSource collection rcn
type EdiscoveryCustodianSiteSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoverySiteSource collection
func (b *EdiscoveryCustodianSiteSourcesCollectionRequestBuilder) Request() *EdiscoveryCustodianSiteSourcesCollectionRequest {
	return &EdiscoveryCustodianSiteSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoverySiteSource item
func (b *EdiscoveryCustodianSiteSourcesCollectionRequestBuilder) ID(id string) *EdiscoverySiteSourceRequestBuilder {
	bb := &EdiscoverySiteSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCustodianSiteSourcesCollectionRequest is request for EdiscoverySiteSource collection
type EdiscoveryCustodianSiteSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoverySiteSource collection
func (r *EdiscoveryCustodianSiteSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoverySiteSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoverySiteSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoverySiteSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoverySiteSource collection, max N pages
func (r *EdiscoveryCustodianSiteSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoverySiteSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoverySiteSource collection
func (r *EdiscoveryCustodianSiteSourcesCollectionRequest) Get(ctx context.Context) ([]EdiscoverySiteSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoverySiteSource collection
func (r *EdiscoveryCustodianSiteSourcesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoverySiteSource) (resObj *EdiscoverySiteSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UnifiedGroupSources returns request builder for EdiscoveryUnifiedGroupSource collection
func (b *EdiscoveryCustodianRequestBuilder) UnifiedGroupSources() *EdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder {
	bb := &EdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/unifiedGroupSources"
	return bb
}

// EdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder is request builder for EdiscoveryUnifiedGroupSource collection rcn
type EdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryUnifiedGroupSource collection
func (b *EdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder) Request() *EdiscoveryCustodianUnifiedGroupSourcesCollectionRequest {
	return &EdiscoveryCustodianUnifiedGroupSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryUnifiedGroupSource item
func (b *EdiscoveryCustodianUnifiedGroupSourcesCollectionRequestBuilder) ID(id string) *EdiscoveryUnifiedGroupSourceRequestBuilder {
	bb := &EdiscoveryUnifiedGroupSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCustodianUnifiedGroupSourcesCollectionRequest is request for EdiscoveryUnifiedGroupSource collection
type EdiscoveryCustodianUnifiedGroupSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryUnifiedGroupSource collection
func (r *EdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryUnifiedGroupSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryUnifiedGroupSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryUnifiedGroupSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryUnifiedGroupSource collection, max N pages
func (r *EdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryUnifiedGroupSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryUnifiedGroupSource collection
func (r *EdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) Get(ctx context.Context) ([]EdiscoveryUnifiedGroupSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryUnifiedGroupSource collection
func (r *EdiscoveryCustodianUnifiedGroupSourcesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryUnifiedGroupSource) (resObj *EdiscoveryUnifiedGroupSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserSources returns request builder for EdiscoveryUserSource collection
func (b *EdiscoveryCustodianRequestBuilder) UserSources() *EdiscoveryCustodianUserSourcesCollectionRequestBuilder {
	bb := &EdiscoveryCustodianUserSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userSources"
	return bb
}

// EdiscoveryCustodianUserSourcesCollectionRequestBuilder is request builder for EdiscoveryUserSource collection rcn
type EdiscoveryCustodianUserSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryUserSource collection
func (b *EdiscoveryCustodianUserSourcesCollectionRequestBuilder) Request() *EdiscoveryCustodianUserSourcesCollectionRequest {
	return &EdiscoveryCustodianUserSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryUserSource item
func (b *EdiscoveryCustodianUserSourcesCollectionRequestBuilder) ID(id string) *EdiscoveryUserSourceRequestBuilder {
	bb := &EdiscoveryUserSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCustodianUserSourcesCollectionRequest is request for EdiscoveryUserSource collection
type EdiscoveryCustodianUserSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryUserSource collection
func (r *EdiscoveryCustodianUserSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryUserSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryUserSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryUserSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryUserSource collection, max N pages
func (r *EdiscoveryCustodianUserSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryUserSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryUserSource collection
func (r *EdiscoveryCustodianUserSourcesCollectionRequest) Get(ctx context.Context) ([]EdiscoveryUserSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryUserSource collection
func (r *EdiscoveryCustodianUserSourcesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryUserSource) (resObj *EdiscoveryUserSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// LastIndexOperation is navigation property rn
func (b *EdiscoveryDataSourceContainerRequestBuilder) LastIndexOperation() *EdiscoveryCaseIndexOperationRequestBuilder {
	bb := &EdiscoveryCaseIndexOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastIndexOperation"
	return bb
}

// Cases returns request builder for EdiscoveryCase collection
func (b *EdiscoveryEdiscoveryrootRequestBuilder) Cases() *EdiscoveryEdiscoveryrootCasesCollectionRequestBuilder {
	bb := &EdiscoveryEdiscoveryrootCasesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/cases"
	return bb
}

// EdiscoveryEdiscoveryrootCasesCollectionRequestBuilder is request builder for EdiscoveryCase collection rcn
type EdiscoveryEdiscoveryrootCasesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryCase collection
func (b *EdiscoveryEdiscoveryrootCasesCollectionRequestBuilder) Request() *EdiscoveryEdiscoveryrootCasesCollectionRequest {
	return &EdiscoveryEdiscoveryrootCasesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryCase item
func (b *EdiscoveryEdiscoveryrootCasesCollectionRequestBuilder) ID(id string) *EdiscoveryCaseRequestBuilder {
	bb := &EdiscoveryCaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryEdiscoveryrootCasesCollectionRequest is request for EdiscoveryCase collection
type EdiscoveryEdiscoveryrootCasesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryCase collection
func (r *EdiscoveryEdiscoveryrootCasesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryCase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryCase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryCase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryCase collection, max N pages
func (r *EdiscoveryEdiscoveryrootCasesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryCase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryCase collection
func (r *EdiscoveryEdiscoveryrootCasesCollectionRequest) Get(ctx context.Context) ([]EdiscoveryCase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryCase collection
func (r *EdiscoveryEdiscoveryrootCasesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryCase) (resObj *EdiscoveryCase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SourceCollection is navigation property rn
func (b *EdiscoveryEstimateStatisticsOperationRequestBuilder) SourceCollection() *EdiscoverySourceCollectionRequestBuilder {
	bb := &EdiscoverySourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sourceCollection"
	return bb
}

// SiteSources returns request builder for EdiscoverySiteSource collection
func (b *EdiscoveryLegalHoldRequestBuilder) SiteSources() *EdiscoveryLegalHoldSiteSourcesCollectionRequestBuilder {
	bb := &EdiscoveryLegalHoldSiteSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/siteSources"
	return bb
}

// EdiscoveryLegalHoldSiteSourcesCollectionRequestBuilder is request builder for EdiscoverySiteSource collection rcn
type EdiscoveryLegalHoldSiteSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoverySiteSource collection
func (b *EdiscoveryLegalHoldSiteSourcesCollectionRequestBuilder) Request() *EdiscoveryLegalHoldSiteSourcesCollectionRequest {
	return &EdiscoveryLegalHoldSiteSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoverySiteSource item
func (b *EdiscoveryLegalHoldSiteSourcesCollectionRequestBuilder) ID(id string) *EdiscoverySiteSourceRequestBuilder {
	bb := &EdiscoverySiteSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryLegalHoldSiteSourcesCollectionRequest is request for EdiscoverySiteSource collection
type EdiscoveryLegalHoldSiteSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoverySiteSource collection
func (r *EdiscoveryLegalHoldSiteSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoverySiteSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoverySiteSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoverySiteSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoverySiteSource collection, max N pages
func (r *EdiscoveryLegalHoldSiteSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoverySiteSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoverySiteSource collection
func (r *EdiscoveryLegalHoldSiteSourcesCollectionRequest) Get(ctx context.Context) ([]EdiscoverySiteSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoverySiteSource collection
func (r *EdiscoveryLegalHoldSiteSourcesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoverySiteSource) (resObj *EdiscoverySiteSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UnifiedGroupSources returns request builder for EdiscoveryUnifiedGroupSource collection
func (b *EdiscoveryLegalHoldRequestBuilder) UnifiedGroupSources() *EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequestBuilder {
	bb := &EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/unifiedGroupSources"
	return bb
}

// EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequestBuilder is request builder for EdiscoveryUnifiedGroupSource collection rcn
type EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryUnifiedGroupSource collection
func (b *EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequestBuilder) Request() *EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequest {
	return &EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryUnifiedGroupSource item
func (b *EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequestBuilder) ID(id string) *EdiscoveryUnifiedGroupSourceRequestBuilder {
	bb := &EdiscoveryUnifiedGroupSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequest is request for EdiscoveryUnifiedGroupSource collection
type EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryUnifiedGroupSource collection
func (r *EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryUnifiedGroupSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryUnifiedGroupSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryUnifiedGroupSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryUnifiedGroupSource collection, max N pages
func (r *EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryUnifiedGroupSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryUnifiedGroupSource collection
func (r *EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequest) Get(ctx context.Context) ([]EdiscoveryUnifiedGroupSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryUnifiedGroupSource collection
func (r *EdiscoveryLegalHoldUnifiedGroupSourcesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryUnifiedGroupSource) (resObj *EdiscoveryUnifiedGroupSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// UserSources returns request builder for EdiscoveryUserSource collection
func (b *EdiscoveryLegalHoldRequestBuilder) UserSources() *EdiscoveryLegalHoldUserSourcesCollectionRequestBuilder {
	bb := &EdiscoveryLegalHoldUserSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/userSources"
	return bb
}

// EdiscoveryLegalHoldUserSourcesCollectionRequestBuilder is request builder for EdiscoveryUserSource collection rcn
type EdiscoveryLegalHoldUserSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryUserSource collection
func (b *EdiscoveryLegalHoldUserSourcesCollectionRequestBuilder) Request() *EdiscoveryLegalHoldUserSourcesCollectionRequest {
	return &EdiscoveryLegalHoldUserSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryUserSource item
func (b *EdiscoveryLegalHoldUserSourcesCollectionRequestBuilder) ID(id string) *EdiscoveryUserSourceRequestBuilder {
	bb := &EdiscoveryUserSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryLegalHoldUserSourcesCollectionRequest is request for EdiscoveryUserSource collection
type EdiscoveryLegalHoldUserSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryUserSource collection
func (r *EdiscoveryLegalHoldUserSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryUserSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryUserSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryUserSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryUserSource collection, max N pages
func (r *EdiscoveryLegalHoldUserSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryUserSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryUserSource collection
func (r *EdiscoveryLegalHoldUserSourcesCollectionRequest) Get(ctx context.Context) ([]EdiscoveryUserSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryUserSource collection
func (r *EdiscoveryLegalHoldUserSourcesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryUserSource) (resObj *EdiscoveryUserSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DataSource is navigation property rn
func (b *EdiscoveryNoncustodialDataSourceRequestBuilder) DataSource() *EdiscoveryDataSourceRequestBuilder {
	bb := &EdiscoveryDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dataSource"
	return bb
}

// Queries returns request builder for EdiscoveryReviewSetQuery collection
func (b *EdiscoveryReviewSetRequestBuilder) Queries() *EdiscoveryReviewSetQueriesCollectionRequestBuilder {
	bb := &EdiscoveryReviewSetQueriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/queries"
	return bb
}

// EdiscoveryReviewSetQueriesCollectionRequestBuilder is request builder for EdiscoveryReviewSetQuery collection rcn
type EdiscoveryReviewSetQueriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryReviewSetQuery collection
func (b *EdiscoveryReviewSetQueriesCollectionRequestBuilder) Request() *EdiscoveryReviewSetQueriesCollectionRequest {
	return &EdiscoveryReviewSetQueriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryReviewSetQuery item
func (b *EdiscoveryReviewSetQueriesCollectionRequestBuilder) ID(id string) *EdiscoveryReviewSetQueryRequestBuilder {
	bb := &EdiscoveryReviewSetQueryRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryReviewSetQueriesCollectionRequest is request for EdiscoveryReviewSetQuery collection
type EdiscoveryReviewSetQueriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryReviewSetQuery collection
func (r *EdiscoveryReviewSetQueriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryReviewSetQuery, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryReviewSetQuery
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryReviewSetQuery
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryReviewSetQuery collection, max N pages
func (r *EdiscoveryReviewSetQueriesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryReviewSetQuery, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryReviewSetQuery collection
func (r *EdiscoveryReviewSetQueriesCollectionRequest) Get(ctx context.Context) ([]EdiscoveryReviewSetQuery, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryReviewSetQuery collection
func (r *EdiscoveryReviewSetQueriesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryReviewSetQuery) (resObj *EdiscoveryReviewSetQuery, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Site is navigation property rn
func (b *EdiscoverySiteSourceRequestBuilder) Site() *SiteRequestBuilder {
	bb := &SiteRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/site"
	return bb
}

// AddToReviewSetOperation is navigation property rn
func (b *EdiscoverySourceCollectionRequestBuilder) AddToReviewSetOperation() *EdiscoveryAddToReviewSetOperationRequestBuilder {
	bb := &EdiscoveryAddToReviewSetOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/addToReviewSetOperation"
	return bb
}

// AdditionalSources returns request builder for EdiscoveryDataSource collection
func (b *EdiscoverySourceCollectionRequestBuilder) AdditionalSources() *EdiscoverySourceCollectionAdditionalSourcesCollectionRequestBuilder {
	bb := &EdiscoverySourceCollectionAdditionalSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/additionalSources"
	return bb
}

// EdiscoverySourceCollectionAdditionalSourcesCollectionRequestBuilder is request builder for EdiscoveryDataSource collection rcn
type EdiscoverySourceCollectionAdditionalSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryDataSource collection
func (b *EdiscoverySourceCollectionAdditionalSourcesCollectionRequestBuilder) Request() *EdiscoverySourceCollectionAdditionalSourcesCollectionRequest {
	return &EdiscoverySourceCollectionAdditionalSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryDataSource item
func (b *EdiscoverySourceCollectionAdditionalSourcesCollectionRequestBuilder) ID(id string) *EdiscoveryDataSourceRequestBuilder {
	bb := &EdiscoveryDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoverySourceCollectionAdditionalSourcesCollectionRequest is request for EdiscoveryDataSource collection
type EdiscoverySourceCollectionAdditionalSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryDataSource collection
func (r *EdiscoverySourceCollectionAdditionalSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryDataSource collection, max N pages
func (r *EdiscoverySourceCollectionAdditionalSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryDataSource collection
func (r *EdiscoverySourceCollectionAdditionalSourcesCollectionRequest) Get(ctx context.Context) ([]EdiscoveryDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryDataSource collection
func (r *EdiscoverySourceCollectionAdditionalSourcesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryDataSource) (resObj *EdiscoveryDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CustodianSources returns request builder for EdiscoveryDataSource collection
func (b *EdiscoverySourceCollectionRequestBuilder) CustodianSources() *EdiscoverySourceCollectionCustodianSourcesCollectionRequestBuilder {
	bb := &EdiscoverySourceCollectionCustodianSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/custodianSources"
	return bb
}

// EdiscoverySourceCollectionCustodianSourcesCollectionRequestBuilder is request builder for EdiscoveryDataSource collection rcn
type EdiscoverySourceCollectionCustodianSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryDataSource collection
func (b *EdiscoverySourceCollectionCustodianSourcesCollectionRequestBuilder) Request() *EdiscoverySourceCollectionCustodianSourcesCollectionRequest {
	return &EdiscoverySourceCollectionCustodianSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryDataSource item
func (b *EdiscoverySourceCollectionCustodianSourcesCollectionRequestBuilder) ID(id string) *EdiscoveryDataSourceRequestBuilder {
	bb := &EdiscoveryDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoverySourceCollectionCustodianSourcesCollectionRequest is request for EdiscoveryDataSource collection
type EdiscoverySourceCollectionCustodianSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryDataSource collection
func (r *EdiscoverySourceCollectionCustodianSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryDataSource collection, max N pages
func (r *EdiscoverySourceCollectionCustodianSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryDataSource collection
func (r *EdiscoverySourceCollectionCustodianSourcesCollectionRequest) Get(ctx context.Context) ([]EdiscoveryDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryDataSource collection
func (r *EdiscoverySourceCollectionCustodianSourcesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryDataSource) (resObj *EdiscoveryDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// LastEstimateStatisticsOperation is navigation property rn
func (b *EdiscoverySourceCollectionRequestBuilder) LastEstimateStatisticsOperation() *EdiscoveryEstimateStatisticsOperationRequestBuilder {
	bb := &EdiscoveryEstimateStatisticsOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/lastEstimateStatisticsOperation"
	return bb
}

// NoncustodialSources returns request builder for EdiscoveryNoncustodialDataSource collection
func (b *EdiscoverySourceCollectionRequestBuilder) NoncustodialSources() *EdiscoverySourceCollectionNoncustodialSourcesCollectionRequestBuilder {
	bb := &EdiscoverySourceCollectionNoncustodialSourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/noncustodialSources"
	return bb
}

// EdiscoverySourceCollectionNoncustodialSourcesCollectionRequestBuilder is request builder for EdiscoveryNoncustodialDataSource collection rcn
type EdiscoverySourceCollectionNoncustodialSourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryNoncustodialDataSource collection
func (b *EdiscoverySourceCollectionNoncustodialSourcesCollectionRequestBuilder) Request() *EdiscoverySourceCollectionNoncustodialSourcesCollectionRequest {
	return &EdiscoverySourceCollectionNoncustodialSourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryNoncustodialDataSource item
func (b *EdiscoverySourceCollectionNoncustodialSourcesCollectionRequestBuilder) ID(id string) *EdiscoveryNoncustodialDataSourceRequestBuilder {
	bb := &EdiscoveryNoncustodialDataSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoverySourceCollectionNoncustodialSourcesCollectionRequest is request for EdiscoveryNoncustodialDataSource collection
type EdiscoverySourceCollectionNoncustodialSourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryNoncustodialDataSource collection
func (r *EdiscoverySourceCollectionNoncustodialSourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryNoncustodialDataSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryNoncustodialDataSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryNoncustodialDataSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryNoncustodialDataSource collection, max N pages
func (r *EdiscoverySourceCollectionNoncustodialSourcesCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryNoncustodialDataSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryNoncustodialDataSource collection
func (r *EdiscoverySourceCollectionNoncustodialSourcesCollectionRequest) Get(ctx context.Context) ([]EdiscoveryNoncustodialDataSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryNoncustodialDataSource collection
func (r *EdiscoverySourceCollectionNoncustodialSourcesCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryNoncustodialDataSource) (resObj *EdiscoveryNoncustodialDataSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ChildTags returns request builder for EdiscoveryTag collection
func (b *EdiscoveryTagRequestBuilder) ChildTags() *EdiscoveryTagChildTagsCollectionRequestBuilder {
	bb := &EdiscoveryTagChildTagsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/childTags"
	return bb
}

// EdiscoveryTagChildTagsCollectionRequestBuilder is request builder for EdiscoveryTag collection rcn
type EdiscoveryTagChildTagsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryTag collection
func (b *EdiscoveryTagChildTagsCollectionRequestBuilder) Request() *EdiscoveryTagChildTagsCollectionRequest {
	return &EdiscoveryTagChildTagsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryTag item
func (b *EdiscoveryTagChildTagsCollectionRequestBuilder) ID(id string) *EdiscoveryTagRequestBuilder {
	bb := &EdiscoveryTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryTagChildTagsCollectionRequest is request for EdiscoveryTag collection
type EdiscoveryTagChildTagsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryTag collection
func (r *EdiscoveryTagChildTagsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryTag, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryTag
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryTag
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryTag collection, max N pages
func (r *EdiscoveryTagChildTagsCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryTag, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryTag collection
func (r *EdiscoveryTagChildTagsCollectionRequest) Get(ctx context.Context) ([]EdiscoveryTag, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryTag collection
func (r *EdiscoveryTagChildTagsCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryTag) (resObj *EdiscoveryTag, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Parent is navigation property rn
func (b *EdiscoveryTagRequestBuilder) Parent() *EdiscoveryTagRequestBuilder {
	bb := &EdiscoveryTagRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/parent"
	return bb
}

// Group is navigation property rn
func (b *EdiscoveryUnifiedGroupSourceRequestBuilder) Group() *GroupRequestBuilder {
	bb := &GroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/group"
	return bb
}

// EdiscoveryAddToReviewSetOperation returns request builder for EdiscoveryAddToReviewSetOperation collection
func (b *EdiscoveryCaseOperationRequestBuilder) EdiscoveryAddToReviewSetOperation() *EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequestBuilder {
	bb := &EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequestBuilder is request builder for EdiscoveryAddToReviewSetOperation collection rcn
type EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryAddToReviewSetOperation collection
func (b *EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequestBuilder) Request() *EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequest {
	return &EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryAddToReviewSetOperation item
func (b *EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequestBuilder) ID(id string) *EdiscoveryAddToReviewSetOperationRequestBuilder {
	bb := &EdiscoveryAddToReviewSetOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequest is request for EdiscoveryAddToReviewSetOperation collection
type EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryAddToReviewSetOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryAddToReviewSetOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryAddToReviewSetOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryAddToReviewSetOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryAddToReviewSetOperation collection, max N pages
func (r *EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryAddToReviewSetOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryAddToReviewSetOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequest) Get(ctx context.Context) ([]EdiscoveryAddToReviewSetOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryAddToReviewSetOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryAddToReviewSetOperationCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryAddToReviewSetOperation) (resObj *EdiscoveryAddToReviewSetOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EdiscoveryCaseExportOperation returns request builder for EdiscoveryCaseExportOperation collection
func (b *EdiscoveryCaseOperationRequestBuilder) EdiscoveryCaseExportOperation() *EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequestBuilder {
	bb := &EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequestBuilder is request builder for EdiscoveryCaseExportOperation collection rcn
type EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryCaseExportOperation collection
func (b *EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequestBuilder) Request() *EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequest {
	return &EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryCaseExportOperation item
func (b *EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequestBuilder) ID(id string) *EdiscoveryCaseExportOperationRequestBuilder {
	bb := &EdiscoveryCaseExportOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequest is request for EdiscoveryCaseExportOperation collection
type EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryCaseExportOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryCaseExportOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryCaseExportOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryCaseExportOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryCaseExportOperation collection, max N pages
func (r *EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryCaseExportOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryCaseExportOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequest) Get(ctx context.Context) ([]EdiscoveryCaseExportOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryCaseExportOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryCaseExportOperationCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryCaseExportOperation) (resObj *EdiscoveryCaseExportOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EdiscoveryCaseHoldOperation returns request builder for EdiscoveryCaseHoldOperation collection
func (b *EdiscoveryCaseOperationRequestBuilder) EdiscoveryCaseHoldOperation() *EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequestBuilder {
	bb := &EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequestBuilder is request builder for EdiscoveryCaseHoldOperation collection rcn
type EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryCaseHoldOperation collection
func (b *EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequestBuilder) Request() *EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequest {
	return &EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryCaseHoldOperation item
func (b *EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequestBuilder) ID(id string) *EdiscoveryCaseHoldOperationRequestBuilder {
	bb := &EdiscoveryCaseHoldOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequest is request for EdiscoveryCaseHoldOperation collection
type EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryCaseHoldOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryCaseHoldOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryCaseHoldOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryCaseHoldOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryCaseHoldOperation collection, max N pages
func (r *EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryCaseHoldOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryCaseHoldOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequest) Get(ctx context.Context) ([]EdiscoveryCaseHoldOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryCaseHoldOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryCaseHoldOperationCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryCaseHoldOperation) (resObj *EdiscoveryCaseHoldOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EdiscoveryCaseIndexOperation returns request builder for EdiscoveryCaseIndexOperation collection
func (b *EdiscoveryCaseOperationRequestBuilder) EdiscoveryCaseIndexOperation() *EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequestBuilder {
	bb := &EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequestBuilder is request builder for EdiscoveryCaseIndexOperation collection rcn
type EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryCaseIndexOperation collection
func (b *EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequestBuilder) Request() *EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequest {
	return &EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryCaseIndexOperation item
func (b *EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequestBuilder) ID(id string) *EdiscoveryCaseIndexOperationRequestBuilder {
	bb := &EdiscoveryCaseIndexOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequest is request for EdiscoveryCaseIndexOperation collection
type EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryCaseIndexOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryCaseIndexOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryCaseIndexOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryCaseIndexOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryCaseIndexOperation collection, max N pages
func (r *EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryCaseIndexOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryCaseIndexOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequest) Get(ctx context.Context) ([]EdiscoveryCaseIndexOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryCaseIndexOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryCaseIndexOperationCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryCaseIndexOperation) (resObj *EdiscoveryCaseIndexOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EdiscoveryEstimateStatisticsOperation returns request builder for EdiscoveryEstimateStatisticsOperation collection
func (b *EdiscoveryCaseOperationRequestBuilder) EdiscoveryEstimateStatisticsOperation() *EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequestBuilder {
	bb := &EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequestBuilder is request builder for EdiscoveryEstimateStatisticsOperation collection rcn
type EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryEstimateStatisticsOperation collection
func (b *EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequestBuilder) Request() *EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequest {
	return &EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryEstimateStatisticsOperation item
func (b *EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequestBuilder) ID(id string) *EdiscoveryEstimateStatisticsOperationRequestBuilder {
	bb := &EdiscoveryEstimateStatisticsOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequest is request for EdiscoveryEstimateStatisticsOperation collection
type EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryEstimateStatisticsOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryEstimateStatisticsOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryEstimateStatisticsOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryEstimateStatisticsOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryEstimateStatisticsOperation collection, max N pages
func (r *EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryEstimateStatisticsOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryEstimateStatisticsOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequest) Get(ctx context.Context) ([]EdiscoveryEstimateStatisticsOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryEstimateStatisticsOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryEstimateStatisticsOperationCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryEstimateStatisticsOperation) (resObj *EdiscoveryEstimateStatisticsOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EdiscoveryPurgeDataOperation returns request builder for EdiscoveryPurgeDataOperation collection
func (b *EdiscoveryCaseOperationRequestBuilder) EdiscoveryPurgeDataOperation() *EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequestBuilder {
	bb := &EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequestBuilder is request builder for EdiscoveryPurgeDataOperation collection rcn
type EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryPurgeDataOperation collection
func (b *EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequestBuilder) Request() *EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequest {
	return &EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryPurgeDataOperation item
func (b *EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequestBuilder) ID(id string) *EdiscoveryPurgeDataOperationRequestBuilder {
	bb := &EdiscoveryPurgeDataOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequest is request for EdiscoveryPurgeDataOperation collection
type EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryPurgeDataOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryPurgeDataOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryPurgeDataOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryPurgeDataOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryPurgeDataOperation collection, max N pages
func (r *EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryPurgeDataOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryPurgeDataOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequest) Get(ctx context.Context) ([]EdiscoveryPurgeDataOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryPurgeDataOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryPurgeDataOperationCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryPurgeDataOperation) (resObj *EdiscoveryPurgeDataOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EdiscoverySiteSource returns request builder for EdiscoverySiteSource collection
func (b *EdiscoveryDataSourceRequestBuilder) EdiscoverySiteSource() *EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequestBuilder {
	bb := &EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequestBuilder is request builder for EdiscoverySiteSource collection rcn
type EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoverySiteSource collection
func (b *EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequestBuilder) Request() *EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequest {
	return &EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoverySiteSource item
func (b *EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequestBuilder) ID(id string) *EdiscoverySiteSourceRequestBuilder {
	bb := &EdiscoverySiteSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequest is request for EdiscoverySiteSource collection
type EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoverySiteSource collection
func (r *EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoverySiteSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoverySiteSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoverySiteSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoverySiteSource collection, max N pages
func (r *EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoverySiteSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoverySiteSource collection
func (r *EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequest) Get(ctx context.Context) ([]EdiscoverySiteSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoverySiteSource collection
func (r *EdiscoveryDataSourceEdiscoverySiteSourceCollectionRequest) Add(ctx context.Context, reqObj *EdiscoverySiteSource) (resObj *EdiscoverySiteSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EdiscoveryTagOperation returns request builder for EdiscoveryTagOperation collection
func (b *EdiscoveryCaseOperationRequestBuilder) EdiscoveryTagOperation() *EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequestBuilder {
	bb := &EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequestBuilder is request builder for EdiscoveryTagOperation collection rcn
type EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryTagOperation collection
func (b *EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequestBuilder) Request() *EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequest {
	return &EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryTagOperation item
func (b *EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequestBuilder) ID(id string) *EdiscoveryTagOperationRequestBuilder {
	bb := &EdiscoveryTagOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequest is request for EdiscoveryTagOperation collection
type EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryTagOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryTagOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryTagOperation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryTagOperation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryTagOperation collection, max N pages
func (r *EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryTagOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryTagOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequest) Get(ctx context.Context) ([]EdiscoveryTagOperation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryTagOperation collection
func (r *EdiscoveryCaseOperationEdiscoveryTagOperationCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryTagOperation) (resObj *EdiscoveryTagOperation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EdiscoveryUnifiedGroupSource returns request builder for EdiscoveryUnifiedGroupSource collection
func (b *EdiscoveryDataSourceRequestBuilder) EdiscoveryUnifiedGroupSource() *EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequestBuilder {
	bb := &EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequestBuilder is request builder for EdiscoveryUnifiedGroupSource collection rcn
type EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryUnifiedGroupSource collection
func (b *EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequestBuilder) Request() *EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequest {
	return &EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryUnifiedGroupSource item
func (b *EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequestBuilder) ID(id string) *EdiscoveryUnifiedGroupSourceRequestBuilder {
	bb := &EdiscoveryUnifiedGroupSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequest is request for EdiscoveryUnifiedGroupSource collection
type EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryUnifiedGroupSource collection
func (r *EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryUnifiedGroupSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryUnifiedGroupSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryUnifiedGroupSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryUnifiedGroupSource collection, max N pages
func (r *EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryUnifiedGroupSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryUnifiedGroupSource collection
func (r *EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequest) Get(ctx context.Context) ([]EdiscoveryUnifiedGroupSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryUnifiedGroupSource collection
func (r *EdiscoveryDataSourceEdiscoveryUnifiedGroupSourceCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryUnifiedGroupSource) (resObj *EdiscoveryUnifiedGroupSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// EdiscoveryUserSource returns request builder for EdiscoveryUserSource collection
func (b *EdiscoveryDataSourceRequestBuilder) EdiscoveryUserSource() *EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequestBuilder {
	bb := &EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequestBuilder is request builder for EdiscoveryUserSource collection rcn
type EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for EdiscoveryUserSource collection
func (b *EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequestBuilder) Request() *EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequest {
	return &EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for EdiscoveryUserSource item
func (b *EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequestBuilder) ID(id string) *EdiscoveryUserSourceRequestBuilder {
	bb := &EdiscoveryUserSourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequest is request for EdiscoveryUserSource collection
type EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for EdiscoveryUserSource collection
func (r *EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]EdiscoveryUserSource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []EdiscoveryUserSource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []EdiscoveryUserSource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for EdiscoveryUserSource collection, max N pages
func (r *EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequest) GetN(ctx context.Context, n int) ([]EdiscoveryUserSource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for EdiscoveryUserSource collection
func (r *EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequest) Get(ctx context.Context) ([]EdiscoveryUserSource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for EdiscoveryUserSource collection
func (r *EdiscoveryDataSourceEdiscoveryUserSourceCollectionRequest) Add(ctx context.Context, reqObj *EdiscoveryUserSource) (resObj *EdiscoveryUserSource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
