// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import "context"

// MessageRequestBuilder is request builder for Message
type MessageRequestBuilder struct{ BaseRequestBuilder }

// Request returns MessageRequest
func (b *MessageRequestBuilder) Request() *MessageRequest {
	return &MessageRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MessageRequest is request for Message
type MessageRequest struct{ BaseRequest }

// Get performs GET request for Message
func (r *MessageRequest) Get(ctx context.Context) (resObj *Message, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Message
func (r *MessageRequest) Update(ctx context.Context, reqObj *Message) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Message
func (r *MessageRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MessageEventRequestBuilder is request builder for MessageEvent
type MessageEventRequestBuilder struct{ BaseRequestBuilder }

// Request returns MessageEventRequest
func (b *MessageEventRequestBuilder) Request() *MessageEventRequest {
	return &MessageEventRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MessageEventRequest is request for MessageEvent
type MessageEventRequest struct{ BaseRequest }

// Get performs GET request for MessageEvent
func (r *MessageEventRequest) Get(ctx context.Context) (resObj *MessageEvent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MessageEvent
func (r *MessageEventRequest) Update(ctx context.Context, reqObj *MessageEvent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MessageEvent
func (r *MessageEventRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MessagePinnedEventMessageDetailRequestBuilder is request builder for MessagePinnedEventMessageDetail
type MessagePinnedEventMessageDetailRequestBuilder struct{ BaseRequestBuilder }

// Request returns MessagePinnedEventMessageDetailRequest
func (b *MessagePinnedEventMessageDetailRequestBuilder) Request() *MessagePinnedEventMessageDetailRequest {
	return &MessagePinnedEventMessageDetailRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MessagePinnedEventMessageDetailRequest is request for MessagePinnedEventMessageDetail
type MessagePinnedEventMessageDetailRequest struct{ BaseRequest }

// Get performs GET request for MessagePinnedEventMessageDetail
func (r *MessagePinnedEventMessageDetailRequest) Get(ctx context.Context) (resObj *MessagePinnedEventMessageDetail, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MessagePinnedEventMessageDetail
func (r *MessagePinnedEventMessageDetailRequest) Update(ctx context.Context, reqObj *MessagePinnedEventMessageDetail) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MessagePinnedEventMessageDetail
func (r *MessagePinnedEventMessageDetailRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MessageRecipientRequestBuilder is request builder for MessageRecipient
type MessageRecipientRequestBuilder struct{ BaseRequestBuilder }

// Request returns MessageRecipientRequest
func (b *MessageRecipientRequestBuilder) Request() *MessageRecipientRequest {
	return &MessageRecipientRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MessageRecipientRequest is request for MessageRecipient
type MessageRecipientRequest struct{ BaseRequest }

// Get performs GET request for MessageRecipient
func (r *MessageRecipientRequest) Get(ctx context.Context) (resObj *MessageRecipient, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MessageRecipient
func (r *MessageRecipientRequest) Update(ctx context.Context, reqObj *MessageRecipient) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MessageRecipient
func (r *MessageRecipientRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MessageRuleRequestBuilder is request builder for MessageRule
type MessageRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns MessageRuleRequest
func (b *MessageRuleRequestBuilder) Request() *MessageRuleRequest {
	return &MessageRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MessageRuleRequest is request for MessageRule
type MessageRuleRequest struct{ BaseRequest }

// Get performs GET request for MessageRule
func (r *MessageRuleRequest) Get(ctx context.Context) (resObj *MessageRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MessageRule
func (r *MessageRuleRequest) Update(ctx context.Context, reqObj *MessageRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MessageRule
func (r *MessageRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MessageRuleActionsRequestBuilder is request builder for MessageRuleActions
type MessageRuleActionsRequestBuilder struct{ BaseRequestBuilder }

// Request returns MessageRuleActionsRequest
func (b *MessageRuleActionsRequestBuilder) Request() *MessageRuleActionsRequest {
	return &MessageRuleActionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MessageRuleActionsRequest is request for MessageRuleActions
type MessageRuleActionsRequest struct{ BaseRequest }

// Get performs GET request for MessageRuleActions
func (r *MessageRuleActionsRequest) Get(ctx context.Context) (resObj *MessageRuleActions, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MessageRuleActions
func (r *MessageRuleActionsRequest) Update(ctx context.Context, reqObj *MessageRuleActions) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MessageRuleActions
func (r *MessageRuleActionsRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MessageRulePredicatesRequestBuilder is request builder for MessageRulePredicates
type MessageRulePredicatesRequestBuilder struct{ BaseRequestBuilder }

// Request returns MessageRulePredicatesRequest
func (b *MessageRulePredicatesRequestBuilder) Request() *MessageRulePredicatesRequest {
	return &MessageRulePredicatesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MessageRulePredicatesRequest is request for MessageRulePredicates
type MessageRulePredicatesRequest struct{ BaseRequest }

// Get performs GET request for MessageRulePredicates
func (r *MessageRulePredicatesRequest) Get(ctx context.Context) (resObj *MessageRulePredicates, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MessageRulePredicates
func (r *MessageRulePredicatesRequest) Update(ctx context.Context, reqObj *MessageRulePredicates) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MessageRulePredicates
func (r *MessageRulePredicatesRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MessageSecurityStateRequestBuilder is request builder for MessageSecurityState
type MessageSecurityStateRequestBuilder struct{ BaseRequestBuilder }

// Request returns MessageSecurityStateRequest
func (b *MessageSecurityStateRequestBuilder) Request() *MessageSecurityStateRequest {
	return &MessageSecurityStateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MessageSecurityStateRequest is request for MessageSecurityState
type MessageSecurityStateRequest struct{ BaseRequest }

// Get performs GET request for MessageSecurityState
func (r *MessageSecurityStateRequest) Get(ctx context.Context) (resObj *MessageSecurityState, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MessageSecurityState
func (r *MessageSecurityStateRequest) Update(ctx context.Context, reqObj *MessageSecurityState) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MessageSecurityState
func (r *MessageSecurityStateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MessageTraceRequestBuilder is request builder for MessageTrace
type MessageTraceRequestBuilder struct{ BaseRequestBuilder }

// Request returns MessageTraceRequest
func (b *MessageTraceRequestBuilder) Request() *MessageTraceRequest {
	return &MessageTraceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MessageTraceRequest is request for MessageTrace
type MessageTraceRequest struct{ BaseRequest }

// Get performs GET request for MessageTrace
func (r *MessageTraceRequest) Get(ctx context.Context) (resObj *MessageTrace, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MessageTrace
func (r *MessageTraceRequest) Update(ctx context.Context, reqObj *MessageTrace) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MessageTrace
func (r *MessageTraceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// MessageUnpinnedEventMessageDetailRequestBuilder is request builder for MessageUnpinnedEventMessageDetail
type MessageUnpinnedEventMessageDetailRequestBuilder struct{ BaseRequestBuilder }

// Request returns MessageUnpinnedEventMessageDetailRequest
func (b *MessageUnpinnedEventMessageDetailRequestBuilder) Request() *MessageUnpinnedEventMessageDetailRequest {
	return &MessageUnpinnedEventMessageDetailRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MessageUnpinnedEventMessageDetailRequest is request for MessageUnpinnedEventMessageDetail
type MessageUnpinnedEventMessageDetailRequest struct{ BaseRequest }

// Get performs GET request for MessageUnpinnedEventMessageDetail
func (r *MessageUnpinnedEventMessageDetailRequest) Get(ctx context.Context) (resObj *MessageUnpinnedEventMessageDetail, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MessageUnpinnedEventMessageDetail
func (r *MessageUnpinnedEventMessageDetailRequest) Update(ctx context.Context, reqObj *MessageUnpinnedEventMessageDetail) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MessageUnpinnedEventMessageDetail
func (r *MessageUnpinnedEventMessageDetailRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

type MessageForwardRequestBuilder struct{ BaseRequestBuilder }

// Forward action undocumentedrav
func (b *MessageRequestBuilder) Forward(reqObj *MessageForwardRequestParameter) *MessageForwardRequestBuilder {
	bb := &MessageForwardRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Forward"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageForwardRequest struct{ BaseRequest }

func (b *MessageForwardRequestBuilder) Request() *MessageForwardRequest {
	return &MessageForwardRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageForwardRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type MessageCopyRequestBuilder struct{ BaseRequestBuilder }

// Copy action undocumentedras
func (b *MessageRequestBuilder) Copy(reqObj *MessageCopyRequestParameter) *MessageCopyRequestBuilder {
	bb := &MessageCopyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Copy"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageCopyRequest struct{ BaseRequest }

func (b *MessageCopyRequestBuilder) Request() *MessageCopyRequest {
	return &MessageCopyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageCopyRequest) Post(ctx context.Context) (resObj *Message, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type MessageMoveRequestBuilder struct{ BaseRequestBuilder }

// Move action undocumentedras
func (b *MessageRequestBuilder) Move(reqObj *MessageMoveRequestParameter) *MessageMoveRequestBuilder {
	bb := &MessageMoveRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Move"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageMoveRequest struct{ BaseRequest }

func (b *MessageMoveRequestBuilder) Request() *MessageMoveRequest {
	return &MessageMoveRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageMoveRequest) Post(ctx context.Context) (resObj *Message, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type MessageCreateForwardRequestBuilder struct{ BaseRequestBuilder }

// CreateForward action undocumentedras
func (b *MessageRequestBuilder) CreateForward(reqObj *MessageCreateForwardRequestParameter) *MessageCreateForwardRequestBuilder {
	bb := &MessageCreateForwardRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/CreateForward"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageCreateForwardRequest struct{ BaseRequest }

func (b *MessageCreateForwardRequestBuilder) Request() *MessageCreateForwardRequest {
	return &MessageCreateForwardRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageCreateForwardRequest) Post(ctx context.Context) (resObj *Message, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type MessageCreateReplyRequestBuilder struct{ BaseRequestBuilder }

// CreateReply action undocumentedras
func (b *MessageRequestBuilder) CreateReply(reqObj *MessageCreateReplyRequestParameter) *MessageCreateReplyRequestBuilder {
	bb := &MessageCreateReplyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/CreateReply"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageCreateReplyRequest struct{ BaseRequest }

func (b *MessageCreateReplyRequestBuilder) Request() *MessageCreateReplyRequest {
	return &MessageCreateReplyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageCreateReplyRequest) Post(ctx context.Context) (resObj *Message, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type MessageCreateReplyAllRequestBuilder struct{ BaseRequestBuilder }

// CreateReplyAll action undocumentedras
func (b *MessageRequestBuilder) CreateReplyAll(reqObj *MessageCreateReplyAllRequestParameter) *MessageCreateReplyAllRequestBuilder {
	bb := &MessageCreateReplyAllRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/CreateReplyAll"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageCreateReplyAllRequest struct{ BaseRequest }

func (b *MessageCreateReplyAllRequestBuilder) Request() *MessageCreateReplyAllRequest {
	return &MessageCreateReplyAllRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageCreateReplyAllRequest) Post(ctx context.Context) (resObj *Message, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type MessageMarkAsJunkRequestBuilder struct{ BaseRequestBuilder }

// MarkAsJunk action undocumentedras
func (b *MessageRequestBuilder) MarkAsJunk(reqObj *MessageMarkAsJunkRequestParameter) *MessageMarkAsJunkRequestBuilder {
	bb := &MessageMarkAsJunkRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/MarkAsJunk"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageMarkAsJunkRequest struct{ BaseRequest }

func (b *MessageMarkAsJunkRequestBuilder) Request() *MessageMarkAsJunkRequest {
	return &MessageMarkAsJunkRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageMarkAsJunkRequest) Post(ctx context.Context) (resObj *Message, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type MessageMarkAsNotJunkRequestBuilder struct{ BaseRequestBuilder }

// MarkAsNotJunk action undocumentedras
func (b *MessageRequestBuilder) MarkAsNotJunk(reqObj *MessageMarkAsNotJunkRequestParameter) *MessageMarkAsNotJunkRequestBuilder {
	bb := &MessageMarkAsNotJunkRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/MarkAsNotJunk"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageMarkAsNotJunkRequest struct{ BaseRequest }

func (b *MessageMarkAsNotJunkRequestBuilder) Request() *MessageMarkAsNotJunkRequest {
	return &MessageMarkAsNotJunkRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageMarkAsNotJunkRequest) Post(ctx context.Context) (resObj *Message, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

type MessageReplyRequestBuilder struct{ BaseRequestBuilder }

// Reply action undocumentedrav
func (b *MessageRequestBuilder) Reply(reqObj *MessageReplyRequestParameter) *MessageReplyRequestBuilder {
	bb := &MessageReplyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Reply"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageReplyRequest struct{ BaseRequest }

func (b *MessageReplyRequestBuilder) Request() *MessageReplyRequest {
	return &MessageReplyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageReplyRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type MessageReplyAllRequestBuilder struct{ BaseRequestBuilder }

// ReplyAll action undocumentedrav
func (b *MessageRequestBuilder) ReplyAll(reqObj *MessageReplyAllRequestParameter) *MessageReplyAllRequestBuilder {
	bb := &MessageReplyAllRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/ReplyAll"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageReplyAllRequest struct{ BaseRequest }

func (b *MessageReplyAllRequestBuilder) Request() *MessageReplyAllRequest {
	return &MessageReplyAllRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageReplyAllRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type MessageSendRequestBuilder struct{ BaseRequestBuilder }

// Send action undocumentedrav
func (b *MessageRequestBuilder) Send(reqObj *MessageSendRequestParameter) *MessageSendRequestBuilder {
	bb := &MessageSendRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Send"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageSendRequest struct{ BaseRequest }

func (b *MessageSendRequestBuilder) Request() *MessageSendRequest {
	return &MessageSendRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageSendRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

type MessageUnsubscribeRequestBuilder struct{ BaseRequestBuilder }

// Unsubscribe action undocumentedrav
func (b *MessageRequestBuilder) Unsubscribe(reqObj *MessageUnsubscribeRequestParameter) *MessageUnsubscribeRequestBuilder {
	bb := &MessageUnsubscribeRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/Unsubscribe"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

type MessageUnsubscribeRequest struct{ BaseRequest }

func (b *MessageUnsubscribeRequestBuilder) Request() *MessageUnsubscribeRequest {
	return &MessageUnsubscribeRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

func (r *MessageUnsubscribeRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
