// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// DirectoryObjectCollectionValidatePropertiesRequestParameter undocumented
type DirectoryObjectCollectionValidatePropertiesRequestParameter struct {
	// EntityType undocumented
	EntityType *string `json:"entityType,omitempty"`
	// DisplayName undocumented
	DisplayName *string `json:"displayName,omitempty"`
	// MailNickname undocumented
	MailNickname *string `json:"mailNickname,omitempty"`
	// OnBehalfOfUserID undocumented
	OnBehalfOfUserID *UUID `json:"onBehalfOfUserId,omitempty"`
}

// DirectoryObjectCollectionGetByIDsRequestParameter undocumented
type DirectoryObjectCollectionGetByIDsRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
	// Types undocumented
	Types []string `json:"types,omitempty"`
}

// DirectoryObjectCollectionGetUserOwnedObjectsRequestParameter undocumented
type DirectoryObjectCollectionGetUserOwnedObjectsRequestParameter struct {
	// UserID undocumented
	UserID *string `json:"userId,omitempty"`
	// Type undocumented
	Type *string `json:"type,omitempty"`
}

// DirectoryDefinitionDiscoverRequestParameter undocumented
type DirectoryDefinitionDiscoverRequestParameter struct {
}

// DirectoryObjectRestoreRequestParameter undocumented
type DirectoryObjectRestoreRequestParameter struct {
}

// DirectoryObjectCheckMemberGroupsRequestParameter undocumented
type DirectoryObjectCheckMemberGroupsRequestParameter struct {
	// GroupIDs undocumented
	GroupIDs []string `json:"groupIds,omitempty"`
}

// DirectoryObjectCheckMemberObjectsRequestParameter undocumented
type DirectoryObjectCheckMemberObjectsRequestParameter struct {
	// IDs undocumented
	IDs []string `json:"ids,omitempty"`
}

// DirectoryObjectGetMemberGroupsRequestParameter undocumented
type DirectoryObjectGetMemberGroupsRequestParameter struct {
	// SecurityEnabledOnly undocumented
	SecurityEnabledOnly *bool `json:"securityEnabledOnly,omitempty"`
}

// DirectoryObjectGetMemberObjectsRequestParameter undocumented
type DirectoryObjectGetMemberObjectsRequestParameter struct {
	// SecurityEnabledOnly undocumented
	SecurityEnabledOnly *bool `json:"securityEnabledOnly,omitempty"`
}

// AdministrativeUnits returns request builder for AdministrativeUnit collection
func (b *DirectoryRequestBuilder) AdministrativeUnits() *DirectoryAdministrativeUnitsCollectionRequestBuilder {
	bb := &DirectoryAdministrativeUnitsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/administrativeUnits"
	return bb
}

// DirectoryAdministrativeUnitsCollectionRequestBuilder is request builder for AdministrativeUnit collection rcn
type DirectoryAdministrativeUnitsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AdministrativeUnit collection
func (b *DirectoryAdministrativeUnitsCollectionRequestBuilder) Request() *DirectoryAdministrativeUnitsCollectionRequest {
	return &DirectoryAdministrativeUnitsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AdministrativeUnit item
func (b *DirectoryAdministrativeUnitsCollectionRequestBuilder) ID(id string) *AdministrativeUnitRequestBuilder {
	bb := &AdministrativeUnitRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryAdministrativeUnitsCollectionRequest is request for AdministrativeUnit collection
type DirectoryAdministrativeUnitsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AdministrativeUnit collection
func (r *DirectoryAdministrativeUnitsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AdministrativeUnit, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AdministrativeUnit
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AdministrativeUnit
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AdministrativeUnit collection, max N pages
func (r *DirectoryAdministrativeUnitsCollectionRequest) GetN(ctx context.Context, n int) ([]AdministrativeUnit, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AdministrativeUnit collection
func (r *DirectoryAdministrativeUnitsCollectionRequest) Get(ctx context.Context) ([]AdministrativeUnit, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AdministrativeUnit collection
func (r *DirectoryAdministrativeUnitsCollectionRequest) Add(ctx context.Context, reqObj *AdministrativeUnit) (resObj *AdministrativeUnit, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// AttributeSets returns request builder for AttributeSet collection
func (b *DirectoryRequestBuilder) AttributeSets() *DirectoryAttributeSetsCollectionRequestBuilder {
	bb := &DirectoryAttributeSetsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/attributeSets"
	return bb
}

// DirectoryAttributeSetsCollectionRequestBuilder is request builder for AttributeSet collection rcn
type DirectoryAttributeSetsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AttributeSet collection
func (b *DirectoryAttributeSetsCollectionRequestBuilder) Request() *DirectoryAttributeSetsCollectionRequest {
	return &DirectoryAttributeSetsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AttributeSet item
func (b *DirectoryAttributeSetsCollectionRequestBuilder) ID(id string) *AttributeSetRequestBuilder {
	bb := &AttributeSetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryAttributeSetsCollectionRequest is request for AttributeSet collection
type DirectoryAttributeSetsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AttributeSet collection
func (r *DirectoryAttributeSetsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]AttributeSet, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AttributeSet
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AttributeSet
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for AttributeSet collection, max N pages
func (r *DirectoryAttributeSetsCollectionRequest) GetN(ctx context.Context, n int) ([]AttributeSet, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for AttributeSet collection
func (r *DirectoryAttributeSetsCollectionRequest) Get(ctx context.Context) ([]AttributeSet, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for AttributeSet collection
func (r *DirectoryAttributeSetsCollectionRequest) Add(ctx context.Context, reqObj *AttributeSet) (resObj *AttributeSet, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// CustomSecurityAttributeDefinitions returns request builder for CustomSecurityAttributeDefinition collection
func (b *DirectoryRequestBuilder) CustomSecurityAttributeDefinitions() *DirectoryCustomSecurityAttributeDefinitionsCollectionRequestBuilder {
	bb := &DirectoryCustomSecurityAttributeDefinitionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/customSecurityAttributeDefinitions"
	return bb
}

// DirectoryCustomSecurityAttributeDefinitionsCollectionRequestBuilder is request builder for CustomSecurityAttributeDefinition collection rcn
type DirectoryCustomSecurityAttributeDefinitionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for CustomSecurityAttributeDefinition collection
func (b *DirectoryCustomSecurityAttributeDefinitionsCollectionRequestBuilder) Request() *DirectoryCustomSecurityAttributeDefinitionsCollectionRequest {
	return &DirectoryCustomSecurityAttributeDefinitionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for CustomSecurityAttributeDefinition item
func (b *DirectoryCustomSecurityAttributeDefinitionsCollectionRequestBuilder) ID(id string) *CustomSecurityAttributeDefinitionRequestBuilder {
	bb := &CustomSecurityAttributeDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryCustomSecurityAttributeDefinitionsCollectionRequest is request for CustomSecurityAttributeDefinition collection
type DirectoryCustomSecurityAttributeDefinitionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for CustomSecurityAttributeDefinition collection
func (r *DirectoryCustomSecurityAttributeDefinitionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]CustomSecurityAttributeDefinition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []CustomSecurityAttributeDefinition
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []CustomSecurityAttributeDefinition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for CustomSecurityAttributeDefinition collection, max N pages
func (r *DirectoryCustomSecurityAttributeDefinitionsCollectionRequest) GetN(ctx context.Context, n int) ([]CustomSecurityAttributeDefinition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for CustomSecurityAttributeDefinition collection
func (r *DirectoryCustomSecurityAttributeDefinitionsCollectionRequest) Get(ctx context.Context) ([]CustomSecurityAttributeDefinition, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for CustomSecurityAttributeDefinition collection
func (r *DirectoryCustomSecurityAttributeDefinitionsCollectionRequest) Add(ctx context.Context, reqObj *CustomSecurityAttributeDefinition) (resObj *CustomSecurityAttributeDefinition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DeletedItems returns request builder for DirectoryObject collection
func (b *DirectoryRequestBuilder) DeletedItems() *DirectoryDeletedItemsCollectionRequestBuilder {
	bb := &DirectoryDeletedItemsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deletedItems"
	return bb
}

// DirectoryDeletedItemsCollectionRequestBuilder is request builder for DirectoryObject collection rcn
type DirectoryDeletedItemsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *DirectoryDeletedItemsCollectionRequestBuilder) Request() *DirectoryDeletedItemsCollectionRequest {
	return &DirectoryDeletedItemsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *DirectoryDeletedItemsCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryDeletedItemsCollectionRequest is request for DirectoryObject collection
type DirectoryDeletedItemsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *DirectoryDeletedItemsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *DirectoryDeletedItemsCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *DirectoryDeletedItemsCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *DirectoryDeletedItemsCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// FeatureRolloutPolicies returns request builder for FeatureRolloutPolicy collection
func (b *DirectoryRequestBuilder) FeatureRolloutPolicies() *DirectoryFeatureRolloutPoliciesCollectionRequestBuilder {
	bb := &DirectoryFeatureRolloutPoliciesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/featureRolloutPolicies"
	return bb
}

// DirectoryFeatureRolloutPoliciesCollectionRequestBuilder is request builder for FeatureRolloutPolicy collection rcn
type DirectoryFeatureRolloutPoliciesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for FeatureRolloutPolicy collection
func (b *DirectoryFeatureRolloutPoliciesCollectionRequestBuilder) Request() *DirectoryFeatureRolloutPoliciesCollectionRequest {
	return &DirectoryFeatureRolloutPoliciesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for FeatureRolloutPolicy item
func (b *DirectoryFeatureRolloutPoliciesCollectionRequestBuilder) ID(id string) *FeatureRolloutPolicyRequestBuilder {
	bb := &FeatureRolloutPolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryFeatureRolloutPoliciesCollectionRequest is request for FeatureRolloutPolicy collection
type DirectoryFeatureRolloutPoliciesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for FeatureRolloutPolicy collection
func (r *DirectoryFeatureRolloutPoliciesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]FeatureRolloutPolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []FeatureRolloutPolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []FeatureRolloutPolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for FeatureRolloutPolicy collection, max N pages
func (r *DirectoryFeatureRolloutPoliciesCollectionRequest) GetN(ctx context.Context, n int) ([]FeatureRolloutPolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for FeatureRolloutPolicy collection
func (r *DirectoryFeatureRolloutPoliciesCollectionRequest) Get(ctx context.Context) ([]FeatureRolloutPolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for FeatureRolloutPolicy collection
func (r *DirectoryFeatureRolloutPoliciesCollectionRequest) Add(ctx context.Context, reqObj *FeatureRolloutPolicy) (resObj *FeatureRolloutPolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// FederationConfigurations returns request builder for IdentityProviderBase collection
func (b *DirectoryRequestBuilder) FederationConfigurations() *DirectoryFederationConfigurationsCollectionRequestBuilder {
	bb := &DirectoryFederationConfigurationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/federationConfigurations"
	return bb
}

// DirectoryFederationConfigurationsCollectionRequestBuilder is request builder for IdentityProviderBase collection rcn
type DirectoryFederationConfigurationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IdentityProviderBase collection
func (b *DirectoryFederationConfigurationsCollectionRequestBuilder) Request() *DirectoryFederationConfigurationsCollectionRequest {
	return &DirectoryFederationConfigurationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IdentityProviderBase item
func (b *DirectoryFederationConfigurationsCollectionRequestBuilder) ID(id string) *IdentityProviderBaseRequestBuilder {
	bb := &IdentityProviderBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryFederationConfigurationsCollectionRequest is request for IdentityProviderBase collection
type DirectoryFederationConfigurationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IdentityProviderBase collection
func (r *DirectoryFederationConfigurationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]IdentityProviderBase, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IdentityProviderBase
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IdentityProviderBase
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for IdentityProviderBase collection, max N pages
func (r *DirectoryFederationConfigurationsCollectionRequest) GetN(ctx context.Context, n int) ([]IdentityProviderBase, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for IdentityProviderBase collection
func (r *DirectoryFederationConfigurationsCollectionRequest) Get(ctx context.Context) ([]IdentityProviderBase, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for IdentityProviderBase collection
func (r *DirectoryFederationConfigurationsCollectionRequest) Add(ctx context.Context, reqObj *IdentityProviderBase) (resObj *IdentityProviderBase, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ImpactedResources returns request builder for ImpactedResource collection
func (b *DirectoryRequestBuilder) ImpactedResources() *DirectoryImpactedResourcesCollectionRequestBuilder {
	bb := &DirectoryImpactedResourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/impactedResources"
	return bb
}

// DirectoryImpactedResourcesCollectionRequestBuilder is request builder for ImpactedResource collection rcn
type DirectoryImpactedResourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ImpactedResource collection
func (b *DirectoryImpactedResourcesCollectionRequestBuilder) Request() *DirectoryImpactedResourcesCollectionRequest {
	return &DirectoryImpactedResourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ImpactedResource item
func (b *DirectoryImpactedResourcesCollectionRequestBuilder) ID(id string) *ImpactedResourceRequestBuilder {
	bb := &ImpactedResourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryImpactedResourcesCollectionRequest is request for ImpactedResource collection
type DirectoryImpactedResourcesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ImpactedResource collection
func (r *DirectoryImpactedResourcesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ImpactedResource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ImpactedResource
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ImpactedResource
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ImpactedResource collection, max N pages
func (r *DirectoryImpactedResourcesCollectionRequest) GetN(ctx context.Context, n int) ([]ImpactedResource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ImpactedResource collection
func (r *DirectoryImpactedResourcesCollectionRequest) Get(ctx context.Context) ([]ImpactedResource, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ImpactedResource collection
func (r *DirectoryImpactedResourcesCollectionRequest) Add(ctx context.Context, reqObj *ImpactedResource) (resObj *ImpactedResource, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// InboundSharedUserProfiles returns request builder for InboundSharedUserProfile collection
func (b *DirectoryRequestBuilder) InboundSharedUserProfiles() *DirectoryInboundSharedUserProfilesCollectionRequestBuilder {
	bb := &DirectoryInboundSharedUserProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/inboundSharedUserProfiles"
	return bb
}

// DirectoryInboundSharedUserProfilesCollectionRequestBuilder is request builder for InboundSharedUserProfile collection rcn
type DirectoryInboundSharedUserProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for InboundSharedUserProfile collection
func (b *DirectoryInboundSharedUserProfilesCollectionRequestBuilder) Request() *DirectoryInboundSharedUserProfilesCollectionRequest {
	return &DirectoryInboundSharedUserProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for InboundSharedUserProfile item
func (b *DirectoryInboundSharedUserProfilesCollectionRequestBuilder) ID(id string) *InboundSharedUserProfileRequestBuilder {
	bb := &InboundSharedUserProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryInboundSharedUserProfilesCollectionRequest is request for InboundSharedUserProfile collection
type DirectoryInboundSharedUserProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for InboundSharedUserProfile collection
func (r *DirectoryInboundSharedUserProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]InboundSharedUserProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []InboundSharedUserProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []InboundSharedUserProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for InboundSharedUserProfile collection, max N pages
func (r *DirectoryInboundSharedUserProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]InboundSharedUserProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for InboundSharedUserProfile collection
func (r *DirectoryInboundSharedUserProfilesCollectionRequest) Get(ctx context.Context) ([]InboundSharedUserProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for InboundSharedUserProfile collection
func (r *DirectoryInboundSharedUserProfilesCollectionRequest) Add(ctx context.Context, reqObj *InboundSharedUserProfile) (resObj *InboundSharedUserProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// OnPremisesSynchronization returns request builder for OnPremisesDirectorySynchronization collection
func (b *DirectoryRequestBuilder) OnPremisesSynchronization() *DirectoryOnPremisesSynchronizationCollectionRequestBuilder {
	bb := &DirectoryOnPremisesSynchronizationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/onPremisesSynchronization"
	return bb
}

// DirectoryOnPremisesSynchronizationCollectionRequestBuilder is request builder for OnPremisesDirectorySynchronization collection rcn
type DirectoryOnPremisesSynchronizationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for OnPremisesDirectorySynchronization collection
func (b *DirectoryOnPremisesSynchronizationCollectionRequestBuilder) Request() *DirectoryOnPremisesSynchronizationCollectionRequest {
	return &DirectoryOnPremisesSynchronizationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for OnPremisesDirectorySynchronization item
func (b *DirectoryOnPremisesSynchronizationCollectionRequestBuilder) ID(id string) *OnPremisesDirectorySynchronizationRequestBuilder {
	bb := &OnPremisesDirectorySynchronizationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryOnPremisesSynchronizationCollectionRequest is request for OnPremisesDirectorySynchronization collection
type DirectoryOnPremisesSynchronizationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for OnPremisesDirectorySynchronization collection
func (r *DirectoryOnPremisesSynchronizationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]OnPremisesDirectorySynchronization, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []OnPremisesDirectorySynchronization
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []OnPremisesDirectorySynchronization
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for OnPremisesDirectorySynchronization collection, max N pages
func (r *DirectoryOnPremisesSynchronizationCollectionRequest) GetN(ctx context.Context, n int) ([]OnPremisesDirectorySynchronization, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for OnPremisesDirectorySynchronization collection
func (r *DirectoryOnPremisesSynchronizationCollectionRequest) Get(ctx context.Context) ([]OnPremisesDirectorySynchronization, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for OnPremisesDirectorySynchronization collection
func (r *DirectoryOnPremisesSynchronizationCollectionRequest) Add(ctx context.Context, reqObj *OnPremisesDirectorySynchronization) (resObj *OnPremisesDirectorySynchronization, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// OutboundSharedUserProfiles returns request builder for OutboundSharedUserProfile collection
func (b *DirectoryRequestBuilder) OutboundSharedUserProfiles() *DirectoryOutboundSharedUserProfilesCollectionRequestBuilder {
	bb := &DirectoryOutboundSharedUserProfilesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/outboundSharedUserProfiles"
	return bb
}

// DirectoryOutboundSharedUserProfilesCollectionRequestBuilder is request builder for OutboundSharedUserProfile collection rcn
type DirectoryOutboundSharedUserProfilesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for OutboundSharedUserProfile collection
func (b *DirectoryOutboundSharedUserProfilesCollectionRequestBuilder) Request() *DirectoryOutboundSharedUserProfilesCollectionRequest {
	return &DirectoryOutboundSharedUserProfilesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for OutboundSharedUserProfile item
func (b *DirectoryOutboundSharedUserProfilesCollectionRequestBuilder) ID(id string) *OutboundSharedUserProfileRequestBuilder {
	bb := &OutboundSharedUserProfileRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryOutboundSharedUserProfilesCollectionRequest is request for OutboundSharedUserProfile collection
type DirectoryOutboundSharedUserProfilesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for OutboundSharedUserProfile collection
func (r *DirectoryOutboundSharedUserProfilesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]OutboundSharedUserProfile, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []OutboundSharedUserProfile
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []OutboundSharedUserProfile
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for OutboundSharedUserProfile collection, max N pages
func (r *DirectoryOutboundSharedUserProfilesCollectionRequest) GetN(ctx context.Context, n int) ([]OutboundSharedUserProfile, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for OutboundSharedUserProfile collection
func (r *DirectoryOutboundSharedUserProfilesCollectionRequest) Get(ctx context.Context) ([]OutboundSharedUserProfile, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for OutboundSharedUserProfile collection
func (r *DirectoryOutboundSharedUserProfilesCollectionRequest) Add(ctx context.Context, reqObj *OutboundSharedUserProfile) (resObj *OutboundSharedUserProfile, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Recommendations returns request builder for Recommendation collection
func (b *DirectoryRequestBuilder) Recommendations() *DirectoryRecommendationsCollectionRequestBuilder {
	bb := &DirectoryRecommendationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/recommendations"
	return bb
}

// DirectoryRecommendationsCollectionRequestBuilder is request builder for Recommendation collection rcn
type DirectoryRecommendationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Recommendation collection
func (b *DirectoryRecommendationsCollectionRequestBuilder) Request() *DirectoryRecommendationsCollectionRequest {
	return &DirectoryRecommendationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Recommendation item
func (b *DirectoryRecommendationsCollectionRequestBuilder) ID(id string) *RecommendationRequestBuilder {
	bb := &RecommendationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryRecommendationsCollectionRequest is request for Recommendation collection
type DirectoryRecommendationsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Recommendation collection
func (r *DirectoryRecommendationsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Recommendation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Recommendation
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Recommendation
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Recommendation collection, max N pages
func (r *DirectoryRecommendationsCollectionRequest) GetN(ctx context.Context, n int) ([]Recommendation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Recommendation collection
func (r *DirectoryRecommendationsCollectionRequest) Get(ctx context.Context) ([]Recommendation, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Recommendation collection
func (r *DirectoryRecommendationsCollectionRequest) Add(ctx context.Context, reqObj *Recommendation) (resObj *Recommendation, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// SharedEmailDomains returns request builder for SharedEmailDomain collection
func (b *DirectoryRequestBuilder) SharedEmailDomains() *DirectorySharedEmailDomainsCollectionRequestBuilder {
	bb := &DirectorySharedEmailDomainsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sharedEmailDomains"
	return bb
}

// DirectorySharedEmailDomainsCollectionRequestBuilder is request builder for SharedEmailDomain collection rcn
type DirectorySharedEmailDomainsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SharedEmailDomain collection
func (b *DirectorySharedEmailDomainsCollectionRequestBuilder) Request() *DirectorySharedEmailDomainsCollectionRequest {
	return &DirectorySharedEmailDomainsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SharedEmailDomain item
func (b *DirectorySharedEmailDomainsCollectionRequestBuilder) ID(id string) *SharedEmailDomainRequestBuilder {
	bb := &SharedEmailDomainRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectorySharedEmailDomainsCollectionRequest is request for SharedEmailDomain collection
type DirectorySharedEmailDomainsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for SharedEmailDomain collection
func (r *DirectorySharedEmailDomainsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]SharedEmailDomain, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SharedEmailDomain
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []SharedEmailDomain
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for SharedEmailDomain collection, max N pages
func (r *DirectorySharedEmailDomainsCollectionRequest) GetN(ctx context.Context, n int) ([]SharedEmailDomain, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for SharedEmailDomain collection
func (r *DirectorySharedEmailDomainsCollectionRequest) Get(ctx context.Context) ([]SharedEmailDomain, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for SharedEmailDomain collection
func (r *DirectorySharedEmailDomainsCollectionRequest) Add(ctx context.Context, reqObj *SharedEmailDomain) (resObj *SharedEmailDomain, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Members returns request builder for DirectoryObject collection
func (b *DirectoryRoleRequestBuilder) Members() *DirectoryRoleMembersCollectionRequestBuilder {
	bb := &DirectoryRoleMembersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/members"
	return bb
}

// DirectoryRoleMembersCollectionRequestBuilder is request builder for DirectoryObject collection rcn
type DirectoryRoleMembersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObject collection
func (b *DirectoryRoleMembersCollectionRequestBuilder) Request() *DirectoryRoleMembersCollectionRequest {
	return &DirectoryRoleMembersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObject item
func (b *DirectoryRoleMembersCollectionRequestBuilder) ID(id string) *DirectoryObjectRequestBuilder {
	bb := &DirectoryObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryRoleMembersCollectionRequest is request for DirectoryObject collection
type DirectoryRoleMembersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObject collection
func (r *DirectoryRoleMembersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObject
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObject collection, max N pages
func (r *DirectoryRoleMembersCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObject collection
func (r *DirectoryRoleMembersCollectionRequest) Get(ctx context.Context) ([]DirectoryObject, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObject collection
func (r *DirectoryRoleMembersCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObject) (resObj *DirectoryObject, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// ScopedMembers returns request builder for ScopedRoleMembership collection
func (b *DirectoryRoleRequestBuilder) ScopedMembers() *DirectoryRoleScopedMembersCollectionRequestBuilder {
	bb := &DirectoryRoleScopedMembersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/scopedMembers"
	return bb
}

// DirectoryRoleScopedMembersCollectionRequestBuilder is request builder for ScopedRoleMembership collection rcn
type DirectoryRoleScopedMembersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ScopedRoleMembership collection
func (b *DirectoryRoleScopedMembersCollectionRequestBuilder) Request() *DirectoryRoleScopedMembersCollectionRequest {
	return &DirectoryRoleScopedMembersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ScopedRoleMembership item
func (b *DirectoryRoleScopedMembersCollectionRequestBuilder) ID(id string) *ScopedRoleMembershipRequestBuilder {
	bb := &ScopedRoleMembershipRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DirectoryRoleScopedMembersCollectionRequest is request for ScopedRoleMembership collection
type DirectoryRoleScopedMembersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ScopedRoleMembership collection
func (r *DirectoryRoleScopedMembersCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ScopedRoleMembership, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ScopedRoleMembership
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ScopedRoleMembership
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ScopedRoleMembership collection, max N pages
func (r *DirectoryRoleScopedMembersCollectionRequest) GetN(ctx context.Context, n int) ([]ScopedRoleMembership, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ScopedRoleMembership collection
func (r *DirectoryRoleScopedMembersCollectionRequest) Get(ctx context.Context) ([]ScopedRoleMembership, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ScopedRoleMembership collection
func (r *DirectoryRoleScopedMembersCollectionRequest) Add(ctx context.Context, reqObj *ScopedRoleMembership) (resObj *ScopedRoleMembership, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DirectoryRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DirectoryAuditRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// Entity is navigation property rn
func (b *DirectoryDefinitionRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DirectoryObjectPartnerReference returns request builder for DirectoryObjectPartnerReference collection
func (b *AdministrativeUnitMembersCollectionRequestBuilder) DirectoryObjectPartnerReference() *AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequestBuilder {
	bb := &AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequestBuilder is request builder for DirectoryObjectPartnerReference collection rcn
type AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryObjectPartnerReference collection
func (b *AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequestBuilder) Request() *AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequest {
	return &AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryObjectPartnerReference item
func (b *AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequestBuilder) ID(id string) *DirectoryObjectPartnerReferenceRequestBuilder {
	bb := &DirectoryObjectPartnerReferenceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequest is request for DirectoryObjectPartnerReference collection
type AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryObjectPartnerReference collection
func (r *AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryObjectPartnerReference, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryObjectPartnerReference
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryObjectPartnerReference
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryObjectPartnerReference collection, max N pages
func (r *AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryObjectPartnerReference, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryObjectPartnerReference collection
func (r *AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequest) Get(ctx context.Context) ([]DirectoryObjectPartnerReference, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryObjectPartnerReference collection
func (r *AdministrativeUnitMembersCollectionDirectoryObjectPartnerReferenceCollectionRequest) Add(ctx context.Context, reqObj *DirectoryObjectPartnerReference) (resObj *DirectoryObjectPartnerReference, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// DirectoryRole returns request builder for DirectoryRole collection
func (b *AdministrativeUnitMembersCollectionRequestBuilder) DirectoryRole() *AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequestBuilder {
	bb := &AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequestBuilder is request builder for DirectoryRole collection rcn
type AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryRole collection
func (b *AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequestBuilder) Request() *AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequest {
	return &AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryRole item
func (b *AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequestBuilder) ID(id string) *DirectoryRoleRequestBuilder {
	bb := &DirectoryRoleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequest is request for DirectoryRole collection
type AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryRole collection
func (r *AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryRole, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryRole
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryRole
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryRole collection, max N pages
func (r *AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryRole, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryRole collection
func (r *AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequest) Get(ctx context.Context) ([]DirectoryRole, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryRole collection
func (r *AdministrativeUnitMembersCollectionDirectoryRoleCollectionRequest) Add(ctx context.Context, reqObj *DirectoryRole) (resObj *DirectoryRole, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DirectoryRoleAccessReviewPolicyRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DirectoryRoleTemplate returns request builder for DirectoryRoleTemplate collection
func (b *AdministrativeUnitMembersCollectionRequestBuilder) DirectoryRoleTemplate() *AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequestBuilder {
	bb := &AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequestBuilder is request builder for DirectoryRoleTemplate collection rcn
type AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectoryRoleTemplate collection
func (b *AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequestBuilder) Request() *AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequest {
	return &AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectoryRoleTemplate item
func (b *AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequestBuilder) ID(id string) *DirectoryRoleTemplateRequestBuilder {
	bb := &DirectoryRoleTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequest is request for DirectoryRoleTemplate collection
type AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectoryRoleTemplate collection
func (r *AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectoryRoleTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectoryRoleTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectoryRoleTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectoryRoleTemplate collection, max N pages
func (r *AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequest) GetN(ctx context.Context, n int) ([]DirectoryRoleTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectoryRoleTemplate collection
func (r *AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequest) Get(ctx context.Context) ([]DirectoryRoleTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectoryRoleTemplate collection
func (r *AdministrativeUnitMembersCollectionDirectoryRoleTemplateCollectionRequest) Add(ctx context.Context, reqObj *DirectoryRoleTemplate) (resObj *DirectoryRoleTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Entity is navigation property rn
func (b *DirectorySettingRequestBuilder) Entity() *EntityRequestBuilder {
	bb := &EntityRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/Entity"
	return bb
}

// DirectorySettingTemplate returns request builder for DirectorySettingTemplate collection
func (b *AdministrativeUnitMembersCollectionRequestBuilder) DirectorySettingTemplate() *AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequestBuilder {
	bb := &AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequestBuilder is request builder for DirectorySettingTemplate collection rcn
type AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DirectorySettingTemplate collection
func (b *AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequestBuilder) Request() *AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequest {
	return &AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DirectorySettingTemplate item
func (b *AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequestBuilder) ID(id string) *DirectorySettingTemplateRequestBuilder {
	bb := &DirectorySettingTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequest is request for DirectorySettingTemplate collection
type AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for DirectorySettingTemplate collection
func (r *AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]DirectorySettingTemplate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DirectorySettingTemplate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []DirectorySettingTemplate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for DirectorySettingTemplate collection, max N pages
func (r *AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequest) GetN(ctx context.Context, n int) ([]DirectorySettingTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for DirectorySettingTemplate collection
func (r *AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequest) Get(ctx context.Context) ([]DirectorySettingTemplate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for DirectorySettingTemplate collection
func (r *AdministrativeUnitMembersCollectionDirectorySettingTemplateCollectionRequest) Add(ctx context.Context, reqObj *DirectorySettingTemplate) (resObj *DirectorySettingTemplate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
