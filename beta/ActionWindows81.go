// Code generated by msgraph.go/gen DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/BenHagueNZ/msgraph.go/jsonx"
)

// ManagedDeviceCertificateStates returns request builder for ManagedDeviceCertificateState collection
func (b *Windows81SCEPCertificateProfileRequestBuilder) ManagedDeviceCertificateStates() *Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder {
	bb := &Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managedDeviceCertificateStates"
	return bb
}

// Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder is request builder for ManagedDeviceCertificateState collection rcn
type Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagedDeviceCertificateState collection
func (b *Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) Request() *Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest {
	return &Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagedDeviceCertificateState item
func (b *Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequestBuilder) ID(id string) *ManagedDeviceCertificateStateRequestBuilder {
	bb := &ManagedDeviceCertificateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest is request for ManagedDeviceCertificateState collection
type Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagedDeviceCertificateState collection
func (r *Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]ManagedDeviceCertificateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagedDeviceCertificateState
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagedDeviceCertificateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for ManagedDeviceCertificateState collection, max N pages
func (r *Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest) GetN(ctx context.Context, n int) ([]ManagedDeviceCertificateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for ManagedDeviceCertificateState collection
func (r *Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Get(ctx context.Context) ([]ManagedDeviceCertificateState, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for ManagedDeviceCertificateState collection
func (r *Windows81SCEPCertificateProfileManagedDeviceCertificateStatesCollectionRequest) Add(ctx context.Context, reqObj *ManagedDeviceCertificateState) (resObj *ManagedDeviceCertificateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// RootCertificate is navigation property rn
func (b *Windows81SCEPCertificateProfileRequestBuilder) RootCertificate() *Windows81TrustedRootCertificateRequestBuilder {
	bb := &Windows81TrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificate"
	return bb
}

// WindowsCertificateProfileBase is navigation property rn
func (b *Windows81CertificateProfileBaseRequestBuilder) WindowsCertificateProfileBase() *WindowsCertificateProfileBaseRequestBuilder {
	bb := &WindowsCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsCertificateProfileBase"
	return bb
}

// Windows81CompliancePolicy returns request builder for Windows81CompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionRequestBuilder) Windows81CompliancePolicy() *DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequestBuilder {
	bb := &DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequestBuilder is request builder for Windows81CompliancePolicy collection rcn
type DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Windows81CompliancePolicy collection
func (b *DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequestBuilder) Request() *DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequest {
	return &DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Windows81CompliancePolicy item
func (b *DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequestBuilder) ID(id string) *Windows81CompliancePolicyRequestBuilder {
	bb := &Windows81CompliancePolicyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequest is request for Windows81CompliancePolicy collection
type DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Windows81CompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Windows81CompliancePolicy, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Windows81CompliancePolicy
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Windows81CompliancePolicy
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Windows81CompliancePolicy collection, max N pages
func (r *DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequest) GetN(ctx context.Context, n int) ([]Windows81CompliancePolicy, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Windows81CompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequest) Get(ctx context.Context) ([]Windows81CompliancePolicy, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Windows81CompliancePolicy collection
func (r *DeviceManagementDeviceCompliancePoliciesCollectionWindows81CompliancePolicyCollectionRequest) Add(ctx context.Context, reqObj *Windows81CompliancePolicy) (resObj *Windows81CompliancePolicy, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Windows81GeneralConfiguration returns request builder for Windows81GeneralConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) Windows81GeneralConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequestBuilder is request builder for Windows81GeneralConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Windows81GeneralConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Windows81GeneralConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequestBuilder) ID(id string) *Windows81GeneralConfigurationRequestBuilder {
	bb := &Windows81GeneralConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequest is request for Windows81GeneralConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Windows81GeneralConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Windows81GeneralConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Windows81GeneralConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Windows81GeneralConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Windows81GeneralConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]Windows81GeneralConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Windows81GeneralConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequest) Get(ctx context.Context) ([]Windows81GeneralConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Windows81GeneralConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81GeneralConfigurationCollectionRequest) Add(ctx context.Context, reqObj *Windows81GeneralConfiguration) (resObj *Windows81GeneralConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// WindowsCertificateProfileBase is navigation property rn
func (b *Windows81SCEPCertificateProfileRequestBuilder) WindowsCertificateProfileBase() *WindowsCertificateProfileBaseRequestBuilder {
	bb := &WindowsCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/WindowsCertificateProfileBase"
	return bb
}

// Windows81TrustedRootCertificate returns request builder for Windows81TrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) Windows81TrustedRootCertificate() *DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequestBuilder is request builder for Windows81TrustedRootCertificate collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Windows81TrustedRootCertificate collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Windows81TrustedRootCertificate item
func (b *DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequestBuilder) ID(id string) *Windows81TrustedRootCertificateRequestBuilder {
	bb := &Windows81TrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequest is request for Windows81TrustedRootCertificate collection
type DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Windows81TrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Windows81TrustedRootCertificate, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Windows81TrustedRootCertificate
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Windows81TrustedRootCertificate
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Windows81TrustedRootCertificate collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequest) GetN(ctx context.Context, n int) ([]Windows81TrustedRootCertificate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Windows81TrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequest) Get(ctx context.Context) ([]Windows81TrustedRootCertificate, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Windows81TrustedRootCertificate collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81TrustedRootCertificateCollectionRequest) Add(ctx context.Context, reqObj *Windows81TrustedRootCertificate) (resObj *Windows81TrustedRootCertificate, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Windows81VpnConfiguration returns request builder for Windows81VpnConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) Windows81VpnConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequestBuilder is request builder for Windows81VpnConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Windows81VpnConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Windows81VpnConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequestBuilder) ID(id string) *Windows81VpnConfigurationRequestBuilder {
	bb := &Windows81VpnConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequest is request for Windows81VpnConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Windows81VpnConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Windows81VpnConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Windows81VpnConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Windows81VpnConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Windows81VpnConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]Windows81VpnConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Windows81VpnConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequest) Get(ctx context.Context) ([]Windows81VpnConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Windows81VpnConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81VpnConfigurationCollectionRequest) Add(ctx context.Context, reqObj *Windows81VpnConfiguration) (resObj *Windows81VpnConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Windows81WifiImportConfiguration returns request builder for Windows81WifiImportConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionRequestBuilder) Windows81WifiImportConfiguration() *DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequestBuilder {
	bb := &DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/"
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequestBuilder is request builder for Windows81WifiImportConfiguration collection rcn
type DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Windows81WifiImportConfiguration collection
func (b *DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequestBuilder) Request() *DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequest {
	return &DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Windows81WifiImportConfiguration item
func (b *DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequestBuilder) ID(id string) *Windows81WifiImportConfigurationRequestBuilder {
	bb := &Windows81WifiImportConfigurationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequest is request for Windows81WifiImportConfiguration collection
type DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for Windows81WifiImportConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}, n int) ([]Windows81WifiImportConfiguration, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Windows81WifiImportConfiguration
	for {
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			res.Body.Close()
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Windows81WifiImportConfiguration
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		res.Body.Close()
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if n >= 0 {
			n--
		}
		if n == 0 || len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// GetN performs GET request for Windows81WifiImportConfiguration collection, max N pages
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequest) GetN(ctx context.Context, n int) ([]Windows81WifiImportConfiguration, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil, n)
}

// Get performs GET request for Windows81WifiImportConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequest) Get(ctx context.Context) ([]Windows81WifiImportConfiguration, error) {
	return r.GetN(ctx, 0)
}

// Add performs POST request for Windows81WifiImportConfiguration collection
func (r *DeviceManagementDeviceConfigurationsCollectionWindows81WifiImportConfigurationCollectionRequest) Add(ctx context.Context, reqObj *Windows81WifiImportConfiguration) (resObj *Windows81WifiImportConfiguration, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
